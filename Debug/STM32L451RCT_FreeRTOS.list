
STM32L451RCT_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007cf0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08007e90  08007e90  00017e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f28  08007f28  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08007f28  08007f28  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007f28  08007f28  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f28  08007f28  00017f28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f2c  08007f2c  00017f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007f30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019c0  20000010  08007f40  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200019d0  08007f40  000219d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b391  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039da  00000000  00000000  0003b3d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001328  00000000  00000000  0003edb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001190  00000000  00000000  000400d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000234c7  00000000  00000000  00041268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001612a  00000000  00000000  0006472f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d07bd  00000000  00000000  0007a859  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014b016  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d74  00000000  00000000  0014b06c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007e78 	.word	0x08007e78

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08007e78 	.word	0x08007e78

080001e0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80001e4:	4a04      	ldr	r2, [pc, #16]	; (80001f8 <MX_FREERTOS_Init+0x18>)
 80001e6:	2100      	movs	r1, #0
 80001e8:	4804      	ldr	r0, [pc, #16]	; (80001fc <MX_FREERTOS_Init+0x1c>)
 80001ea:	f004 f981 	bl	80044f0 <osThreadNew>
 80001ee:	4603      	mov	r3, r0
 80001f0:	4a03      	ldr	r2, [pc, #12]	; (8000200 <MX_FREERTOS_Init+0x20>)
 80001f2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80001f4:	bf00      	nop
 80001f6:	bd80      	pop	{r7, pc}
 80001f8:	08007ec4 	.word	0x08007ec4
 80001fc:	08000205 	.word	0x08000205
 8000200:	20001910 	.word	0x20001910

08000204 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800020c:	2001      	movs	r0, #1
 800020e:	f004 fa01 	bl	8004614 <osDelay>
 8000212:	e7fb      	b.n	800020c <StartDefaultTask+0x8>

08000214 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b08a      	sub	sp, #40	; 0x28
 8000218:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800021a:	f107 0314 	add.w	r3, r7, #20
 800021e:	2200      	movs	r2, #0
 8000220:	601a      	str	r2, [r3, #0]
 8000222:	605a      	str	r2, [r3, #4]
 8000224:	609a      	str	r2, [r3, #8]
 8000226:	60da      	str	r2, [r3, #12]
 8000228:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800022a:	4b34      	ldr	r3, [pc, #208]	; (80002fc <MX_GPIO_Init+0xe8>)
 800022c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800022e:	4a33      	ldr	r2, [pc, #204]	; (80002fc <MX_GPIO_Init+0xe8>)
 8000230:	f043 0304 	orr.w	r3, r3, #4
 8000234:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000236:	4b31      	ldr	r3, [pc, #196]	; (80002fc <MX_GPIO_Init+0xe8>)
 8000238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800023a:	f003 0304 	and.w	r3, r3, #4
 800023e:	613b      	str	r3, [r7, #16]
 8000240:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000242:	4b2e      	ldr	r3, [pc, #184]	; (80002fc <MX_GPIO_Init+0xe8>)
 8000244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000246:	4a2d      	ldr	r2, [pc, #180]	; (80002fc <MX_GPIO_Init+0xe8>)
 8000248:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800024c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800024e:	4b2b      	ldr	r3, [pc, #172]	; (80002fc <MX_GPIO_Init+0xe8>)
 8000250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000256:	60fb      	str	r3, [r7, #12]
 8000258:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800025a:	4b28      	ldr	r3, [pc, #160]	; (80002fc <MX_GPIO_Init+0xe8>)
 800025c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800025e:	4a27      	ldr	r2, [pc, #156]	; (80002fc <MX_GPIO_Init+0xe8>)
 8000260:	f043 0302 	orr.w	r3, r3, #2
 8000264:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000266:	4b25      	ldr	r3, [pc, #148]	; (80002fc <MX_GPIO_Init+0xe8>)
 8000268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800026a:	f003 0302 	and.w	r3, r3, #2
 800026e:	60bb      	str	r3, [r7, #8]
 8000270:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000272:	4b22      	ldr	r3, [pc, #136]	; (80002fc <MX_GPIO_Init+0xe8>)
 8000274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000276:	4a21      	ldr	r2, [pc, #132]	; (80002fc <MX_GPIO_Init+0xe8>)
 8000278:	f043 0301 	orr.w	r3, r3, #1
 800027c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800027e:	4b1f      	ldr	r3, [pc, #124]	; (80002fc <MX_GPIO_Init+0xe8>)
 8000280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000282:	f003 0301 	and.w	r3, r3, #1
 8000286:	607b      	str	r3, [r7, #4]
 8000288:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 800028a:	2200      	movs	r2, #0
 800028c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000290:	481b      	ldr	r0, [pc, #108]	; (8000300 <MX_GPIO_Init+0xec>)
 8000292:	f000 fe33 	bl	8000efc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000296:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800029a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800029c:	2301      	movs	r3, #1
 800029e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002a0:	2300      	movs	r3, #0
 80002a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002a4:	2300      	movs	r3, #0
 80002a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002a8:	f107 0314 	add.w	r3, r7, #20
 80002ac:	4619      	mov	r1, r3
 80002ae:	4814      	ldr	r0, [pc, #80]	; (8000300 <MX_GPIO_Init+0xec>)
 80002b0:	f000 fcaa 	bl	8000c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT_MAG_Pin;
 80002b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80002b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80002ba:	4b12      	ldr	r3, [pc, #72]	; (8000304 <MX_GPIO_Init+0xf0>)
 80002bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002be:	2300      	movs	r3, #0
 80002c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_MAG_GPIO_Port, &GPIO_InitStruct);
 80002c2:	f107 0314 	add.w	r3, r7, #20
 80002c6:	4619      	mov	r1, r3
 80002c8:	480f      	ldr	r0, [pc, #60]	; (8000308 <MX_GPIO_Init+0xf4>)
 80002ca:	f000 fc9d 	bl	8000c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT_IMU_Pin;
 80002ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80002d4:	4b0d      	ldr	r3, [pc, #52]	; (800030c <MX_GPIO_Init+0xf8>)
 80002d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80002d8:	2301      	movs	r3, #1
 80002da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_IMU_GPIO_Port, &GPIO_InitStruct);
 80002dc:	f107 0314 	add.w	r3, r7, #20
 80002e0:	4619      	mov	r1, r3
 80002e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002e6:	f000 fc8f 	bl	8000c08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80002ea:	2200      	movs	r2, #0
 80002ec:	2105      	movs	r1, #5
 80002ee:	2028      	movs	r0, #40	; 0x28
 80002f0:	f000 fc05 	bl	8000afe <HAL_NVIC_SetPriority>
  //HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

}
 80002f4:	bf00      	nop
 80002f6:	3728      	adds	r7, #40	; 0x28
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	40021000 	.word	0x40021000
 8000300:	48000800 	.word	0x48000800
 8000304:	10110000 	.word	0x10110000
 8000308:	48000400 	.word	0x48000400
 800030c:	10210000 	.word	0x10210000

08000310 <enableIRQ>:

/* USER CODE BEGIN 2 */


void enableIRQ( void )
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000314:	2028      	movs	r0, #40	; 0x28
 8000316:	f000 fc0e 	bl	8000b36 <HAL_NVIC_EnableIRQ>
}
 800031a:	bf00      	nop
 800031c:	bd80      	pop	{r7, pc}
	...

08000320 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000324:	4b1b      	ldr	r3, [pc, #108]	; (8000394 <MX_I2C2_Init+0x74>)
 8000326:	4a1c      	ldr	r2, [pc, #112]	; (8000398 <MX_I2C2_Init+0x78>)
 8000328:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 800032a:	4b1a      	ldr	r3, [pc, #104]	; (8000394 <MX_I2C2_Init+0x74>)
 800032c:	4a1b      	ldr	r2, [pc, #108]	; (800039c <MX_I2C2_Init+0x7c>)
 800032e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000330:	4b18      	ldr	r3, [pc, #96]	; (8000394 <MX_I2C2_Init+0x74>)
 8000332:	2200      	movs	r2, #0
 8000334:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000336:	4b17      	ldr	r3, [pc, #92]	; (8000394 <MX_I2C2_Init+0x74>)
 8000338:	2201      	movs	r2, #1
 800033a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800033c:	4b15      	ldr	r3, [pc, #84]	; (8000394 <MX_I2C2_Init+0x74>)
 800033e:	2200      	movs	r2, #0
 8000340:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000342:	4b14      	ldr	r3, [pc, #80]	; (8000394 <MX_I2C2_Init+0x74>)
 8000344:	2200      	movs	r2, #0
 8000346:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000348:	4b12      	ldr	r3, [pc, #72]	; (8000394 <MX_I2C2_Init+0x74>)
 800034a:	2200      	movs	r2, #0
 800034c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800034e:	4b11      	ldr	r3, [pc, #68]	; (8000394 <MX_I2C2_Init+0x74>)
 8000350:	2200      	movs	r2, #0
 8000352:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000354:	4b0f      	ldr	r3, [pc, #60]	; (8000394 <MX_I2C2_Init+0x74>)
 8000356:	2200      	movs	r2, #0
 8000358:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800035a:	480e      	ldr	r0, [pc, #56]	; (8000394 <MX_I2C2_Init+0x74>)
 800035c:	f000 fde6 	bl	8000f2c <HAL_I2C_Init>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000366:	f000 f97c 	bl	8000662 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800036a:	2100      	movs	r1, #0
 800036c:	4809      	ldr	r0, [pc, #36]	; (8000394 <MX_I2C2_Init+0x74>)
 800036e:	f002 fe2b 	bl	8002fc8 <HAL_I2CEx_ConfigAnalogFilter>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000378:	f000 f973 	bl	8000662 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800037c:	2100      	movs	r1, #0
 800037e:	4805      	ldr	r0, [pc, #20]	; (8000394 <MX_I2C2_Init+0x74>)
 8000380:	f002 fe6d 	bl	800305e <HAL_I2CEx_ConfigDigitalFilter>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800038a:	f000 f96a 	bl	8000662 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800038e:	bf00      	nop
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	20001914 	.word	0x20001914
 8000398:	40005800 	.word	0x40005800
 800039c:	10909cec 	.word	0x10909cec

080003a0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b0a2      	sub	sp, #136	; 0x88
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003a8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80003ac:	2200      	movs	r2, #0
 80003ae:	601a      	str	r2, [r3, #0]
 80003b0:	605a      	str	r2, [r3, #4]
 80003b2:	609a      	str	r2, [r3, #8]
 80003b4:	60da      	str	r2, [r3, #12]
 80003b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003b8:	f107 0310 	add.w	r3, r7, #16
 80003bc:	2264      	movs	r2, #100	; 0x64
 80003be:	2100      	movs	r1, #0
 80003c0:	4618      	mov	r0, r3
 80003c2:	f007 fd51 	bl	8007e68 <memset>
  if(i2cHandle->Instance==I2C2)
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	4a24      	ldr	r2, [pc, #144]	; (800045c <HAL_I2C_MspInit+0xbc>)
 80003cc:	4293      	cmp	r3, r2
 80003ce:	d140      	bne.n	8000452 <HAL_I2C_MspInit+0xb2>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80003d0:	2380      	movs	r3, #128	; 0x80
 80003d2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80003d4:	2300      	movs	r3, #0
 80003d6:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003d8:	f107 0310 	add.w	r3, r7, #16
 80003dc:	4618      	mov	r0, r3
 80003de:	f003 fcdd 	bl	8003d9c <HAL_RCCEx_PeriphCLKConfig>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d001      	beq.n	80003ec <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80003e8:	f000 f93b 	bl	8000662 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003ec:	4b1c      	ldr	r3, [pc, #112]	; (8000460 <HAL_I2C_MspInit+0xc0>)
 80003ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003f0:	4a1b      	ldr	r2, [pc, #108]	; (8000460 <HAL_I2C_MspInit+0xc0>)
 80003f2:	f043 0302 	orr.w	r3, r3, #2
 80003f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003f8:	4b19      	ldr	r3, [pc, #100]	; (8000460 <HAL_I2C_MspInit+0xc0>)
 80003fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003fc:	f003 0302 	and.w	r3, r3, #2
 8000400:	60fb      	str	r3, [r7, #12]
 8000402:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB13     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000404:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000408:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800040a:	2312      	movs	r3, #18
 800040c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040e:	2300      	movs	r3, #0
 8000410:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000412:	2303      	movs	r3, #3
 8000414:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000418:	2304      	movs	r3, #4
 800041a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800041e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000422:	4619      	mov	r1, r3
 8000424:	480f      	ldr	r0, [pc, #60]	; (8000464 <HAL_I2C_MspInit+0xc4>)
 8000426:	f000 fbef 	bl	8000c08 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800042a:	4b0d      	ldr	r3, [pc, #52]	; (8000460 <HAL_I2C_MspInit+0xc0>)
 800042c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800042e:	4a0c      	ldr	r2, [pc, #48]	; (8000460 <HAL_I2C_MspInit+0xc0>)
 8000430:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000434:	6593      	str	r3, [r2, #88]	; 0x58
 8000436:	4b0a      	ldr	r3, [pc, #40]	; (8000460 <HAL_I2C_MspInit+0xc0>)
 8000438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800043a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800043e:	60bb      	str	r3, [r7, #8]
 8000440:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8000442:	2200      	movs	r2, #0
 8000444:	2105      	movs	r1, #5
 8000446:	2021      	movs	r0, #33	; 0x21
 8000448:	f000 fb59 	bl	8000afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800044c:	2021      	movs	r0, #33	; 0x21
 800044e:	f000 fb72 	bl	8000b36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000452:	bf00      	nop
 8000454:	3788      	adds	r7, #136	; 0x88
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	40005800 	.word	0x40005800
 8000460:	40021000 	.word	0x40021000
 8000464:	48000400 	.word	0x48000400

08000468 <taskSensorMAG>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void taskSensorMAG ( void *pvParameters )
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b084      	sub	sp, #16
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
	int16_t magX, magY, magZ;

	while(1)
	{
		MLX90393_ReadMeasurementAxisAll( &MAG, &magX, &magY, &magZ );
 8000470:	f107 030a 	add.w	r3, r7, #10
 8000474:	f107 020c 	add.w	r2, r7, #12
 8000478:	f107 010e 	add.w	r1, r7, #14
 800047c:	4801      	ldr	r0, [pc, #4]	; (8000484 <taskSensorMAG+0x1c>)
 800047e:	f007 fc53 	bl	8007d28 <MLX90393_ReadMeasurementAxisAll>
 8000482:	e7f5      	b.n	8000470 <taskSensorMAG+0x8>
 8000484:	20001974 	.word	0x20001974

08000488 <taskSensorIMU>:
	}
}


void taskSensorIMU ( void *pvParameters )
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]

	while(1)
	{
		IIM42652_ReadMeasurementAxisAll( &IMU );
 8000490:	4801      	ldr	r0, [pc, #4]	; (8000498 <taskSensorIMU+0x10>)
 8000492:	f007 fa8f 	bl	80079b4 <IIM42652_ReadMeasurementAxisAll>
 8000496:	e7fb      	b.n	8000490 <taskSensorIMU+0x8>
 8000498:	20001960 	.word	0x20001960

0800049c <taskLED>:
}


/* Task for blinking LED and sensor task initialization  */
void taskLED ( void *pvParameters )
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b088      	sub	sp, #32
 80004a0:	af02      	add	r7, sp, #8
 80004a2:	6078      	str	r0, [r7, #4]

	static uint32_t pin_state = 0;
	HAL_StatusTypeDef i2cStatus = HAL_OK;
 80004a4:	2300      	movs	r3, #0
 80004a6:	75fb      	strb	r3, [r7, #23]


	/* This section initializes sensors and sensors tasks */

	i2cStatus |= IIM42652_Init(&IMU, &hi2c2);
 80004a8:	4929      	ldr	r1, [pc, #164]	; (8000550 <taskLED+0xb4>)
 80004aa:	482a      	ldr	r0, [pc, #168]	; (8000554 <taskLED+0xb8>)
 80004ac:	f007 f9de 	bl	800786c <IIM42652_Init>
 80004b0:	4603      	mov	r3, r0
 80004b2:	461a      	mov	r2, r3
 80004b4:	7dfb      	ldrb	r3, [r7, #23]
 80004b6:	4313      	orrs	r3, r2
 80004b8:	75fb      	strb	r3, [r7, #23]
	i2cStatus |= MLX90393_Init(&MAG, &hi2c2);
 80004ba:	4925      	ldr	r1, [pc, #148]	; (8000550 <taskLED+0xb4>)
 80004bc:	4826      	ldr	r0, [pc, #152]	; (8000558 <taskLED+0xbc>)
 80004be:	f007 fbb1 	bl	8007c24 <MLX90393_Init>
 80004c2:	4603      	mov	r3, r0
 80004c4:	461a      	mov	r2, r3
 80004c6:	7dfb      	ldrb	r3, [r7, #23]
 80004c8:	4313      	orrs	r3, r2
 80004ca:	75fb      	strb	r3, [r7, #23]

	if(i2cStatus == HAL_ERROR)  { /* Error condition */ }

	enableIRQ();
 80004cc:	f7ff ff20 	bl	8000310 <enableIRQ>

	BaseType_t xReturnIMU = xTaskCreate ( taskSensorIMU, "IMU", 100, NULL, 3, &tasIMU_Handler );
 80004d0:	4b22      	ldr	r3, [pc, #136]	; (800055c <taskLED+0xc0>)
 80004d2:	9301      	str	r3, [sp, #4]
 80004d4:	2303      	movs	r3, #3
 80004d6:	9300      	str	r3, [sp, #0]
 80004d8:	2300      	movs	r3, #0
 80004da:	2264      	movs	r2, #100	; 0x64
 80004dc:	4920      	ldr	r1, [pc, #128]	; (8000560 <taskLED+0xc4>)
 80004de:	4821      	ldr	r0, [pc, #132]	; (8000564 <taskLED+0xc8>)
 80004e0:	f005 f8cf 	bl	8005682 <xTaskCreate>
 80004e4:	6138      	str	r0, [r7, #16]
	BaseType_t xReturnMAG = xTaskCreate ( taskSensorMAG, "MAG", 100, NULL, 3, &taskMAG_Handler );
 80004e6:	4b20      	ldr	r3, [pc, #128]	; (8000568 <taskLED+0xcc>)
 80004e8:	9301      	str	r3, [sp, #4]
 80004ea:	2303      	movs	r3, #3
 80004ec:	9300      	str	r3, [sp, #0]
 80004ee:	2300      	movs	r3, #0
 80004f0:	2264      	movs	r2, #100	; 0x64
 80004f2:	491e      	ldr	r1, [pc, #120]	; (800056c <taskLED+0xd0>)
 80004f4:	481e      	ldr	r0, [pc, #120]	; (8000570 <taskLED+0xd4>)
 80004f6:	f005 f8c4 	bl	8005682 <xTaskCreate>
 80004fa:	60f8      	str	r0, [r7, #12]
	if( ( xReturnIMU | xReturnMAG ) == pdFALSE )  { /* Error condition */ }


	while(1)
	{
		vTaskDelay(150 / portTICK_PERIOD_MS);
 80004fc:	2096      	movs	r0, #150	; 0x96
 80004fe:	f005 fa05 	bl	800590c <vTaskDelay>

		pin_state = !pin_state;
 8000502:	4b1c      	ldr	r3, [pc, #112]	; (8000574 <taskLED+0xd8>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	2b00      	cmp	r3, #0
 8000508:	bf0c      	ite	eq
 800050a:	2301      	moveq	r3, #1
 800050c:	2300      	movne	r3, #0
 800050e:	b2db      	uxtb	r3, r3
 8000510:	461a      	mov	r2, r3
 8000512:	4b18      	ldr	r3, [pc, #96]	; (8000574 <taskLED+0xd8>)
 8000514:	601a      	str	r2, [r3, #0]

		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, pin_state);
 8000516:	4b17      	ldr	r3, [pc, #92]	; (8000574 <taskLED+0xd8>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	b2db      	uxtb	r3, r3
 800051c:	461a      	mov	r2, r3
 800051e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000522:	4815      	ldr	r0, [pc, #84]	; (8000578 <taskLED+0xdc>)
 8000524:	f000 fcea 	bl	8000efc <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8000528:	2032      	movs	r0, #50	; 0x32
 800052a:	f000 f9e9 	bl	8000900 <HAL_Delay>

		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, !pin_state);
 800052e:	4b11      	ldr	r3, [pc, #68]	; (8000574 <taskLED+0xd8>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	2b00      	cmp	r3, #0
 8000534:	bf0c      	ite	eq
 8000536:	2301      	moveq	r3, #1
 8000538:	2300      	movne	r3, #0
 800053a:	b2db      	uxtb	r3, r3
 800053c:	461a      	mov	r2, r3
 800053e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000542:	480d      	ldr	r0, [pc, #52]	; (8000578 <taskLED+0xdc>)
 8000544:	f000 fcda 	bl	8000efc <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8000548:	2032      	movs	r0, #50	; 0x32
 800054a:	f000 f9d9 	bl	8000900 <HAL_Delay>
		vTaskDelay(150 / portTICK_PERIOD_MS);
 800054e:	e7d5      	b.n	80004fc <taskLED+0x60>
 8000550:	20001914 	.word	0x20001914
 8000554:	20001960 	.word	0x20001960
 8000558:	20001974 	.word	0x20001974
 800055c:	20000034 	.word	0x20000034
 8000560:	08007e9c 	.word	0x08007e9c
 8000564:	08000489 	.word	0x08000489
 8000568:	20000030 	.word	0x20000030
 800056c:	08007ea0 	.word	0x08007ea0
 8000570:	08000469 	.word	0x08000469
 8000574:	20000038 	.word	0x20000038
 8000578:	48000800 	.word	0x48000800

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000582:	f000 f948 	bl	8000816 <HAL_Init>

  /* USER CODE BEGIN Init */

  /* Initialize init task */
  BaseType_t xReturnLED  = xTaskCreate ( taskLED, "t_LED", 100, NULL, 2, &taskLED_Handler );
 8000586:	4b0c      	ldr	r3, [pc, #48]	; (80005b8 <main+0x3c>)
 8000588:	9301      	str	r3, [sp, #4]
 800058a:	2302      	movs	r3, #2
 800058c:	9300      	str	r3, [sp, #0]
 800058e:	2300      	movs	r3, #0
 8000590:	2264      	movs	r2, #100	; 0x64
 8000592:	490a      	ldr	r1, [pc, #40]	; (80005bc <main+0x40>)
 8000594:	480a      	ldr	r0, [pc, #40]	; (80005c0 <main+0x44>)
 8000596:	f005 f874 	bl	8005682 <xTaskCreate>
 800059a:	6078      	str	r0, [r7, #4]


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059c:	f000 f812 	bl	80005c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a0:	f7ff fe38 	bl	8000214 <MX_GPIO_Init>
  MX_I2C2_Init();
 80005a4:	f7ff febc 	bl	8000320 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80005a8:	f003 ff58 	bl	800445c <osKernelInitialize>
  MX_FREERTOS_Init();
 80005ac:	f7ff fe18 	bl	80001e0 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80005b0:	f003 ff78 	bl	80044a4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b4:	e7fe      	b.n	80005b4 <main+0x38>
 80005b6:	bf00      	nop
 80005b8:	2000002c 	.word	0x2000002c
 80005bc:	08007ea4 	.word	0x08007ea4
 80005c0:	0800049d 	.word	0x0800049d

080005c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b096      	sub	sp, #88	; 0x58
 80005c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ca:	f107 0314 	add.w	r3, r7, #20
 80005ce:	2244      	movs	r2, #68	; 0x44
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f007 fc48 	bl	8007e68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d8:	463b      	mov	r3, r7
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	605a      	str	r2, [r3, #4]
 80005e0:	609a      	str	r2, [r3, #8]
 80005e2:	60da      	str	r2, [r3, #12]
 80005e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005e6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005ea:	f002 fd93 	bl	8003114 <HAL_PWREx_ControlVoltageScaling>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005f4:	f000 f835 	bl	8000662 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005f8:	2301      	movs	r3, #1
 80005fa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000600:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000602:	2302      	movs	r3, #2
 8000604:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000606:	2303      	movs	r3, #3
 8000608:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 800060a:	2302      	movs	r3, #2
 800060c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 800060e:	2310      	movs	r3, #16
 8000610:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000612:	2307      	movs	r3, #7
 8000614:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000616:	2302      	movs	r3, #2
 8000618:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800061a:	2302      	movs	r3, #2
 800061c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061e:	f107 0314 	add.w	r3, r7, #20
 8000622:	4618      	mov	r0, r3
 8000624:	f002 fdcc 	bl	80031c0 <HAL_RCC_OscConfig>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800062e:	f000 f818 	bl	8000662 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000632:	230f      	movs	r3, #15
 8000634:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000636:	2303      	movs	r3, #3
 8000638:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063a:	2300      	movs	r3, #0
 800063c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800063e:	2300      	movs	r3, #0
 8000640:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000642:	2300      	movs	r3, #0
 8000644:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000646:	463b      	mov	r3, r7
 8000648:	2104      	movs	r1, #4
 800064a:	4618      	mov	r0, r3
 800064c:	f003 f9d8 	bl	8003a00 <HAL_RCC_ClockConfig>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000656:	f000 f804 	bl	8000662 <Error_Handler>
  }
}
 800065a:	bf00      	nop
 800065c:	3758      	adds	r7, #88	; 0x58
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}

08000662 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000662:	b480      	push	{r7}
 8000664:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000666:	b672      	cpsid	i
}
 8000668:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800066a:	e7fe      	b.n	800066a <Error_Handler+0x8>

0800066c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000672:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <HAL_MspInit+0x4c>)
 8000674:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000676:	4a10      	ldr	r2, [pc, #64]	; (80006b8 <HAL_MspInit+0x4c>)
 8000678:	f043 0301 	orr.w	r3, r3, #1
 800067c:	6613      	str	r3, [r2, #96]	; 0x60
 800067e:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <HAL_MspInit+0x4c>)
 8000680:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800068a:	4b0b      	ldr	r3, [pc, #44]	; (80006b8 <HAL_MspInit+0x4c>)
 800068c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800068e:	4a0a      	ldr	r2, [pc, #40]	; (80006b8 <HAL_MspInit+0x4c>)
 8000690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000694:	6593      	str	r3, [r2, #88]	; 0x58
 8000696:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <HAL_MspInit+0x4c>)
 8000698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800069a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800069e:	603b      	str	r3, [r7, #0]
 80006a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80006a2:	2200      	movs	r2, #0
 80006a4:	210f      	movs	r1, #15
 80006a6:	f06f 0001 	mvn.w	r0, #1
 80006aa:	f000 fa28 	bl	8000afe <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ae:	bf00      	nop
 80006b0:	3708      	adds	r7, #8
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40021000 	.word	0x40021000

080006bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006c0:	e7fe      	b.n	80006c0 <NMI_Handler+0x4>

080006c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006c2:	b480      	push	{r7}
 80006c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006c6:	e7fe      	b.n	80006c6 <HardFault_Handler+0x4>

080006c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006cc:	e7fe      	b.n	80006cc <MemManage_Handler+0x4>

080006ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006ce:	b480      	push	{r7}
 80006d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006d2:	e7fe      	b.n	80006d2 <BusFault_Handler+0x4>

080006d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006d8:	e7fe      	b.n	80006d8 <UsageFault_Handler+0x4>

080006da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006da:	b480      	push	{r7}
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006de:	bf00      	nop
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr

080006e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006ec:	f000 f8e8 	bl	80008c0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80006f0:	f005 fd88 	bl	8006204 <xTaskGetSchedulerState>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b01      	cmp	r3, #1
 80006f8:	d001      	beq.n	80006fe <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80006fa:	f006 fc6d 	bl	8006fd8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
	...

08000704 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

	IIM42652_I2C2Callback();
 8000708:	f007 f9c8 	bl	8007a9c <IIM42652_I2C2Callback>

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800070c:	4802      	ldr	r0, [pc, #8]	; (8000718 <I2C2_EV_IRQHandler+0x14>)
 800070e:	f001 f831 	bl	8001774 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20001914 	.word	0x20001914

0800071c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	/* REqads pending register 1 from external interrupt struct */
	uint32_t pending = EXTI->PR1;
 8000722:	4b0e      	ldr	r3, [pc, #56]	; (800075c <EXTI15_10_IRQHandler+0x40>)
 8000724:	695b      	ldr	r3, [r3, #20]
 8000726:	607b      	str	r3, [r7, #4]


	if( pending & (1 << 12) )
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800072e:	2b00      	cmp	r3, #0
 8000730:	d005      	beq.n	800073e <EXTI15_10_IRQHandler+0x22>
	{
		IIM42652_DRDYCallback();
 8000732:	f007 f98b 	bl	8007a4c <IIM42652_DRDYCallback>
		__HAL_GPIO_EXTI_CLEAR_IT(INT_IMU_Pin);
 8000736:	4b09      	ldr	r3, [pc, #36]	; (800075c <EXTI15_10_IRQHandler+0x40>)
 8000738:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800073c:	615a      	str	r2, [r3, #20]
	}

	if( pending & (1 << 15) )
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000744:	2b00      	cmp	r3, #0
 8000746:	d005      	beq.n	8000754 <EXTI15_10_IRQHandler+0x38>
	{
		MLX90393_DRDYCallback();
 8000748:	f007 fb34 	bl	8007db4 <MLX90393_DRDYCallback>
		__HAL_GPIO_EXTI_CLEAR_IT(INT_MAG_Pin);
 800074c:	4b03      	ldr	r3, [pc, #12]	; (800075c <EXTI15_10_IRQHandler+0x40>)
 800074e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000752:	615a      	str	r2, [r3, #20]
  //HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */


  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000754:	bf00      	nop
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	40010400 	.word	0x40010400

08000760 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000764:	4b15      	ldr	r3, [pc, #84]	; (80007bc <SystemInit+0x5c>)
 8000766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800076a:	4a14      	ldr	r2, [pc, #80]	; (80007bc <SystemInit+0x5c>)
 800076c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000770:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000774:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <SystemInit+0x60>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a11      	ldr	r2, [pc, #68]	; (80007c0 <SystemInit+0x60>)
 800077a:	f043 0301 	orr.w	r3, r3, #1
 800077e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000780:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <SystemInit+0x60>)
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000786:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <SystemInit+0x60>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4a0d      	ldr	r2, [pc, #52]	; (80007c0 <SystemInit+0x60>)
 800078c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000790:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000794:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000796:	4b0a      	ldr	r3, [pc, #40]	; (80007c0 <SystemInit+0x60>)
 8000798:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800079c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800079e:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <SystemInit+0x60>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4a07      	ldr	r2, [pc, #28]	; (80007c0 <SystemInit+0x60>)
 80007a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007a8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80007aa:	4b05      	ldr	r3, [pc, #20]	; (80007c0 <SystemInit+0x60>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	619a      	str	r2, [r3, #24]
}
 80007b0:	bf00      	nop
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	e000ed00 	.word	0xe000ed00
 80007c0:	40021000 	.word	0x40021000

080007c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80007c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007fc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007c8:	f7ff ffca 	bl	8000760 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80007cc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80007ce:	e003      	b.n	80007d8 <LoopCopyDataInit>

080007d0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80007d0:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80007d2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80007d4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80007d6:	3104      	adds	r1, #4

080007d8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80007d8:	480a      	ldr	r0, [pc, #40]	; (8000804 <LoopForever+0xa>)
	ldr	r3, =_edata
 80007da:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <LoopForever+0xe>)
	adds	r2, r0, r1
 80007dc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80007de:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80007e0:	d3f6      	bcc.n	80007d0 <CopyDataInit>
	ldr	r2, =_sbss
 80007e2:	4a0a      	ldr	r2, [pc, #40]	; (800080c <LoopForever+0x12>)
	b	LoopFillZerobss
 80007e4:	e002      	b.n	80007ec <LoopFillZerobss>

080007e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80007e6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80007e8:	f842 3b04 	str.w	r3, [r2], #4

080007ec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80007ec:	4b08      	ldr	r3, [pc, #32]	; (8000810 <LoopForever+0x16>)
	cmp	r2, r3
 80007ee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80007f0:	d3f9      	bcc.n	80007e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007f2:	f007 fb07 	bl	8007e04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007f6:	f7ff fec1 	bl	800057c <main>

080007fa <LoopForever>:

LoopForever:
    b LoopForever
 80007fa:	e7fe      	b.n	80007fa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80007fc:	20020000 	.word	0x20020000
	ldr	r3, =_sidata
 8000800:	08007f30 	.word	0x08007f30
	ldr	r0, =_sdata
 8000804:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000808:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 800080c:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8000810:	200019d0 	.word	0x200019d0

08000814 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000814:	e7fe      	b.n	8000814 <ADC1_IRQHandler>

08000816 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000816:	b580      	push	{r7, lr}
 8000818:	b082      	sub	sp, #8
 800081a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800081c:	2300      	movs	r3, #0
 800081e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000820:	2003      	movs	r0, #3
 8000822:	f000 f961 	bl	8000ae8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000826:	200f      	movs	r0, #15
 8000828:	f000 f80e 	bl	8000848 <HAL_InitTick>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d002      	beq.n	8000838 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000832:	2301      	movs	r3, #1
 8000834:	71fb      	strb	r3, [r7, #7]
 8000836:	e001      	b.n	800083c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000838:	f7ff ff18 	bl	800066c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800083c:	79fb      	ldrb	r3, [r7, #7]
}
 800083e:	4618      	mov	r0, r3
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
	...

08000848 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000850:	2300      	movs	r3, #0
 8000852:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000854:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <HAL_InitTick+0x6c>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d023      	beq.n	80008a4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800085c:	4b16      	ldr	r3, [pc, #88]	; (80008b8 <HAL_InitTick+0x70>)
 800085e:	681a      	ldr	r2, [r3, #0]
 8000860:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <HAL_InitTick+0x6c>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	4619      	mov	r1, r3
 8000866:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800086a:	fbb3 f3f1 	udiv	r3, r3, r1
 800086e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000872:	4618      	mov	r0, r3
 8000874:	f000 f96d 	bl	8000b52 <HAL_SYSTICK_Config>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d10f      	bne.n	800089e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2b0f      	cmp	r3, #15
 8000882:	d809      	bhi.n	8000898 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000884:	2200      	movs	r2, #0
 8000886:	6879      	ldr	r1, [r7, #4]
 8000888:	f04f 30ff 	mov.w	r0, #4294967295
 800088c:	f000 f937 	bl	8000afe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000890:	4a0a      	ldr	r2, [pc, #40]	; (80008bc <HAL_InitTick+0x74>)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	6013      	str	r3, [r2, #0]
 8000896:	e007      	b.n	80008a8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000898:	2301      	movs	r3, #1
 800089a:	73fb      	strb	r3, [r7, #15]
 800089c:	e004      	b.n	80008a8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800089e:	2301      	movs	r3, #1
 80008a0:	73fb      	strb	r3, [r7, #15]
 80008a2:	e001      	b.n	80008a8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008a4:	2301      	movs	r3, #1
 80008a6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80008a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	3710      	adds	r7, #16
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000008 	.word	0x20000008
 80008b8:	20000000 	.word	0x20000000
 80008bc:	20000004 	.word	0x20000004

080008c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <HAL_IncTick+0x20>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	461a      	mov	r2, r3
 80008ca:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <HAL_IncTick+0x24>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4413      	add	r3, r2
 80008d0:	4a04      	ldr	r2, [pc, #16]	; (80008e4 <HAL_IncTick+0x24>)
 80008d2:	6013      	str	r3, [r2, #0]
}
 80008d4:	bf00      	nop
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	20000008 	.word	0x20000008
 80008e4:	20001988 	.word	0x20001988

080008e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  return uwTick;
 80008ec:	4b03      	ldr	r3, [pc, #12]	; (80008fc <HAL_GetTick+0x14>)
 80008ee:	681b      	ldr	r3, [r3, #0]
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	20001988 	.word	0x20001988

08000900 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000908:	f7ff ffee 	bl	80008e8 <HAL_GetTick>
 800090c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000918:	d005      	beq.n	8000926 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800091a:	4b0a      	ldr	r3, [pc, #40]	; (8000944 <HAL_Delay+0x44>)
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	461a      	mov	r2, r3
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	4413      	add	r3, r2
 8000924:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000926:	bf00      	nop
 8000928:	f7ff ffde 	bl	80008e8 <HAL_GetTick>
 800092c:	4602      	mov	r2, r0
 800092e:	68bb      	ldr	r3, [r7, #8]
 8000930:	1ad3      	subs	r3, r2, r3
 8000932:	68fa      	ldr	r2, [r7, #12]
 8000934:	429a      	cmp	r2, r3
 8000936:	d8f7      	bhi.n	8000928 <HAL_Delay+0x28>
  {
  }
}
 8000938:	bf00      	nop
 800093a:	bf00      	nop
 800093c:	3710      	adds	r7, #16
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	20000008 	.word	0x20000008

08000948 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000948:	b480      	push	{r7}
 800094a:	b085      	sub	sp, #20
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	f003 0307 	and.w	r3, r3, #7
 8000956:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000958:	4b0c      	ldr	r3, [pc, #48]	; (800098c <__NVIC_SetPriorityGrouping+0x44>)
 800095a:	68db      	ldr	r3, [r3, #12]
 800095c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800095e:	68ba      	ldr	r2, [r7, #8]
 8000960:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000964:	4013      	ands	r3, r2
 8000966:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000970:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000978:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800097a:	4a04      	ldr	r2, [pc, #16]	; (800098c <__NVIC_SetPriorityGrouping+0x44>)
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	60d3      	str	r3, [r2, #12]
}
 8000980:	bf00      	nop
 8000982:	3714      	adds	r7, #20
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr
 800098c:	e000ed00 	.word	0xe000ed00

08000990 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000994:	4b04      	ldr	r3, [pc, #16]	; (80009a8 <__NVIC_GetPriorityGrouping+0x18>)
 8000996:	68db      	ldr	r3, [r3, #12]
 8000998:	0a1b      	lsrs	r3, r3, #8
 800099a:	f003 0307 	and.w	r3, r3, #7
}
 800099e:	4618      	mov	r0, r3
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr
 80009a8:	e000ed00 	.word	0xe000ed00

080009ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	db0b      	blt.n	80009d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009be:	79fb      	ldrb	r3, [r7, #7]
 80009c0:	f003 021f 	and.w	r2, r3, #31
 80009c4:	4907      	ldr	r1, [pc, #28]	; (80009e4 <__NVIC_EnableIRQ+0x38>)
 80009c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ca:	095b      	lsrs	r3, r3, #5
 80009cc:	2001      	movs	r0, #1
 80009ce:	fa00 f202 	lsl.w	r2, r0, r2
 80009d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80009d6:	bf00      	nop
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	e000e100 	.word	0xe000e100

080009e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	6039      	str	r1, [r7, #0]
 80009f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	db0a      	blt.n	8000a12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	b2da      	uxtb	r2, r3
 8000a00:	490c      	ldr	r1, [pc, #48]	; (8000a34 <__NVIC_SetPriority+0x4c>)
 8000a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a06:	0112      	lsls	r2, r2, #4
 8000a08:	b2d2      	uxtb	r2, r2
 8000a0a:	440b      	add	r3, r1
 8000a0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a10:	e00a      	b.n	8000a28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	b2da      	uxtb	r2, r3
 8000a16:	4908      	ldr	r1, [pc, #32]	; (8000a38 <__NVIC_SetPriority+0x50>)
 8000a18:	79fb      	ldrb	r3, [r7, #7]
 8000a1a:	f003 030f 	and.w	r3, r3, #15
 8000a1e:	3b04      	subs	r3, #4
 8000a20:	0112      	lsls	r2, r2, #4
 8000a22:	b2d2      	uxtb	r2, r2
 8000a24:	440b      	add	r3, r1
 8000a26:	761a      	strb	r2, [r3, #24]
}
 8000a28:	bf00      	nop
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr
 8000a34:	e000e100 	.word	0xe000e100
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b089      	sub	sp, #36	; 0x24
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	f003 0307 	and.w	r3, r3, #7
 8000a4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a50:	69fb      	ldr	r3, [r7, #28]
 8000a52:	f1c3 0307 	rsb	r3, r3, #7
 8000a56:	2b04      	cmp	r3, #4
 8000a58:	bf28      	it	cs
 8000a5a:	2304      	movcs	r3, #4
 8000a5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a5e:	69fb      	ldr	r3, [r7, #28]
 8000a60:	3304      	adds	r3, #4
 8000a62:	2b06      	cmp	r3, #6
 8000a64:	d902      	bls.n	8000a6c <NVIC_EncodePriority+0x30>
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	3b03      	subs	r3, #3
 8000a6a:	e000      	b.n	8000a6e <NVIC_EncodePriority+0x32>
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a70:	f04f 32ff 	mov.w	r2, #4294967295
 8000a74:	69bb      	ldr	r3, [r7, #24]
 8000a76:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7a:	43da      	mvns	r2, r3
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	401a      	ands	r2, r3
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a84:	f04f 31ff 	mov.w	r1, #4294967295
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a8e:	43d9      	mvns	r1, r3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a94:	4313      	orrs	r3, r2
         );
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3724      	adds	r7, #36	; 0x24
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
	...

08000aa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	3b01      	subs	r3, #1
 8000ab0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ab4:	d301      	bcc.n	8000aba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	e00f      	b.n	8000ada <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aba:	4a0a      	ldr	r2, [pc, #40]	; (8000ae4 <SysTick_Config+0x40>)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	3b01      	subs	r3, #1
 8000ac0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ac2:	210f      	movs	r1, #15
 8000ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac8:	f7ff ff8e 	bl	80009e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000acc:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <SysTick_Config+0x40>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ad2:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <SysTick_Config+0x40>)
 8000ad4:	2207      	movs	r2, #7
 8000ad6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ad8:	2300      	movs	r3, #0
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	e000e010 	.word	0xe000e010

08000ae8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f7ff ff29 	bl	8000948 <__NVIC_SetPriorityGrouping>
}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b086      	sub	sp, #24
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	4603      	mov	r3, r0
 8000b06:	60b9      	str	r1, [r7, #8]
 8000b08:	607a      	str	r2, [r7, #4]
 8000b0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b10:	f7ff ff3e 	bl	8000990 <__NVIC_GetPriorityGrouping>
 8000b14:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b16:	687a      	ldr	r2, [r7, #4]
 8000b18:	68b9      	ldr	r1, [r7, #8]
 8000b1a:	6978      	ldr	r0, [r7, #20]
 8000b1c:	f7ff ff8e 	bl	8000a3c <NVIC_EncodePriority>
 8000b20:	4602      	mov	r2, r0
 8000b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b26:	4611      	mov	r1, r2
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff ff5d 	bl	80009e8 <__NVIC_SetPriority>
}
 8000b2e:	bf00      	nop
 8000b30:	3718      	adds	r7, #24
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b082      	sub	sp, #8
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff ff31 	bl	80009ac <__NVIC_EnableIRQ>
}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b082      	sub	sp, #8
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	f7ff ffa2 	bl	8000aa4 <SysTick_Config>
 8000b60:	4603      	mov	r3, r0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	b084      	sub	sp, #16
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b72:	2300      	movs	r3, #0
 8000b74:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	2b02      	cmp	r3, #2
 8000b80:	d005      	beq.n	8000b8e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2204      	movs	r2, #4
 8000b86:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	73fb      	strb	r3, [r7, #15]
 8000b8c:	e029      	b.n	8000be2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f022 020e 	bic.w	r2, r2, #14
 8000b9c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f022 0201 	bic.w	r2, r2, #1
 8000bac:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb2:	f003 021c 	and.w	r2, r3, #28
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bba:	2101      	movs	r1, #1
 8000bbc:	fa01 f202 	lsl.w	r2, r1, r2
 8000bc0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2200      	movs	r2, #0
 8000bce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d003      	beq.n	8000be2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bde:	6878      	ldr	r0, [r7, #4]
 8000be0:	4798      	blx	r3
    }
  }
  return status;
 8000be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3710      	adds	r7, #16
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}

08000bec <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000bfa:	b2db      	uxtb	r3, r3
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b087      	sub	sp, #28
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c12:	2300      	movs	r3, #0
 8000c14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c16:	e154      	b.n	8000ec2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	2101      	movs	r1, #1
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	fa01 f303 	lsl.w	r3, r1, r3
 8000c24:	4013      	ands	r3, r2
 8000c26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	f000 8146 	beq.w	8000ebc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d00b      	beq.n	8000c50 <HAL_GPIO_Init+0x48>
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	2b02      	cmp	r3, #2
 8000c3e:	d007      	beq.n	8000c50 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c44:	2b11      	cmp	r3, #17
 8000c46:	d003      	beq.n	8000c50 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	2b12      	cmp	r3, #18
 8000c4e:	d130      	bne.n	8000cb2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	689b      	ldr	r3, [r3, #8]
 8000c54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	2203      	movs	r2, #3
 8000c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c60:	43db      	mvns	r3, r3
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	4013      	ands	r3, r2
 8000c66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	68da      	ldr	r2, [r3, #12]
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	005b      	lsls	r3, r3, #1
 8000c70:	fa02 f303 	lsl.w	r3, r2, r3
 8000c74:	693a      	ldr	r2, [r7, #16]
 8000c76:	4313      	orrs	r3, r2
 8000c78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	693a      	ldr	r2, [r7, #16]
 8000c7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c86:	2201      	movs	r2, #1
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	43db      	mvns	r3, r3
 8000c90:	693a      	ldr	r2, [r7, #16]
 8000c92:	4013      	ands	r3, r2
 8000c94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	091b      	lsrs	r3, r3, #4
 8000c9c:	f003 0201 	and.w	r2, r3, #1
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	68db      	ldr	r3, [r3, #12]
 8000cb6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	2203      	movs	r2, #3
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	43db      	mvns	r3, r3
 8000cc4:	693a      	ldr	r2, [r7, #16]
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	689a      	ldr	r2, [r3, #8]
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	2b02      	cmp	r3, #2
 8000ce8:	d003      	beq.n	8000cf2 <HAL_GPIO_Init+0xea>
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	2b12      	cmp	r3, #18
 8000cf0:	d123      	bne.n	8000d3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	08da      	lsrs	r2, r3, #3
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	3208      	adds	r2, #8
 8000cfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cfe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	f003 0307 	and.w	r3, r3, #7
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	220f      	movs	r2, #15
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	43db      	mvns	r3, r3
 8000d10:	693a      	ldr	r2, [r7, #16]
 8000d12:	4013      	ands	r3, r2
 8000d14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	691a      	ldr	r2, [r3, #16]
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	f003 0307 	and.w	r3, r3, #7
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	08da      	lsrs	r2, r3, #3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	3208      	adds	r2, #8
 8000d34:	6939      	ldr	r1, [r7, #16]
 8000d36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	2203      	movs	r2, #3
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	43db      	mvns	r3, r3
 8000d4c:	693a      	ldr	r2, [r7, #16]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	f003 0203 	and.w	r2, r3, #3
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	f000 80a0 	beq.w	8000ebc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d7c:	4b58      	ldr	r3, [pc, #352]	; (8000ee0 <HAL_GPIO_Init+0x2d8>)
 8000d7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d80:	4a57      	ldr	r2, [pc, #348]	; (8000ee0 <HAL_GPIO_Init+0x2d8>)
 8000d82:	f043 0301 	orr.w	r3, r3, #1
 8000d86:	6613      	str	r3, [r2, #96]	; 0x60
 8000d88:	4b55      	ldr	r3, [pc, #340]	; (8000ee0 <HAL_GPIO_Init+0x2d8>)
 8000d8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d8c:	f003 0301 	and.w	r3, r3, #1
 8000d90:	60bb      	str	r3, [r7, #8]
 8000d92:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d94:	4a53      	ldr	r2, [pc, #332]	; (8000ee4 <HAL_GPIO_Init+0x2dc>)
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	089b      	lsrs	r3, r3, #2
 8000d9a:	3302      	adds	r3, #2
 8000d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000da0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	f003 0303 	and.w	r3, r3, #3
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	220f      	movs	r2, #15
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	43db      	mvns	r3, r3
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	4013      	ands	r3, r2
 8000db6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000dbe:	d019      	beq.n	8000df4 <HAL_GPIO_Init+0x1ec>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	4a49      	ldr	r2, [pc, #292]	; (8000ee8 <HAL_GPIO_Init+0x2e0>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d013      	beq.n	8000df0 <HAL_GPIO_Init+0x1e8>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	4a48      	ldr	r2, [pc, #288]	; (8000eec <HAL_GPIO_Init+0x2e4>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d00d      	beq.n	8000dec <HAL_GPIO_Init+0x1e4>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	4a47      	ldr	r2, [pc, #284]	; (8000ef0 <HAL_GPIO_Init+0x2e8>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d007      	beq.n	8000de8 <HAL_GPIO_Init+0x1e0>
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	4a46      	ldr	r2, [pc, #280]	; (8000ef4 <HAL_GPIO_Init+0x2ec>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d101      	bne.n	8000de4 <HAL_GPIO_Init+0x1dc>
 8000de0:	2304      	movs	r3, #4
 8000de2:	e008      	b.n	8000df6 <HAL_GPIO_Init+0x1ee>
 8000de4:	2307      	movs	r3, #7
 8000de6:	e006      	b.n	8000df6 <HAL_GPIO_Init+0x1ee>
 8000de8:	2303      	movs	r3, #3
 8000dea:	e004      	b.n	8000df6 <HAL_GPIO_Init+0x1ee>
 8000dec:	2302      	movs	r3, #2
 8000dee:	e002      	b.n	8000df6 <HAL_GPIO_Init+0x1ee>
 8000df0:	2301      	movs	r3, #1
 8000df2:	e000      	b.n	8000df6 <HAL_GPIO_Init+0x1ee>
 8000df4:	2300      	movs	r3, #0
 8000df6:	697a      	ldr	r2, [r7, #20]
 8000df8:	f002 0203 	and.w	r2, r2, #3
 8000dfc:	0092      	lsls	r2, r2, #2
 8000dfe:	4093      	lsls	r3, r2
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e06:	4937      	ldr	r1, [pc, #220]	; (8000ee4 <HAL_GPIO_Init+0x2dc>)
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	089b      	lsrs	r3, r3, #2
 8000e0c:	3302      	adds	r3, #2
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000e14:	4b38      	ldr	r3, [pc, #224]	; (8000ef8 <HAL_GPIO_Init+0x2f0>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	4013      	ands	r3, r2
 8000e22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d003      	beq.n	8000e38 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e38:	4a2f      	ldr	r2, [pc, #188]	; (8000ef8 <HAL_GPIO_Init+0x2f0>)
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000e3e:	4b2e      	ldr	r3, [pc, #184]	; (8000ef8 <HAL_GPIO_Init+0x2f0>)
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	43db      	mvns	r3, r3
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d003      	beq.n	8000e62 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e62:	4a25      	ldr	r2, [pc, #148]	; (8000ef8 <HAL_GPIO_Init+0x2f0>)
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e68:	4b23      	ldr	r3, [pc, #140]	; (8000ef8 <HAL_GPIO_Init+0x2f0>)
 8000e6a:	689b      	ldr	r3, [r3, #8]
 8000e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	43db      	mvns	r3, r3
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	4013      	ands	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d003      	beq.n	8000e8c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e8c:	4a1a      	ldr	r2, [pc, #104]	; (8000ef8 <HAL_GPIO_Init+0x2f0>)
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000e92:	4b19      	ldr	r3, [pc, #100]	; (8000ef8 <HAL_GPIO_Init+0x2f0>)
 8000e94:	68db      	ldr	r3, [r3, #12]
 8000e96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	43db      	mvns	r3, r3
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d003      	beq.n	8000eb6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000eb6:	4a10      	ldr	r2, [pc, #64]	; (8000ef8 <HAL_GPIO_Init+0x2f0>)
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	f47f aea3 	bne.w	8000c18 <HAL_GPIO_Init+0x10>
  }
}
 8000ed2:	bf00      	nop
 8000ed4:	bf00      	nop
 8000ed6:	371c      	adds	r7, #28
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	40021000 	.word	0x40021000
 8000ee4:	40010000 	.word	0x40010000
 8000ee8:	48000400 	.word	0x48000400
 8000eec:	48000800 	.word	0x48000800
 8000ef0:	48000c00 	.word	0x48000c00
 8000ef4:	48001000 	.word	0x48001000
 8000ef8:	40010400 	.word	0x40010400

08000efc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	460b      	mov	r3, r1
 8000f06:	807b      	strh	r3, [r7, #2]
 8000f08:	4613      	mov	r3, r2
 8000f0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f0c:	787b      	ldrb	r3, [r7, #1]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d003      	beq.n	8000f1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f12:	887a      	ldrh	r2, [r7, #2]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f18:	e002      	b.n	8000f20 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f1a:	887a      	ldrh	r2, [r7, #2]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f20:	bf00      	nop
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d101      	bne.n	8000f3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e081      	b.n	8001042 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d106      	bne.n	8000f58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f7ff fa24 	bl	80003a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2224      	movs	r2, #36	; 0x24
 8000f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f022 0201 	bic.w	r2, r2, #1
 8000f6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	685a      	ldr	r2, [r3, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000f7c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	689a      	ldr	r2, [r3, #8]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f8c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	68db      	ldr	r3, [r3, #12]
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d107      	bne.n	8000fa6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	689a      	ldr	r2, [r3, #8]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	e006      	b.n	8000fb4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	689a      	ldr	r2, [r3, #8]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000fb2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d104      	bne.n	8000fc6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fc4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	687a      	ldr	r2, [r7, #4]
 8000fce:	6812      	ldr	r2, [r2, #0]
 8000fd0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fd8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	68da      	ldr	r2, [r3, #12]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000fe8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	691a      	ldr	r2, [r3, #16]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	695b      	ldr	r3, [r3, #20]
 8000ff2:	ea42 0103 	orr.w	r1, r2, r3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	699b      	ldr	r3, [r3, #24]
 8000ffa:	021a      	lsls	r2, r3, #8
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	430a      	orrs	r2, r1
 8001002:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	69d9      	ldr	r1, [r3, #28]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6a1a      	ldr	r2, [r3, #32]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	430a      	orrs	r2, r1
 8001012:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f042 0201 	orr.w	r2, r2, #1
 8001022:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2200      	movs	r2, #0
 8001028:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2220      	movs	r2, #32
 800102e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2200      	movs	r2, #0
 8001036:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2200      	movs	r2, #0
 800103c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
	...

0800104c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b088      	sub	sp, #32
 8001050:	af02      	add	r7, sp, #8
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	607a      	str	r2, [r7, #4]
 8001056:	461a      	mov	r2, r3
 8001058:	460b      	mov	r3, r1
 800105a:	817b      	strh	r3, [r7, #10]
 800105c:	4613      	mov	r3, r2
 800105e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001066:	b2db      	uxtb	r3, r3
 8001068:	2b20      	cmp	r3, #32
 800106a:	f040 80da 	bne.w	8001222 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001074:	2b01      	cmp	r3, #1
 8001076:	d101      	bne.n	800107c <HAL_I2C_Master_Transmit+0x30>
 8001078:	2302      	movs	r3, #2
 800107a:	e0d3      	b.n	8001224 <HAL_I2C_Master_Transmit+0x1d8>
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	2201      	movs	r2, #1
 8001080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001084:	f7ff fc30 	bl	80008e8 <HAL_GetTick>
 8001088:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	9300      	str	r3, [sp, #0]
 800108e:	2319      	movs	r3, #25
 8001090:	2201      	movs	r2, #1
 8001092:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001096:	68f8      	ldr	r0, [r7, #12]
 8001098:	f001 fd17 	bl	8002aca <I2C_WaitOnFlagUntilTimeout>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e0be      	b.n	8001224 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	2221      	movs	r2, #33	; 0x21
 80010aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	2210      	movs	r2, #16
 80010b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	2200      	movs	r2, #0
 80010ba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	893a      	ldrh	r2, [r7, #8]
 80010c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	2200      	movs	r2, #0
 80010cc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	2bff      	cmp	r3, #255	; 0xff
 80010d6:	d90e      	bls.n	80010f6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	22ff      	movs	r2, #255	; 0xff
 80010dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	8979      	ldrh	r1, [r7, #10]
 80010e6:	4b51      	ldr	r3, [pc, #324]	; (800122c <HAL_I2C_Master_Transmit+0x1e0>)
 80010e8:	9300      	str	r3, [sp, #0]
 80010ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010ee:	68f8      	ldr	r0, [r7, #12]
 80010f0:	f001 fe7a 	bl	8002de8 <I2C_TransferConfig>
 80010f4:	e06c      	b.n	80011d0 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010fa:	b29a      	uxth	r2, r3
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001104:	b2da      	uxtb	r2, r3
 8001106:	8979      	ldrh	r1, [r7, #10]
 8001108:	4b48      	ldr	r3, [pc, #288]	; (800122c <HAL_I2C_Master_Transmit+0x1e0>)
 800110a:	9300      	str	r3, [sp, #0]
 800110c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001110:	68f8      	ldr	r0, [r7, #12]
 8001112:	f001 fe69 	bl	8002de8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001116:	e05b      	b.n	80011d0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001118:	697a      	ldr	r2, [r7, #20]
 800111a:	6a39      	ldr	r1, [r7, #32]
 800111c:	68f8      	ldr	r0, [r7, #12]
 800111e:	f001 fd14 	bl	8002b4a <I2C_WaitOnTXISFlagUntilTimeout>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	e07b      	b.n	8001224 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001130:	781a      	ldrb	r2, [r3, #0]
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113c:	1c5a      	adds	r2, r3, #1
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001146:	b29b      	uxth	r3, r3
 8001148:	3b01      	subs	r3, #1
 800114a:	b29a      	uxth	r2, r3
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001154:	3b01      	subs	r3, #1
 8001156:	b29a      	uxth	r2, r3
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001160:	b29b      	uxth	r3, r3
 8001162:	2b00      	cmp	r3, #0
 8001164:	d034      	beq.n	80011d0 <HAL_I2C_Master_Transmit+0x184>
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800116a:	2b00      	cmp	r3, #0
 800116c:	d130      	bne.n	80011d0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	9300      	str	r3, [sp, #0]
 8001172:	6a3b      	ldr	r3, [r7, #32]
 8001174:	2200      	movs	r2, #0
 8001176:	2180      	movs	r1, #128	; 0x80
 8001178:	68f8      	ldr	r0, [r7, #12]
 800117a:	f001 fca6 	bl	8002aca <I2C_WaitOnFlagUntilTimeout>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001184:	2301      	movs	r3, #1
 8001186:	e04d      	b.n	8001224 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800118c:	b29b      	uxth	r3, r3
 800118e:	2bff      	cmp	r3, #255	; 0xff
 8001190:	d90e      	bls.n	80011b0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	22ff      	movs	r2, #255	; 0xff
 8001196:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800119c:	b2da      	uxtb	r2, r3
 800119e:	8979      	ldrh	r1, [r7, #10]
 80011a0:	2300      	movs	r3, #0
 80011a2:	9300      	str	r3, [sp, #0]
 80011a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011a8:	68f8      	ldr	r0, [r7, #12]
 80011aa:	f001 fe1d 	bl	8002de8 <I2C_TransferConfig>
 80011ae:	e00f      	b.n	80011d0 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011b4:	b29a      	uxth	r2, r3
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011be:	b2da      	uxtb	r2, r3
 80011c0:	8979      	ldrh	r1, [r7, #10]
 80011c2:	2300      	movs	r3, #0
 80011c4:	9300      	str	r3, [sp, #0]
 80011c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011ca:	68f8      	ldr	r0, [r7, #12]
 80011cc:	f001 fe0c 	bl	8002de8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d19e      	bne.n	8001118 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011da:	697a      	ldr	r2, [r7, #20]
 80011dc:	6a39      	ldr	r1, [r7, #32]
 80011de:	68f8      	ldr	r0, [r7, #12]
 80011e0:	f001 fcf3 	bl	8002bca <I2C_WaitOnSTOPFlagUntilTimeout>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e01a      	b.n	8001224 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	2220      	movs	r2, #32
 80011f4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	6859      	ldr	r1, [r3, #4]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <HAL_I2C_Master_Transmit+0x1e4>)
 8001202:	400b      	ands	r3, r1
 8001204:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	2220      	movs	r2, #32
 800120a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	2200      	movs	r2, #0
 8001212:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	2200      	movs	r2, #0
 800121a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800121e:	2300      	movs	r3, #0
 8001220:	e000      	b.n	8001224 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001222:	2302      	movs	r3, #2
  }
}
 8001224:	4618      	mov	r0, r3
 8001226:	3718      	adds	r7, #24
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	80002000 	.word	0x80002000
 8001230:	fe00e800 	.word	0xfe00e800

08001234 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b088      	sub	sp, #32
 8001238:	af02      	add	r7, sp, #8
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	607a      	str	r2, [r7, #4]
 800123e:	461a      	mov	r2, r3
 8001240:	460b      	mov	r3, r1
 8001242:	817b      	strh	r3, [r7, #10]
 8001244:	4613      	mov	r3, r2
 8001246:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800124e:	b2db      	uxtb	r3, r3
 8001250:	2b20      	cmp	r3, #32
 8001252:	f040 80db 	bne.w	800140c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800125c:	2b01      	cmp	r3, #1
 800125e:	d101      	bne.n	8001264 <HAL_I2C_Master_Receive+0x30>
 8001260:	2302      	movs	r3, #2
 8001262:	e0d4      	b.n	800140e <HAL_I2C_Master_Receive+0x1da>
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	2201      	movs	r2, #1
 8001268:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800126c:	f7ff fb3c 	bl	80008e8 <HAL_GetTick>
 8001270:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	9300      	str	r3, [sp, #0]
 8001276:	2319      	movs	r3, #25
 8001278:	2201      	movs	r2, #1
 800127a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800127e:	68f8      	ldr	r0, [r7, #12]
 8001280:	f001 fc23 	bl	8002aca <I2C_WaitOnFlagUntilTimeout>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e0bf      	b.n	800140e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	2222      	movs	r2, #34	; 0x22
 8001292:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	2210      	movs	r2, #16
 800129a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	2200      	movs	r2, #0
 80012a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	893a      	ldrh	r2, [r7, #8]
 80012ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	2200      	movs	r2, #0
 80012b4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	2bff      	cmp	r3, #255	; 0xff
 80012be:	d90e      	bls.n	80012de <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	22ff      	movs	r2, #255	; 0xff
 80012c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012ca:	b2da      	uxtb	r2, r3
 80012cc:	8979      	ldrh	r1, [r7, #10]
 80012ce:	4b52      	ldr	r3, [pc, #328]	; (8001418 <HAL_I2C_Master_Receive+0x1e4>)
 80012d0:	9300      	str	r3, [sp, #0]
 80012d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012d6:	68f8      	ldr	r0, [r7, #12]
 80012d8:	f001 fd86 	bl	8002de8 <I2C_TransferConfig>
 80012dc:	e06d      	b.n	80013ba <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012e2:	b29a      	uxth	r2, r3
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012ec:	b2da      	uxtb	r2, r3
 80012ee:	8979      	ldrh	r1, [r7, #10]
 80012f0:	4b49      	ldr	r3, [pc, #292]	; (8001418 <HAL_I2C_Master_Receive+0x1e4>)
 80012f2:	9300      	str	r3, [sp, #0]
 80012f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012f8:	68f8      	ldr	r0, [r7, #12]
 80012fa:	f001 fd75 	bl	8002de8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80012fe:	e05c      	b.n	80013ba <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001300:	697a      	ldr	r2, [r7, #20]
 8001302:	6a39      	ldr	r1, [r7, #32]
 8001304:	68f8      	ldr	r0, [r7, #12]
 8001306:	f001 fc9d 	bl	8002c44 <I2C_WaitOnRXNEFlagUntilTimeout>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	e07c      	b.n	800140e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800131e:	b2d2      	uxtb	r2, r2
 8001320:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001326:	1c5a      	adds	r2, r3, #1
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001330:	3b01      	subs	r3, #1
 8001332:	b29a      	uxth	r2, r3
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800133c:	b29b      	uxth	r3, r3
 800133e:	3b01      	subs	r3, #1
 8001340:	b29a      	uxth	r2, r3
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800134a:	b29b      	uxth	r3, r3
 800134c:	2b00      	cmp	r3, #0
 800134e:	d034      	beq.n	80013ba <HAL_I2C_Master_Receive+0x186>
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001354:	2b00      	cmp	r3, #0
 8001356:	d130      	bne.n	80013ba <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	9300      	str	r3, [sp, #0]
 800135c:	6a3b      	ldr	r3, [r7, #32]
 800135e:	2200      	movs	r2, #0
 8001360:	2180      	movs	r1, #128	; 0x80
 8001362:	68f8      	ldr	r0, [r7, #12]
 8001364:	f001 fbb1 	bl	8002aca <I2C_WaitOnFlagUntilTimeout>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e04d      	b.n	800140e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001376:	b29b      	uxth	r3, r3
 8001378:	2bff      	cmp	r3, #255	; 0xff
 800137a:	d90e      	bls.n	800139a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	22ff      	movs	r2, #255	; 0xff
 8001380:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001386:	b2da      	uxtb	r2, r3
 8001388:	8979      	ldrh	r1, [r7, #10]
 800138a:	2300      	movs	r3, #0
 800138c:	9300      	str	r3, [sp, #0]
 800138e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001392:	68f8      	ldr	r0, [r7, #12]
 8001394:	f001 fd28 	bl	8002de8 <I2C_TransferConfig>
 8001398:	e00f      	b.n	80013ba <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800139e:	b29a      	uxth	r2, r3
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013a8:	b2da      	uxtb	r2, r3
 80013aa:	8979      	ldrh	r1, [r7, #10]
 80013ac:	2300      	movs	r3, #0
 80013ae:	9300      	str	r3, [sp, #0]
 80013b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013b4:	68f8      	ldr	r0, [r7, #12]
 80013b6:	f001 fd17 	bl	8002de8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013be:	b29b      	uxth	r3, r3
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d19d      	bne.n	8001300 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013c4:	697a      	ldr	r2, [r7, #20]
 80013c6:	6a39      	ldr	r1, [r7, #32]
 80013c8:	68f8      	ldr	r0, [r7, #12]
 80013ca:	f001 fbfe 	bl	8002bca <I2C_WaitOnSTOPFlagUntilTimeout>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e01a      	b.n	800140e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2220      	movs	r2, #32
 80013de:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	6859      	ldr	r1, [r3, #4]
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	4b0c      	ldr	r3, [pc, #48]	; (800141c <HAL_I2C_Master_Receive+0x1e8>)
 80013ec:	400b      	ands	r3, r1
 80013ee:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	2220      	movs	r2, #32
 80013f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	2200      	movs	r2, #0
 80013fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	2200      	movs	r2, #0
 8001404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001408:	2300      	movs	r3, #0
 800140a:	e000      	b.n	800140e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800140c:	2302      	movs	r3, #2
  }
}
 800140e:	4618      	mov	r0, r3
 8001410:	3718      	adds	r7, #24
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	80002400 	.word	0x80002400
 800141c:	fe00e800 	.word	0xfe00e800

08001420 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b088      	sub	sp, #32
 8001424:	af02      	add	r7, sp, #8
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	4608      	mov	r0, r1
 800142a:	4611      	mov	r1, r2
 800142c:	461a      	mov	r2, r3
 800142e:	4603      	mov	r3, r0
 8001430:	817b      	strh	r3, [r7, #10]
 8001432:	460b      	mov	r3, r1
 8001434:	813b      	strh	r3, [r7, #8]
 8001436:	4613      	mov	r3, r2
 8001438:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001440:	b2db      	uxtb	r3, r3
 8001442:	2b20      	cmp	r3, #32
 8001444:	f040 80f9 	bne.w	800163a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001448:	6a3b      	ldr	r3, [r7, #32]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d002      	beq.n	8001454 <HAL_I2C_Mem_Write+0x34>
 800144e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001450:	2b00      	cmp	r3, #0
 8001452:	d105      	bne.n	8001460 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f44f 7200 	mov.w	r2, #512	; 0x200
 800145a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e0ed      	b.n	800163c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001466:	2b01      	cmp	r3, #1
 8001468:	d101      	bne.n	800146e <HAL_I2C_Mem_Write+0x4e>
 800146a:	2302      	movs	r3, #2
 800146c:	e0e6      	b.n	800163c <HAL_I2C_Mem_Write+0x21c>
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	2201      	movs	r2, #1
 8001472:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001476:	f7ff fa37 	bl	80008e8 <HAL_GetTick>
 800147a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	9300      	str	r3, [sp, #0]
 8001480:	2319      	movs	r3, #25
 8001482:	2201      	movs	r2, #1
 8001484:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001488:	68f8      	ldr	r0, [r7, #12]
 800148a:	f001 fb1e 	bl	8002aca <I2C_WaitOnFlagUntilTimeout>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e0d1      	b.n	800163c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	2221      	movs	r2, #33	; 0x21
 800149c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	2240      	movs	r2, #64	; 0x40
 80014a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	2200      	movs	r2, #0
 80014ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	6a3a      	ldr	r2, [r7, #32]
 80014b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80014b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2200      	movs	r2, #0
 80014be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80014c0:	88f8      	ldrh	r0, [r7, #6]
 80014c2:	893a      	ldrh	r2, [r7, #8]
 80014c4:	8979      	ldrh	r1, [r7, #10]
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	9301      	str	r3, [sp, #4]
 80014ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014cc:	9300      	str	r3, [sp, #0]
 80014ce:	4603      	mov	r3, r0
 80014d0:	68f8      	ldr	r0, [r7, #12]
 80014d2:	f000 fdcf 	bl	8002074 <I2C_RequestMemoryWrite>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d005      	beq.n	80014e8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2200      	movs	r2, #0
 80014e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e0a9      	b.n	800163c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	2bff      	cmp	r3, #255	; 0xff
 80014f0:	d90e      	bls.n	8001510 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	22ff      	movs	r2, #255	; 0xff
 80014f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014fc:	b2da      	uxtb	r2, r3
 80014fe:	8979      	ldrh	r1, [r7, #10]
 8001500:	2300      	movs	r3, #0
 8001502:	9300      	str	r3, [sp, #0]
 8001504:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001508:	68f8      	ldr	r0, [r7, #12]
 800150a:	f001 fc6d 	bl	8002de8 <I2C_TransferConfig>
 800150e:	e00f      	b.n	8001530 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001514:	b29a      	uxth	r2, r3
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800151e:	b2da      	uxtb	r2, r3
 8001520:	8979      	ldrh	r1, [r7, #10]
 8001522:	2300      	movs	r3, #0
 8001524:	9300      	str	r3, [sp, #0]
 8001526:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800152a:	68f8      	ldr	r0, [r7, #12]
 800152c:	f001 fc5c 	bl	8002de8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001530:	697a      	ldr	r2, [r7, #20]
 8001532:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001534:	68f8      	ldr	r0, [r7, #12]
 8001536:	f001 fb08 	bl	8002b4a <I2C_WaitOnTXISFlagUntilTimeout>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	e07b      	b.n	800163c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001548:	781a      	ldrb	r2, [r3, #0]
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001554:	1c5a      	adds	r2, r3, #1
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800155e:	b29b      	uxth	r3, r3
 8001560:	3b01      	subs	r3, #1
 8001562:	b29a      	uxth	r2, r3
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800156c:	3b01      	subs	r3, #1
 800156e:	b29a      	uxth	r2, r3
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001578:	b29b      	uxth	r3, r3
 800157a:	2b00      	cmp	r3, #0
 800157c:	d034      	beq.n	80015e8 <HAL_I2C_Mem_Write+0x1c8>
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001582:	2b00      	cmp	r3, #0
 8001584:	d130      	bne.n	80015e8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	9300      	str	r3, [sp, #0]
 800158a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800158c:	2200      	movs	r2, #0
 800158e:	2180      	movs	r1, #128	; 0x80
 8001590:	68f8      	ldr	r0, [r7, #12]
 8001592:	f001 fa9a 	bl	8002aca <I2C_WaitOnFlagUntilTimeout>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e04d      	b.n	800163c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	2bff      	cmp	r3, #255	; 0xff
 80015a8:	d90e      	bls.n	80015c8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	22ff      	movs	r2, #255	; 0xff
 80015ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015b4:	b2da      	uxtb	r2, r3
 80015b6:	8979      	ldrh	r1, [r7, #10]
 80015b8:	2300      	movs	r3, #0
 80015ba:	9300      	str	r3, [sp, #0]
 80015bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015c0:	68f8      	ldr	r0, [r7, #12]
 80015c2:	f001 fc11 	bl	8002de8 <I2C_TransferConfig>
 80015c6:	e00f      	b.n	80015e8 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015cc:	b29a      	uxth	r2, r3
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015d6:	b2da      	uxtb	r2, r3
 80015d8:	8979      	ldrh	r1, [r7, #10]
 80015da:	2300      	movs	r3, #0
 80015dc:	9300      	str	r3, [sp, #0]
 80015de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015e2:	68f8      	ldr	r0, [r7, #12]
 80015e4:	f001 fc00 	bl	8002de8 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d19e      	bne.n	8001530 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015f2:	697a      	ldr	r2, [r7, #20]
 80015f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80015f6:	68f8      	ldr	r0, [r7, #12]
 80015f8:	f001 fae7 	bl	8002bca <I2C_WaitOnSTOPFlagUntilTimeout>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e01a      	b.n	800163c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2220      	movs	r2, #32
 800160c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	6859      	ldr	r1, [r3, #4]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	4b0a      	ldr	r3, [pc, #40]	; (8001644 <HAL_I2C_Mem_Write+0x224>)
 800161a:	400b      	ands	r3, r1
 800161c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	2220      	movs	r2, #32
 8001622:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	2200      	movs	r2, #0
 800162a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	2200      	movs	r2, #0
 8001632:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001636:	2300      	movs	r3, #0
 8001638:	e000      	b.n	800163c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800163a:	2302      	movs	r3, #2
  }
}
 800163c:	4618      	mov	r0, r3
 800163e:	3718      	adds	r7, #24
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	fe00e800 	.word	0xfe00e800

08001648 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b088      	sub	sp, #32
 800164c:	af02      	add	r7, sp, #8
 800164e:	60f8      	str	r0, [r7, #12]
 8001650:	4608      	mov	r0, r1
 8001652:	4611      	mov	r1, r2
 8001654:	461a      	mov	r2, r3
 8001656:	4603      	mov	r3, r0
 8001658:	817b      	strh	r3, [r7, #10]
 800165a:	460b      	mov	r3, r1
 800165c:	813b      	strh	r3, [r7, #8]
 800165e:	4613      	mov	r3, r2
 8001660:	80fb      	strh	r3, [r7, #6]
  uint32_t xfermode;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001668:	b2db      	uxtb	r3, r3
 800166a:	2b20      	cmp	r3, #32
 800166c:	d176      	bne.n	800175c <HAL_I2C_Mem_Read_IT+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 800166e:	6a3b      	ldr	r3, [r7, #32]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d002      	beq.n	800167a <HAL_I2C_Mem_Read_IT+0x32>
 8001674:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001676:	2b00      	cmp	r3, #0
 8001678:	d105      	bne.n	8001686 <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001680:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e06b      	b.n	800175e <HAL_I2C_Mem_Read_IT+0x116>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001690:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001694:	d101      	bne.n	800169a <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 8001696:	2302      	movs	r3, #2
 8001698:	e061      	b.n	800175e <HAL_I2C_Mem_Read_IT+0x116>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d101      	bne.n	80016a8 <HAL_I2C_Mem_Read_IT+0x60>
 80016a4:	2302      	movs	r3, #2
 80016a6:	e05a      	b.n	800175e <HAL_I2C_Mem_Read_IT+0x116>
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2201      	movs	r2, #1
 80016ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80016b0:	f7ff f91a 	bl	80008e8 <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2222      	movs	r2, #34	; 0x22
 80016ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	2240      	movs	r2, #64	; 0x40
 80016c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	2200      	movs	r2, #0
 80016ca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	6a3a      	ldr	r2, [r7, #32]
 80016d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80016d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	4a23      	ldr	r2, [pc, #140]	; (8001768 <HAL_I2C_Mem_Read_IT+0x120>)
 80016dc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	4a22      	ldr	r2, [pc, #136]	; (800176c <HAL_I2C_Mem_Read_IT+0x124>)
 80016e2:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	2bff      	cmp	r3, #255	; 0xff
 80016ec:	d906      	bls.n	80016fc <HAL_I2C_Mem_Read_IT+0xb4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	22ff      	movs	r2, #255	; 0xff
 80016f2:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80016f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016f8:	617b      	str	r3, [r7, #20]
 80016fa:	e007      	b.n	800170c <HAL_I2C_Mem_Read_IT+0xc4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001700:	b29a      	uxth	r2, r3
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001706:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800170a:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800170c:	88f8      	ldrh	r0, [r7, #6]
 800170e:	893a      	ldrh	r2, [r7, #8]
 8001710:	8979      	ldrh	r1, [r7, #10]
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	9301      	str	r3, [sp, #4]
 8001716:	2319      	movs	r3, #25
 8001718:	9300      	str	r3, [sp, #0]
 800171a:	4603      	mov	r3, r0
 800171c:	68f8      	ldr	r0, [r7, #12]
 800171e:	f000 fcfd 	bl	800211c <I2C_RequestMemoryRead>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d005      	beq.n	8001734 <HAL_I2C_Mem_Read_IT+0xec>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2200      	movs	r2, #0
 800172c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e014      	b.n	800175e <HAL_I2C_Mem_Read_IT+0x116>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001738:	b2da      	uxtb	r2, r3
 800173a:	8979      	ldrh	r1, [r7, #10]
 800173c:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <HAL_I2C_Mem_Read_IT+0x128>)
 800173e:	9300      	str	r3, [sp, #0]
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	68f8      	ldr	r0, [r7, #12]
 8001744:	f001 fb50 	bl	8002de8 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2200      	movs	r2, #0
 800174c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001750:	2102      	movs	r1, #2
 8001752:	68f8      	ldr	r0, [r7, #12]
 8001754:	f001 fb76 	bl	8002e44 <I2C_Enable_IRQ>

    return HAL_OK;
 8001758:	2300      	movs	r3, #0
 800175a:	e000      	b.n	800175e <HAL_I2C_Mem_Read_IT+0x116>
  }
  else
  {
    return HAL_BUSY;
 800175c:	2302      	movs	r3, #2
  }
}
 800175e:	4618      	mov	r0, r3
 8001760:	3718      	adds	r7, #24
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	ffff0000 	.word	0xffff0000
 800176c:	08001879 	.word	0x08001879
 8001770:	80002400 	.word	0x80002400

08001774 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	699b      	ldr	r3, [r3, #24]
 8001782:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001790:	2b00      	cmp	r3, #0
 8001792:	d005      	beq.n	80017a0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001798:	68ba      	ldr	r2, [r7, #8]
 800179a:	68f9      	ldr	r1, [r7, #12]
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	4798      	blx	r3
  }
}
 80017a0:	bf00      	nop
 80017a2:	3710      	adds	r7, #16
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80017ec:	bf00      	nop
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	460b      	mov	r3, r1
 8001802:	70fb      	strb	r3, [r7, #3]
 8001804:	4613      	mov	r3, r2
 8001806:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001808:	bf00      	nop
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <I2C_Master_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b088      	sub	sp, #32
 800187c:	af02      	add	r7, sp, #8
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800188e:	2b01      	cmp	r3, #1
 8001890:	d101      	bne.n	8001896 <I2C_Master_ISR_IT+0x1e>
 8001892:	2302      	movs	r3, #2
 8001894:	e114      	b.n	8001ac0 <I2C_Master_ISR_IT+0x248>
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2201      	movs	r2, #1
 800189a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	091b      	lsrs	r3, r3, #4
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d013      	beq.n	80018d2 <I2C_Master_ISR_IT+0x5a>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	091b      	lsrs	r3, r3, #4
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d00d      	beq.n	80018d2 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2210      	movs	r2, #16
 80018bc:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c2:	f043 0204 	orr.w	r2, r3, #4
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80018ca:	68f8      	ldr	r0, [r7, #12]
 80018cc:	f001 f8bb 	bl	8002a46 <I2C_Flush_TXDR>
 80018d0:	e0e1      	b.n	8001a96 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	089b      	lsrs	r3, r3, #2
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d023      	beq.n	8001926 <I2C_Master_ISR_IT+0xae>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	089b      	lsrs	r3, r3, #2
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d01d      	beq.n	8001926 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	f023 0304 	bic.w	r3, r3, #4
 80018f0:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fc:	b2d2      	uxtb	r2, r2
 80018fe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001904:	1c5a      	adds	r2, r3, #1
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800190e:	3b01      	subs	r3, #1
 8001910:	b29a      	uxth	r2, r3
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800191a:	b29b      	uxth	r3, r3
 800191c:	3b01      	subs	r3, #1
 800191e:	b29a      	uxth	r2, r3
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001924:	e0b7      	b.n	8001a96 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	085b      	lsrs	r3, r3, #1
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	2b00      	cmp	r3, #0
 8001930:	d01e      	beq.n	8001970 <I2C_Master_ISR_IT+0xf8>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	085b      	lsrs	r3, r3, #1
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	2b00      	cmp	r3, #0
 800193c:	d018      	beq.n	8001970 <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001942:	781a      	ldrb	r2, [r3, #0]
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194e:	1c5a      	adds	r2, r3, #1
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001958:	3b01      	subs	r3, #1
 800195a:	b29a      	uxth	r2, r3
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001964:	b29b      	uxth	r3, r3
 8001966:	3b01      	subs	r3, #1
 8001968:	b29a      	uxth	r2, r3
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800196e:	e092      	b.n	8001a96 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	09db      	lsrs	r3, r3, #7
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	2b00      	cmp	r3, #0
 800197a:	d05d      	beq.n	8001a38 <I2C_Master_ISR_IT+0x1c0>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	099b      	lsrs	r3, r3, #6
 8001980:	f003 0301 	and.w	r3, r3, #1
 8001984:	2b00      	cmp	r3, #0
 8001986:	d057      	beq.n	8001a38 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800198c:	b29b      	uxth	r3, r3
 800198e:	2b00      	cmp	r3, #0
 8001990:	d040      	beq.n	8001a14 <I2C_Master_ISR_IT+0x19c>
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001996:	2b00      	cmp	r3, #0
 8001998:	d13c      	bne.n	8001a14 <I2C_Master_ISR_IT+0x19c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019a6:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	2bff      	cmp	r3, #255	; 0xff
 80019b0:	d90e      	bls.n	80019d0 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	22ff      	movs	r2, #255	; 0xff
 80019b6:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019bc:	b2da      	uxtb	r2, r3
 80019be:	8a79      	ldrh	r1, [r7, #18]
 80019c0:	2300      	movs	r3, #0
 80019c2:	9300      	str	r3, [sp, #0]
 80019c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019c8:	68f8      	ldr	r0, [r7, #12]
 80019ca:	f001 fa0d 	bl	8002de8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019ce:	e032      	b.n	8001a36 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019d4:	b29a      	uxth	r2, r3
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019de:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80019e2:	d00b      	beq.n	80019fc <I2C_Master_ISR_IT+0x184>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ee:	8a79      	ldrh	r1, [r7, #18]
 80019f0:	2000      	movs	r0, #0
 80019f2:	9000      	str	r0, [sp, #0]
 80019f4:	68f8      	ldr	r0, [r7, #12]
 80019f6:	f001 f9f7 	bl	8002de8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019fa:	e01c      	b.n	8001a36 <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a00:	b2da      	uxtb	r2, r3
 8001a02:	8a79      	ldrh	r1, [r7, #18]
 8001a04:	2300      	movs	r3, #0
 8001a06:	9300      	str	r3, [sp, #0]
 8001a08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a0c:	68f8      	ldr	r0, [r7, #12]
 8001a0e:	f001 f9eb 	bl	8002de8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a12:	e010      	b.n	8001a36 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a22:	d003      	beq.n	8001a2c <I2C_Master_ISR_IT+0x1b4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8001a24:	68f8      	ldr	r0, [r7, #12]
 8001a26:	f000 fc51 	bl	80022cc <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001a2a:	e034      	b.n	8001a96 <I2C_Master_ISR_IT+0x21e>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001a2c:	2140      	movs	r1, #64	; 0x40
 8001a2e:	68f8      	ldr	r0, [r7, #12]
 8001a30:	f000 ff12 	bl	8002858 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001a34:	e02f      	b.n	8001a96 <I2C_Master_ISR_IT+0x21e>
 8001a36:	e02e      	b.n	8001a96 <I2C_Master_ISR_IT+0x21e>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	099b      	lsrs	r3, r3, #6
 8001a3c:	f003 0301 	and.w	r3, r3, #1
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d028      	beq.n	8001a96 <I2C_Master_ISR_IT+0x21e>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	099b      	lsrs	r3, r3, #6
 8001a48:	f003 0301 	and.w	r3, r3, #1
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d022      	beq.n	8001a96 <I2C_Master_ISR_IT+0x21e>
  {
    if (hi2c->XferCount == 0U)
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d119      	bne.n	8001a8e <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a68:	d015      	beq.n	8001a96 <I2C_Master_ISR_IT+0x21e>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a6e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001a72:	d108      	bne.n	8001a86 <I2C_Master_ISR_IT+0x20e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	685a      	ldr	r2, [r3, #4]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a82:	605a      	str	r2, [r3, #4]
 8001a84:	e007      	b.n	8001a96 <I2C_Master_ISR_IT+0x21e>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8001a86:	68f8      	ldr	r0, [r7, #12]
 8001a88:	f000 fc20 	bl	80022cc <I2C_ITMasterSeqCplt>
 8001a8c:	e003      	b.n	8001a96 <I2C_Master_ISR_IT+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001a8e:	2140      	movs	r1, #64	; 0x40
 8001a90:	68f8      	ldr	r0, [r7, #12]
 8001a92:	f000 fee1 	bl	8002858 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	095b      	lsrs	r3, r3, #5
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d009      	beq.n	8001ab6 <I2C_Master_ISR_IT+0x23e>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	095b      	lsrs	r3, r3, #5
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d003      	beq.n	8001ab6 <I2C_Master_ISR_IT+0x23e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8001aae:	6979      	ldr	r1, [r7, #20]
 8001ab0:	68f8      	ldr	r0, [r7, #12]
 8001ab2:	f000 fca7 	bl	8002404 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3718      	adds	r7, #24
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad8:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d101      	bne.n	8001aec <I2C_Slave_ISR_IT+0x24>
 8001ae8:	2302      	movs	r3, #2
 8001aea:	e0ec      	b.n	8001cc6 <I2C_Slave_ISR_IT+0x1fe>
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2201      	movs	r2, #1
 8001af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	095b      	lsrs	r3, r3, #5
 8001af8:	f003 0301 	and.w	r3, r3, #1
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d009      	beq.n	8001b14 <I2C_Slave_ISR_IT+0x4c>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	095b      	lsrs	r3, r3, #5
 8001b04:	f003 0301 	and.w	r3, r3, #1
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d003      	beq.n	8001b14 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001b0c:	6939      	ldr	r1, [r7, #16]
 8001b0e:	68f8      	ldr	r0, [r7, #12]
 8001b10:	f000 fd42 	bl	8002598 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	091b      	lsrs	r3, r3, #4
 8001b18:	f003 0301 	and.w	r3, r3, #1
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d04d      	beq.n	8001bbc <I2C_Slave_ISR_IT+0xf4>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	091b      	lsrs	r3, r3, #4
 8001b24:	f003 0301 	and.w	r3, r3, #1
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d047      	beq.n	8001bbc <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d128      	bne.n	8001b88 <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	2b28      	cmp	r3, #40	; 0x28
 8001b40:	d108      	bne.n	8001b54 <I2C_Slave_ISR_IT+0x8c>
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001b48:	d104      	bne.n	8001b54 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001b4a:	6939      	ldr	r1, [r7, #16]
 8001b4c:	68f8      	ldr	r0, [r7, #12]
 8001b4e:	f000 fe2d 	bl	80027ac <I2C_ITListenCplt>
 8001b52:	e032      	b.n	8001bba <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	2b29      	cmp	r3, #41	; 0x29
 8001b5e:	d10e      	bne.n	8001b7e <I2C_Slave_ISR_IT+0xb6>
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001b66:	d00a      	beq.n	8001b7e <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2210      	movs	r2, #16
 8001b6e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001b70:	68f8      	ldr	r0, [r7, #12]
 8001b72:	f000 ff68 	bl	8002a46 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001b76:	68f8      	ldr	r0, [r7, #12]
 8001b78:	f000 fbe5 	bl	8002346 <I2C_ITSlaveSeqCplt>
 8001b7c:	e01d      	b.n	8001bba <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2210      	movs	r2, #16
 8001b84:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001b86:	e096      	b.n	8001cb6 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2210      	movs	r2, #16
 8001b8e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b94:	f043 0204 	orr.w	r2, r3, #4
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d004      	beq.n	8001bac <I2C_Slave_ISR_IT+0xe4>
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ba8:	f040 8085 	bne.w	8001cb6 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	68f8      	ldr	r0, [r7, #12]
 8001bb4:	f000 fe50 	bl	8002858 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001bb8:	e07d      	b.n	8001cb6 <I2C_Slave_ISR_IT+0x1ee>
 8001bba:	e07c      	b.n	8001cb6 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	089b      	lsrs	r3, r3, #2
 8001bc0:	f003 0301 	and.w	r3, r3, #1
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d030      	beq.n	8001c2a <I2C_Slave_ISR_IT+0x162>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	089b      	lsrs	r3, r3, #2
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d02a      	beq.n	8001c2a <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d018      	beq.n	8001c10 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be8:	b2d2      	uxtb	r2, r2
 8001bea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf0:	1c5a      	adds	r2, r3, #1
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	b29a      	uxth	r2, r3
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	3b01      	subs	r3, #1
 8001c0a:	b29a      	uxth	r2, r3
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d14f      	bne.n	8001cba <I2C_Slave_ISR_IT+0x1f2>
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001c20:	d04b      	beq.n	8001cba <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001c22:	68f8      	ldr	r0, [r7, #12]
 8001c24:	f000 fb8f 	bl	8002346 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001c28:	e047      	b.n	8001cba <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	08db      	lsrs	r3, r3, #3
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d00a      	beq.n	8001c4c <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	08db      	lsrs	r3, r3, #3
 8001c3a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d004      	beq.n	8001c4c <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001c42:	6939      	ldr	r1, [r7, #16]
 8001c44:	68f8      	ldr	r0, [r7, #12]
 8001c46:	f000 fabd 	bl	80021c4 <I2C_ITAddrCplt>
 8001c4a:	e037      	b.n	8001cbc <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	085b      	lsrs	r3, r3, #1
 8001c50:	f003 0301 	and.w	r3, r3, #1
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d031      	beq.n	8001cbc <I2C_Slave_ISR_IT+0x1f4>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	085b      	lsrs	r3, r3, #1
 8001c5c:	f003 0301 	and.w	r3, r3, #1
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d02b      	beq.n	8001cbc <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d018      	beq.n	8001ca0 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c72:	781a      	ldrb	r2, [r3, #0]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7e:	1c5a      	adds	r2, r3, #1
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	b29a      	uxth	r2, r3
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c96:	3b01      	subs	r3, #1
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	851a      	strh	r2, [r3, #40]	; 0x28
 8001c9e:	e00d      	b.n	8001cbc <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ca6:	d002      	beq.n	8001cae <I2C_Slave_ISR_IT+0x1e6>
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d106      	bne.n	8001cbc <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001cae:	68f8      	ldr	r0, [r7, #12]
 8001cb0:	f000 fb49 	bl	8002346 <I2C_ITSlaveSeqCplt>
 8001cb4:	e002      	b.n	8001cbc <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8001cb6:	bf00      	nop
 8001cb8:	e000      	b.n	8001cbc <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8001cba:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3718      	adds	r7, #24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b088      	sub	sp, #32
 8001cd2:	af02      	add	r7, sp, #8
 8001cd4:	60f8      	str	r0, [r7, #12]
 8001cd6:	60b9      	str	r1, [r7, #8]
 8001cd8:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d101      	bne.n	8001ce8 <I2C_Master_ISR_DMA+0x1a>
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	e0e1      	b.n	8001eac <I2C_Master_ISR_DMA+0x1de>
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	091b      	lsrs	r3, r3, #4
 8001cf4:	f003 0301 	and.w	r3, r3, #1
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d017      	beq.n	8001d2c <I2C_Master_ISR_DMA+0x5e>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	091b      	lsrs	r3, r3, #4
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d011      	beq.n	8001d2c <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2210      	movs	r2, #16
 8001d0e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d14:	f043 0204 	orr.w	r2, r3, #4
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8001d1c:	2120      	movs	r1, #32
 8001d1e:	68f8      	ldr	r0, [r7, #12]
 8001d20:	f001 f890 	bl	8002e44 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001d24:	68f8      	ldr	r0, [r7, #12]
 8001d26:	f000 fe8e 	bl	8002a46 <I2C_Flush_TXDR>
 8001d2a:	e0ba      	b.n	8001ea2 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	09db      	lsrs	r3, r3, #7
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d072      	beq.n	8001e1e <I2C_Master_ISR_DMA+0x150>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	099b      	lsrs	r3, r3, #6
 8001d3c:	f003 0301 	and.w	r3, r3, #1
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d06c      	beq.n	8001e1e <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d52:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d04e      	beq.n	8001dfc <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d6a:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	2bff      	cmp	r3, #255	; 0xff
 8001d74:	d906      	bls.n	8001d84 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	22ff      	movs	r2, #255	; 0xff
 8001d7a:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8001d7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d80:	617b      	str	r3, [r7, #20]
 8001d82:	e010      	b.n	8001da6 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d88:	b29a      	uxth	r2, r3
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d92:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001d96:	d003      	beq.n	8001da0 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d9c:	617b      	str	r3, [r7, #20]
 8001d9e:	e002      	b.n	8001da6 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8001da0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001da4:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001daa:	b2da      	uxtb	r2, r3
 8001dac:	8a79      	ldrh	r1, [r7, #18]
 8001dae:	2300      	movs	r3, #0
 8001db0:	9300      	str	r3, [sp, #0]
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	68f8      	ldr	r0, [r7, #12]
 8001db6:	f001 f817 	bl	8002de8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	b29a      	uxth	r2, r3
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	2b22      	cmp	r3, #34	; 0x22
 8001dd6:	d108      	bne.n	8001dea <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001de6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001de8:	e05b      	b.n	8001ea2 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001df8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001dfa:	e052      	b.n	8001ea2 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e06:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e0a:	d003      	beq.n	8001e14 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8001e0c:	68f8      	ldr	r0, [r7, #12]
 8001e0e:	f000 fa5d 	bl	80022cc <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8001e12:	e046      	b.n	8001ea2 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001e14:	2140      	movs	r1, #64	; 0x40
 8001e16:	68f8      	ldr	r0, [r7, #12]
 8001e18:	f000 fd1e 	bl	8002858 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8001e1c:	e041      	b.n	8001ea2 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	099b      	lsrs	r3, r3, #6
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d029      	beq.n	8001e7e <I2C_Master_ISR_DMA+0x1b0>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	099b      	lsrs	r3, r3, #6
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d023      	beq.n	8001e7e <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d119      	bne.n	8001e74 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e4e:	d027      	beq.n	8001ea0 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e54:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001e58:	d108      	bne.n	8001e6c <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	685a      	ldr	r2, [r3, #4]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e68:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8001e6a:	e019      	b.n	8001ea0 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8001e6c:	68f8      	ldr	r0, [r7, #12]
 8001e6e:	f000 fa2d 	bl	80022cc <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8001e72:	e015      	b.n	8001ea0 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001e74:	2140      	movs	r1, #64	; 0x40
 8001e76:	68f8      	ldr	r0, [r7, #12]
 8001e78:	f000 fcee 	bl	8002858 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001e7c:	e010      	b.n	8001ea0 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	095b      	lsrs	r3, r3, #5
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d00b      	beq.n	8001ea2 <I2C_Master_ISR_DMA+0x1d4>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	095b      	lsrs	r3, r3, #5
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d005      	beq.n	8001ea2 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8001e96:	68b9      	ldr	r1, [r7, #8]
 8001e98:	68f8      	ldr	r0, [r7, #12]
 8001e9a:	f000 fab3 	bl	8002404 <I2C_ITMasterCplt>
 8001e9e:	e000      	b.n	8001ea2 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8001ea0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3718      	adds	r7, #24
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b088      	sub	sp, #32
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec4:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d101      	bne.n	8001ed8 <I2C_Slave_ISR_DMA+0x24>
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	e0c9      	b.n	800206c <I2C_Slave_ISR_DMA+0x1b8>
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	095b      	lsrs	r3, r3, #5
 8001ee4:	f003 0301 	and.w	r3, r3, #1
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d009      	beq.n	8001f00 <I2C_Slave_ISR_DMA+0x4c>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	095b      	lsrs	r3, r3, #5
 8001ef0:	f003 0301 	and.w	r3, r3, #1
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d003      	beq.n	8001f00 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8001ef8:	68b9      	ldr	r1, [r7, #8]
 8001efa:	68f8      	ldr	r0, [r7, #12]
 8001efc:	f000 fb4c 	bl	8002598 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	091b      	lsrs	r3, r3, #4
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	f000 809a 	beq.w	8002042 <I2C_Slave_ISR_DMA+0x18e>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	091b      	lsrs	r3, r3, #4
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f000 8093 	beq.w	8002042 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	0b9b      	lsrs	r3, r3, #14
 8001f20:	f003 0301 	and.w	r3, r3, #1
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d105      	bne.n	8001f34 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	0bdb      	lsrs	r3, r3, #15
 8001f2c:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d07f      	beq.n	8002034 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d00d      	beq.n	8001f58 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	0bdb      	lsrs	r3, r3, #15
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d007      	beq.n	8001f58 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d101      	bne.n	8001f58 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8001f54:	2301      	movs	r3, #1
 8001f56:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d00d      	beq.n	8001f7c <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	0b9b      	lsrs	r3, r3, #14
 8001f64:	f003 0301 	and.w	r3, r3, #1
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d007      	beq.n	8001f7c <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d101      	bne.n	8001f7c <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d128      	bne.n	8001fd4 <I2C_Slave_ISR_DMA+0x120>
      {
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b28      	cmp	r3, #40	; 0x28
 8001f8c:	d108      	bne.n	8001fa0 <I2C_Slave_ISR_DMA+0xec>
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f94:	d104      	bne.n	8001fa0 <I2C_Slave_ISR_DMA+0xec>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8001f96:	68b9      	ldr	r1, [r7, #8]
 8001f98:	68f8      	ldr	r0, [r7, #12]
 8001f9a:	f000 fc07 	bl	80027ac <I2C_ITListenCplt>
 8001f9e:	e048      	b.n	8002032 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	2b29      	cmp	r3, #41	; 0x29
 8001faa:	d10e      	bne.n	8001fca <I2C_Slave_ISR_DMA+0x116>
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001fb2:	d00a      	beq.n	8001fca <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2210      	movs	r2, #16
 8001fba:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8001fbc:	68f8      	ldr	r0, [r7, #12]
 8001fbe:	f000 fd42 	bl	8002a46 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8001fc2:	68f8      	ldr	r0, [r7, #12]
 8001fc4:	f000 f9bf 	bl	8002346 <I2C_ITSlaveSeqCplt>
 8001fc8:	e033      	b.n	8002032 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2210      	movs	r2, #16
 8001fd0:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8001fd2:	e034      	b.n	800203e <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2210      	movs	r2, #16
 8001fda:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe0:	f043 0204 	orr.w	r2, r3, #4
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fee:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d003      	beq.n	8001ffe <I2C_Slave_ISR_DMA+0x14a>
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ffc:	d11f      	bne.n	800203e <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001ffe:	7dfb      	ldrb	r3, [r7, #23]
 8002000:	2b21      	cmp	r3, #33	; 0x21
 8002002:	d002      	beq.n	800200a <I2C_Slave_ISR_DMA+0x156>
 8002004:	7dfb      	ldrb	r3, [r7, #23]
 8002006:	2b29      	cmp	r3, #41	; 0x29
 8002008:	d103      	bne.n	8002012 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2221      	movs	r2, #33	; 0x21
 800200e:	631a      	str	r2, [r3, #48]	; 0x30
 8002010:	e008      	b.n	8002024 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002012:	7dfb      	ldrb	r3, [r7, #23]
 8002014:	2b22      	cmp	r3, #34	; 0x22
 8002016:	d002      	beq.n	800201e <I2C_Slave_ISR_DMA+0x16a>
 8002018:	7dfb      	ldrb	r3, [r7, #23]
 800201a:	2b2a      	cmp	r3, #42	; 0x2a
 800201c:	d102      	bne.n	8002024 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2222      	movs	r2, #34	; 0x22
 8002022:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002028:	4619      	mov	r1, r3
 800202a:	68f8      	ldr	r0, [r7, #12]
 800202c:	f000 fc14 	bl	8002858 <I2C_ITError>
      if (treatdmanack == 1U)
 8002030:	e005      	b.n	800203e <I2C_Slave_ISR_DMA+0x18a>
 8002032:	e004      	b.n	800203e <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2210      	movs	r2, #16
 800203a:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800203c:	e011      	b.n	8002062 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 800203e:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002040:	e00f      	b.n	8002062 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	08db      	lsrs	r3, r3, #3
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	2b00      	cmp	r3, #0
 800204c:	d009      	beq.n	8002062 <I2C_Slave_ISR_DMA+0x1ae>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	08db      	lsrs	r3, r3, #3
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	2b00      	cmp	r3, #0
 8002058:	d003      	beq.n	8002062 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800205a:	68b9      	ldr	r1, [r7, #8]
 800205c:	68f8      	ldr	r0, [r7, #12]
 800205e:	f000 f8b1 	bl	80021c4 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	3720      	adds	r7, #32
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af02      	add	r7, sp, #8
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	4608      	mov	r0, r1
 800207e:	4611      	mov	r1, r2
 8002080:	461a      	mov	r2, r3
 8002082:	4603      	mov	r3, r0
 8002084:	817b      	strh	r3, [r7, #10]
 8002086:	460b      	mov	r3, r1
 8002088:	813b      	strh	r3, [r7, #8]
 800208a:	4613      	mov	r3, r2
 800208c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800208e:	88fb      	ldrh	r3, [r7, #6]
 8002090:	b2da      	uxtb	r2, r3
 8002092:	8979      	ldrh	r1, [r7, #10]
 8002094:	4b20      	ldr	r3, [pc, #128]	; (8002118 <I2C_RequestMemoryWrite+0xa4>)
 8002096:	9300      	str	r3, [sp, #0]
 8002098:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800209c:	68f8      	ldr	r0, [r7, #12]
 800209e:	f000 fea3 	bl	8002de8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020a2:	69fa      	ldr	r2, [r7, #28]
 80020a4:	69b9      	ldr	r1, [r7, #24]
 80020a6:	68f8      	ldr	r0, [r7, #12]
 80020a8:	f000 fd4f 	bl	8002b4a <I2C_WaitOnTXISFlagUntilTimeout>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e02c      	b.n	8002110 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80020b6:	88fb      	ldrh	r3, [r7, #6]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d105      	bne.n	80020c8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80020bc:	893b      	ldrh	r3, [r7, #8]
 80020be:	b2da      	uxtb	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	629a      	str	r2, [r3, #40]	; 0x28
 80020c6:	e015      	b.n	80020f4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80020c8:	893b      	ldrh	r3, [r7, #8]
 80020ca:	0a1b      	lsrs	r3, r3, #8
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	b2da      	uxtb	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020d6:	69fa      	ldr	r2, [r7, #28]
 80020d8:	69b9      	ldr	r1, [r7, #24]
 80020da:	68f8      	ldr	r0, [r7, #12]
 80020dc:	f000 fd35 	bl	8002b4a <I2C_WaitOnTXISFlagUntilTimeout>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e012      	b.n	8002110 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80020ea:	893b      	ldrh	r3, [r7, #8]
 80020ec:	b2da      	uxtb	r2, r3
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	9300      	str	r3, [sp, #0]
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	2200      	movs	r2, #0
 80020fc:	2180      	movs	r1, #128	; 0x80
 80020fe:	68f8      	ldr	r0, [r7, #12]
 8002100:	f000 fce3 	bl	8002aca <I2C_WaitOnFlagUntilTimeout>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e000      	b.n	8002110 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800210e:	2300      	movs	r3, #0
}
 8002110:	4618      	mov	r0, r3
 8002112:	3710      	adds	r7, #16
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	80002000 	.word	0x80002000

0800211c <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af02      	add	r7, sp, #8
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	4608      	mov	r0, r1
 8002126:	4611      	mov	r1, r2
 8002128:	461a      	mov	r2, r3
 800212a:	4603      	mov	r3, r0
 800212c:	817b      	strh	r3, [r7, #10]
 800212e:	460b      	mov	r3, r1
 8002130:	813b      	strh	r3, [r7, #8]
 8002132:	4613      	mov	r3, r2
 8002134:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002136:	88fb      	ldrh	r3, [r7, #6]
 8002138:	b2da      	uxtb	r2, r3
 800213a:	8979      	ldrh	r1, [r7, #10]
 800213c:	4b20      	ldr	r3, [pc, #128]	; (80021c0 <I2C_RequestMemoryRead+0xa4>)
 800213e:	9300      	str	r3, [sp, #0]
 8002140:	2300      	movs	r3, #0
 8002142:	68f8      	ldr	r0, [r7, #12]
 8002144:	f000 fe50 	bl	8002de8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002148:	69fa      	ldr	r2, [r7, #28]
 800214a:	69b9      	ldr	r1, [r7, #24]
 800214c:	68f8      	ldr	r0, [r7, #12]
 800214e:	f000 fcfc 	bl	8002b4a <I2C_WaitOnTXISFlagUntilTimeout>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e02c      	b.n	80021b6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800215c:	88fb      	ldrh	r3, [r7, #6]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d105      	bne.n	800216e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002162:	893b      	ldrh	r3, [r7, #8]
 8002164:	b2da      	uxtb	r2, r3
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	629a      	str	r2, [r3, #40]	; 0x28
 800216c:	e015      	b.n	800219a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800216e:	893b      	ldrh	r3, [r7, #8]
 8002170:	0a1b      	lsrs	r3, r3, #8
 8002172:	b29b      	uxth	r3, r3
 8002174:	b2da      	uxtb	r2, r3
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800217c:	69fa      	ldr	r2, [r7, #28]
 800217e:	69b9      	ldr	r1, [r7, #24]
 8002180:	68f8      	ldr	r0, [r7, #12]
 8002182:	f000 fce2 	bl	8002b4a <I2C_WaitOnTXISFlagUntilTimeout>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e012      	b.n	80021b6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002190:	893b      	ldrh	r3, [r7, #8]
 8002192:	b2da      	uxtb	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	9300      	str	r3, [sp, #0]
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	2200      	movs	r2, #0
 80021a2:	2140      	movs	r1, #64	; 0x40
 80021a4:	68f8      	ldr	r0, [r7, #12]
 80021a6:	f000 fc90 	bl	8002aca <I2C_WaitOnFlagUntilTimeout>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e000      	b.n	80021b6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	80002000 	.word	0x80002000

080021c4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80021da:	2b28      	cmp	r3, #40	; 0x28
 80021dc:	d16a      	bne.n	80022b4 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	0c1b      	lsrs	r3, r3, #16
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	f003 0301 	and.w	r3, r3, #1
 80021ec:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	0c1b      	lsrs	r3, r3, #16
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80021fc:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	b29b      	uxth	r3, r3
 8002206:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800220a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	b29b      	uxth	r3, r3
 8002214:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002218:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	2b02      	cmp	r3, #2
 8002220:	d138      	bne.n	8002294 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8002222:	897b      	ldrh	r3, [r7, #10]
 8002224:	09db      	lsrs	r3, r3, #7
 8002226:	b29a      	uxth	r2, r3
 8002228:	89bb      	ldrh	r3, [r7, #12]
 800222a:	4053      	eors	r3, r2
 800222c:	b29b      	uxth	r3, r3
 800222e:	f003 0306 	and.w	r3, r3, #6
 8002232:	2b00      	cmp	r3, #0
 8002234:	d11c      	bne.n	8002270 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002236:	897b      	ldrh	r3, [r7, #10]
 8002238:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800223e:	1c5a      	adds	r2, r3, #1
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002248:	2b02      	cmp	r3, #2
 800224a:	d13b      	bne.n	80022c4 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2208      	movs	r2, #8
 8002258:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002262:	89ba      	ldrh	r2, [r7, #12]
 8002264:	7bfb      	ldrb	r3, [r7, #15]
 8002266:	4619      	mov	r1, r3
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f7ff fac5 	bl	80017f8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800226e:	e029      	b.n	80022c4 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002270:	893b      	ldrh	r3, [r7, #8]
 8002272:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002274:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f000 fe47 	bl	8002f0c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002286:	89ba      	ldrh	r2, [r7, #12]
 8002288:	7bfb      	ldrb	r3, [r7, #15]
 800228a:	4619      	mov	r1, r3
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f7ff fab3 	bl	80017f8 <HAL_I2C_AddrCallback>
}
 8002292:	e017      	b.n	80022c4 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002294:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f000 fe37 	bl	8002f0c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80022a6:	89ba      	ldrh	r2, [r7, #12]
 80022a8:	7bfb      	ldrb	r3, [r7, #15]
 80022aa:	4619      	mov	r1, r3
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f7ff faa3 	bl	80017f8 <HAL_I2C_AddrCallback>
}
 80022b2:	e007      	b.n	80022c4 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2208      	movs	r2, #8
 80022ba:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80022c4:	bf00      	nop
 80022c6:	3710      	adds	r7, #16
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	2b21      	cmp	r3, #33	; 0x21
 80022e6:	d115      	bne.n	8002314 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2220      	movs	r2, #32
 80022ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2211      	movs	r2, #17
 80022f4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80022fc:	2101      	movs	r1, #1
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 fe04 	bl	8002f0c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f7ff fa4b 	bl	80017a8 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002312:	e014      	b.n	800233e <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2220      	movs	r2, #32
 8002318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2212      	movs	r2, #18
 8002320:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002328:	2102      	movs	r1, #2
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f000 fdee 	bl	8002f0c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f7ff fa3f 	bl	80017bc <HAL_I2C_MasterRxCpltCallback>
}
 800233e:	bf00      	nop
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b084      	sub	sp, #16
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	0b9b      	lsrs	r3, r3, #14
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	2b00      	cmp	r3, #0
 8002368:	d008      	beq.n	800237c <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002378:	601a      	str	r2, [r3, #0]
 800237a:	e00d      	b.n	8002398 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	0bdb      	lsrs	r3, r3, #15
 8002380:	f003 0301 	and.w	r3, r3, #1
 8002384:	2b00      	cmp	r3, #0
 8002386:	d007      	beq.n	8002398 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002396:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	2b29      	cmp	r3, #41	; 0x29
 80023a2:	d112      	bne.n	80023ca <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2228      	movs	r2, #40	; 0x28
 80023a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2221      	movs	r2, #33	; 0x21
 80023b0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80023b2:	2101      	movs	r1, #1
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f000 fda9 	bl	8002f0c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f7ff fa04 	bl	80017d0 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80023c8:	e017      	b.n	80023fa <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b2a      	cmp	r3, #42	; 0x2a
 80023d4:	d111      	bne.n	80023fa <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2228      	movs	r2, #40	; 0x28
 80023da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2222      	movs	r2, #34	; 0x22
 80023e2:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80023e4:	2102      	movs	r1, #2
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f000 fd90 	bl	8002f0c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f7ff f9f5 	bl	80017e4 <HAL_I2C_SlaveRxCpltCallback>
}
 80023fa:	bf00      	nop
 80023fc:	3710      	adds	r7, #16
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
	...

08002404 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b086      	sub	sp, #24
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2220      	movs	r2, #32
 8002418:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002420:	b2db      	uxtb	r3, r3
 8002422:	2b21      	cmp	r3, #33	; 0x21
 8002424:	d107      	bne.n	8002436 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002426:	2101      	movs	r1, #1
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f000 fd6f 	bl	8002f0c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2211      	movs	r2, #17
 8002432:	631a      	str	r2, [r3, #48]	; 0x30
 8002434:	e00c      	b.n	8002450 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b22      	cmp	r3, #34	; 0x22
 8002440:	d106      	bne.n	8002450 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002442:	2102      	movs	r1, #2
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f000 fd61 	bl	8002f0c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2212      	movs	r2, #18
 800244e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	6859      	ldr	r1, [r3, #4]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	4b4d      	ldr	r3, [pc, #308]	; (8002590 <I2C_ITMasterCplt+0x18c>)
 800245c:	400b      	ands	r3, r1
 800245e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a4a      	ldr	r2, [pc, #296]	; (8002594 <I2C_ITMasterCplt+0x190>)
 800246a:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	091b      	lsrs	r3, r3, #4
 8002470:	f003 0301 	and.w	r3, r3, #1
 8002474:	2b00      	cmp	r3, #0
 8002476:	d009      	beq.n	800248c <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2210      	movs	r2, #16
 800247e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002484:	f043 0204 	orr.w	r2, r3, #4
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002492:	b2db      	uxtb	r3, r3
 8002494:	2b60      	cmp	r3, #96	; 0x60
 8002496:	d10b      	bne.n	80024b0 <I2C_ITMasterCplt+0xac>
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	089b      	lsrs	r3, r3, #2
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d005      	beq.n	80024b0 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80024ae:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f000 fac8 	bl	8002a46 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ba:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	2b60      	cmp	r3, #96	; 0x60
 80024c6:	d002      	beq.n	80024ce <I2C_ITMasterCplt+0xca>
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d006      	beq.n	80024dc <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d2:	4619      	mov	r1, r3
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f000 f9bf 	bl	8002858 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80024da:	e054      	b.n	8002586 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2b21      	cmp	r3, #33	; 0x21
 80024e6:	d124      	bne.n	8002532 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2220      	movs	r2, #32
 80024ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b40      	cmp	r3, #64	; 0x40
 8002500:	d10b      	bne.n	800251a <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f7ff f988 	bl	8001828 <HAL_I2C_MemTxCpltCallback>
}
 8002518:	e035      	b.n	8002586 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f7ff f93c 	bl	80017a8 <HAL_I2C_MasterTxCpltCallback>
}
 8002530:	e029      	b.n	8002586 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b22      	cmp	r3, #34	; 0x22
 800253c:	d123      	bne.n	8002586 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2220      	movs	r2, #32
 8002542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002552:	b2db      	uxtb	r3, r3
 8002554:	2b40      	cmp	r3, #64	; 0x40
 8002556:	d10b      	bne.n	8002570 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f7ff f967 	bl	800183c <HAL_I2C_MemRxCpltCallback>
}
 800256e:	e00a      	b.n	8002586 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f7ff f91b 	bl	80017bc <HAL_I2C_MasterRxCpltCallback>
}
 8002586:	bf00      	nop
 8002588:	3718      	adds	r7, #24
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	fe00e800 	.word	0xfe00e800
 8002594:	ffff0000 	.word	0xffff0000

08002598 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025b4:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2220      	movs	r2, #32
 80025bc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80025be:	7bfb      	ldrb	r3, [r7, #15]
 80025c0:	2b21      	cmp	r3, #33	; 0x21
 80025c2:	d002      	beq.n	80025ca <I2C_ITSlaveCplt+0x32>
 80025c4:	7bfb      	ldrb	r3, [r7, #15]
 80025c6:	2b29      	cmp	r3, #41	; 0x29
 80025c8:	d108      	bne.n	80025dc <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80025ca:	f248 0101 	movw	r1, #32769	; 0x8001
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 fc9c 	bl	8002f0c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2221      	movs	r2, #33	; 0x21
 80025d8:	631a      	str	r2, [r3, #48]	; 0x30
 80025da:	e00d      	b.n	80025f8 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80025dc:	7bfb      	ldrb	r3, [r7, #15]
 80025de:	2b22      	cmp	r3, #34	; 0x22
 80025e0:	d002      	beq.n	80025e8 <I2C_ITSlaveCplt+0x50>
 80025e2:	7bfb      	ldrb	r3, [r7, #15]
 80025e4:	2b2a      	cmp	r3, #42	; 0x2a
 80025e6:	d107      	bne.n	80025f8 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80025e8:	f248 0102 	movw	r1, #32770	; 0x8002
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f000 fc8d 	bl	8002f0c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2222      	movs	r2, #34	; 0x22
 80025f6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	685a      	ldr	r2, [r3, #4]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002606:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	6859      	ldr	r1, [r3, #4]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	4b64      	ldr	r3, [pc, #400]	; (80027a4 <I2C_ITSlaveCplt+0x20c>)
 8002614:	400b      	ands	r3, r1
 8002616:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f000 fa14 	bl	8002a46 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	0b9b      	lsrs	r3, r3, #14
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b00      	cmp	r3, #0
 8002628:	d013      	beq.n	8002652 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002638:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800263e:	2b00      	cmp	r3, #0
 8002640:	d020      	beq.n	8002684 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	b29a      	uxth	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002650:	e018      	b.n	8002684 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	0bdb      	lsrs	r3, r3, #15
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	2b00      	cmp	r3, #0
 800265c:	d012      	beq.n	8002684 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800266c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002672:	2b00      	cmp	r3, #0
 8002674:	d006      	beq.n	8002684 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	b29a      	uxth	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	089b      	lsrs	r3, r3, #2
 8002688:	f003 0301 	and.w	r3, r3, #1
 800268c:	2b00      	cmp	r3, #0
 800268e:	d020      	beq.n	80026d2 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	f023 0304 	bic.w	r3, r3, #4
 8002696:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a2:	b2d2      	uxtb	r2, r2
 80026a4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026aa:	1c5a      	adds	r2, r3, #1
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d00c      	beq.n	80026d2 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026bc:	3b01      	subs	r3, #1
 80026be:	b29a      	uxth	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	3b01      	subs	r3, #1
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d005      	beq.n	80026e8 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e0:	f043 0204 	orr.w	r2, r3, #4
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d010      	beq.n	8002720 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002702:	4619      	mov	r1, r3
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f000 f8a7 	bl	8002858 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b28      	cmp	r3, #40	; 0x28
 8002714:	d141      	bne.n	800279a <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002716:	6979      	ldr	r1, [r7, #20]
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f000 f847 	bl	80027ac <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800271e:	e03c      	b.n	800279a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002724:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002728:	d014      	beq.n	8002754 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f7ff fe0b 	bl	8002346 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4a1d      	ldr	r2, [pc, #116]	; (80027a8 <I2C_ITSlaveCplt+0x210>)
 8002734:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2220      	movs	r2, #32
 800273a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f7ff f861 	bl	8001814 <HAL_I2C_ListenCpltCallback>
}
 8002752:	e022      	b.n	800279a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800275a:	b2db      	uxtb	r3, r3
 800275c:	2b22      	cmp	r3, #34	; 0x22
 800275e:	d10e      	bne.n	800277e <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2220      	movs	r2, #32
 8002764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f7ff f834 	bl	80017e4 <HAL_I2C_SlaveRxCpltCallback>
}
 800277c:	e00d      	b.n	800279a <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2220      	movs	r2, #32
 8002782:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f7ff f81b 	bl	80017d0 <HAL_I2C_SlaveTxCpltCallback>
}
 800279a:	bf00      	nop
 800279c:	3718      	adds	r7, #24
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	fe00e800 	.word	0xfe00e800
 80027a8:	ffff0000 	.word	0xffff0000

080027ac <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a26      	ldr	r2, [pc, #152]	; (8002854 <I2C_ITListenCplt+0xa8>)
 80027ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2220      	movs	r2, #32
 80027c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	089b      	lsrs	r3, r3, #2
 80027dc:	f003 0301 	and.w	r3, r3, #1
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d022      	beq.n	800282a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ee:	b2d2      	uxtb	r2, r2
 80027f0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f6:	1c5a      	adds	r2, r3, #1
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002800:	2b00      	cmp	r3, #0
 8002802:	d012      	beq.n	800282a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002808:	3b01      	subs	r3, #1
 800280a:	b29a      	uxth	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002814:	b29b      	uxth	r3, r3
 8002816:	3b01      	subs	r3, #1
 8002818:	b29a      	uxth	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002822:	f043 0204 	orr.w	r2, r3, #4
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800282a:	f248 0103 	movw	r1, #32771	; 0x8003
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 fb6c 	bl	8002f0c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2210      	movs	r2, #16
 800283a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f7fe ffe5 	bl	8001814 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800284a:	bf00      	nop
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	ffff0000 	.word	0xffff0000

08002858 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002868:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a5d      	ldr	r2, [pc, #372]	; (80029ec <I2C_ITError+0x194>)
 8002876:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	431a      	orrs	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800288a:	7bfb      	ldrb	r3, [r7, #15]
 800288c:	2b28      	cmp	r3, #40	; 0x28
 800288e:	d005      	beq.n	800289c <I2C_ITError+0x44>
 8002890:	7bfb      	ldrb	r3, [r7, #15]
 8002892:	2b29      	cmp	r3, #41	; 0x29
 8002894:	d002      	beq.n	800289c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002896:	7bfb      	ldrb	r3, [r7, #15]
 8002898:	2b2a      	cmp	r3, #42	; 0x2a
 800289a:	d10b      	bne.n	80028b4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800289c:	2103      	movs	r1, #3
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 fb34 	bl	8002f0c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2228      	movs	r2, #40	; 0x28
 80028a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	4a50      	ldr	r2, [pc, #320]	; (80029f0 <I2C_ITError+0x198>)
 80028b0:	635a      	str	r2, [r3, #52]	; 0x34
 80028b2:	e011      	b.n	80028d8 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80028b4:	f248 0103 	movw	r1, #32771	; 0x8003
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f000 fb27 	bl	8002f0c <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b60      	cmp	r3, #96	; 0x60
 80028c8:	d003      	beq.n	80028d2 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2220      	movs	r2, #32
 80028ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028dc:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d039      	beq.n	800295a <I2C_ITError+0x102>
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	2b11      	cmp	r3, #17
 80028ea:	d002      	beq.n	80028f2 <I2C_ITError+0x9a>
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	2b21      	cmp	r3, #33	; 0x21
 80028f0:	d133      	bne.n	800295a <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002900:	d107      	bne.n	8002912 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002910:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002916:	4618      	mov	r0, r3
 8002918:	f7fe f968 	bl	8000bec <HAL_DMA_GetState>
 800291c:	4603      	mov	r3, r0
 800291e:	2b01      	cmp	r3, #1
 8002920:	d017      	beq.n	8002952 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002926:	4a33      	ldr	r2, [pc, #204]	; (80029f4 <I2C_ITError+0x19c>)
 8002928:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002936:	4618      	mov	r0, r3
 8002938:	f7fe f917 	bl	8000b6a <HAL_DMA_Abort_IT>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d04d      	beq.n	80029de <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800294c:	4610      	mov	r0, r2
 800294e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002950:	e045      	b.n	80029de <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 f850 	bl	80029f8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002958:	e041      	b.n	80029de <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800295e:	2b00      	cmp	r3, #0
 8002960:	d039      	beq.n	80029d6 <I2C_ITError+0x17e>
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	2b12      	cmp	r3, #18
 8002966:	d002      	beq.n	800296e <I2C_ITError+0x116>
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	2b22      	cmp	r3, #34	; 0x22
 800296c:	d133      	bne.n	80029d6 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002978:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800297c:	d107      	bne.n	800298e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800298c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002992:	4618      	mov	r0, r3
 8002994:	f7fe f92a 	bl	8000bec <HAL_DMA_GetState>
 8002998:	4603      	mov	r3, r0
 800299a:	2b01      	cmp	r3, #1
 800299c:	d017      	beq.n	80029ce <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a2:	4a14      	ldr	r2, [pc, #80]	; (80029f4 <I2C_ITError+0x19c>)
 80029a4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7fe f8d9 	bl	8000b6a <HAL_DMA_Abort_IT>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d011      	beq.n	80029e2 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80029c8:	4610      	mov	r0, r2
 80029ca:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80029cc:	e009      	b.n	80029e2 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 f812 	bl	80029f8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80029d4:	e005      	b.n	80029e2 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 f80e 	bl	80029f8 <I2C_TreatErrorCallback>
  }
}
 80029dc:	e002      	b.n	80029e4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80029de:	bf00      	nop
 80029e0:	e000      	b.n	80029e4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80029e2:	bf00      	nop
}
 80029e4:	bf00      	nop
 80029e6:	3710      	adds	r7, #16
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	ffff0000 	.word	0xffff0000
 80029f0:	08001ac9 	.word	0x08001ac9
 80029f4:	08002a8f 	.word	0x08002a8f

080029f8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	2b60      	cmp	r3, #96	; 0x60
 8002a0a:	d10e      	bne.n	8002a2a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2220      	movs	r2, #32
 8002a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f7fe ff1e 	bl	8001864 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002a28:	e009      	b.n	8002a3e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f7fe ff09 	bl	8001850 <HAL_I2C_ErrorCallback>
}
 8002a3e:	bf00      	nop
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002a46:	b480      	push	{r7}
 8002a48:	b083      	sub	sp, #12
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	f003 0302 	and.w	r3, r3, #2
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d103      	bne.n	8002a64 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2200      	movs	r2, #0
 8002a62:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d007      	beq.n	8002a82 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	699a      	ldr	r2, [r3, #24]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f042 0201 	orr.w	r2, r2, #1
 8002a80:	619a      	str	r2, [r3, #24]
  }
}
 8002a82:	bf00      	nop
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr

08002a8e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b084      	sub	sp, #16
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d003      	beq.n	8002aac <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d003      	beq.n	8002abc <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab8:	2200      	movs	r2, #0
 8002aba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8002abc:	68f8      	ldr	r0, [r7, #12]
 8002abe:	f7ff ff9b 	bl	80029f8 <I2C_TreatErrorCallback>
}
 8002ac2:	bf00      	nop
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b084      	sub	sp, #16
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	60f8      	str	r0, [r7, #12]
 8002ad2:	60b9      	str	r1, [r7, #8]
 8002ad4:	603b      	str	r3, [r7, #0]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ada:	e022      	b.n	8002b22 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ae2:	d01e      	beq.n	8002b22 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ae4:	f7fd ff00 	bl	80008e8 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	683a      	ldr	r2, [r7, #0]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d302      	bcc.n	8002afa <I2C_WaitOnFlagUntilTimeout+0x30>
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d113      	bne.n	8002b22 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afe:	f043 0220 	orr.w	r2, r3, #32
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2220      	movs	r2, #32
 8002b0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e00f      	b.n	8002b42 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	699a      	ldr	r2, [r3, #24]
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	68ba      	ldr	r2, [r7, #8]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	bf0c      	ite	eq
 8002b32:	2301      	moveq	r3, #1
 8002b34:	2300      	movne	r3, #0
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	461a      	mov	r2, r3
 8002b3a:	79fb      	ldrb	r3, [r7, #7]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d0cd      	beq.n	8002adc <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	b084      	sub	sp, #16
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	60f8      	str	r0, [r7, #12]
 8002b52:	60b9      	str	r1, [r7, #8]
 8002b54:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b56:	e02c      	b.n	8002bb2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	68b9      	ldr	r1, [r7, #8]
 8002b5c:	68f8      	ldr	r0, [r7, #12]
 8002b5e:	f000 f8dd 	bl	8002d1c <I2C_IsAcknowledgeFailed>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d001      	beq.n	8002b6c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e02a      	b.n	8002bc2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b72:	d01e      	beq.n	8002bb2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b74:	f7fd feb8 	bl	80008e8 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	68ba      	ldr	r2, [r7, #8]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d302      	bcc.n	8002b8a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d113      	bne.n	8002bb2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8e:	f043 0220 	orr.w	r2, r3, #32
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2220      	movs	r2, #32
 8002b9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e007      	b.n	8002bc2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d1cb      	bne.n	8002b58 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b084      	sub	sp, #16
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	60f8      	str	r0, [r7, #12]
 8002bd2:	60b9      	str	r1, [r7, #8]
 8002bd4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bd6:	e028      	b.n	8002c2a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	68b9      	ldr	r1, [r7, #8]
 8002bdc:	68f8      	ldr	r0, [r7, #12]
 8002bde:	f000 f89d 	bl	8002d1c <I2C_IsAcknowledgeFailed>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d001      	beq.n	8002bec <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e026      	b.n	8002c3a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bec:	f7fd fe7c 	bl	80008e8 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	68ba      	ldr	r2, [r7, #8]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d302      	bcc.n	8002c02 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d113      	bne.n	8002c2a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c06:	f043 0220 	orr.w	r2, r3, #32
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2220      	movs	r2, #32
 8002c12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e007      	b.n	8002c3a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	f003 0320 	and.w	r3, r3, #32
 8002c34:	2b20      	cmp	r3, #32
 8002c36:	d1cf      	bne.n	8002bd8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3710      	adds	r7, #16
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
	...

08002c44 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c50:	e055      	b.n	8002cfe <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	68b9      	ldr	r1, [r7, #8]
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f000 f860 	bl	8002d1c <I2C_IsAcknowledgeFailed>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e053      	b.n	8002d0e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	f003 0320 	and.w	r3, r3, #32
 8002c70:	2b20      	cmp	r3, #32
 8002c72:	d129      	bne.n	8002cc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	699b      	ldr	r3, [r3, #24]
 8002c7a:	f003 0304 	and.w	r3, r3, #4
 8002c7e:	2b04      	cmp	r3, #4
 8002c80:	d105      	bne.n	8002c8e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	e03f      	b.n	8002d0e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2220      	movs	r2, #32
 8002c94:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	6859      	ldr	r1, [r3, #4]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	4b1d      	ldr	r3, [pc, #116]	; (8002d18 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8002ca2:	400b      	ands	r3, r1
 8002ca4:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2220      	movs	r2, #32
 8002cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e022      	b.n	8002d0e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cc8:	f7fd fe0e 	bl	80008e8 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	68ba      	ldr	r2, [r7, #8]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d302      	bcc.n	8002cde <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d10f      	bne.n	8002cfe <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce2:	f043 0220 	orr.w	r2, r3, #32
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2220      	movs	r2, #32
 8002cee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e007      	b.n	8002d0e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	f003 0304 	and.w	r3, r3, #4
 8002d08:	2b04      	cmp	r3, #4
 8002d0a:	d1a2      	bne.n	8002c52 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3710      	adds	r7, #16
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	fe00e800 	.word	0xfe00e800

08002d1c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	699b      	ldr	r3, [r3, #24]
 8002d2e:	f003 0310 	and.w	r3, r3, #16
 8002d32:	2b10      	cmp	r3, #16
 8002d34:	d151      	bne.n	8002dda <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d36:	e022      	b.n	8002d7e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d3e:	d01e      	beq.n	8002d7e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d40:	f7fd fdd2 	bl	80008e8 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	68ba      	ldr	r2, [r7, #8]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d302      	bcc.n	8002d56 <I2C_IsAcknowledgeFailed+0x3a>
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d113      	bne.n	8002d7e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5a:	f043 0220 	orr.w	r2, r3, #32
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2220      	movs	r2, #32
 8002d66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e02e      	b.n	8002ddc <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	699b      	ldr	r3, [r3, #24]
 8002d84:	f003 0320 	and.w	r3, r3, #32
 8002d88:	2b20      	cmp	r3, #32
 8002d8a:	d1d5      	bne.n	8002d38 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2210      	movs	r2, #16
 8002d92:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2220      	movs	r2, #32
 8002d9a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002d9c:	68f8      	ldr	r0, [r7, #12]
 8002d9e:	f7ff fe52 	bl	8002a46 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	6859      	ldr	r1, [r3, #4]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	4b0d      	ldr	r3, [pc, #52]	; (8002de4 <I2C_IsAcknowledgeFailed+0xc8>)
 8002dae:	400b      	ands	r3, r1
 8002db0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db6:	f043 0204 	orr.w	r2, r3, #4
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2220      	movs	r2, #32
 8002dc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e000      	b.n	8002ddc <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002dda:	2300      	movs	r3, #0
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3710      	adds	r7, #16
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	fe00e800 	.word	0xfe00e800

08002de8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	607b      	str	r3, [r7, #4]
 8002df2:	460b      	mov	r3, r1
 8002df4:	817b      	strh	r3, [r7, #10]
 8002df6:	4613      	mov	r3, r2
 8002df8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	685a      	ldr	r2, [r3, #4]
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	0d5b      	lsrs	r3, r3, #21
 8002e04:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002e08:	4b0d      	ldr	r3, [pc, #52]	; (8002e40 <I2C_TransferConfig+0x58>)
 8002e0a:	430b      	orrs	r3, r1
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	ea02 0103 	and.w	r1, r2, r3
 8002e12:	897b      	ldrh	r3, [r7, #10]
 8002e14:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002e18:	7a7b      	ldrb	r3, [r7, #9]
 8002e1a:	041b      	lsls	r3, r3, #16
 8002e1c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002e20:	431a      	orrs	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	431a      	orrs	r2, r3
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	431a      	orrs	r2, r3
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002e32:	bf00      	nop
 8002e34:	3714      	adds	r7, #20
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	03ff63ff 	.word	0x03ff63ff

08002e44 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002e50:	2300      	movs	r3, #0
 8002e52:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e58:	4a2a      	ldr	r2, [pc, #168]	; (8002f04 <I2C_Enable_IRQ+0xc0>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d004      	beq.n	8002e68 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8002e62:	4a29      	ldr	r2, [pc, #164]	; (8002f08 <I2C_Enable_IRQ+0xc4>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d11d      	bne.n	8002ea4 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002e68:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	da03      	bge.n	8002e78 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8002e76:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002e78:	887b      	ldrh	r3, [r7, #2]
 8002e7a:	2b10      	cmp	r3, #16
 8002e7c:	d103      	bne.n	8002e86 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8002e84:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002e86:	887b      	ldrh	r3, [r7, #2]
 8002e88:	2b20      	cmp	r3, #32
 8002e8a:	d103      	bne.n	8002e94 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002e92:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002e94:	887b      	ldrh	r3, [r7, #2]
 8002e96:	2b40      	cmp	r3, #64	; 0x40
 8002e98:	d125      	bne.n	8002ee6 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ea0:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002ea2:	e020      	b.n	8002ee6 <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002ea4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	da03      	bge.n	8002eb4 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8002eb2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002eb4:	887b      	ldrh	r3, [r7, #2]
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d003      	beq.n	8002ec6 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8002ec4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002ec6:	887b      	ldrh	r3, [r7, #2]
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d003      	beq.n	8002ed8 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8002ed6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002ed8:	887b      	ldrh	r3, [r7, #2]
 8002eda:	2b20      	cmp	r3, #32
 8002edc:	d103      	bne.n	8002ee6 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f043 0320 	orr.w	r3, r3, #32
 8002ee4:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	6819      	ldr	r1, [r3, #0]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68fa      	ldr	r2, [r7, #12]
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	601a      	str	r2, [r3, #0]
}
 8002ef6:	bf00      	nop
 8002ef8:	3714      	adds	r7, #20
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	08001ccf 	.word	0x08001ccf
 8002f08:	08001eb5 	.word	0x08001eb5

08002f0c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b085      	sub	sp, #20
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	460b      	mov	r3, r1
 8002f16:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002f1c:	887b      	ldrh	r3, [r7, #2]
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00f      	beq.n	8002f46 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8002f2c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002f3a:	2b28      	cmp	r3, #40	; 0x28
 8002f3c:	d003      	beq.n	8002f46 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002f44:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002f46:	887b      	ldrh	r3, [r7, #2]
 8002f48:	f003 0302 	and.w	r3, r3, #2
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00f      	beq.n	8002f70 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8002f56:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002f64:	2b28      	cmp	r3, #40	; 0x28
 8002f66:	d003      	beq.n	8002f70 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002f6e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002f70:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	da03      	bge.n	8002f80 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8002f7e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002f80:	887b      	ldrh	r3, [r7, #2]
 8002f82:	2b10      	cmp	r3, #16
 8002f84:	d103      	bne.n	8002f8e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8002f8c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002f8e:	887b      	ldrh	r3, [r7, #2]
 8002f90:	2b20      	cmp	r3, #32
 8002f92:	d103      	bne.n	8002f9c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f043 0320 	orr.w	r3, r3, #32
 8002f9a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002f9c:	887b      	ldrh	r3, [r7, #2]
 8002f9e:	2b40      	cmp	r3, #64	; 0x40
 8002fa0:	d103      	bne.n	8002faa <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fa8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	6819      	ldr	r1, [r3, #0]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	43da      	mvns	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	400a      	ands	r2, r1
 8002fba:	601a      	str	r2, [r3, #0]
}
 8002fbc:	bf00      	nop
 8002fbe:	3714      	adds	r7, #20
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b20      	cmp	r3, #32
 8002fdc:	d138      	bne.n	8003050 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d101      	bne.n	8002fec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002fe8:	2302      	movs	r3, #2
 8002fea:	e032      	b.n	8003052 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2224      	movs	r2, #36	; 0x24
 8002ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f022 0201 	bic.w	r2, r2, #1
 800300a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800301a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	6819      	ldr	r1, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	683a      	ldr	r2, [r7, #0]
 8003028:	430a      	orrs	r2, r1
 800302a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f042 0201 	orr.w	r2, r2, #1
 800303a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2220      	movs	r2, #32
 8003040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800304c:	2300      	movs	r3, #0
 800304e:	e000      	b.n	8003052 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003050:	2302      	movs	r3, #2
  }
}
 8003052:	4618      	mov	r0, r3
 8003054:	370c      	adds	r7, #12
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr

0800305e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800305e:	b480      	push	{r7}
 8003060:	b085      	sub	sp, #20
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
 8003066:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800306e:	b2db      	uxtb	r3, r3
 8003070:	2b20      	cmp	r3, #32
 8003072:	d139      	bne.n	80030e8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800307a:	2b01      	cmp	r3, #1
 800307c:	d101      	bne.n	8003082 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800307e:	2302      	movs	r3, #2
 8003080:	e033      	b.n	80030ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2201      	movs	r2, #1
 8003086:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2224      	movs	r2, #36	; 0x24
 800308e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f022 0201 	bic.w	r2, r2, #1
 80030a0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80030b0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	021b      	lsls	r3, r3, #8
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	68fa      	ldr	r2, [r7, #12]
 80030c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f042 0201 	orr.w	r2, r2, #1
 80030d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2220      	movs	r2, #32
 80030d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030e4:	2300      	movs	r3, #0
 80030e6:	e000      	b.n	80030ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80030e8:	2302      	movs	r3, #2
  }
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3714      	adds	r7, #20
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
	...

080030f8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80030f8:	b480      	push	{r7}
 80030fa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80030fc:	4b04      	ldr	r3, [pc, #16]	; (8003110 <HAL_PWREx_GetVoltageRange+0x18>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003104:	4618      	mov	r0, r3
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	40007000 	.word	0x40007000

08003114 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003114:	b480      	push	{r7}
 8003116:	b085      	sub	sp, #20
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003122:	d130      	bne.n	8003186 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003124:	4b23      	ldr	r3, [pc, #140]	; (80031b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800312c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003130:	d038      	beq.n	80031a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003132:	4b20      	ldr	r3, [pc, #128]	; (80031b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800313a:	4a1e      	ldr	r2, [pc, #120]	; (80031b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800313c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003140:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003142:	4b1d      	ldr	r3, [pc, #116]	; (80031b8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2232      	movs	r2, #50	; 0x32
 8003148:	fb02 f303 	mul.w	r3, r2, r3
 800314c:	4a1b      	ldr	r2, [pc, #108]	; (80031bc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800314e:	fba2 2303 	umull	r2, r3, r2, r3
 8003152:	0c9b      	lsrs	r3, r3, #18
 8003154:	3301      	adds	r3, #1
 8003156:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003158:	e002      	b.n	8003160 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	3b01      	subs	r3, #1
 800315e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003160:	4b14      	ldr	r3, [pc, #80]	; (80031b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003162:	695b      	ldr	r3, [r3, #20]
 8003164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003168:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800316c:	d102      	bne.n	8003174 <HAL_PWREx_ControlVoltageScaling+0x60>
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d1f2      	bne.n	800315a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003174:	4b0f      	ldr	r3, [pc, #60]	; (80031b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003176:	695b      	ldr	r3, [r3, #20]
 8003178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800317c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003180:	d110      	bne.n	80031a4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e00f      	b.n	80031a6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003186:	4b0b      	ldr	r3, [pc, #44]	; (80031b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800318e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003192:	d007      	beq.n	80031a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003194:	4b07      	ldr	r3, [pc, #28]	; (80031b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800319c:	4a05      	ldr	r2, [pc, #20]	; (80031b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800319e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031a2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3714      	adds	r7, #20
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	40007000 	.word	0x40007000
 80031b8:	20000000 	.word	0x20000000
 80031bc:	431bde83 	.word	0x431bde83

080031c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b088      	sub	sp, #32
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d102      	bne.n	80031d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	f000 bc11 	b.w	80039f6 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031d4:	4ba0      	ldr	r3, [pc, #640]	; (8003458 <HAL_RCC_OscConfig+0x298>)
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f003 030c 	and.w	r3, r3, #12
 80031dc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031de:	4b9e      	ldr	r3, [pc, #632]	; (8003458 <HAL_RCC_OscConfig+0x298>)
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	f003 0303 	and.w	r3, r3, #3
 80031e6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0310 	and.w	r3, r3, #16
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	f000 80e4 	beq.w	80033be <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d007      	beq.n	800320c <HAL_RCC_OscConfig+0x4c>
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	2b0c      	cmp	r3, #12
 8003200:	f040 808b 	bne.w	800331a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	2b01      	cmp	r3, #1
 8003208:	f040 8087 	bne.w	800331a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800320c:	4b92      	ldr	r3, [pc, #584]	; (8003458 <HAL_RCC_OscConfig+0x298>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0302 	and.w	r3, r3, #2
 8003214:	2b00      	cmp	r3, #0
 8003216:	d005      	beq.n	8003224 <HAL_RCC_OscConfig+0x64>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d101      	bne.n	8003224 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e3e8      	b.n	80039f6 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a1a      	ldr	r2, [r3, #32]
 8003228:	4b8b      	ldr	r3, [pc, #556]	; (8003458 <HAL_RCC_OscConfig+0x298>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0308 	and.w	r3, r3, #8
 8003230:	2b00      	cmp	r3, #0
 8003232:	d004      	beq.n	800323e <HAL_RCC_OscConfig+0x7e>
 8003234:	4b88      	ldr	r3, [pc, #544]	; (8003458 <HAL_RCC_OscConfig+0x298>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800323c:	e005      	b.n	800324a <HAL_RCC_OscConfig+0x8a>
 800323e:	4b86      	ldr	r3, [pc, #536]	; (8003458 <HAL_RCC_OscConfig+0x298>)
 8003240:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003244:	091b      	lsrs	r3, r3, #4
 8003246:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800324a:	4293      	cmp	r3, r2
 800324c:	d223      	bcs.n	8003296 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a1b      	ldr	r3, [r3, #32]
 8003252:	4618      	mov	r0, r3
 8003254:	f000 fd42 	bl	8003cdc <RCC_SetFlashLatencyFromMSIRange>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e3c9      	b.n	80039f6 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003262:	4b7d      	ldr	r3, [pc, #500]	; (8003458 <HAL_RCC_OscConfig+0x298>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a7c      	ldr	r2, [pc, #496]	; (8003458 <HAL_RCC_OscConfig+0x298>)
 8003268:	f043 0308 	orr.w	r3, r3, #8
 800326c:	6013      	str	r3, [r2, #0]
 800326e:	4b7a      	ldr	r3, [pc, #488]	; (8003458 <HAL_RCC_OscConfig+0x298>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a1b      	ldr	r3, [r3, #32]
 800327a:	4977      	ldr	r1, [pc, #476]	; (8003458 <HAL_RCC_OscConfig+0x298>)
 800327c:	4313      	orrs	r3, r2
 800327e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003280:	4b75      	ldr	r3, [pc, #468]	; (8003458 <HAL_RCC_OscConfig+0x298>)
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	69db      	ldr	r3, [r3, #28]
 800328c:	021b      	lsls	r3, r3, #8
 800328e:	4972      	ldr	r1, [pc, #456]	; (8003458 <HAL_RCC_OscConfig+0x298>)
 8003290:	4313      	orrs	r3, r2
 8003292:	604b      	str	r3, [r1, #4]
 8003294:	e025      	b.n	80032e2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003296:	4b70      	ldr	r3, [pc, #448]	; (8003458 <HAL_RCC_OscConfig+0x298>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a6f      	ldr	r2, [pc, #444]	; (8003458 <HAL_RCC_OscConfig+0x298>)
 800329c:	f043 0308 	orr.w	r3, r3, #8
 80032a0:	6013      	str	r3, [r2, #0]
 80032a2:	4b6d      	ldr	r3, [pc, #436]	; (8003458 <HAL_RCC_OscConfig+0x298>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a1b      	ldr	r3, [r3, #32]
 80032ae:	496a      	ldr	r1, [pc, #424]	; (8003458 <HAL_RCC_OscConfig+0x298>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032b4:	4b68      	ldr	r3, [pc, #416]	; (8003458 <HAL_RCC_OscConfig+0x298>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	69db      	ldr	r3, [r3, #28]
 80032c0:	021b      	lsls	r3, r3, #8
 80032c2:	4965      	ldr	r1, [pc, #404]	; (8003458 <HAL_RCC_OscConfig+0x298>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d109      	bne.n	80032e2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a1b      	ldr	r3, [r3, #32]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f000 fd02 	bl	8003cdc <RCC_SetFlashLatencyFromMSIRange>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e389      	b.n	80039f6 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80032e2:	f000 fc6f 	bl	8003bc4 <HAL_RCC_GetSysClockFreq>
 80032e6:	4602      	mov	r2, r0
 80032e8:	4b5b      	ldr	r3, [pc, #364]	; (8003458 <HAL_RCC_OscConfig+0x298>)
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	091b      	lsrs	r3, r3, #4
 80032ee:	f003 030f 	and.w	r3, r3, #15
 80032f2:	495a      	ldr	r1, [pc, #360]	; (800345c <HAL_RCC_OscConfig+0x29c>)
 80032f4:	5ccb      	ldrb	r3, [r1, r3]
 80032f6:	f003 031f 	and.w	r3, r3, #31
 80032fa:	fa22 f303 	lsr.w	r3, r2, r3
 80032fe:	4a58      	ldr	r2, [pc, #352]	; (8003460 <HAL_RCC_OscConfig+0x2a0>)
 8003300:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003302:	4b58      	ldr	r3, [pc, #352]	; (8003464 <HAL_RCC_OscConfig+0x2a4>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4618      	mov	r0, r3
 8003308:	f7fd fa9e 	bl	8000848 <HAL_InitTick>
 800330c:	4603      	mov	r3, r0
 800330e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003310:	7bfb      	ldrb	r3, [r7, #15]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d052      	beq.n	80033bc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003316:	7bfb      	ldrb	r3, [r7, #15]
 8003318:	e36d      	b.n	80039f6 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d032      	beq.n	8003388 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003322:	4b4d      	ldr	r3, [pc, #308]	; (8003458 <HAL_RCC_OscConfig+0x298>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a4c      	ldr	r2, [pc, #304]	; (8003458 <HAL_RCC_OscConfig+0x298>)
 8003328:	f043 0301 	orr.w	r3, r3, #1
 800332c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800332e:	f7fd fadb 	bl	80008e8 <HAL_GetTick>
 8003332:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003334:	e008      	b.n	8003348 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003336:	f7fd fad7 	bl	80008e8 <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	2b02      	cmp	r3, #2
 8003342:	d901      	bls.n	8003348 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e356      	b.n	80039f6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003348:	4b43      	ldr	r3, [pc, #268]	; (8003458 <HAL_RCC_OscConfig+0x298>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0302 	and.w	r3, r3, #2
 8003350:	2b00      	cmp	r3, #0
 8003352:	d0f0      	beq.n	8003336 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003354:	4b40      	ldr	r3, [pc, #256]	; (8003458 <HAL_RCC_OscConfig+0x298>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a3f      	ldr	r2, [pc, #252]	; (8003458 <HAL_RCC_OscConfig+0x298>)
 800335a:	f043 0308 	orr.w	r3, r3, #8
 800335e:	6013      	str	r3, [r2, #0]
 8003360:	4b3d      	ldr	r3, [pc, #244]	; (8003458 <HAL_RCC_OscConfig+0x298>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a1b      	ldr	r3, [r3, #32]
 800336c:	493a      	ldr	r1, [pc, #232]	; (8003458 <HAL_RCC_OscConfig+0x298>)
 800336e:	4313      	orrs	r3, r2
 8003370:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003372:	4b39      	ldr	r3, [pc, #228]	; (8003458 <HAL_RCC_OscConfig+0x298>)
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	021b      	lsls	r3, r3, #8
 8003380:	4935      	ldr	r1, [pc, #212]	; (8003458 <HAL_RCC_OscConfig+0x298>)
 8003382:	4313      	orrs	r3, r2
 8003384:	604b      	str	r3, [r1, #4]
 8003386:	e01a      	b.n	80033be <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003388:	4b33      	ldr	r3, [pc, #204]	; (8003458 <HAL_RCC_OscConfig+0x298>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a32      	ldr	r2, [pc, #200]	; (8003458 <HAL_RCC_OscConfig+0x298>)
 800338e:	f023 0301 	bic.w	r3, r3, #1
 8003392:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003394:	f7fd faa8 	bl	80008e8 <HAL_GetTick>
 8003398:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800339a:	e008      	b.n	80033ae <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800339c:	f7fd faa4 	bl	80008e8 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e323      	b.n	80039f6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80033ae:	4b2a      	ldr	r3, [pc, #168]	; (8003458 <HAL_RCC_OscConfig+0x298>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0302 	and.w	r3, r3, #2
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d1f0      	bne.n	800339c <HAL_RCC_OscConfig+0x1dc>
 80033ba:	e000      	b.n	80033be <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80033bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d073      	beq.n	80034b2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	2b08      	cmp	r3, #8
 80033ce:	d005      	beq.n	80033dc <HAL_RCC_OscConfig+0x21c>
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	2b0c      	cmp	r3, #12
 80033d4:	d10e      	bne.n	80033f4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	2b03      	cmp	r3, #3
 80033da:	d10b      	bne.n	80033f4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033dc:	4b1e      	ldr	r3, [pc, #120]	; (8003458 <HAL_RCC_OscConfig+0x298>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d063      	beq.n	80034b0 <HAL_RCC_OscConfig+0x2f0>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d15f      	bne.n	80034b0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e300      	b.n	80039f6 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033fc:	d106      	bne.n	800340c <HAL_RCC_OscConfig+0x24c>
 80033fe:	4b16      	ldr	r3, [pc, #88]	; (8003458 <HAL_RCC_OscConfig+0x298>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a15      	ldr	r2, [pc, #84]	; (8003458 <HAL_RCC_OscConfig+0x298>)
 8003404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003408:	6013      	str	r3, [r2, #0]
 800340a:	e01d      	b.n	8003448 <HAL_RCC_OscConfig+0x288>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003414:	d10c      	bne.n	8003430 <HAL_RCC_OscConfig+0x270>
 8003416:	4b10      	ldr	r3, [pc, #64]	; (8003458 <HAL_RCC_OscConfig+0x298>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a0f      	ldr	r2, [pc, #60]	; (8003458 <HAL_RCC_OscConfig+0x298>)
 800341c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003420:	6013      	str	r3, [r2, #0]
 8003422:	4b0d      	ldr	r3, [pc, #52]	; (8003458 <HAL_RCC_OscConfig+0x298>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a0c      	ldr	r2, [pc, #48]	; (8003458 <HAL_RCC_OscConfig+0x298>)
 8003428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800342c:	6013      	str	r3, [r2, #0]
 800342e:	e00b      	b.n	8003448 <HAL_RCC_OscConfig+0x288>
 8003430:	4b09      	ldr	r3, [pc, #36]	; (8003458 <HAL_RCC_OscConfig+0x298>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a08      	ldr	r2, [pc, #32]	; (8003458 <HAL_RCC_OscConfig+0x298>)
 8003436:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800343a:	6013      	str	r3, [r2, #0]
 800343c:	4b06      	ldr	r3, [pc, #24]	; (8003458 <HAL_RCC_OscConfig+0x298>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a05      	ldr	r2, [pc, #20]	; (8003458 <HAL_RCC_OscConfig+0x298>)
 8003442:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003446:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d01b      	beq.n	8003488 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003450:	f7fd fa4a 	bl	80008e8 <HAL_GetTick>
 8003454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003456:	e010      	b.n	800347a <HAL_RCC_OscConfig+0x2ba>
 8003458:	40021000 	.word	0x40021000
 800345c:	08007ee8 	.word	0x08007ee8
 8003460:	20000000 	.word	0x20000000
 8003464:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003468:	f7fd fa3e 	bl	80008e8 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b64      	cmp	r3, #100	; 0x64
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e2bd      	b.n	80039f6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800347a:	4baf      	ldr	r3, [pc, #700]	; (8003738 <HAL_RCC_OscConfig+0x578>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d0f0      	beq.n	8003468 <HAL_RCC_OscConfig+0x2a8>
 8003486:	e014      	b.n	80034b2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003488:	f7fd fa2e 	bl	80008e8 <HAL_GetTick>
 800348c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800348e:	e008      	b.n	80034a2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003490:	f7fd fa2a 	bl	80008e8 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b64      	cmp	r3, #100	; 0x64
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e2a9      	b.n	80039f6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034a2:	4ba5      	ldr	r3, [pc, #660]	; (8003738 <HAL_RCC_OscConfig+0x578>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1f0      	bne.n	8003490 <HAL_RCC_OscConfig+0x2d0>
 80034ae:	e000      	b.n	80034b2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d060      	beq.n	8003580 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	2b04      	cmp	r3, #4
 80034c2:	d005      	beq.n	80034d0 <HAL_RCC_OscConfig+0x310>
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	2b0c      	cmp	r3, #12
 80034c8:	d119      	bne.n	80034fe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d116      	bne.n	80034fe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034d0:	4b99      	ldr	r3, [pc, #612]	; (8003738 <HAL_RCC_OscConfig+0x578>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d005      	beq.n	80034e8 <HAL_RCC_OscConfig+0x328>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d101      	bne.n	80034e8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e286      	b.n	80039f6 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034e8:	4b93      	ldr	r3, [pc, #588]	; (8003738 <HAL_RCC_OscConfig+0x578>)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	061b      	lsls	r3, r3, #24
 80034f6:	4990      	ldr	r1, [pc, #576]	; (8003738 <HAL_RCC_OscConfig+0x578>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034fc:	e040      	b.n	8003580 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d023      	beq.n	800354e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003506:	4b8c      	ldr	r3, [pc, #560]	; (8003738 <HAL_RCC_OscConfig+0x578>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a8b      	ldr	r2, [pc, #556]	; (8003738 <HAL_RCC_OscConfig+0x578>)
 800350c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003510:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003512:	f7fd f9e9 	bl	80008e8 <HAL_GetTick>
 8003516:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003518:	e008      	b.n	800352c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800351a:	f7fd f9e5 	bl	80008e8 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	2b02      	cmp	r3, #2
 8003526:	d901      	bls.n	800352c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e264      	b.n	80039f6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800352c:	4b82      	ldr	r3, [pc, #520]	; (8003738 <HAL_RCC_OscConfig+0x578>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003534:	2b00      	cmp	r3, #0
 8003536:	d0f0      	beq.n	800351a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003538:	4b7f      	ldr	r3, [pc, #508]	; (8003738 <HAL_RCC_OscConfig+0x578>)
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	691b      	ldr	r3, [r3, #16]
 8003544:	061b      	lsls	r3, r3, #24
 8003546:	497c      	ldr	r1, [pc, #496]	; (8003738 <HAL_RCC_OscConfig+0x578>)
 8003548:	4313      	orrs	r3, r2
 800354a:	604b      	str	r3, [r1, #4]
 800354c:	e018      	b.n	8003580 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800354e:	4b7a      	ldr	r3, [pc, #488]	; (8003738 <HAL_RCC_OscConfig+0x578>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a79      	ldr	r2, [pc, #484]	; (8003738 <HAL_RCC_OscConfig+0x578>)
 8003554:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003558:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800355a:	f7fd f9c5 	bl	80008e8 <HAL_GetTick>
 800355e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003560:	e008      	b.n	8003574 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003562:	f7fd f9c1 	bl	80008e8 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	2b02      	cmp	r3, #2
 800356e:	d901      	bls.n	8003574 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e240      	b.n	80039f6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003574:	4b70      	ldr	r3, [pc, #448]	; (8003738 <HAL_RCC_OscConfig+0x578>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800357c:	2b00      	cmp	r3, #0
 800357e:	d1f0      	bne.n	8003562 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0308 	and.w	r3, r3, #8
 8003588:	2b00      	cmp	r3, #0
 800358a:	d03c      	beq.n	8003606 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	695b      	ldr	r3, [r3, #20]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d01c      	beq.n	80035ce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003594:	4b68      	ldr	r3, [pc, #416]	; (8003738 <HAL_RCC_OscConfig+0x578>)
 8003596:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800359a:	4a67      	ldr	r2, [pc, #412]	; (8003738 <HAL_RCC_OscConfig+0x578>)
 800359c:	f043 0301 	orr.w	r3, r3, #1
 80035a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a4:	f7fd f9a0 	bl	80008e8 <HAL_GetTick>
 80035a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035aa:	e008      	b.n	80035be <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035ac:	f7fd f99c 	bl	80008e8 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e21b      	b.n	80039f6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035be:	4b5e      	ldr	r3, [pc, #376]	; (8003738 <HAL_RCC_OscConfig+0x578>)
 80035c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d0ef      	beq.n	80035ac <HAL_RCC_OscConfig+0x3ec>
 80035cc:	e01b      	b.n	8003606 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035ce:	4b5a      	ldr	r3, [pc, #360]	; (8003738 <HAL_RCC_OscConfig+0x578>)
 80035d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035d4:	4a58      	ldr	r2, [pc, #352]	; (8003738 <HAL_RCC_OscConfig+0x578>)
 80035d6:	f023 0301 	bic.w	r3, r3, #1
 80035da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035de:	f7fd f983 	bl	80008e8 <HAL_GetTick>
 80035e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035e4:	e008      	b.n	80035f8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035e6:	f7fd f97f 	bl	80008e8 <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d901      	bls.n	80035f8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e1fe      	b.n	80039f6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035f8:	4b4f      	ldr	r3, [pc, #316]	; (8003738 <HAL_RCC_OscConfig+0x578>)
 80035fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d1ef      	bne.n	80035e6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0304 	and.w	r3, r3, #4
 800360e:	2b00      	cmp	r3, #0
 8003610:	f000 80a6 	beq.w	8003760 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003614:	2300      	movs	r3, #0
 8003616:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003618:	4b47      	ldr	r3, [pc, #284]	; (8003738 <HAL_RCC_OscConfig+0x578>)
 800361a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800361c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d10d      	bne.n	8003640 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003624:	4b44      	ldr	r3, [pc, #272]	; (8003738 <HAL_RCC_OscConfig+0x578>)
 8003626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003628:	4a43      	ldr	r2, [pc, #268]	; (8003738 <HAL_RCC_OscConfig+0x578>)
 800362a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800362e:	6593      	str	r3, [r2, #88]	; 0x58
 8003630:	4b41      	ldr	r3, [pc, #260]	; (8003738 <HAL_RCC_OscConfig+0x578>)
 8003632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003638:	60bb      	str	r3, [r7, #8]
 800363a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800363c:	2301      	movs	r3, #1
 800363e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003640:	4b3e      	ldr	r3, [pc, #248]	; (800373c <HAL_RCC_OscConfig+0x57c>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003648:	2b00      	cmp	r3, #0
 800364a:	d118      	bne.n	800367e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800364c:	4b3b      	ldr	r3, [pc, #236]	; (800373c <HAL_RCC_OscConfig+0x57c>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a3a      	ldr	r2, [pc, #232]	; (800373c <HAL_RCC_OscConfig+0x57c>)
 8003652:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003656:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003658:	f7fd f946 	bl	80008e8 <HAL_GetTick>
 800365c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800365e:	e008      	b.n	8003672 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003660:	f7fd f942 	bl	80008e8 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b02      	cmp	r3, #2
 800366c:	d901      	bls.n	8003672 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e1c1      	b.n	80039f6 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003672:	4b32      	ldr	r3, [pc, #200]	; (800373c <HAL_RCC_OscConfig+0x57c>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800367a:	2b00      	cmp	r3, #0
 800367c:	d0f0      	beq.n	8003660 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	2b01      	cmp	r3, #1
 8003684:	d108      	bne.n	8003698 <HAL_RCC_OscConfig+0x4d8>
 8003686:	4b2c      	ldr	r3, [pc, #176]	; (8003738 <HAL_RCC_OscConfig+0x578>)
 8003688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800368c:	4a2a      	ldr	r2, [pc, #168]	; (8003738 <HAL_RCC_OscConfig+0x578>)
 800368e:	f043 0301 	orr.w	r3, r3, #1
 8003692:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003696:	e024      	b.n	80036e2 <HAL_RCC_OscConfig+0x522>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	2b05      	cmp	r3, #5
 800369e:	d110      	bne.n	80036c2 <HAL_RCC_OscConfig+0x502>
 80036a0:	4b25      	ldr	r3, [pc, #148]	; (8003738 <HAL_RCC_OscConfig+0x578>)
 80036a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036a6:	4a24      	ldr	r2, [pc, #144]	; (8003738 <HAL_RCC_OscConfig+0x578>)
 80036a8:	f043 0304 	orr.w	r3, r3, #4
 80036ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036b0:	4b21      	ldr	r3, [pc, #132]	; (8003738 <HAL_RCC_OscConfig+0x578>)
 80036b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036b6:	4a20      	ldr	r2, [pc, #128]	; (8003738 <HAL_RCC_OscConfig+0x578>)
 80036b8:	f043 0301 	orr.w	r3, r3, #1
 80036bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036c0:	e00f      	b.n	80036e2 <HAL_RCC_OscConfig+0x522>
 80036c2:	4b1d      	ldr	r3, [pc, #116]	; (8003738 <HAL_RCC_OscConfig+0x578>)
 80036c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c8:	4a1b      	ldr	r2, [pc, #108]	; (8003738 <HAL_RCC_OscConfig+0x578>)
 80036ca:	f023 0301 	bic.w	r3, r3, #1
 80036ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036d2:	4b19      	ldr	r3, [pc, #100]	; (8003738 <HAL_RCC_OscConfig+0x578>)
 80036d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036d8:	4a17      	ldr	r2, [pc, #92]	; (8003738 <HAL_RCC_OscConfig+0x578>)
 80036da:	f023 0304 	bic.w	r3, r3, #4
 80036de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d016      	beq.n	8003718 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ea:	f7fd f8fd 	bl	80008e8 <HAL_GetTick>
 80036ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036f0:	e00a      	b.n	8003708 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036f2:	f7fd f8f9 	bl	80008e8 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003700:	4293      	cmp	r3, r2
 8003702:	d901      	bls.n	8003708 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e176      	b.n	80039f6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003708:	4b0b      	ldr	r3, [pc, #44]	; (8003738 <HAL_RCC_OscConfig+0x578>)
 800370a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	2b00      	cmp	r3, #0
 8003714:	d0ed      	beq.n	80036f2 <HAL_RCC_OscConfig+0x532>
 8003716:	e01a      	b.n	800374e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003718:	f7fd f8e6 	bl	80008e8 <HAL_GetTick>
 800371c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800371e:	e00f      	b.n	8003740 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003720:	f7fd f8e2 	bl	80008e8 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	f241 3288 	movw	r2, #5000	; 0x1388
 800372e:	4293      	cmp	r3, r2
 8003730:	d906      	bls.n	8003740 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e15f      	b.n	80039f6 <HAL_RCC_OscConfig+0x836>
 8003736:	bf00      	nop
 8003738:	40021000 	.word	0x40021000
 800373c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003740:	4baa      	ldr	r3, [pc, #680]	; (80039ec <HAL_RCC_OscConfig+0x82c>)
 8003742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d1e8      	bne.n	8003720 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800374e:	7ffb      	ldrb	r3, [r7, #31]
 8003750:	2b01      	cmp	r3, #1
 8003752:	d105      	bne.n	8003760 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003754:	4ba5      	ldr	r3, [pc, #660]	; (80039ec <HAL_RCC_OscConfig+0x82c>)
 8003756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003758:	4aa4      	ldr	r2, [pc, #656]	; (80039ec <HAL_RCC_OscConfig+0x82c>)
 800375a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800375e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0320 	and.w	r3, r3, #32
 8003768:	2b00      	cmp	r3, #0
 800376a:	d03c      	beq.n	80037e6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003770:	2b00      	cmp	r3, #0
 8003772:	d01c      	beq.n	80037ae <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003774:	4b9d      	ldr	r3, [pc, #628]	; (80039ec <HAL_RCC_OscConfig+0x82c>)
 8003776:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800377a:	4a9c      	ldr	r2, [pc, #624]	; (80039ec <HAL_RCC_OscConfig+0x82c>)
 800377c:	f043 0301 	orr.w	r3, r3, #1
 8003780:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003784:	f7fd f8b0 	bl	80008e8 <HAL_GetTick>
 8003788:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800378a:	e008      	b.n	800379e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800378c:	f7fd f8ac 	bl	80008e8 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e12b      	b.n	80039f6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800379e:	4b93      	ldr	r3, [pc, #588]	; (80039ec <HAL_RCC_OscConfig+0x82c>)
 80037a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037a4:	f003 0302 	and.w	r3, r3, #2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d0ef      	beq.n	800378c <HAL_RCC_OscConfig+0x5cc>
 80037ac:	e01b      	b.n	80037e6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80037ae:	4b8f      	ldr	r3, [pc, #572]	; (80039ec <HAL_RCC_OscConfig+0x82c>)
 80037b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037b4:	4a8d      	ldr	r2, [pc, #564]	; (80039ec <HAL_RCC_OscConfig+0x82c>)
 80037b6:	f023 0301 	bic.w	r3, r3, #1
 80037ba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037be:	f7fd f893 	bl	80008e8 <HAL_GetTick>
 80037c2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80037c4:	e008      	b.n	80037d8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037c6:	f7fd f88f 	bl	80008e8 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d901      	bls.n	80037d8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e10e      	b.n	80039f6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80037d8:	4b84      	ldr	r3, [pc, #528]	; (80039ec <HAL_RCC_OscConfig+0x82c>)
 80037da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037de:	f003 0302 	and.w	r3, r3, #2
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1ef      	bne.n	80037c6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	f000 8102 	beq.w	80039f4 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	f040 80c5 	bne.w	8003984 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80037fa:	4b7c      	ldr	r3, [pc, #496]	; (80039ec <HAL_RCC_OscConfig+0x82c>)
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	f003 0203 	and.w	r2, r3, #3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380a:	429a      	cmp	r2, r3
 800380c:	d12c      	bne.n	8003868 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003818:	3b01      	subs	r3, #1
 800381a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800381c:	429a      	cmp	r2, r3
 800381e:	d123      	bne.n	8003868 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800382a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800382c:	429a      	cmp	r2, r3
 800382e:	d11b      	bne.n	8003868 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800383c:	429a      	cmp	r2, r3
 800383e:	d113      	bne.n	8003868 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800384a:	085b      	lsrs	r3, r3, #1
 800384c:	3b01      	subs	r3, #1
 800384e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003850:	429a      	cmp	r2, r3
 8003852:	d109      	bne.n	8003868 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385e:	085b      	lsrs	r3, r3, #1
 8003860:	3b01      	subs	r3, #1
 8003862:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003864:	429a      	cmp	r2, r3
 8003866:	d067      	beq.n	8003938 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	2b0c      	cmp	r3, #12
 800386c:	d062      	beq.n	8003934 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800386e:	4b5f      	ldr	r3, [pc, #380]	; (80039ec <HAL_RCC_OscConfig+0x82c>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e0bb      	b.n	80039f6 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800387e:	4b5b      	ldr	r3, [pc, #364]	; (80039ec <HAL_RCC_OscConfig+0x82c>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a5a      	ldr	r2, [pc, #360]	; (80039ec <HAL_RCC_OscConfig+0x82c>)
 8003884:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003888:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800388a:	f7fd f82d 	bl	80008e8 <HAL_GetTick>
 800388e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003890:	e008      	b.n	80038a4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003892:	f7fd f829 	bl	80008e8 <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	2b02      	cmp	r3, #2
 800389e:	d901      	bls.n	80038a4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e0a8      	b.n	80039f6 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038a4:	4b51      	ldr	r3, [pc, #324]	; (80039ec <HAL_RCC_OscConfig+0x82c>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d1f0      	bne.n	8003892 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038b0:	4b4e      	ldr	r3, [pc, #312]	; (80039ec <HAL_RCC_OscConfig+0x82c>)
 80038b2:	68da      	ldr	r2, [r3, #12]
 80038b4:	4b4e      	ldr	r3, [pc, #312]	; (80039f0 <HAL_RCC_OscConfig+0x830>)
 80038b6:	4013      	ands	r3, r2
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80038c0:	3a01      	subs	r2, #1
 80038c2:	0112      	lsls	r2, r2, #4
 80038c4:	4311      	orrs	r1, r2
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80038ca:	0212      	lsls	r2, r2, #8
 80038cc:	4311      	orrs	r1, r2
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80038d2:	0852      	lsrs	r2, r2, #1
 80038d4:	3a01      	subs	r2, #1
 80038d6:	0552      	lsls	r2, r2, #21
 80038d8:	4311      	orrs	r1, r2
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80038de:	0852      	lsrs	r2, r2, #1
 80038e0:	3a01      	subs	r2, #1
 80038e2:	0652      	lsls	r2, r2, #25
 80038e4:	4311      	orrs	r1, r2
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80038ea:	06d2      	lsls	r2, r2, #27
 80038ec:	430a      	orrs	r2, r1
 80038ee:	493f      	ldr	r1, [pc, #252]	; (80039ec <HAL_RCC_OscConfig+0x82c>)
 80038f0:	4313      	orrs	r3, r2
 80038f2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80038f4:	4b3d      	ldr	r3, [pc, #244]	; (80039ec <HAL_RCC_OscConfig+0x82c>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a3c      	ldr	r2, [pc, #240]	; (80039ec <HAL_RCC_OscConfig+0x82c>)
 80038fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038fe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003900:	4b3a      	ldr	r3, [pc, #232]	; (80039ec <HAL_RCC_OscConfig+0x82c>)
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	4a39      	ldr	r2, [pc, #228]	; (80039ec <HAL_RCC_OscConfig+0x82c>)
 8003906:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800390a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800390c:	f7fc ffec 	bl	80008e8 <HAL_GetTick>
 8003910:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003912:	e008      	b.n	8003926 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003914:	f7fc ffe8 	bl	80008e8 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b02      	cmp	r3, #2
 8003920:	d901      	bls.n	8003926 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e067      	b.n	80039f6 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003926:	4b31      	ldr	r3, [pc, #196]	; (80039ec <HAL_RCC_OscConfig+0x82c>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d0f0      	beq.n	8003914 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003932:	e05f      	b.n	80039f4 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e05e      	b.n	80039f6 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003938:	4b2c      	ldr	r3, [pc, #176]	; (80039ec <HAL_RCC_OscConfig+0x82c>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d157      	bne.n	80039f4 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003944:	4b29      	ldr	r3, [pc, #164]	; (80039ec <HAL_RCC_OscConfig+0x82c>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a28      	ldr	r2, [pc, #160]	; (80039ec <HAL_RCC_OscConfig+0x82c>)
 800394a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800394e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003950:	4b26      	ldr	r3, [pc, #152]	; (80039ec <HAL_RCC_OscConfig+0x82c>)
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	4a25      	ldr	r2, [pc, #148]	; (80039ec <HAL_RCC_OscConfig+0x82c>)
 8003956:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800395a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800395c:	f7fc ffc4 	bl	80008e8 <HAL_GetTick>
 8003960:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003962:	e008      	b.n	8003976 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003964:	f7fc ffc0 	bl	80008e8 <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	2b02      	cmp	r3, #2
 8003970:	d901      	bls.n	8003976 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e03f      	b.n	80039f6 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003976:	4b1d      	ldr	r3, [pc, #116]	; (80039ec <HAL_RCC_OscConfig+0x82c>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d0f0      	beq.n	8003964 <HAL_RCC_OscConfig+0x7a4>
 8003982:	e037      	b.n	80039f4 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	2b0c      	cmp	r3, #12
 8003988:	d02d      	beq.n	80039e6 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800398a:	4b18      	ldr	r3, [pc, #96]	; (80039ec <HAL_RCC_OscConfig+0x82c>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a17      	ldr	r2, [pc, #92]	; (80039ec <HAL_RCC_OscConfig+0x82c>)
 8003990:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003994:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003996:	4b15      	ldr	r3, [pc, #84]	; (80039ec <HAL_RCC_OscConfig+0x82c>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d105      	bne.n	80039ae <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80039a2:	4b12      	ldr	r3, [pc, #72]	; (80039ec <HAL_RCC_OscConfig+0x82c>)
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	4a11      	ldr	r2, [pc, #68]	; (80039ec <HAL_RCC_OscConfig+0x82c>)
 80039a8:	f023 0303 	bic.w	r3, r3, #3
 80039ac:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80039ae:	4b0f      	ldr	r3, [pc, #60]	; (80039ec <HAL_RCC_OscConfig+0x82c>)
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	4a0e      	ldr	r2, [pc, #56]	; (80039ec <HAL_RCC_OscConfig+0x82c>)
 80039b4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80039b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039bc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039be:	f7fc ff93 	bl	80008e8 <HAL_GetTick>
 80039c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039c4:	e008      	b.n	80039d8 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039c6:	f7fc ff8f 	bl	80008e8 <HAL_GetTick>
 80039ca:	4602      	mov	r2, r0
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d901      	bls.n	80039d8 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e00e      	b.n	80039f6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039d8:	4b04      	ldr	r3, [pc, #16]	; (80039ec <HAL_RCC_OscConfig+0x82c>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d1f0      	bne.n	80039c6 <HAL_RCC_OscConfig+0x806>
 80039e4:	e006      	b.n	80039f4 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e005      	b.n	80039f6 <HAL_RCC_OscConfig+0x836>
 80039ea:	bf00      	nop
 80039ec:	40021000 	.word	0x40021000
 80039f0:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3720      	adds	r7, #32
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop

08003a00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d101      	bne.n	8003a14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e0c8      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a14:	4b66      	ldr	r3, [pc, #408]	; (8003bb0 <HAL_RCC_ClockConfig+0x1b0>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0307 	and.w	r3, r3, #7
 8003a1c:	683a      	ldr	r2, [r7, #0]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d910      	bls.n	8003a44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a22:	4b63      	ldr	r3, [pc, #396]	; (8003bb0 <HAL_RCC_ClockConfig+0x1b0>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f023 0207 	bic.w	r2, r3, #7
 8003a2a:	4961      	ldr	r1, [pc, #388]	; (8003bb0 <HAL_RCC_ClockConfig+0x1b0>)
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a32:	4b5f      	ldr	r3, [pc, #380]	; (8003bb0 <HAL_RCC_ClockConfig+0x1b0>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0307 	and.w	r3, r3, #7
 8003a3a:	683a      	ldr	r2, [r7, #0]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d001      	beq.n	8003a44 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e0b0      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d04c      	beq.n	8003aea <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	2b03      	cmp	r3, #3
 8003a56:	d107      	bne.n	8003a68 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a58:	4b56      	ldr	r3, [pc, #344]	; (8003bb4 <HAL_RCC_ClockConfig+0x1b4>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d121      	bne.n	8003aa8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e09e      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d107      	bne.n	8003a80 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a70:	4b50      	ldr	r3, [pc, #320]	; (8003bb4 <HAL_RCC_ClockConfig+0x1b4>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d115      	bne.n	8003aa8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e092      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d107      	bne.n	8003a98 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a88:	4b4a      	ldr	r3, [pc, #296]	; (8003bb4 <HAL_RCC_ClockConfig+0x1b4>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d109      	bne.n	8003aa8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e086      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a98:	4b46      	ldr	r3, [pc, #280]	; (8003bb4 <HAL_RCC_ClockConfig+0x1b4>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d101      	bne.n	8003aa8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e07e      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003aa8:	4b42      	ldr	r3, [pc, #264]	; (8003bb4 <HAL_RCC_ClockConfig+0x1b4>)
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f023 0203 	bic.w	r2, r3, #3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	493f      	ldr	r1, [pc, #252]	; (8003bb4 <HAL_RCC_ClockConfig+0x1b4>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003aba:	f7fc ff15 	bl	80008e8 <HAL_GetTick>
 8003abe:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ac0:	e00a      	b.n	8003ad8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ac2:	f7fc ff11 	bl	80008e8 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d901      	bls.n	8003ad8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e066      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ad8:	4b36      	ldr	r3, [pc, #216]	; (8003bb4 <HAL_RCC_ClockConfig+0x1b4>)
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f003 020c 	and.w	r2, r3, #12
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d1eb      	bne.n	8003ac2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d008      	beq.n	8003b08 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003af6:	4b2f      	ldr	r3, [pc, #188]	; (8003bb4 <HAL_RCC_ClockConfig+0x1b4>)
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	492c      	ldr	r1, [pc, #176]	; (8003bb4 <HAL_RCC_ClockConfig+0x1b4>)
 8003b04:	4313      	orrs	r3, r2
 8003b06:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b08:	4b29      	ldr	r3, [pc, #164]	; (8003bb0 <HAL_RCC_ClockConfig+0x1b0>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0307 	and.w	r3, r3, #7
 8003b10:	683a      	ldr	r2, [r7, #0]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d210      	bcs.n	8003b38 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b16:	4b26      	ldr	r3, [pc, #152]	; (8003bb0 <HAL_RCC_ClockConfig+0x1b0>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f023 0207 	bic.w	r2, r3, #7
 8003b1e:	4924      	ldr	r1, [pc, #144]	; (8003bb0 <HAL_RCC_ClockConfig+0x1b0>)
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b26:	4b22      	ldr	r3, [pc, #136]	; (8003bb0 <HAL_RCC_ClockConfig+0x1b0>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0307 	and.w	r3, r3, #7
 8003b2e:	683a      	ldr	r2, [r7, #0]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d001      	beq.n	8003b38 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e036      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0304 	and.w	r3, r3, #4
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d008      	beq.n	8003b56 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b44:	4b1b      	ldr	r3, [pc, #108]	; (8003bb4 <HAL_RCC_ClockConfig+0x1b4>)
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	4918      	ldr	r1, [pc, #96]	; (8003bb4 <HAL_RCC_ClockConfig+0x1b4>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0308 	and.w	r3, r3, #8
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d009      	beq.n	8003b76 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b62:	4b14      	ldr	r3, [pc, #80]	; (8003bb4 <HAL_RCC_ClockConfig+0x1b4>)
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	00db      	lsls	r3, r3, #3
 8003b70:	4910      	ldr	r1, [pc, #64]	; (8003bb4 <HAL_RCC_ClockConfig+0x1b4>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b76:	f000 f825 	bl	8003bc4 <HAL_RCC_GetSysClockFreq>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	4b0d      	ldr	r3, [pc, #52]	; (8003bb4 <HAL_RCC_ClockConfig+0x1b4>)
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	091b      	lsrs	r3, r3, #4
 8003b82:	f003 030f 	and.w	r3, r3, #15
 8003b86:	490c      	ldr	r1, [pc, #48]	; (8003bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b88:	5ccb      	ldrb	r3, [r1, r3]
 8003b8a:	f003 031f 	and.w	r3, r3, #31
 8003b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b92:	4a0a      	ldr	r2, [pc, #40]	; (8003bbc <HAL_RCC_ClockConfig+0x1bc>)
 8003b94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003b96:	4b0a      	ldr	r3, [pc, #40]	; (8003bc0 <HAL_RCC_ClockConfig+0x1c0>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7fc fe54 	bl	8000848 <HAL_InitTick>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	72fb      	strb	r3, [r7, #11]

  return status;
 8003ba4:	7afb      	ldrb	r3, [r7, #11]
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3710      	adds	r7, #16
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	40022000 	.word	0x40022000
 8003bb4:	40021000 	.word	0x40021000
 8003bb8:	08007ee8 	.word	0x08007ee8
 8003bbc:	20000000 	.word	0x20000000
 8003bc0:	20000004 	.word	0x20000004

08003bc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b089      	sub	sp, #36	; 0x24
 8003bc8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	61fb      	str	r3, [r7, #28]
 8003bce:	2300      	movs	r3, #0
 8003bd0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bd2:	4b3e      	ldr	r3, [pc, #248]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x108>)
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f003 030c 	and.w	r3, r3, #12
 8003bda:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bdc:	4b3b      	ldr	r3, [pc, #236]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x108>)
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	f003 0303 	and.w	r3, r3, #3
 8003be4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d005      	beq.n	8003bf8 <HAL_RCC_GetSysClockFreq+0x34>
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	2b0c      	cmp	r3, #12
 8003bf0:	d121      	bne.n	8003c36 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d11e      	bne.n	8003c36 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003bf8:	4b34      	ldr	r3, [pc, #208]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x108>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0308 	and.w	r3, r3, #8
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d107      	bne.n	8003c14 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003c04:	4b31      	ldr	r3, [pc, #196]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x108>)
 8003c06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c0a:	0a1b      	lsrs	r3, r3, #8
 8003c0c:	f003 030f 	and.w	r3, r3, #15
 8003c10:	61fb      	str	r3, [r7, #28]
 8003c12:	e005      	b.n	8003c20 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003c14:	4b2d      	ldr	r3, [pc, #180]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x108>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	091b      	lsrs	r3, r3, #4
 8003c1a:	f003 030f 	and.w	r3, r3, #15
 8003c1e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003c20:	4a2b      	ldr	r2, [pc, #172]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c28:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d10d      	bne.n	8003c4c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c34:	e00a      	b.n	8003c4c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	2b04      	cmp	r3, #4
 8003c3a:	d102      	bne.n	8003c42 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c3c:	4b25      	ldr	r3, [pc, #148]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003c3e:	61bb      	str	r3, [r7, #24]
 8003c40:	e004      	b.n	8003c4c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	2b08      	cmp	r3, #8
 8003c46:	d101      	bne.n	8003c4c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c48:	4b23      	ldr	r3, [pc, #140]	; (8003cd8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003c4a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	2b0c      	cmp	r3, #12
 8003c50:	d134      	bne.n	8003cbc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c52:	4b1e      	ldr	r3, [pc, #120]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x108>)
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	f003 0303 	and.w	r3, r3, #3
 8003c5a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d003      	beq.n	8003c6a <HAL_RCC_GetSysClockFreq+0xa6>
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	2b03      	cmp	r3, #3
 8003c66:	d003      	beq.n	8003c70 <HAL_RCC_GetSysClockFreq+0xac>
 8003c68:	e005      	b.n	8003c76 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003c6a:	4b1a      	ldr	r3, [pc, #104]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003c6c:	617b      	str	r3, [r7, #20]
      break;
 8003c6e:	e005      	b.n	8003c7c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003c70:	4b19      	ldr	r3, [pc, #100]	; (8003cd8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003c72:	617b      	str	r3, [r7, #20]
      break;
 8003c74:	e002      	b.n	8003c7c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	617b      	str	r3, [r7, #20]
      break;
 8003c7a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c7c:	4b13      	ldr	r3, [pc, #76]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x108>)
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	091b      	lsrs	r3, r3, #4
 8003c82:	f003 0307 	and.w	r3, r3, #7
 8003c86:	3301      	adds	r3, #1
 8003c88:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003c8a:	4b10      	ldr	r3, [pc, #64]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x108>)
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	0a1b      	lsrs	r3, r3, #8
 8003c90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c94:	697a      	ldr	r2, [r7, #20]
 8003c96:	fb02 f203 	mul.w	r2, r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ca2:	4b0a      	ldr	r3, [pc, #40]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x108>)
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	0e5b      	lsrs	r3, r3, #25
 8003ca8:	f003 0303 	and.w	r3, r3, #3
 8003cac:	3301      	adds	r3, #1
 8003cae:	005b      	lsls	r3, r3, #1
 8003cb0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003cb2:	697a      	ldr	r2, [r7, #20]
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003cbc:	69bb      	ldr	r3, [r7, #24]
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3724      	adds	r7, #36	; 0x24
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	40021000 	.word	0x40021000
 8003cd0:	08007ef8 	.word	0x08007ef8
 8003cd4:	00f42400 	.word	0x00f42400
 8003cd8:	01312d00 	.word	0x01312d00

08003cdc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b086      	sub	sp, #24
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003ce8:	4b2a      	ldr	r3, [pc, #168]	; (8003d94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d003      	beq.n	8003cfc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003cf4:	f7ff fa00 	bl	80030f8 <HAL_PWREx_GetVoltageRange>
 8003cf8:	6178      	str	r0, [r7, #20]
 8003cfa:	e014      	b.n	8003d26 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003cfc:	4b25      	ldr	r3, [pc, #148]	; (8003d94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d00:	4a24      	ldr	r2, [pc, #144]	; (8003d94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d06:	6593      	str	r3, [r2, #88]	; 0x58
 8003d08:	4b22      	ldr	r3, [pc, #136]	; (8003d94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d10:	60fb      	str	r3, [r7, #12]
 8003d12:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003d14:	f7ff f9f0 	bl	80030f8 <HAL_PWREx_GetVoltageRange>
 8003d18:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003d1a:	4b1e      	ldr	r3, [pc, #120]	; (8003d94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d1e:	4a1d      	ldr	r2, [pc, #116]	; (8003d94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d24:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d2c:	d10b      	bne.n	8003d46 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2b80      	cmp	r3, #128	; 0x80
 8003d32:	d919      	bls.n	8003d68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2ba0      	cmp	r3, #160	; 0xa0
 8003d38:	d902      	bls.n	8003d40 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d3a:	2302      	movs	r3, #2
 8003d3c:	613b      	str	r3, [r7, #16]
 8003d3e:	e013      	b.n	8003d68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d40:	2301      	movs	r3, #1
 8003d42:	613b      	str	r3, [r7, #16]
 8003d44:	e010      	b.n	8003d68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2b80      	cmp	r3, #128	; 0x80
 8003d4a:	d902      	bls.n	8003d52 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	613b      	str	r3, [r7, #16]
 8003d50:	e00a      	b.n	8003d68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2b80      	cmp	r3, #128	; 0x80
 8003d56:	d102      	bne.n	8003d5e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d58:	2302      	movs	r3, #2
 8003d5a:	613b      	str	r3, [r7, #16]
 8003d5c:	e004      	b.n	8003d68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2b70      	cmp	r3, #112	; 0x70
 8003d62:	d101      	bne.n	8003d68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d64:	2301      	movs	r3, #1
 8003d66:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003d68:	4b0b      	ldr	r3, [pc, #44]	; (8003d98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f023 0207 	bic.w	r2, r3, #7
 8003d70:	4909      	ldr	r1, [pc, #36]	; (8003d98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003d78:	4b07      	ldr	r3, [pc, #28]	; (8003d98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0307 	and.w	r3, r3, #7
 8003d80:	693a      	ldr	r2, [r7, #16]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d001      	beq.n	8003d8a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e000      	b.n	8003d8c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003d8a:	2300      	movs	r3, #0
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3718      	adds	r7, #24
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	40021000 	.word	0x40021000
 8003d98:	40022000 	.word	0x40022000

08003d9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b086      	sub	sp, #24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003da4:	2300      	movs	r3, #0
 8003da6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003da8:	2300      	movs	r3, #0
 8003daa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d031      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dbc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003dc0:	d01a      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003dc2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003dc6:	d814      	bhi.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d009      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003dcc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003dd0:	d10f      	bne.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003dd2:	4b5d      	ldr	r3, [pc, #372]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	4a5c      	ldr	r2, [pc, #368]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ddc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003dde:	e00c      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	3304      	adds	r3, #4
 8003de4:	2100      	movs	r1, #0
 8003de6:	4618      	mov	r0, r3
 8003de8:	f000 fa12 	bl	8004210 <RCCEx_PLLSAI1_Config>
 8003dec:	4603      	mov	r3, r0
 8003dee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003df0:	e003      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	74fb      	strb	r3, [r7, #19]
      break;
 8003df6:	e000      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003df8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dfa:	7cfb      	ldrb	r3, [r7, #19]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d10b      	bne.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e00:	4b51      	ldr	r3, [pc, #324]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e06:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e0e:	494e      	ldr	r1, [pc, #312]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003e16:	e001      	b.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e18:	7cfb      	ldrb	r3, [r7, #19]
 8003e1a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	f000 809e 	beq.w	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003e2e:	4b46      	ldr	r3, [pc, #280]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d101      	bne.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e000      	b.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003e3e:	2300      	movs	r3, #0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d00d      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e44:	4b40      	ldr	r3, [pc, #256]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e48:	4a3f      	ldr	r2, [pc, #252]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e4e:	6593      	str	r3, [r2, #88]	; 0x58
 8003e50:	4b3d      	ldr	r3, [pc, #244]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e58:	60bb      	str	r3, [r7, #8]
 8003e5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e60:	4b3a      	ldr	r3, [pc, #232]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a39      	ldr	r2, [pc, #228]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003e66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e6a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e6c:	f7fc fd3c 	bl	80008e8 <HAL_GetTick>
 8003e70:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e72:	e009      	b.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e74:	f7fc fd38 	bl	80008e8 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d902      	bls.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	74fb      	strb	r3, [r7, #19]
        break;
 8003e86:	e005      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e88:	4b30      	ldr	r3, [pc, #192]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d0ef      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003e94:	7cfb      	ldrb	r3, [r7, #19]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d15a      	bne.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e9a:	4b2b      	ldr	r3, [pc, #172]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ea4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d01e      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eb0:	697a      	ldr	r2, [r7, #20]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d019      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003eb6:	4b24      	ldr	r3, [pc, #144]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ebc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ec0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ec2:	4b21      	ldr	r3, [pc, #132]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ec8:	4a1f      	ldr	r2, [pc, #124]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003eca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ece:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ed2:	4b1d      	ldr	r3, [pc, #116]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ed8:	4a1b      	ldr	r2, [pc, #108]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003eda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ede:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ee2:	4a19      	ldr	r2, [pc, #100]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	f003 0301 	and.w	r3, r3, #1
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d016      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef4:	f7fc fcf8 	bl	80008e8 <HAL_GetTick>
 8003ef8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003efa:	e00b      	b.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003efc:	f7fc fcf4 	bl	80008e8 <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d902      	bls.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	74fb      	strb	r3, [r7, #19]
            break;
 8003f12:	e006      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f14:	4b0c      	ldr	r3, [pc, #48]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d0ec      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003f22:	7cfb      	ldrb	r3, [r7, #19]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d10b      	bne.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f28:	4b07      	ldr	r3, [pc, #28]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f2e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f36:	4904      	ldr	r1, [pc, #16]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003f3e:	e009      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f40:	7cfb      	ldrb	r3, [r7, #19]
 8003f42:	74bb      	strb	r3, [r7, #18]
 8003f44:	e006      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003f46:	bf00      	nop
 8003f48:	40021000 	.word	0x40021000
 8003f4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f50:	7cfb      	ldrb	r3, [r7, #19]
 8003f52:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f54:	7c7b      	ldrb	r3, [r7, #17]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d105      	bne.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f5a:	4bac      	ldr	r3, [pc, #688]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8003f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f5e:	4aab      	ldr	r2, [pc, #684]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8003f60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f64:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0301 	and.w	r3, r3, #1
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00a      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f72:	4ba6      	ldr	r3, [pc, #664]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8003f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f78:	f023 0203 	bic.w	r2, r3, #3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a1b      	ldr	r3, [r3, #32]
 8003f80:	49a2      	ldr	r1, [pc, #648]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0302 	and.w	r3, r3, #2
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00a      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f94:	4b9d      	ldr	r3, [pc, #628]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8003f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f9a:	f023 020c 	bic.w	r2, r3, #12
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa2:	499a      	ldr	r1, [pc, #616]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0304 	and.w	r3, r3, #4
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00a      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003fb6:	4b95      	ldr	r3, [pc, #596]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8003fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fbc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc4:	4991      	ldr	r1, [pc, #580]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0308 	and.w	r3, r3, #8
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00a      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003fd8:	4b8c      	ldr	r3, [pc, #560]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8003fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fde:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe6:	4989      	ldr	r1, [pc, #548]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0320 	and.w	r3, r3, #32
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00a      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ffa:	4b84      	ldr	r3, [pc, #528]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8003ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004000:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004008:	4980      	ldr	r1, [pc, #512]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800400a:	4313      	orrs	r3, r2
 800400c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00a      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800401c:	4b7b      	ldr	r3, [pc, #492]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800401e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004022:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800402a:	4978      	ldr	r1, [pc, #480]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800402c:	4313      	orrs	r3, r2
 800402e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00a      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800403e:	4b73      	ldr	r3, [pc, #460]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004044:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800404c:	496f      	ldr	r1, [pc, #444]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800404e:	4313      	orrs	r3, r2
 8004050:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00a      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004060:	4b6a      	ldr	r3, [pc, #424]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004066:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800406e:	4967      	ldr	r1, [pc, #412]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004070:	4313      	orrs	r3, r2
 8004072:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00a      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004082:	4b62      	ldr	r3, [pc, #392]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004088:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004090:	495e      	ldr	r1, [pc, #376]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004092:	4313      	orrs	r3, r2
 8004094:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00a      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80040a4:	4b59      	ldr	r3, [pc, #356]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80040a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040aa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040b2:	4956      	ldr	r1, [pc, #344]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d00a      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80040c6:	4b51      	ldr	r3, [pc, #324]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80040c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040cc:	f023 0203 	bic.w	r2, r3, #3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d4:	494d      	ldr	r1, [pc, #308]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d028      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80040e8:	4b48      	ldr	r3, [pc, #288]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80040ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040f6:	4945      	ldr	r1, [pc, #276]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004102:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004106:	d106      	bne.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004108:	4b40      	ldr	r3, [pc, #256]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	4a3f      	ldr	r2, [pc, #252]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800410e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004112:	60d3      	str	r3, [r2, #12]
 8004114:	e011      	b.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800411a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800411e:	d10c      	bne.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	3304      	adds	r3, #4
 8004124:	2101      	movs	r1, #1
 8004126:	4618      	mov	r0, r3
 8004128:	f000 f872 	bl	8004210 <RCCEx_PLLSAI1_Config>
 800412c:	4603      	mov	r3, r0
 800412e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004130:	7cfb      	ldrb	r3, [r7, #19]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d001      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* set overall return value */
        status = ret;
 8004136:	7cfb      	ldrb	r3, [r7, #19]
 8004138:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d028      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004146:	4b31      	ldr	r3, [pc, #196]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800414c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004154:	492d      	ldr	r1, [pc, #180]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004156:	4313      	orrs	r3, r2
 8004158:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004160:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004164:	d106      	bne.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004166:	4b29      	ldr	r3, [pc, #164]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	4a28      	ldr	r2, [pc, #160]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800416c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004170:	60d3      	str	r3, [r2, #12]
 8004172:	e011      	b.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004178:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800417c:	d10c      	bne.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	3304      	adds	r3, #4
 8004182:	2101      	movs	r1, #1
 8004184:	4618      	mov	r0, r3
 8004186:	f000 f843 	bl	8004210 <RCCEx_PLLSAI1_Config>
 800418a:	4603      	mov	r3, r0
 800418c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800418e:	7cfb      	ldrb	r3, [r7, #19]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d001      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8004194:	7cfb      	ldrb	r3, [r7, #19]
 8004196:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d01c      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041a4:	4b19      	ldr	r3, [pc, #100]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80041a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041aa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b2:	4916      	ldr	r1, [pc, #88]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80041b4:	4313      	orrs	r3, r2
 80041b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041c2:	d10c      	bne.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	3304      	adds	r3, #4
 80041c8:	2102      	movs	r1, #2
 80041ca:	4618      	mov	r0, r3
 80041cc:	f000 f820 	bl	8004210 <RCCEx_PLLSAI1_Config>
 80041d0:	4603      	mov	r3, r0
 80041d2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041d4:	7cfb      	ldrb	r3, [r7, #19]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d001      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x442>
      {
        /* set overall return value */
        status = ret;
 80041da:	7cfb      	ldrb	r3, [r7, #19]
 80041dc:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00a      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x464>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80041ea:	4b08      	ldr	r3, [pc, #32]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80041ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041f8:	4904      	ldr	r1, [pc, #16]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004200:	7cbb      	ldrb	r3, [r7, #18]
}
 8004202:	4618      	mov	r0, r3
 8004204:	3718      	adds	r7, #24
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	40021000 	.word	0x40021000

08004210 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800421a:	2300      	movs	r3, #0
 800421c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800421e:	4b74      	ldr	r3, [pc, #464]	; (80043f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	f003 0303 	and.w	r3, r3, #3
 8004226:	2b00      	cmp	r3, #0
 8004228:	d018      	beq.n	800425c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800422a:	4b71      	ldr	r3, [pc, #452]	; (80043f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	f003 0203 	and.w	r2, r3, #3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	429a      	cmp	r2, r3
 8004238:	d10d      	bne.n	8004256 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
       ||
 800423e:	2b00      	cmp	r3, #0
 8004240:	d009      	beq.n	8004256 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004242:	4b6b      	ldr	r3, [pc, #428]	; (80043f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	091b      	lsrs	r3, r3, #4
 8004248:	f003 0307 	and.w	r3, r3, #7
 800424c:	1c5a      	adds	r2, r3, #1
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
       ||
 8004252:	429a      	cmp	r2, r3
 8004254:	d047      	beq.n	80042e6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	73fb      	strb	r3, [r7, #15]
 800425a:	e044      	b.n	80042e6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2b03      	cmp	r3, #3
 8004262:	d018      	beq.n	8004296 <RCCEx_PLLSAI1_Config+0x86>
 8004264:	2b03      	cmp	r3, #3
 8004266:	d825      	bhi.n	80042b4 <RCCEx_PLLSAI1_Config+0xa4>
 8004268:	2b01      	cmp	r3, #1
 800426a:	d002      	beq.n	8004272 <RCCEx_PLLSAI1_Config+0x62>
 800426c:	2b02      	cmp	r3, #2
 800426e:	d009      	beq.n	8004284 <RCCEx_PLLSAI1_Config+0x74>
 8004270:	e020      	b.n	80042b4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004272:	4b5f      	ldr	r3, [pc, #380]	; (80043f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d11d      	bne.n	80042ba <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004282:	e01a      	b.n	80042ba <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004284:	4b5a      	ldr	r3, [pc, #360]	; (80043f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800428c:	2b00      	cmp	r3, #0
 800428e:	d116      	bne.n	80042be <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004294:	e013      	b.n	80042be <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004296:	4b56      	ldr	r3, [pc, #344]	; (80043f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d10f      	bne.n	80042c2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80042a2:	4b53      	ldr	r3, [pc, #332]	; (80043f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d109      	bne.n	80042c2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80042b2:	e006      	b.n	80042c2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	73fb      	strb	r3, [r7, #15]
      break;
 80042b8:	e004      	b.n	80042c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042ba:	bf00      	nop
 80042bc:	e002      	b.n	80042c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042be:	bf00      	nop
 80042c0:	e000      	b.n	80042c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80042c4:	7bfb      	ldrb	r3, [r7, #15]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d10d      	bne.n	80042e6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80042ca:	4b49      	ldr	r3, [pc, #292]	; (80043f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6819      	ldr	r1, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	3b01      	subs	r3, #1
 80042dc:	011b      	lsls	r3, r3, #4
 80042de:	430b      	orrs	r3, r1
 80042e0:	4943      	ldr	r1, [pc, #268]	; (80043f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80042e6:	7bfb      	ldrb	r3, [r7, #15]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d17c      	bne.n	80043e6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80042ec:	4b40      	ldr	r3, [pc, #256]	; (80043f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a3f      	ldr	r2, [pc, #252]	; (80043f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80042f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042f8:	f7fc faf6 	bl	80008e8 <HAL_GetTick>
 80042fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80042fe:	e009      	b.n	8004314 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004300:	f7fc faf2 	bl	80008e8 <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	2b02      	cmp	r3, #2
 800430c:	d902      	bls.n	8004314 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	73fb      	strb	r3, [r7, #15]
        break;
 8004312:	e005      	b.n	8004320 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004314:	4b36      	ldr	r3, [pc, #216]	; (80043f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d1ef      	bne.n	8004300 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004320:	7bfb      	ldrb	r3, [r7, #15]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d15f      	bne.n	80043e6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d110      	bne.n	800434e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800432c:	4b30      	ldr	r3, [pc, #192]	; (80043f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004334:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	6892      	ldr	r2, [r2, #8]
 800433c:	0211      	lsls	r1, r2, #8
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	68d2      	ldr	r2, [r2, #12]
 8004342:	06d2      	lsls	r2, r2, #27
 8004344:	430a      	orrs	r2, r1
 8004346:	492a      	ldr	r1, [pc, #168]	; (80043f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004348:	4313      	orrs	r3, r2
 800434a:	610b      	str	r3, [r1, #16]
 800434c:	e027      	b.n	800439e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	2b01      	cmp	r3, #1
 8004352:	d112      	bne.n	800437a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004354:	4b26      	ldr	r3, [pc, #152]	; (80043f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004356:	691b      	ldr	r3, [r3, #16]
 8004358:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800435c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	6892      	ldr	r2, [r2, #8]
 8004364:	0211      	lsls	r1, r2, #8
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	6912      	ldr	r2, [r2, #16]
 800436a:	0852      	lsrs	r2, r2, #1
 800436c:	3a01      	subs	r2, #1
 800436e:	0552      	lsls	r2, r2, #21
 8004370:	430a      	orrs	r2, r1
 8004372:	491f      	ldr	r1, [pc, #124]	; (80043f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004374:	4313      	orrs	r3, r2
 8004376:	610b      	str	r3, [r1, #16]
 8004378:	e011      	b.n	800439e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800437a:	4b1d      	ldr	r3, [pc, #116]	; (80043f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004382:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	6892      	ldr	r2, [r2, #8]
 800438a:	0211      	lsls	r1, r2, #8
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	6952      	ldr	r2, [r2, #20]
 8004390:	0852      	lsrs	r2, r2, #1
 8004392:	3a01      	subs	r2, #1
 8004394:	0652      	lsls	r2, r2, #25
 8004396:	430a      	orrs	r2, r1
 8004398:	4915      	ldr	r1, [pc, #84]	; (80043f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800439a:	4313      	orrs	r3, r2
 800439c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800439e:	4b14      	ldr	r3, [pc, #80]	; (80043f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a13      	ldr	r2, [pc, #76]	; (80043f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80043a8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043aa:	f7fc fa9d 	bl	80008e8 <HAL_GetTick>
 80043ae:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80043b0:	e009      	b.n	80043c6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043b2:	f7fc fa99 	bl	80008e8 <HAL_GetTick>
 80043b6:	4602      	mov	r2, r0
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d902      	bls.n	80043c6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	73fb      	strb	r3, [r7, #15]
          break;
 80043c4:	e005      	b.n	80043d2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80043c6:	4b0a      	ldr	r3, [pc, #40]	; (80043f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d0ef      	beq.n	80043b2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80043d2:	7bfb      	ldrb	r3, [r7, #15]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d106      	bne.n	80043e6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80043d8:	4b05      	ldr	r3, [pc, #20]	; (80043f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043da:	691a      	ldr	r2, [r3, #16]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	699b      	ldr	r3, [r3, #24]
 80043e0:	4903      	ldr	r1, [pc, #12]	; (80043f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80043e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3710      	adds	r7, #16
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	40021000 	.word	0x40021000

080043f4 <__NVIC_SetPriority>:
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	4603      	mov	r3, r0
 80043fc:	6039      	str	r1, [r7, #0]
 80043fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004404:	2b00      	cmp	r3, #0
 8004406:	db0a      	blt.n	800441e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	b2da      	uxtb	r2, r3
 800440c:	490c      	ldr	r1, [pc, #48]	; (8004440 <__NVIC_SetPriority+0x4c>)
 800440e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004412:	0112      	lsls	r2, r2, #4
 8004414:	b2d2      	uxtb	r2, r2
 8004416:	440b      	add	r3, r1
 8004418:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800441c:	e00a      	b.n	8004434 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	b2da      	uxtb	r2, r3
 8004422:	4908      	ldr	r1, [pc, #32]	; (8004444 <__NVIC_SetPriority+0x50>)
 8004424:	79fb      	ldrb	r3, [r7, #7]
 8004426:	f003 030f 	and.w	r3, r3, #15
 800442a:	3b04      	subs	r3, #4
 800442c:	0112      	lsls	r2, r2, #4
 800442e:	b2d2      	uxtb	r2, r2
 8004430:	440b      	add	r3, r1
 8004432:	761a      	strb	r2, [r3, #24]
}
 8004434:	bf00      	nop
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr
 8004440:	e000e100 	.word	0xe000e100
 8004444:	e000ed00 	.word	0xe000ed00

08004448 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004448:	b580      	push	{r7, lr}
 800444a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800444c:	2100      	movs	r1, #0
 800444e:	f06f 0004 	mvn.w	r0, #4
 8004452:	f7ff ffcf 	bl	80043f4 <__NVIC_SetPriority>
#endif
}
 8004456:	bf00      	nop
 8004458:	bd80      	pop	{r7, pc}
	...

0800445c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004462:	f3ef 8305 	mrs	r3, IPSR
 8004466:	603b      	str	r3, [r7, #0]
  return(result);
 8004468:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800446a:	2b00      	cmp	r3, #0
 800446c:	d003      	beq.n	8004476 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800446e:	f06f 0305 	mvn.w	r3, #5
 8004472:	607b      	str	r3, [r7, #4]
 8004474:	e00c      	b.n	8004490 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004476:	4b0a      	ldr	r3, [pc, #40]	; (80044a0 <osKernelInitialize+0x44>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d105      	bne.n	800448a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800447e:	4b08      	ldr	r3, [pc, #32]	; (80044a0 <osKernelInitialize+0x44>)
 8004480:	2201      	movs	r2, #1
 8004482:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004484:	2300      	movs	r3, #0
 8004486:	607b      	str	r3, [r7, #4]
 8004488:	e002      	b.n	8004490 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800448a:	f04f 33ff 	mov.w	r3, #4294967295
 800448e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004490:	687b      	ldr	r3, [r7, #4]
}
 8004492:	4618      	mov	r0, r3
 8004494:	370c      	adds	r7, #12
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop
 80044a0:	2000003c 	.word	0x2000003c

080044a4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044aa:	f3ef 8305 	mrs	r3, IPSR
 80044ae:	603b      	str	r3, [r7, #0]
  return(result);
 80044b0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d003      	beq.n	80044be <osKernelStart+0x1a>
    stat = osErrorISR;
 80044b6:	f06f 0305 	mvn.w	r3, #5
 80044ba:	607b      	str	r3, [r7, #4]
 80044bc:	e010      	b.n	80044e0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80044be:	4b0b      	ldr	r3, [pc, #44]	; (80044ec <osKernelStart+0x48>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d109      	bne.n	80044da <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80044c6:	f7ff ffbf 	bl	8004448 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80044ca:	4b08      	ldr	r3, [pc, #32]	; (80044ec <osKernelStart+0x48>)
 80044cc:	2202      	movs	r2, #2
 80044ce:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80044d0:	f001 fa50 	bl	8005974 <vTaskStartScheduler>
      stat = osOK;
 80044d4:	2300      	movs	r3, #0
 80044d6:	607b      	str	r3, [r7, #4]
 80044d8:	e002      	b.n	80044e0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80044da:	f04f 33ff 	mov.w	r3, #4294967295
 80044de:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80044e0:	687b      	ldr	r3, [r7, #4]
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3708      	adds	r7, #8
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	2000003c 	.word	0x2000003c

080044f0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b08e      	sub	sp, #56	; 0x38
 80044f4:	af04      	add	r7, sp, #16
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80044fc:	2300      	movs	r3, #0
 80044fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004500:	f3ef 8305 	mrs	r3, IPSR
 8004504:	617b      	str	r3, [r7, #20]
  return(result);
 8004506:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004508:	2b00      	cmp	r3, #0
 800450a:	d17e      	bne.n	800460a <osThreadNew+0x11a>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d07b      	beq.n	800460a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004512:	2380      	movs	r3, #128	; 0x80
 8004514:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004516:	2318      	movs	r3, #24
 8004518:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800451a:	2300      	movs	r3, #0
 800451c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800451e:	f04f 33ff 	mov.w	r3, #4294967295
 8004522:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d045      	beq.n	80045b6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d002      	beq.n	8004538 <osThreadNew+0x48>
        name = attr->name;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	699b      	ldr	r3, [r3, #24]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d002      	beq.n	8004546 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d008      	beq.n	800455e <osThreadNew+0x6e>
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	2b38      	cmp	r3, #56	; 0x38
 8004550:	d805      	bhi.n	800455e <osThreadNew+0x6e>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	f003 0301 	and.w	r3, r3, #1
 800455a:	2b00      	cmp	r3, #0
 800455c:	d001      	beq.n	8004562 <osThreadNew+0x72>
        return (NULL);
 800455e:	2300      	movs	r3, #0
 8004560:	e054      	b.n	800460c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	695b      	ldr	r3, [r3, #20]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d003      	beq.n	8004572 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	089b      	lsrs	r3, r3, #2
 8004570:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00e      	beq.n	8004598 <osThreadNew+0xa8>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	2b5b      	cmp	r3, #91	; 0x5b
 8004580:	d90a      	bls.n	8004598 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004586:	2b00      	cmp	r3, #0
 8004588:	d006      	beq.n	8004598 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	695b      	ldr	r3, [r3, #20]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d002      	beq.n	8004598 <osThreadNew+0xa8>
        mem = 1;
 8004592:	2301      	movs	r3, #1
 8004594:	61bb      	str	r3, [r7, #24]
 8004596:	e010      	b.n	80045ba <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d10c      	bne.n	80045ba <osThreadNew+0xca>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d108      	bne.n	80045ba <osThreadNew+0xca>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d104      	bne.n	80045ba <osThreadNew+0xca>
          mem = 0;
 80045b0:	2300      	movs	r3, #0
 80045b2:	61bb      	str	r3, [r7, #24]
 80045b4:	e001      	b.n	80045ba <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80045b6:	2300      	movs	r3, #0
 80045b8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d110      	bne.n	80045e2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80045c8:	9202      	str	r2, [sp, #8]
 80045ca:	9301      	str	r3, [sp, #4]
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	9300      	str	r3, [sp, #0]
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	6a3a      	ldr	r2, [r7, #32]
 80045d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045d6:	68f8      	ldr	r0, [r7, #12]
 80045d8:	f000 fff6 	bl	80055c8 <xTaskCreateStatic>
 80045dc:	4603      	mov	r3, r0
 80045de:	613b      	str	r3, [r7, #16]
 80045e0:	e013      	b.n	800460a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d110      	bne.n	800460a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80045e8:	6a3b      	ldr	r3, [r7, #32]
 80045ea:	b29a      	uxth	r2, r3
 80045ec:	f107 0310 	add.w	r3, r7, #16
 80045f0:	9301      	str	r3, [sp, #4]
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	9300      	str	r3, [sp, #0]
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045fa:	68f8      	ldr	r0, [r7, #12]
 80045fc:	f001 f841 	bl	8005682 <xTaskCreate>
 8004600:	4603      	mov	r3, r0
 8004602:	2b01      	cmp	r3, #1
 8004604:	d001      	beq.n	800460a <osThreadNew+0x11a>
            hTask = NULL;
 8004606:	2300      	movs	r3, #0
 8004608:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800460a:	693b      	ldr	r3, [r7, #16]
}
 800460c:	4618      	mov	r0, r3
 800460e:	3728      	adds	r7, #40	; 0x28
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800461c:	f3ef 8305 	mrs	r3, IPSR
 8004620:	60bb      	str	r3, [r7, #8]
  return(result);
 8004622:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004624:	2b00      	cmp	r3, #0
 8004626:	d003      	beq.n	8004630 <osDelay+0x1c>
    stat = osErrorISR;
 8004628:	f06f 0305 	mvn.w	r3, #5
 800462c:	60fb      	str	r3, [r7, #12]
 800462e:	e007      	b.n	8004640 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004630:	2300      	movs	r3, #0
 8004632:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d002      	beq.n	8004640 <osDelay+0x2c>
      vTaskDelay(ticks);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f001 f966 	bl	800590c <vTaskDelay>
    }
  }

  return (stat);
 8004640:	68fb      	ldr	r3, [r7, #12]
}
 8004642:	4618      	mov	r0, r3
 8004644:	3710      	adds	r7, #16
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
	...

0800464c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800464c:	b480      	push	{r7}
 800464e:	b085      	sub	sp, #20
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	4a07      	ldr	r2, [pc, #28]	; (8004678 <vApplicationGetIdleTaskMemory+0x2c>)
 800465c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	4a06      	ldr	r2, [pc, #24]	; (800467c <vApplicationGetIdleTaskMemory+0x30>)
 8004662:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2280      	movs	r2, #128	; 0x80
 8004668:	601a      	str	r2, [r3, #0]
}
 800466a:	bf00      	nop
 800466c:	3714      	adds	r7, #20
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	20000040 	.word	0x20000040
 800467c:	2000009c 	.word	0x2000009c

08004680 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004680:	b480      	push	{r7}
 8004682:	b085      	sub	sp, #20
 8004684:	af00      	add	r7, sp, #0
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	4a07      	ldr	r2, [pc, #28]	; (80046ac <vApplicationGetTimerTaskMemory+0x2c>)
 8004690:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	4a06      	ldr	r2, [pc, #24]	; (80046b0 <vApplicationGetTimerTaskMemory+0x30>)
 8004696:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800469e:	601a      	str	r2, [r3, #0]
}
 80046a0:	bf00      	nop
 80046a2:	3714      	adds	r7, #20
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr
 80046ac:	2000029c 	.word	0x2000029c
 80046b0:	200002f8 	.word	0x200002f8

080046b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f103 0208 	add.w	r2, r3, #8
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f04f 32ff 	mov.w	r2, #4294967295
 80046cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f103 0208 	add.w	r2, r3, #8
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f103 0208 	add.w	r2, r3, #8
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80046e8:	bf00      	nop
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004702:	bf00      	nop
 8004704:	370c      	adds	r7, #12
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr

0800470e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800470e:	b480      	push	{r7}
 8004710:	b085      	sub	sp, #20
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
 8004716:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	68fa      	ldr	r2, [r7, #12]
 8004722:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	689a      	ldr	r2, [r3, #8]
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	683a      	ldr	r2, [r7, #0]
 8004732:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	683a      	ldr	r2, [r7, #0]
 8004738:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	1c5a      	adds	r2, r3, #1
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	601a      	str	r2, [r3, #0]
}
 800474a:	bf00      	nop
 800474c:	3714      	adds	r7, #20
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr

08004756 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004756:	b480      	push	{r7}
 8004758:	b085      	sub	sp, #20
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
 800475e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800476c:	d103      	bne.n	8004776 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	60fb      	str	r3, [r7, #12]
 8004774:	e00c      	b.n	8004790 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	3308      	adds	r3, #8
 800477a:	60fb      	str	r3, [r7, #12]
 800477c:	e002      	b.n	8004784 <vListInsert+0x2e>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	60fb      	str	r3, [r7, #12]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	68ba      	ldr	r2, [r7, #8]
 800478c:	429a      	cmp	r2, r3
 800478e:	d2f6      	bcs.n	800477e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	685a      	ldr	r2, [r3, #4]
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	683a      	ldr	r2, [r7, #0]
 800479e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	68fa      	ldr	r2, [r7, #12]
 80047a4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	683a      	ldr	r2, [r7, #0]
 80047aa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	1c5a      	adds	r2, r3, #1
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	601a      	str	r2, [r3, #0]
}
 80047bc:	bf00      	nop
 80047be:	3714      	adds	r7, #20
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80047c8:	b480      	push	{r7}
 80047ca:	b085      	sub	sp, #20
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	691b      	ldr	r3, [r3, #16]
 80047d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	6892      	ldr	r2, [r2, #8]
 80047de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	6852      	ldr	r2, [r2, #4]
 80047e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d103      	bne.n	80047fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	689a      	ldr	r2, [r3, #8]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	1e5a      	subs	r2, r3, #1
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
}
 8004810:	4618      	mov	r0, r3
 8004812:	3714      	adds	r7, #20
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d10a      	bne.n	8004846 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004834:	f383 8811 	msr	BASEPRI, r3
 8004838:	f3bf 8f6f 	isb	sy
 800483c:	f3bf 8f4f 	dsb	sy
 8004840:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004842:	bf00      	nop
 8004844:	e7fe      	b.n	8004844 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004846:	f002 fb35 	bl	8006eb4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004852:	68f9      	ldr	r1, [r7, #12]
 8004854:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004856:	fb01 f303 	mul.w	r3, r1, r3
 800485a:	441a      	add	r2, r3
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2200      	movs	r2, #0
 8004864:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004876:	3b01      	subs	r3, #1
 8004878:	68f9      	ldr	r1, [r7, #12]
 800487a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800487c:	fb01 f303 	mul.w	r3, r1, r3
 8004880:	441a      	add	r2, r3
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	22ff      	movs	r2, #255	; 0xff
 800488a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	22ff      	movs	r2, #255	; 0xff
 8004892:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d114      	bne.n	80048c6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d01a      	beq.n	80048da <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	3310      	adds	r3, #16
 80048a8:	4618      	mov	r0, r3
 80048aa:	f001 faed 	bl	8005e88 <xTaskRemoveFromEventList>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d012      	beq.n	80048da <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80048b4:	4b0c      	ldr	r3, [pc, #48]	; (80048e8 <xQueueGenericReset+0xcc>)
 80048b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048ba:	601a      	str	r2, [r3, #0]
 80048bc:	f3bf 8f4f 	dsb	sy
 80048c0:	f3bf 8f6f 	isb	sy
 80048c4:	e009      	b.n	80048da <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	3310      	adds	r3, #16
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7ff fef2 	bl	80046b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	3324      	adds	r3, #36	; 0x24
 80048d4:	4618      	mov	r0, r3
 80048d6:	f7ff feed 	bl	80046b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80048da:	f002 fb1b 	bl	8006f14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80048de:	2301      	movs	r3, #1
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3710      	adds	r7, #16
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	e000ed04 	.word	0xe000ed04

080048ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b08e      	sub	sp, #56	; 0x38
 80048f0:	af02      	add	r7, sp, #8
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	607a      	str	r2, [r7, #4]
 80048f8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d10a      	bne.n	8004916 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004904:	f383 8811 	msr	BASEPRI, r3
 8004908:	f3bf 8f6f 	isb	sy
 800490c:	f3bf 8f4f 	dsb	sy
 8004910:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004912:	bf00      	nop
 8004914:	e7fe      	b.n	8004914 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d10a      	bne.n	8004932 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800491c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004920:	f383 8811 	msr	BASEPRI, r3
 8004924:	f3bf 8f6f 	isb	sy
 8004928:	f3bf 8f4f 	dsb	sy
 800492c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800492e:	bf00      	nop
 8004930:	e7fe      	b.n	8004930 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d002      	beq.n	800493e <xQueueGenericCreateStatic+0x52>
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d001      	beq.n	8004942 <xQueueGenericCreateStatic+0x56>
 800493e:	2301      	movs	r3, #1
 8004940:	e000      	b.n	8004944 <xQueueGenericCreateStatic+0x58>
 8004942:	2300      	movs	r3, #0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d10a      	bne.n	800495e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800494c:	f383 8811 	msr	BASEPRI, r3
 8004950:	f3bf 8f6f 	isb	sy
 8004954:	f3bf 8f4f 	dsb	sy
 8004958:	623b      	str	r3, [r7, #32]
}
 800495a:	bf00      	nop
 800495c:	e7fe      	b.n	800495c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d102      	bne.n	800496a <xQueueGenericCreateStatic+0x7e>
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d101      	bne.n	800496e <xQueueGenericCreateStatic+0x82>
 800496a:	2301      	movs	r3, #1
 800496c:	e000      	b.n	8004970 <xQueueGenericCreateStatic+0x84>
 800496e:	2300      	movs	r3, #0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d10a      	bne.n	800498a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004978:	f383 8811 	msr	BASEPRI, r3
 800497c:	f3bf 8f6f 	isb	sy
 8004980:	f3bf 8f4f 	dsb	sy
 8004984:	61fb      	str	r3, [r7, #28]
}
 8004986:	bf00      	nop
 8004988:	e7fe      	b.n	8004988 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800498a:	2350      	movs	r3, #80	; 0x50
 800498c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	2b50      	cmp	r3, #80	; 0x50
 8004992:	d00a      	beq.n	80049aa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004998:	f383 8811 	msr	BASEPRI, r3
 800499c:	f3bf 8f6f 	isb	sy
 80049a0:	f3bf 8f4f 	dsb	sy
 80049a4:	61bb      	str	r3, [r7, #24]
}
 80049a6:	bf00      	nop
 80049a8:	e7fe      	b.n	80049a8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80049aa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80049b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00d      	beq.n	80049d2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80049b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b8:	2201      	movs	r2, #1
 80049ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80049be:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80049c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c4:	9300      	str	r3, [sp, #0]
 80049c6:	4613      	mov	r3, r2
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	68b9      	ldr	r1, [r7, #8]
 80049cc:	68f8      	ldr	r0, [r7, #12]
 80049ce:	f000 f83f 	bl	8004a50 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80049d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3730      	adds	r7, #48	; 0x30
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b08a      	sub	sp, #40	; 0x28
 80049e0:	af02      	add	r7, sp, #8
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	4613      	mov	r3, r2
 80049e8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d10a      	bne.n	8004a06 <xQueueGenericCreate+0x2a>
	__asm volatile
 80049f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f4:	f383 8811 	msr	BASEPRI, r3
 80049f8:	f3bf 8f6f 	isb	sy
 80049fc:	f3bf 8f4f 	dsb	sy
 8004a00:	613b      	str	r3, [r7, #16]
}
 8004a02:	bf00      	nop
 8004a04:	e7fe      	b.n	8004a04 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	68ba      	ldr	r2, [r7, #8]
 8004a0a:	fb02 f303 	mul.w	r3, r2, r3
 8004a0e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	3350      	adds	r3, #80	; 0x50
 8004a14:	4618      	mov	r0, r3
 8004a16:	f002 fb6f 	bl	80070f8 <pvPortMalloc>
 8004a1a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d011      	beq.n	8004a46 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	3350      	adds	r3, #80	; 0x50
 8004a2a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004a34:	79fa      	ldrb	r2, [r7, #7]
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	9300      	str	r3, [sp, #0]
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	697a      	ldr	r2, [r7, #20]
 8004a3e:	68b9      	ldr	r1, [r7, #8]
 8004a40:	68f8      	ldr	r0, [r7, #12]
 8004a42:	f000 f805 	bl	8004a50 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004a46:	69bb      	ldr	r3, [r7, #24]
	}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3720      	adds	r7, #32
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	607a      	str	r2, [r7, #4]
 8004a5c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d103      	bne.n	8004a6c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	69ba      	ldr	r2, [r7, #24]
 8004a68:	601a      	str	r2, [r3, #0]
 8004a6a:	e002      	b.n	8004a72 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	68ba      	ldr	r2, [r7, #8]
 8004a7c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004a7e:	2101      	movs	r1, #1
 8004a80:	69b8      	ldr	r0, [r7, #24]
 8004a82:	f7ff fecb 	bl	800481c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	78fa      	ldrb	r2, [r7, #3]
 8004a8a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004a8e:	bf00      	nop
 8004a90:	3710      	adds	r7, #16
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
	...

08004a98 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b08e      	sub	sp, #56	; 0x38
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	60b9      	str	r1, [r7, #8]
 8004aa2:	607a      	str	r2, [r7, #4]
 8004aa4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d10a      	bne.n	8004aca <xQueueGenericSend+0x32>
	__asm volatile
 8004ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab8:	f383 8811 	msr	BASEPRI, r3
 8004abc:	f3bf 8f6f 	isb	sy
 8004ac0:	f3bf 8f4f 	dsb	sy
 8004ac4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004ac6:	bf00      	nop
 8004ac8:	e7fe      	b.n	8004ac8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d103      	bne.n	8004ad8 <xQueueGenericSend+0x40>
 8004ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d101      	bne.n	8004adc <xQueueGenericSend+0x44>
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e000      	b.n	8004ade <xQueueGenericSend+0x46>
 8004adc:	2300      	movs	r3, #0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d10a      	bne.n	8004af8 <xQueueGenericSend+0x60>
	__asm volatile
 8004ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae6:	f383 8811 	msr	BASEPRI, r3
 8004aea:	f3bf 8f6f 	isb	sy
 8004aee:	f3bf 8f4f 	dsb	sy
 8004af2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004af4:	bf00      	nop
 8004af6:	e7fe      	b.n	8004af6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d103      	bne.n	8004b06 <xQueueGenericSend+0x6e>
 8004afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d101      	bne.n	8004b0a <xQueueGenericSend+0x72>
 8004b06:	2301      	movs	r3, #1
 8004b08:	e000      	b.n	8004b0c <xQueueGenericSend+0x74>
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d10a      	bne.n	8004b26 <xQueueGenericSend+0x8e>
	__asm volatile
 8004b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b14:	f383 8811 	msr	BASEPRI, r3
 8004b18:	f3bf 8f6f 	isb	sy
 8004b1c:	f3bf 8f4f 	dsb	sy
 8004b20:	623b      	str	r3, [r7, #32]
}
 8004b22:	bf00      	nop
 8004b24:	e7fe      	b.n	8004b24 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b26:	f001 fb6d 	bl	8006204 <xTaskGetSchedulerState>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d102      	bne.n	8004b36 <xQueueGenericSend+0x9e>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d101      	bne.n	8004b3a <xQueueGenericSend+0xa2>
 8004b36:	2301      	movs	r3, #1
 8004b38:	e000      	b.n	8004b3c <xQueueGenericSend+0xa4>
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d10a      	bne.n	8004b56 <xQueueGenericSend+0xbe>
	__asm volatile
 8004b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b44:	f383 8811 	msr	BASEPRI, r3
 8004b48:	f3bf 8f6f 	isb	sy
 8004b4c:	f3bf 8f4f 	dsb	sy
 8004b50:	61fb      	str	r3, [r7, #28]
}
 8004b52:	bf00      	nop
 8004b54:	e7fe      	b.n	8004b54 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b56:	f002 f9ad 	bl	8006eb4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d302      	bcc.n	8004b6c <xQueueGenericSend+0xd4>
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d129      	bne.n	8004bc0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b6c:	683a      	ldr	r2, [r7, #0]
 8004b6e:	68b9      	ldr	r1, [r7, #8]
 8004b70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b72:	f000 fbbb 	bl	80052ec <prvCopyDataToQueue>
 8004b76:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d010      	beq.n	8004ba2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b82:	3324      	adds	r3, #36	; 0x24
 8004b84:	4618      	mov	r0, r3
 8004b86:	f001 f97f 	bl	8005e88 <xTaskRemoveFromEventList>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d013      	beq.n	8004bb8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004b90:	4b3f      	ldr	r3, [pc, #252]	; (8004c90 <xQueueGenericSend+0x1f8>)
 8004b92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b96:	601a      	str	r2, [r3, #0]
 8004b98:	f3bf 8f4f 	dsb	sy
 8004b9c:	f3bf 8f6f 	isb	sy
 8004ba0:	e00a      	b.n	8004bb8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d007      	beq.n	8004bb8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004ba8:	4b39      	ldr	r3, [pc, #228]	; (8004c90 <xQueueGenericSend+0x1f8>)
 8004baa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bae:	601a      	str	r2, [r3, #0]
 8004bb0:	f3bf 8f4f 	dsb	sy
 8004bb4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004bb8:	f002 f9ac 	bl	8006f14 <vPortExitCritical>
				return pdPASS;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e063      	b.n	8004c88 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d103      	bne.n	8004bce <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004bc6:	f002 f9a5 	bl	8006f14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	e05c      	b.n	8004c88 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d106      	bne.n	8004be2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004bd4:	f107 0314 	add.w	r3, r7, #20
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f001 f9b9 	bl	8005f50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004bde:	2301      	movs	r3, #1
 8004be0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004be2:	f002 f997 	bl	8006f14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004be6:	f000 ff2b 	bl	8005a40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004bea:	f002 f963 	bl	8006eb4 <vPortEnterCritical>
 8004bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004bf4:	b25b      	sxtb	r3, r3
 8004bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bfa:	d103      	bne.n	8004c04 <xQueueGenericSend+0x16c>
 8004bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c0a:	b25b      	sxtb	r3, r3
 8004c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c10:	d103      	bne.n	8004c1a <xQueueGenericSend+0x182>
 8004c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c1a:	f002 f97b 	bl	8006f14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c1e:	1d3a      	adds	r2, r7, #4
 8004c20:	f107 0314 	add.w	r3, r7, #20
 8004c24:	4611      	mov	r1, r2
 8004c26:	4618      	mov	r0, r3
 8004c28:	f001 f9a8 	bl	8005f7c <xTaskCheckForTimeOut>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d124      	bne.n	8004c7c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004c32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c34:	f000 fc52 	bl	80054dc <prvIsQueueFull>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d018      	beq.n	8004c70 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c40:	3310      	adds	r3, #16
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	4611      	mov	r1, r2
 8004c46:	4618      	mov	r0, r3
 8004c48:	f001 f8ce 	bl	8005de8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004c4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c4e:	f000 fbdd 	bl	800540c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004c52:	f000 ff03 	bl	8005a5c <xTaskResumeAll>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	f47f af7c 	bne.w	8004b56 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004c5e:	4b0c      	ldr	r3, [pc, #48]	; (8004c90 <xQueueGenericSend+0x1f8>)
 8004c60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c64:	601a      	str	r2, [r3, #0]
 8004c66:	f3bf 8f4f 	dsb	sy
 8004c6a:	f3bf 8f6f 	isb	sy
 8004c6e:	e772      	b.n	8004b56 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004c70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c72:	f000 fbcb 	bl	800540c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c76:	f000 fef1 	bl	8005a5c <xTaskResumeAll>
 8004c7a:	e76c      	b.n	8004b56 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004c7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c7e:	f000 fbc5 	bl	800540c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c82:	f000 feeb 	bl	8005a5c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004c86:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3738      	adds	r7, #56	; 0x38
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	e000ed04 	.word	0xe000ed04

08004c94 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b090      	sub	sp, #64	; 0x40
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	607a      	str	r2, [r7, #4]
 8004ca0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d10a      	bne.n	8004cc2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb0:	f383 8811 	msr	BASEPRI, r3
 8004cb4:	f3bf 8f6f 	isb	sy
 8004cb8:	f3bf 8f4f 	dsb	sy
 8004cbc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004cbe:	bf00      	nop
 8004cc0:	e7fe      	b.n	8004cc0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d103      	bne.n	8004cd0 <xQueueGenericSendFromISR+0x3c>
 8004cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d101      	bne.n	8004cd4 <xQueueGenericSendFromISR+0x40>
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e000      	b.n	8004cd6 <xQueueGenericSendFromISR+0x42>
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d10a      	bne.n	8004cf0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cde:	f383 8811 	msr	BASEPRI, r3
 8004ce2:	f3bf 8f6f 	isb	sy
 8004ce6:	f3bf 8f4f 	dsb	sy
 8004cea:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004cec:	bf00      	nop
 8004cee:	e7fe      	b.n	8004cee <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d103      	bne.n	8004cfe <xQueueGenericSendFromISR+0x6a>
 8004cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d101      	bne.n	8004d02 <xQueueGenericSendFromISR+0x6e>
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e000      	b.n	8004d04 <xQueueGenericSendFromISR+0x70>
 8004d02:	2300      	movs	r3, #0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d10a      	bne.n	8004d1e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d0c:	f383 8811 	msr	BASEPRI, r3
 8004d10:	f3bf 8f6f 	isb	sy
 8004d14:	f3bf 8f4f 	dsb	sy
 8004d18:	623b      	str	r3, [r7, #32]
}
 8004d1a:	bf00      	nop
 8004d1c:	e7fe      	b.n	8004d1c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004d1e:	f002 f9ab 	bl	8007078 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004d22:	f3ef 8211 	mrs	r2, BASEPRI
 8004d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d2a:	f383 8811 	msr	BASEPRI, r3
 8004d2e:	f3bf 8f6f 	isb	sy
 8004d32:	f3bf 8f4f 	dsb	sy
 8004d36:	61fa      	str	r2, [r7, #28]
 8004d38:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004d3a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004d3c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d302      	bcc.n	8004d50 <xQueueGenericSendFromISR+0xbc>
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d12f      	bne.n	8004db0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d60:	683a      	ldr	r2, [r7, #0]
 8004d62:	68b9      	ldr	r1, [r7, #8]
 8004d64:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004d66:	f000 fac1 	bl	80052ec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004d6a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d72:	d112      	bne.n	8004d9a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d016      	beq.n	8004daa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d7e:	3324      	adds	r3, #36	; 0x24
 8004d80:	4618      	mov	r0, r3
 8004d82:	f001 f881 	bl	8005e88 <xTaskRemoveFromEventList>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d00e      	beq.n	8004daa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00b      	beq.n	8004daa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2201      	movs	r2, #1
 8004d96:	601a      	str	r2, [r3, #0]
 8004d98:	e007      	b.n	8004daa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004d9a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004d9e:	3301      	adds	r3, #1
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	b25a      	sxtb	r2, r3
 8004da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004da6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004daa:	2301      	movs	r3, #1
 8004dac:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004dae:	e001      	b.n	8004db4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004db0:	2300      	movs	r3, #0
 8004db2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004db6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004dbe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004dc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3740      	adds	r7, #64	; 0x40
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}

08004dca <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004dca:	b580      	push	{r7, lr}
 8004dcc:	b08e      	sub	sp, #56	; 0x38
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
 8004dd2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d10a      	bne.n	8004df4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8004dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de2:	f383 8811 	msr	BASEPRI, r3
 8004de6:	f3bf 8f6f 	isb	sy
 8004dea:	f3bf 8f4f 	dsb	sy
 8004dee:	623b      	str	r3, [r7, #32]
}
 8004df0:	bf00      	nop
 8004df2:	e7fe      	b.n	8004df2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d00a      	beq.n	8004e12 <xQueueGiveFromISR+0x48>
	__asm volatile
 8004dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e00:	f383 8811 	msr	BASEPRI, r3
 8004e04:	f3bf 8f6f 	isb	sy
 8004e08:	f3bf 8f4f 	dsb	sy
 8004e0c:	61fb      	str	r3, [r7, #28]
}
 8004e0e:	bf00      	nop
 8004e10:	e7fe      	b.n	8004e10 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d103      	bne.n	8004e22 <xQueueGiveFromISR+0x58>
 8004e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d101      	bne.n	8004e26 <xQueueGiveFromISR+0x5c>
 8004e22:	2301      	movs	r3, #1
 8004e24:	e000      	b.n	8004e28 <xQueueGiveFromISR+0x5e>
 8004e26:	2300      	movs	r3, #0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d10a      	bne.n	8004e42 <xQueueGiveFromISR+0x78>
	__asm volatile
 8004e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e30:	f383 8811 	msr	BASEPRI, r3
 8004e34:	f3bf 8f6f 	isb	sy
 8004e38:	f3bf 8f4f 	dsb	sy
 8004e3c:	61bb      	str	r3, [r7, #24]
}
 8004e3e:	bf00      	nop
 8004e40:	e7fe      	b.n	8004e40 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004e42:	f002 f919 	bl	8007078 <vPortValidateInterruptPriority>
	__asm volatile
 8004e46:	f3ef 8211 	mrs	r2, BASEPRI
 8004e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e4e:	f383 8811 	msr	BASEPRI, r3
 8004e52:	f3bf 8f6f 	isb	sy
 8004e56:	f3bf 8f4f 	dsb	sy
 8004e5a:	617a      	str	r2, [r7, #20]
 8004e5c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8004e5e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004e60:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e66:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d22b      	bcs.n	8004eca <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e7e:	1c5a      	adds	r2, r3, #1
 8004e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e82:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004e84:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e8c:	d112      	bne.n	8004eb4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d016      	beq.n	8004ec4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e98:	3324      	adds	r3, #36	; 0x24
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f000 fff4 	bl	8005e88 <xTaskRemoveFromEventList>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d00e      	beq.n	8004ec4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d00b      	beq.n	8004ec4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	601a      	str	r2, [r3, #0]
 8004eb2:	e007      	b.n	8004ec4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004eb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004eb8:	3301      	adds	r3, #1
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	b25a      	sxtb	r2, r3
 8004ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	637b      	str	r3, [r7, #52]	; 0x34
 8004ec8:	e001      	b.n	8004ece <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	637b      	str	r3, [r7, #52]	; 0x34
 8004ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ed0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f383 8811 	msr	BASEPRI, r3
}
 8004ed8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3738      	adds	r7, #56	; 0x38
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b08c      	sub	sp, #48	; 0x30
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d10a      	bne.n	8004f14 <xQueueReceive+0x30>
	__asm volatile
 8004efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f02:	f383 8811 	msr	BASEPRI, r3
 8004f06:	f3bf 8f6f 	isb	sy
 8004f0a:	f3bf 8f4f 	dsb	sy
 8004f0e:	623b      	str	r3, [r7, #32]
}
 8004f10:	bf00      	nop
 8004f12:	e7fe      	b.n	8004f12 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d103      	bne.n	8004f22 <xQueueReceive+0x3e>
 8004f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d101      	bne.n	8004f26 <xQueueReceive+0x42>
 8004f22:	2301      	movs	r3, #1
 8004f24:	e000      	b.n	8004f28 <xQueueReceive+0x44>
 8004f26:	2300      	movs	r3, #0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d10a      	bne.n	8004f42 <xQueueReceive+0x5e>
	__asm volatile
 8004f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f30:	f383 8811 	msr	BASEPRI, r3
 8004f34:	f3bf 8f6f 	isb	sy
 8004f38:	f3bf 8f4f 	dsb	sy
 8004f3c:	61fb      	str	r3, [r7, #28]
}
 8004f3e:	bf00      	nop
 8004f40:	e7fe      	b.n	8004f40 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f42:	f001 f95f 	bl	8006204 <xTaskGetSchedulerState>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d102      	bne.n	8004f52 <xQueueReceive+0x6e>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d101      	bne.n	8004f56 <xQueueReceive+0x72>
 8004f52:	2301      	movs	r3, #1
 8004f54:	e000      	b.n	8004f58 <xQueueReceive+0x74>
 8004f56:	2300      	movs	r3, #0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d10a      	bne.n	8004f72 <xQueueReceive+0x8e>
	__asm volatile
 8004f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f60:	f383 8811 	msr	BASEPRI, r3
 8004f64:	f3bf 8f6f 	isb	sy
 8004f68:	f3bf 8f4f 	dsb	sy
 8004f6c:	61bb      	str	r3, [r7, #24]
}
 8004f6e:	bf00      	nop
 8004f70:	e7fe      	b.n	8004f70 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f72:	f001 ff9f 	bl	8006eb4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f7a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d01f      	beq.n	8004fc2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004f82:	68b9      	ldr	r1, [r7, #8]
 8004f84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f86:	f000 fa1b 	bl	80053c0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8c:	1e5a      	subs	r2, r3, #1
 8004f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f90:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00f      	beq.n	8004fba <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9c:	3310      	adds	r3, #16
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f000 ff72 	bl	8005e88 <xTaskRemoveFromEventList>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d007      	beq.n	8004fba <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004faa:	4b3d      	ldr	r3, [pc, #244]	; (80050a0 <xQueueReceive+0x1bc>)
 8004fac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fb0:	601a      	str	r2, [r3, #0]
 8004fb2:	f3bf 8f4f 	dsb	sy
 8004fb6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004fba:	f001 ffab 	bl	8006f14 <vPortExitCritical>
				return pdPASS;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e069      	b.n	8005096 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d103      	bne.n	8004fd0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004fc8:	f001 ffa4 	bl	8006f14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	e062      	b.n	8005096 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d106      	bne.n	8004fe4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004fd6:	f107 0310 	add.w	r3, r7, #16
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f000 ffb8 	bl	8005f50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004fe4:	f001 ff96 	bl	8006f14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004fe8:	f000 fd2a 	bl	8005a40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004fec:	f001 ff62 	bl	8006eb4 <vPortEnterCritical>
 8004ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ff6:	b25b      	sxtb	r3, r3
 8004ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ffc:	d103      	bne.n	8005006 <xQueueReceive+0x122>
 8004ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005000:	2200      	movs	r2, #0
 8005002:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005008:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800500c:	b25b      	sxtb	r3, r3
 800500e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005012:	d103      	bne.n	800501c <xQueueReceive+0x138>
 8005014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005016:	2200      	movs	r2, #0
 8005018:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800501c:	f001 ff7a 	bl	8006f14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005020:	1d3a      	adds	r2, r7, #4
 8005022:	f107 0310 	add.w	r3, r7, #16
 8005026:	4611      	mov	r1, r2
 8005028:	4618      	mov	r0, r3
 800502a:	f000 ffa7 	bl	8005f7c <xTaskCheckForTimeOut>
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d123      	bne.n	800507c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005034:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005036:	f000 fa3b 	bl	80054b0 <prvIsQueueEmpty>
 800503a:	4603      	mov	r3, r0
 800503c:	2b00      	cmp	r3, #0
 800503e:	d017      	beq.n	8005070 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005042:	3324      	adds	r3, #36	; 0x24
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	4611      	mov	r1, r2
 8005048:	4618      	mov	r0, r3
 800504a:	f000 fecd 	bl	8005de8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800504e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005050:	f000 f9dc 	bl	800540c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005054:	f000 fd02 	bl	8005a5c <xTaskResumeAll>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d189      	bne.n	8004f72 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800505e:	4b10      	ldr	r3, [pc, #64]	; (80050a0 <xQueueReceive+0x1bc>)
 8005060:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005064:	601a      	str	r2, [r3, #0]
 8005066:	f3bf 8f4f 	dsb	sy
 800506a:	f3bf 8f6f 	isb	sy
 800506e:	e780      	b.n	8004f72 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005070:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005072:	f000 f9cb 	bl	800540c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005076:	f000 fcf1 	bl	8005a5c <xTaskResumeAll>
 800507a:	e77a      	b.n	8004f72 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800507c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800507e:	f000 f9c5 	bl	800540c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005082:	f000 fceb 	bl	8005a5c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005086:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005088:	f000 fa12 	bl	80054b0 <prvIsQueueEmpty>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	f43f af6f 	beq.w	8004f72 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005094:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005096:	4618      	mov	r0, r3
 8005098:	3730      	adds	r7, #48	; 0x30
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	e000ed04 	.word	0xe000ed04

080050a4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b08e      	sub	sp, #56	; 0x38
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80050ae:	2300      	movs	r3, #0
 80050b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80050b6:	2300      	movs	r3, #0
 80050b8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80050ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d10a      	bne.n	80050d6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80050c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c4:	f383 8811 	msr	BASEPRI, r3
 80050c8:	f3bf 8f6f 	isb	sy
 80050cc:	f3bf 8f4f 	dsb	sy
 80050d0:	623b      	str	r3, [r7, #32]
}
 80050d2:	bf00      	nop
 80050d4:	e7fe      	b.n	80050d4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80050d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00a      	beq.n	80050f4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80050de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e2:	f383 8811 	msr	BASEPRI, r3
 80050e6:	f3bf 8f6f 	isb	sy
 80050ea:	f3bf 8f4f 	dsb	sy
 80050ee:	61fb      	str	r3, [r7, #28]
}
 80050f0:	bf00      	nop
 80050f2:	e7fe      	b.n	80050f2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80050f4:	f001 f886 	bl	8006204 <xTaskGetSchedulerState>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d102      	bne.n	8005104 <xQueueSemaphoreTake+0x60>
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d101      	bne.n	8005108 <xQueueSemaphoreTake+0x64>
 8005104:	2301      	movs	r3, #1
 8005106:	e000      	b.n	800510a <xQueueSemaphoreTake+0x66>
 8005108:	2300      	movs	r3, #0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d10a      	bne.n	8005124 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800510e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005112:	f383 8811 	msr	BASEPRI, r3
 8005116:	f3bf 8f6f 	isb	sy
 800511a:	f3bf 8f4f 	dsb	sy
 800511e:	61bb      	str	r3, [r7, #24]
}
 8005120:	bf00      	nop
 8005122:	e7fe      	b.n	8005122 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005124:	f001 fec6 	bl	8006eb4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800512a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800512c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800512e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005130:	2b00      	cmp	r3, #0
 8005132:	d024      	beq.n	800517e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005136:	1e5a      	subs	r2, r3, #1
 8005138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800513a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800513c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d104      	bne.n	800514e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005144:	f001 f9d4 	bl	80064f0 <pvTaskIncrementMutexHeldCount>
 8005148:	4602      	mov	r2, r0
 800514a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800514c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800514e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d00f      	beq.n	8005176 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005158:	3310      	adds	r3, #16
 800515a:	4618      	mov	r0, r3
 800515c:	f000 fe94 	bl	8005e88 <xTaskRemoveFromEventList>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d007      	beq.n	8005176 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005166:	4b54      	ldr	r3, [pc, #336]	; (80052b8 <xQueueSemaphoreTake+0x214>)
 8005168:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800516c:	601a      	str	r2, [r3, #0]
 800516e:	f3bf 8f4f 	dsb	sy
 8005172:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005176:	f001 fecd 	bl	8006f14 <vPortExitCritical>
				return pdPASS;
 800517a:	2301      	movs	r3, #1
 800517c:	e097      	b.n	80052ae <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d111      	bne.n	80051a8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00a      	beq.n	80051a0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800518a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800518e:	f383 8811 	msr	BASEPRI, r3
 8005192:	f3bf 8f6f 	isb	sy
 8005196:	f3bf 8f4f 	dsb	sy
 800519a:	617b      	str	r3, [r7, #20]
}
 800519c:	bf00      	nop
 800519e:	e7fe      	b.n	800519e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80051a0:	f001 feb8 	bl	8006f14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80051a4:	2300      	movs	r3, #0
 80051a6:	e082      	b.n	80052ae <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80051a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d106      	bne.n	80051bc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80051ae:	f107 030c 	add.w	r3, r7, #12
 80051b2:	4618      	mov	r0, r3
 80051b4:	f000 fecc 	bl	8005f50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80051b8:	2301      	movs	r3, #1
 80051ba:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80051bc:	f001 feaa 	bl	8006f14 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80051c0:	f000 fc3e 	bl	8005a40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80051c4:	f001 fe76 	bl	8006eb4 <vPortEnterCritical>
 80051c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051ce:	b25b      	sxtb	r3, r3
 80051d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051d4:	d103      	bne.n	80051de <xQueueSemaphoreTake+0x13a>
 80051d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051e4:	b25b      	sxtb	r3, r3
 80051e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ea:	d103      	bne.n	80051f4 <xQueueSemaphoreTake+0x150>
 80051ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ee:	2200      	movs	r2, #0
 80051f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051f4:	f001 fe8e 	bl	8006f14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80051f8:	463a      	mov	r2, r7
 80051fa:	f107 030c 	add.w	r3, r7, #12
 80051fe:	4611      	mov	r1, r2
 8005200:	4618      	mov	r0, r3
 8005202:	f000 febb 	bl	8005f7c <xTaskCheckForTimeOut>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d132      	bne.n	8005272 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800520c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800520e:	f000 f94f 	bl	80054b0 <prvIsQueueEmpty>
 8005212:	4603      	mov	r3, r0
 8005214:	2b00      	cmp	r3, #0
 8005216:	d026      	beq.n	8005266 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d109      	bne.n	8005234 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005220:	f001 fe48 	bl	8006eb4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	4618      	mov	r0, r3
 800522a:	f001 f809 	bl	8006240 <xTaskPriorityInherit>
 800522e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005230:	f001 fe70 	bl	8006f14 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005236:	3324      	adds	r3, #36	; 0x24
 8005238:	683a      	ldr	r2, [r7, #0]
 800523a:	4611      	mov	r1, r2
 800523c:	4618      	mov	r0, r3
 800523e:	f000 fdd3 	bl	8005de8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005242:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005244:	f000 f8e2 	bl	800540c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005248:	f000 fc08 	bl	8005a5c <xTaskResumeAll>
 800524c:	4603      	mov	r3, r0
 800524e:	2b00      	cmp	r3, #0
 8005250:	f47f af68 	bne.w	8005124 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005254:	4b18      	ldr	r3, [pc, #96]	; (80052b8 <xQueueSemaphoreTake+0x214>)
 8005256:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800525a:	601a      	str	r2, [r3, #0]
 800525c:	f3bf 8f4f 	dsb	sy
 8005260:	f3bf 8f6f 	isb	sy
 8005264:	e75e      	b.n	8005124 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005266:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005268:	f000 f8d0 	bl	800540c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800526c:	f000 fbf6 	bl	8005a5c <xTaskResumeAll>
 8005270:	e758      	b.n	8005124 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005272:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005274:	f000 f8ca 	bl	800540c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005278:	f000 fbf0 	bl	8005a5c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800527c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800527e:	f000 f917 	bl	80054b0 <prvIsQueueEmpty>
 8005282:	4603      	mov	r3, r0
 8005284:	2b00      	cmp	r3, #0
 8005286:	f43f af4d 	beq.w	8005124 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800528a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800528c:	2b00      	cmp	r3, #0
 800528e:	d00d      	beq.n	80052ac <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005290:	f001 fe10 	bl	8006eb4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005294:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005296:	f000 f811 	bl	80052bc <prvGetDisinheritPriorityAfterTimeout>
 800529a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800529c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80052a2:	4618      	mov	r0, r3
 80052a4:	f001 f8a2 	bl	80063ec <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80052a8:	f001 fe34 	bl	8006f14 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80052ac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3738      	adds	r7, #56	; 0x38
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	e000ed04 	.word	0xe000ed04

080052bc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80052bc:	b480      	push	{r7}
 80052be:	b085      	sub	sp, #20
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d006      	beq.n	80052da <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80052d6:	60fb      	str	r3, [r7, #12]
 80052d8:	e001      	b.n	80052de <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80052da:	2300      	movs	r3, #0
 80052dc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80052de:	68fb      	ldr	r3, [r7, #12]
	}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3714      	adds	r7, #20
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b086      	sub	sp, #24
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80052f8:	2300      	movs	r3, #0
 80052fa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005300:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005306:	2b00      	cmp	r3, #0
 8005308:	d10d      	bne.n	8005326 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d14d      	bne.n	80053ae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	4618      	mov	r0, r3
 8005318:	f000 fffa 	bl	8006310 <xTaskPriorityDisinherit>
 800531c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2200      	movs	r2, #0
 8005322:	609a      	str	r2, [r3, #8]
 8005324:	e043      	b.n	80053ae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d119      	bne.n	8005360 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6858      	ldr	r0, [r3, #4]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005334:	461a      	mov	r2, r3
 8005336:	68b9      	ldr	r1, [r7, #8]
 8005338:	f002 fd88 	bl	8007e4c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	685a      	ldr	r2, [r3, #4]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005344:	441a      	add	r2, r3
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	685a      	ldr	r2, [r3, #4]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	429a      	cmp	r2, r3
 8005354:	d32b      	bcc.n	80053ae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	605a      	str	r2, [r3, #4]
 800535e:	e026      	b.n	80053ae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	68d8      	ldr	r0, [r3, #12]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005368:	461a      	mov	r2, r3
 800536a:	68b9      	ldr	r1, [r7, #8]
 800536c:	f002 fd6e 	bl	8007e4c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	68da      	ldr	r2, [r3, #12]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005378:	425b      	negs	r3, r3
 800537a:	441a      	add	r2, r3
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	68da      	ldr	r2, [r3, #12]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	429a      	cmp	r2, r3
 800538a:	d207      	bcs.n	800539c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	689a      	ldr	r2, [r3, #8]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005394:	425b      	negs	r3, r3
 8005396:	441a      	add	r2, r3
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2b02      	cmp	r3, #2
 80053a0:	d105      	bne.n	80053ae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d002      	beq.n	80053ae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	3b01      	subs	r3, #1
 80053ac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	1c5a      	adds	r2, r3, #1
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80053b6:	697b      	ldr	r3, [r7, #20]
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3718      	adds	r7, #24
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d018      	beq.n	8005404 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	68da      	ldr	r2, [r3, #12]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053da:	441a      	add	r2, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	68da      	ldr	r2, [r3, #12]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d303      	bcc.n	80053f4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	68d9      	ldr	r1, [r3, #12]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fc:	461a      	mov	r2, r3
 80053fe:	6838      	ldr	r0, [r7, #0]
 8005400:	f002 fd24 	bl	8007e4c <memcpy>
	}
}
 8005404:	bf00      	nop
 8005406:	3708      	adds	r7, #8
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005414:	f001 fd4e 	bl	8006eb4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800541e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005420:	e011      	b.n	8005446 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005426:	2b00      	cmp	r3, #0
 8005428:	d012      	beq.n	8005450 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	3324      	adds	r3, #36	; 0x24
 800542e:	4618      	mov	r0, r3
 8005430:	f000 fd2a 	bl	8005e88 <xTaskRemoveFromEventList>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d001      	beq.n	800543e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800543a:	f000 fe01 	bl	8006040 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800543e:	7bfb      	ldrb	r3, [r7, #15]
 8005440:	3b01      	subs	r3, #1
 8005442:	b2db      	uxtb	r3, r3
 8005444:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005446:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800544a:	2b00      	cmp	r3, #0
 800544c:	dce9      	bgt.n	8005422 <prvUnlockQueue+0x16>
 800544e:	e000      	b.n	8005452 <prvUnlockQueue+0x46>
					break;
 8005450:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	22ff      	movs	r2, #255	; 0xff
 8005456:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800545a:	f001 fd5b 	bl	8006f14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800545e:	f001 fd29 	bl	8006eb4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005468:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800546a:	e011      	b.n	8005490 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d012      	beq.n	800549a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	3310      	adds	r3, #16
 8005478:	4618      	mov	r0, r3
 800547a:	f000 fd05 	bl	8005e88 <xTaskRemoveFromEventList>
 800547e:	4603      	mov	r3, r0
 8005480:	2b00      	cmp	r3, #0
 8005482:	d001      	beq.n	8005488 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005484:	f000 fddc 	bl	8006040 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005488:	7bbb      	ldrb	r3, [r7, #14]
 800548a:	3b01      	subs	r3, #1
 800548c:	b2db      	uxtb	r3, r3
 800548e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005490:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005494:	2b00      	cmp	r3, #0
 8005496:	dce9      	bgt.n	800546c <prvUnlockQueue+0x60>
 8005498:	e000      	b.n	800549c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800549a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	22ff      	movs	r2, #255	; 0xff
 80054a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80054a4:	f001 fd36 	bl	8006f14 <vPortExitCritical>
}
 80054a8:	bf00      	nop
 80054aa:	3710      	adds	r7, #16
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80054b8:	f001 fcfc 	bl	8006eb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d102      	bne.n	80054ca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80054c4:	2301      	movs	r3, #1
 80054c6:	60fb      	str	r3, [r7, #12]
 80054c8:	e001      	b.n	80054ce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80054ca:	2300      	movs	r3, #0
 80054cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80054ce:	f001 fd21 	bl	8006f14 <vPortExitCritical>

	return xReturn;
 80054d2:	68fb      	ldr	r3, [r7, #12]
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3710      	adds	r7, #16
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}

080054dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b084      	sub	sp, #16
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80054e4:	f001 fce6 	bl	8006eb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d102      	bne.n	80054fa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80054f4:	2301      	movs	r3, #1
 80054f6:	60fb      	str	r3, [r7, #12]
 80054f8:	e001      	b.n	80054fe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80054fa:	2300      	movs	r3, #0
 80054fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80054fe:	f001 fd09 	bl	8006f14 <vPortExitCritical>

	return xReturn;
 8005502:	68fb      	ldr	r3, [r7, #12]
}
 8005504:	4618      	mov	r0, r3
 8005506:	3710      	adds	r7, #16
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800550c:	b480      	push	{r7}
 800550e:	b085      	sub	sp, #20
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005516:	2300      	movs	r3, #0
 8005518:	60fb      	str	r3, [r7, #12]
 800551a:	e014      	b.n	8005546 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800551c:	4a0f      	ldr	r2, [pc, #60]	; (800555c <vQueueAddToRegistry+0x50>)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d10b      	bne.n	8005540 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005528:	490c      	ldr	r1, [pc, #48]	; (800555c <vQueueAddToRegistry+0x50>)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	683a      	ldr	r2, [r7, #0]
 800552e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005532:	4a0a      	ldr	r2, [pc, #40]	; (800555c <vQueueAddToRegistry+0x50>)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	00db      	lsls	r3, r3, #3
 8005538:	4413      	add	r3, r2
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800553e:	e006      	b.n	800554e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	3301      	adds	r3, #1
 8005544:	60fb      	str	r3, [r7, #12]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2b07      	cmp	r3, #7
 800554a:	d9e7      	bls.n	800551c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800554c:	bf00      	nop
 800554e:	bf00      	nop
 8005550:	3714      	adds	r7, #20
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop
 800555c:	2000198c 	.word	0x2000198c

08005560 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005560:	b580      	push	{r7, lr}
 8005562:	b086      	sub	sp, #24
 8005564:	af00      	add	r7, sp, #0
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005570:	f001 fca0 	bl	8006eb4 <vPortEnterCritical>
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800557a:	b25b      	sxtb	r3, r3
 800557c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005580:	d103      	bne.n	800558a <vQueueWaitForMessageRestricted+0x2a>
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	2200      	movs	r2, #0
 8005586:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005590:	b25b      	sxtb	r3, r3
 8005592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005596:	d103      	bne.n	80055a0 <vQueueWaitForMessageRestricted+0x40>
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	2200      	movs	r2, #0
 800559c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055a0:	f001 fcb8 	bl	8006f14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d106      	bne.n	80055ba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	3324      	adds	r3, #36	; 0x24
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	68b9      	ldr	r1, [r7, #8]
 80055b4:	4618      	mov	r0, r3
 80055b6:	f000 fc3b 	bl	8005e30 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80055ba:	6978      	ldr	r0, [r7, #20]
 80055bc:	f7ff ff26 	bl	800540c <prvUnlockQueue>
	}
 80055c0:	bf00      	nop
 80055c2:	3718      	adds	r7, #24
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b08e      	sub	sp, #56	; 0x38
 80055cc:	af04      	add	r7, sp, #16
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	607a      	str	r2, [r7, #4]
 80055d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80055d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d10a      	bne.n	80055f2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80055dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e0:	f383 8811 	msr	BASEPRI, r3
 80055e4:	f3bf 8f6f 	isb	sy
 80055e8:	f3bf 8f4f 	dsb	sy
 80055ec:	623b      	str	r3, [r7, #32]
}
 80055ee:	bf00      	nop
 80055f0:	e7fe      	b.n	80055f0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80055f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d10a      	bne.n	800560e <xTaskCreateStatic+0x46>
	__asm volatile
 80055f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055fc:	f383 8811 	msr	BASEPRI, r3
 8005600:	f3bf 8f6f 	isb	sy
 8005604:	f3bf 8f4f 	dsb	sy
 8005608:	61fb      	str	r3, [r7, #28]
}
 800560a:	bf00      	nop
 800560c:	e7fe      	b.n	800560c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800560e:	235c      	movs	r3, #92	; 0x5c
 8005610:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	2b5c      	cmp	r3, #92	; 0x5c
 8005616:	d00a      	beq.n	800562e <xTaskCreateStatic+0x66>
	__asm volatile
 8005618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800561c:	f383 8811 	msr	BASEPRI, r3
 8005620:	f3bf 8f6f 	isb	sy
 8005624:	f3bf 8f4f 	dsb	sy
 8005628:	61bb      	str	r3, [r7, #24]
}
 800562a:	bf00      	nop
 800562c:	e7fe      	b.n	800562c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800562e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005632:	2b00      	cmp	r3, #0
 8005634:	d01e      	beq.n	8005674 <xTaskCreateStatic+0xac>
 8005636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005638:	2b00      	cmp	r3, #0
 800563a:	d01b      	beq.n	8005674 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800563c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800563e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005642:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005644:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005648:	2202      	movs	r2, #2
 800564a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800564e:	2300      	movs	r3, #0
 8005650:	9303      	str	r3, [sp, #12]
 8005652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005654:	9302      	str	r3, [sp, #8]
 8005656:	f107 0314 	add.w	r3, r7, #20
 800565a:	9301      	str	r3, [sp, #4]
 800565c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800565e:	9300      	str	r3, [sp, #0]
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	68b9      	ldr	r1, [r7, #8]
 8005666:	68f8      	ldr	r0, [r7, #12]
 8005668:	f000 f850 	bl	800570c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800566c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800566e:	f000 f8dd 	bl	800582c <prvAddNewTaskToReadyList>
 8005672:	e001      	b.n	8005678 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005674:	2300      	movs	r3, #0
 8005676:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005678:	697b      	ldr	r3, [r7, #20]
	}
 800567a:	4618      	mov	r0, r3
 800567c:	3728      	adds	r7, #40	; 0x28
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}

08005682 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005682:	b580      	push	{r7, lr}
 8005684:	b08c      	sub	sp, #48	; 0x30
 8005686:	af04      	add	r7, sp, #16
 8005688:	60f8      	str	r0, [r7, #12]
 800568a:	60b9      	str	r1, [r7, #8]
 800568c:	603b      	str	r3, [r7, #0]
 800568e:	4613      	mov	r3, r2
 8005690:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005692:	88fb      	ldrh	r3, [r7, #6]
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	4618      	mov	r0, r3
 8005698:	f001 fd2e 	bl	80070f8 <pvPortMalloc>
 800569c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d00e      	beq.n	80056c2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80056a4:	205c      	movs	r0, #92	; 0x5c
 80056a6:	f001 fd27 	bl	80070f8 <pvPortMalloc>
 80056aa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d003      	beq.n	80056ba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	697a      	ldr	r2, [r7, #20]
 80056b6:	631a      	str	r2, [r3, #48]	; 0x30
 80056b8:	e005      	b.n	80056c6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80056ba:	6978      	ldr	r0, [r7, #20]
 80056bc:	f001 fde8 	bl	8007290 <vPortFree>
 80056c0:	e001      	b.n	80056c6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80056c2:	2300      	movs	r3, #0
 80056c4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d017      	beq.n	80056fc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80056d4:	88fa      	ldrh	r2, [r7, #6]
 80056d6:	2300      	movs	r3, #0
 80056d8:	9303      	str	r3, [sp, #12]
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	9302      	str	r3, [sp, #8]
 80056de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056e0:	9301      	str	r3, [sp, #4]
 80056e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e4:	9300      	str	r3, [sp, #0]
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	68b9      	ldr	r1, [r7, #8]
 80056ea:	68f8      	ldr	r0, [r7, #12]
 80056ec:	f000 f80e 	bl	800570c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80056f0:	69f8      	ldr	r0, [r7, #28]
 80056f2:	f000 f89b 	bl	800582c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80056f6:	2301      	movs	r3, #1
 80056f8:	61bb      	str	r3, [r7, #24]
 80056fa:	e002      	b.n	8005702 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80056fc:	f04f 33ff 	mov.w	r3, #4294967295
 8005700:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005702:	69bb      	ldr	r3, [r7, #24]
	}
 8005704:	4618      	mov	r0, r3
 8005706:	3720      	adds	r7, #32
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}

0800570c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b088      	sub	sp, #32
 8005710:	af00      	add	r7, sp, #0
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	607a      	str	r2, [r7, #4]
 8005718:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800571a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800571c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	461a      	mov	r2, r3
 8005724:	21a5      	movs	r1, #165	; 0xa5
 8005726:	f002 fb9f 	bl	8007e68 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800572a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800572c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005734:	3b01      	subs	r3, #1
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	4413      	add	r3, r2
 800573a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	f023 0307 	bic.w	r3, r3, #7
 8005742:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	f003 0307 	and.w	r3, r3, #7
 800574a:	2b00      	cmp	r3, #0
 800574c:	d00a      	beq.n	8005764 <prvInitialiseNewTask+0x58>
	__asm volatile
 800574e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005752:	f383 8811 	msr	BASEPRI, r3
 8005756:	f3bf 8f6f 	isb	sy
 800575a:	f3bf 8f4f 	dsb	sy
 800575e:	617b      	str	r3, [r7, #20]
}
 8005760:	bf00      	nop
 8005762:	e7fe      	b.n	8005762 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d01f      	beq.n	80057aa <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800576a:	2300      	movs	r3, #0
 800576c:	61fb      	str	r3, [r7, #28]
 800576e:	e012      	b.n	8005796 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005770:	68ba      	ldr	r2, [r7, #8]
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	4413      	add	r3, r2
 8005776:	7819      	ldrb	r1, [r3, #0]
 8005778:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	4413      	add	r3, r2
 800577e:	3334      	adds	r3, #52	; 0x34
 8005780:	460a      	mov	r2, r1
 8005782:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005784:	68ba      	ldr	r2, [r7, #8]
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	4413      	add	r3, r2
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d006      	beq.n	800579e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	3301      	adds	r3, #1
 8005794:	61fb      	str	r3, [r7, #28]
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	2b0f      	cmp	r3, #15
 800579a:	d9e9      	bls.n	8005770 <prvInitialiseNewTask+0x64>
 800579c:	e000      	b.n	80057a0 <prvInitialiseNewTask+0x94>
			{
				break;
 800579e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80057a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a2:	2200      	movs	r2, #0
 80057a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80057a8:	e003      	b.n	80057b2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80057aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ac:	2200      	movs	r2, #0
 80057ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80057b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b4:	2b37      	cmp	r3, #55	; 0x37
 80057b6:	d901      	bls.n	80057bc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80057b8:	2337      	movs	r3, #55	; 0x37
 80057ba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80057bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057c0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80057c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057c6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80057c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ca:	2200      	movs	r2, #0
 80057cc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80057ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d0:	3304      	adds	r3, #4
 80057d2:	4618      	mov	r0, r3
 80057d4:	f7fe ff8e 	bl	80046f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80057d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057da:	3318      	adds	r3, #24
 80057dc:	4618      	mov	r0, r3
 80057de:	f7fe ff89 	bl	80046f4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80057e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057e6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80057ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80057f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057f6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80057f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fa:	2200      	movs	r2, #0
 80057fc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80057fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005800:	2200      	movs	r2, #0
 8005802:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005806:	683a      	ldr	r2, [r7, #0]
 8005808:	68f9      	ldr	r1, [r7, #12]
 800580a:	69b8      	ldr	r0, [r7, #24]
 800580c:	f001 fa26 	bl	8006c5c <pxPortInitialiseStack>
 8005810:	4602      	mov	r2, r0
 8005812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005814:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005818:	2b00      	cmp	r3, #0
 800581a:	d002      	beq.n	8005822 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800581c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800581e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005820:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005822:	bf00      	nop
 8005824:	3720      	adds	r7, #32
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
	...

0800582c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b082      	sub	sp, #8
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005834:	f001 fb3e 	bl	8006eb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005838:	4b2d      	ldr	r3, [pc, #180]	; (80058f0 <prvAddNewTaskToReadyList+0xc4>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	3301      	adds	r3, #1
 800583e:	4a2c      	ldr	r2, [pc, #176]	; (80058f0 <prvAddNewTaskToReadyList+0xc4>)
 8005840:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005842:	4b2c      	ldr	r3, [pc, #176]	; (80058f4 <prvAddNewTaskToReadyList+0xc8>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d109      	bne.n	800585e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800584a:	4a2a      	ldr	r2, [pc, #168]	; (80058f4 <prvAddNewTaskToReadyList+0xc8>)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005850:	4b27      	ldr	r3, [pc, #156]	; (80058f0 <prvAddNewTaskToReadyList+0xc4>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	2b01      	cmp	r3, #1
 8005856:	d110      	bne.n	800587a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005858:	f000 fc16 	bl	8006088 <prvInitialiseTaskLists>
 800585c:	e00d      	b.n	800587a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800585e:	4b26      	ldr	r3, [pc, #152]	; (80058f8 <prvAddNewTaskToReadyList+0xcc>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d109      	bne.n	800587a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005866:	4b23      	ldr	r3, [pc, #140]	; (80058f4 <prvAddNewTaskToReadyList+0xc8>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005870:	429a      	cmp	r2, r3
 8005872:	d802      	bhi.n	800587a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005874:	4a1f      	ldr	r2, [pc, #124]	; (80058f4 <prvAddNewTaskToReadyList+0xc8>)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800587a:	4b20      	ldr	r3, [pc, #128]	; (80058fc <prvAddNewTaskToReadyList+0xd0>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	3301      	adds	r3, #1
 8005880:	4a1e      	ldr	r2, [pc, #120]	; (80058fc <prvAddNewTaskToReadyList+0xd0>)
 8005882:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005884:	4b1d      	ldr	r3, [pc, #116]	; (80058fc <prvAddNewTaskToReadyList+0xd0>)
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005890:	4b1b      	ldr	r3, [pc, #108]	; (8005900 <prvAddNewTaskToReadyList+0xd4>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	429a      	cmp	r2, r3
 8005896:	d903      	bls.n	80058a0 <prvAddNewTaskToReadyList+0x74>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800589c:	4a18      	ldr	r2, [pc, #96]	; (8005900 <prvAddNewTaskToReadyList+0xd4>)
 800589e:	6013      	str	r3, [r2, #0]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058a4:	4613      	mov	r3, r2
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	4413      	add	r3, r2
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	4a15      	ldr	r2, [pc, #84]	; (8005904 <prvAddNewTaskToReadyList+0xd8>)
 80058ae:	441a      	add	r2, r3
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	3304      	adds	r3, #4
 80058b4:	4619      	mov	r1, r3
 80058b6:	4610      	mov	r0, r2
 80058b8:	f7fe ff29 	bl	800470e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80058bc:	f001 fb2a 	bl	8006f14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80058c0:	4b0d      	ldr	r3, [pc, #52]	; (80058f8 <prvAddNewTaskToReadyList+0xcc>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d00e      	beq.n	80058e6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80058c8:	4b0a      	ldr	r3, [pc, #40]	; (80058f4 <prvAddNewTaskToReadyList+0xc8>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d207      	bcs.n	80058e6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80058d6:	4b0c      	ldr	r3, [pc, #48]	; (8005908 <prvAddNewTaskToReadyList+0xdc>)
 80058d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058dc:	601a      	str	r2, [r3, #0]
 80058de:	f3bf 8f4f 	dsb	sy
 80058e2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058e6:	bf00      	nop
 80058e8:	3708      	adds	r7, #8
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	20000bcc 	.word	0x20000bcc
 80058f4:	200006f8 	.word	0x200006f8
 80058f8:	20000bd8 	.word	0x20000bd8
 80058fc:	20000be8 	.word	0x20000be8
 8005900:	20000bd4 	.word	0x20000bd4
 8005904:	200006fc 	.word	0x200006fc
 8005908:	e000ed04 	.word	0xe000ed04

0800590c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005914:	2300      	movs	r3, #0
 8005916:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d017      	beq.n	800594e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800591e:	4b13      	ldr	r3, [pc, #76]	; (800596c <vTaskDelay+0x60>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d00a      	beq.n	800593c <vTaskDelay+0x30>
	__asm volatile
 8005926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800592a:	f383 8811 	msr	BASEPRI, r3
 800592e:	f3bf 8f6f 	isb	sy
 8005932:	f3bf 8f4f 	dsb	sy
 8005936:	60bb      	str	r3, [r7, #8]
}
 8005938:	bf00      	nop
 800593a:	e7fe      	b.n	800593a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800593c:	f000 f880 	bl	8005a40 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005940:	2100      	movs	r1, #0
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 fde8 	bl	8006518 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005948:	f000 f888 	bl	8005a5c <xTaskResumeAll>
 800594c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d107      	bne.n	8005964 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005954:	4b06      	ldr	r3, [pc, #24]	; (8005970 <vTaskDelay+0x64>)
 8005956:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800595a:	601a      	str	r2, [r3, #0]
 800595c:	f3bf 8f4f 	dsb	sy
 8005960:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005964:	bf00      	nop
 8005966:	3710      	adds	r7, #16
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}
 800596c:	20000bf4 	.word	0x20000bf4
 8005970:	e000ed04 	.word	0xe000ed04

08005974 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b08a      	sub	sp, #40	; 0x28
 8005978:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800597a:	2300      	movs	r3, #0
 800597c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800597e:	2300      	movs	r3, #0
 8005980:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005982:	463a      	mov	r2, r7
 8005984:	1d39      	adds	r1, r7, #4
 8005986:	f107 0308 	add.w	r3, r7, #8
 800598a:	4618      	mov	r0, r3
 800598c:	f7fe fe5e 	bl	800464c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005990:	6839      	ldr	r1, [r7, #0]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	68ba      	ldr	r2, [r7, #8]
 8005996:	9202      	str	r2, [sp, #8]
 8005998:	9301      	str	r3, [sp, #4]
 800599a:	2300      	movs	r3, #0
 800599c:	9300      	str	r3, [sp, #0]
 800599e:	2300      	movs	r3, #0
 80059a0:	460a      	mov	r2, r1
 80059a2:	4921      	ldr	r1, [pc, #132]	; (8005a28 <vTaskStartScheduler+0xb4>)
 80059a4:	4821      	ldr	r0, [pc, #132]	; (8005a2c <vTaskStartScheduler+0xb8>)
 80059a6:	f7ff fe0f 	bl	80055c8 <xTaskCreateStatic>
 80059aa:	4603      	mov	r3, r0
 80059ac:	4a20      	ldr	r2, [pc, #128]	; (8005a30 <vTaskStartScheduler+0xbc>)
 80059ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80059b0:	4b1f      	ldr	r3, [pc, #124]	; (8005a30 <vTaskStartScheduler+0xbc>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d002      	beq.n	80059be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80059b8:	2301      	movs	r3, #1
 80059ba:	617b      	str	r3, [r7, #20]
 80059bc:	e001      	b.n	80059c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80059be:	2300      	movs	r3, #0
 80059c0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d102      	bne.n	80059ce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80059c8:	f000 fdfa 	bl	80065c0 <xTimerCreateTimerTask>
 80059cc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d116      	bne.n	8005a02 <vTaskStartScheduler+0x8e>
	__asm volatile
 80059d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d8:	f383 8811 	msr	BASEPRI, r3
 80059dc:	f3bf 8f6f 	isb	sy
 80059e0:	f3bf 8f4f 	dsb	sy
 80059e4:	613b      	str	r3, [r7, #16]
}
 80059e6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80059e8:	4b12      	ldr	r3, [pc, #72]	; (8005a34 <vTaskStartScheduler+0xc0>)
 80059ea:	f04f 32ff 	mov.w	r2, #4294967295
 80059ee:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80059f0:	4b11      	ldr	r3, [pc, #68]	; (8005a38 <vTaskStartScheduler+0xc4>)
 80059f2:	2201      	movs	r2, #1
 80059f4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80059f6:	4b11      	ldr	r3, [pc, #68]	; (8005a3c <vTaskStartScheduler+0xc8>)
 80059f8:	2200      	movs	r2, #0
 80059fa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80059fc:	f001 f9b8 	bl	8006d70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005a00:	e00e      	b.n	8005a20 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a08:	d10a      	bne.n	8005a20 <vTaskStartScheduler+0xac>
	__asm volatile
 8005a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a0e:	f383 8811 	msr	BASEPRI, r3
 8005a12:	f3bf 8f6f 	isb	sy
 8005a16:	f3bf 8f4f 	dsb	sy
 8005a1a:	60fb      	str	r3, [r7, #12]
}
 8005a1c:	bf00      	nop
 8005a1e:	e7fe      	b.n	8005a1e <vTaskStartScheduler+0xaa>
}
 8005a20:	bf00      	nop
 8005a22:	3718      	adds	r7, #24
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	08007eac 	.word	0x08007eac
 8005a2c:	08006059 	.word	0x08006059
 8005a30:	20000bf0 	.word	0x20000bf0
 8005a34:	20000bec 	.word	0x20000bec
 8005a38:	20000bd8 	.word	0x20000bd8
 8005a3c:	20000bd0 	.word	0x20000bd0

08005a40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005a40:	b480      	push	{r7}
 8005a42:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005a44:	4b04      	ldr	r3, [pc, #16]	; (8005a58 <vTaskSuspendAll+0x18>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	3301      	adds	r3, #1
 8005a4a:	4a03      	ldr	r2, [pc, #12]	; (8005a58 <vTaskSuspendAll+0x18>)
 8005a4c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005a4e:	bf00      	nop
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr
 8005a58:	20000bf4 	.word	0x20000bf4

08005a5c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b084      	sub	sp, #16
 8005a60:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005a62:	2300      	movs	r3, #0
 8005a64:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005a66:	2300      	movs	r3, #0
 8005a68:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005a6a:	4b42      	ldr	r3, [pc, #264]	; (8005b74 <xTaskResumeAll+0x118>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d10a      	bne.n	8005a88 <xTaskResumeAll+0x2c>
	__asm volatile
 8005a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a76:	f383 8811 	msr	BASEPRI, r3
 8005a7a:	f3bf 8f6f 	isb	sy
 8005a7e:	f3bf 8f4f 	dsb	sy
 8005a82:	603b      	str	r3, [r7, #0]
}
 8005a84:	bf00      	nop
 8005a86:	e7fe      	b.n	8005a86 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005a88:	f001 fa14 	bl	8006eb4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005a8c:	4b39      	ldr	r3, [pc, #228]	; (8005b74 <xTaskResumeAll+0x118>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	3b01      	subs	r3, #1
 8005a92:	4a38      	ldr	r2, [pc, #224]	; (8005b74 <xTaskResumeAll+0x118>)
 8005a94:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a96:	4b37      	ldr	r3, [pc, #220]	; (8005b74 <xTaskResumeAll+0x118>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d162      	bne.n	8005b64 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005a9e:	4b36      	ldr	r3, [pc, #216]	; (8005b78 <xTaskResumeAll+0x11c>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d05e      	beq.n	8005b64 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005aa6:	e02f      	b.n	8005b08 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005aa8:	4b34      	ldr	r3, [pc, #208]	; (8005b7c <xTaskResumeAll+0x120>)
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	3318      	adds	r3, #24
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f7fe fe87 	bl	80047c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	3304      	adds	r3, #4
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f7fe fe82 	bl	80047c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ac8:	4b2d      	ldr	r3, [pc, #180]	; (8005b80 <xTaskResumeAll+0x124>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d903      	bls.n	8005ad8 <xTaskResumeAll+0x7c>
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad4:	4a2a      	ldr	r2, [pc, #168]	; (8005b80 <xTaskResumeAll+0x124>)
 8005ad6:	6013      	str	r3, [r2, #0]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005adc:	4613      	mov	r3, r2
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	4413      	add	r3, r2
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	4a27      	ldr	r2, [pc, #156]	; (8005b84 <xTaskResumeAll+0x128>)
 8005ae6:	441a      	add	r2, r3
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	3304      	adds	r3, #4
 8005aec:	4619      	mov	r1, r3
 8005aee:	4610      	mov	r0, r2
 8005af0:	f7fe fe0d 	bl	800470e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005af8:	4b23      	ldr	r3, [pc, #140]	; (8005b88 <xTaskResumeAll+0x12c>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d302      	bcc.n	8005b08 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005b02:	4b22      	ldr	r3, [pc, #136]	; (8005b8c <xTaskResumeAll+0x130>)
 8005b04:	2201      	movs	r2, #1
 8005b06:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b08:	4b1c      	ldr	r3, [pc, #112]	; (8005b7c <xTaskResumeAll+0x120>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d1cb      	bne.n	8005aa8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d001      	beq.n	8005b1a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005b16:	f000 fb55 	bl	80061c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005b1a:	4b1d      	ldr	r3, [pc, #116]	; (8005b90 <xTaskResumeAll+0x134>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d010      	beq.n	8005b48 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005b26:	f000 f847 	bl	8005bb8 <xTaskIncrementTick>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d002      	beq.n	8005b36 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005b30:	4b16      	ldr	r3, [pc, #88]	; (8005b8c <xTaskResumeAll+0x130>)
 8005b32:	2201      	movs	r2, #1
 8005b34:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	3b01      	subs	r3, #1
 8005b3a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d1f1      	bne.n	8005b26 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005b42:	4b13      	ldr	r3, [pc, #76]	; (8005b90 <xTaskResumeAll+0x134>)
 8005b44:	2200      	movs	r2, #0
 8005b46:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005b48:	4b10      	ldr	r3, [pc, #64]	; (8005b8c <xTaskResumeAll+0x130>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d009      	beq.n	8005b64 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005b50:	2301      	movs	r3, #1
 8005b52:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005b54:	4b0f      	ldr	r3, [pc, #60]	; (8005b94 <xTaskResumeAll+0x138>)
 8005b56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b5a:	601a      	str	r2, [r3, #0]
 8005b5c:	f3bf 8f4f 	dsb	sy
 8005b60:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005b64:	f001 f9d6 	bl	8006f14 <vPortExitCritical>

	return xAlreadyYielded;
 8005b68:	68bb      	ldr	r3, [r7, #8]
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3710      	adds	r7, #16
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	20000bf4 	.word	0x20000bf4
 8005b78:	20000bcc 	.word	0x20000bcc
 8005b7c:	20000b8c 	.word	0x20000b8c
 8005b80:	20000bd4 	.word	0x20000bd4
 8005b84:	200006fc 	.word	0x200006fc
 8005b88:	200006f8 	.word	0x200006f8
 8005b8c:	20000be0 	.word	0x20000be0
 8005b90:	20000bdc 	.word	0x20000bdc
 8005b94:	e000ed04 	.word	0xe000ed04

08005b98 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b083      	sub	sp, #12
 8005b9c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005b9e:	4b05      	ldr	r3, [pc, #20]	; (8005bb4 <xTaskGetTickCount+0x1c>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005ba4:	687b      	ldr	r3, [r7, #4]
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	370c      	adds	r7, #12
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr
 8005bb2:	bf00      	nop
 8005bb4:	20000bd0 	.word	0x20000bd0

08005bb8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b086      	sub	sp, #24
 8005bbc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bc2:	4b4f      	ldr	r3, [pc, #316]	; (8005d00 <xTaskIncrementTick+0x148>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	f040 808f 	bne.w	8005cea <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005bcc:	4b4d      	ldr	r3, [pc, #308]	; (8005d04 <xTaskIncrementTick+0x14c>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	3301      	adds	r3, #1
 8005bd2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005bd4:	4a4b      	ldr	r2, [pc, #300]	; (8005d04 <xTaskIncrementTick+0x14c>)
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d120      	bne.n	8005c22 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005be0:	4b49      	ldr	r3, [pc, #292]	; (8005d08 <xTaskIncrementTick+0x150>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d00a      	beq.n	8005c00 <xTaskIncrementTick+0x48>
	__asm volatile
 8005bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bee:	f383 8811 	msr	BASEPRI, r3
 8005bf2:	f3bf 8f6f 	isb	sy
 8005bf6:	f3bf 8f4f 	dsb	sy
 8005bfa:	603b      	str	r3, [r7, #0]
}
 8005bfc:	bf00      	nop
 8005bfe:	e7fe      	b.n	8005bfe <xTaskIncrementTick+0x46>
 8005c00:	4b41      	ldr	r3, [pc, #260]	; (8005d08 <xTaskIncrementTick+0x150>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	60fb      	str	r3, [r7, #12]
 8005c06:	4b41      	ldr	r3, [pc, #260]	; (8005d0c <xTaskIncrementTick+0x154>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a3f      	ldr	r2, [pc, #252]	; (8005d08 <xTaskIncrementTick+0x150>)
 8005c0c:	6013      	str	r3, [r2, #0]
 8005c0e:	4a3f      	ldr	r2, [pc, #252]	; (8005d0c <xTaskIncrementTick+0x154>)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6013      	str	r3, [r2, #0]
 8005c14:	4b3e      	ldr	r3, [pc, #248]	; (8005d10 <xTaskIncrementTick+0x158>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	3301      	adds	r3, #1
 8005c1a:	4a3d      	ldr	r2, [pc, #244]	; (8005d10 <xTaskIncrementTick+0x158>)
 8005c1c:	6013      	str	r3, [r2, #0]
 8005c1e:	f000 fad1 	bl	80061c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005c22:	4b3c      	ldr	r3, [pc, #240]	; (8005d14 <xTaskIncrementTick+0x15c>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	693a      	ldr	r2, [r7, #16]
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d349      	bcc.n	8005cc0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c2c:	4b36      	ldr	r3, [pc, #216]	; (8005d08 <xTaskIncrementTick+0x150>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d104      	bne.n	8005c40 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c36:	4b37      	ldr	r3, [pc, #220]	; (8005d14 <xTaskIncrementTick+0x15c>)
 8005c38:	f04f 32ff 	mov.w	r2, #4294967295
 8005c3c:	601a      	str	r2, [r3, #0]
					break;
 8005c3e:	e03f      	b.n	8005cc0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c40:	4b31      	ldr	r3, [pc, #196]	; (8005d08 <xTaskIncrementTick+0x150>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005c50:	693a      	ldr	r2, [r7, #16]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d203      	bcs.n	8005c60 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005c58:	4a2e      	ldr	r2, [pc, #184]	; (8005d14 <xTaskIncrementTick+0x15c>)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005c5e:	e02f      	b.n	8005cc0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	3304      	adds	r3, #4
 8005c64:	4618      	mov	r0, r3
 8005c66:	f7fe fdaf 	bl	80047c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d004      	beq.n	8005c7c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	3318      	adds	r3, #24
 8005c76:	4618      	mov	r0, r3
 8005c78:	f7fe fda6 	bl	80047c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c80:	4b25      	ldr	r3, [pc, #148]	; (8005d18 <xTaskIncrementTick+0x160>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d903      	bls.n	8005c90 <xTaskIncrementTick+0xd8>
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c8c:	4a22      	ldr	r2, [pc, #136]	; (8005d18 <xTaskIncrementTick+0x160>)
 8005c8e:	6013      	str	r3, [r2, #0]
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c94:	4613      	mov	r3, r2
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	4413      	add	r3, r2
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	4a1f      	ldr	r2, [pc, #124]	; (8005d1c <xTaskIncrementTick+0x164>)
 8005c9e:	441a      	add	r2, r3
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	3304      	adds	r3, #4
 8005ca4:	4619      	mov	r1, r3
 8005ca6:	4610      	mov	r0, r2
 8005ca8:	f7fe fd31 	bl	800470e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cb0:	4b1b      	ldr	r3, [pc, #108]	; (8005d20 <xTaskIncrementTick+0x168>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d3b8      	bcc.n	8005c2c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005cbe:	e7b5      	b.n	8005c2c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005cc0:	4b17      	ldr	r3, [pc, #92]	; (8005d20 <xTaskIncrementTick+0x168>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cc6:	4915      	ldr	r1, [pc, #84]	; (8005d1c <xTaskIncrementTick+0x164>)
 8005cc8:	4613      	mov	r3, r2
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	4413      	add	r3, r2
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	440b      	add	r3, r1
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d901      	bls.n	8005cdc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005cdc:	4b11      	ldr	r3, [pc, #68]	; (8005d24 <xTaskIncrementTick+0x16c>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d007      	beq.n	8005cf4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	617b      	str	r3, [r7, #20]
 8005ce8:	e004      	b.n	8005cf4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005cea:	4b0f      	ldr	r3, [pc, #60]	; (8005d28 <xTaskIncrementTick+0x170>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	3301      	adds	r3, #1
 8005cf0:	4a0d      	ldr	r2, [pc, #52]	; (8005d28 <xTaskIncrementTick+0x170>)
 8005cf2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005cf4:	697b      	ldr	r3, [r7, #20]
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3718      	adds	r7, #24
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	20000bf4 	.word	0x20000bf4
 8005d04:	20000bd0 	.word	0x20000bd0
 8005d08:	20000b84 	.word	0x20000b84
 8005d0c:	20000b88 	.word	0x20000b88
 8005d10:	20000be4 	.word	0x20000be4
 8005d14:	20000bec 	.word	0x20000bec
 8005d18:	20000bd4 	.word	0x20000bd4
 8005d1c:	200006fc 	.word	0x200006fc
 8005d20:	200006f8 	.word	0x200006f8
 8005d24:	20000be0 	.word	0x20000be0
 8005d28:	20000bdc 	.word	0x20000bdc

08005d2c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b085      	sub	sp, #20
 8005d30:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005d32:	4b28      	ldr	r3, [pc, #160]	; (8005dd4 <vTaskSwitchContext+0xa8>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d003      	beq.n	8005d42 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005d3a:	4b27      	ldr	r3, [pc, #156]	; (8005dd8 <vTaskSwitchContext+0xac>)
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005d40:	e041      	b.n	8005dc6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005d42:	4b25      	ldr	r3, [pc, #148]	; (8005dd8 <vTaskSwitchContext+0xac>)
 8005d44:	2200      	movs	r2, #0
 8005d46:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d48:	4b24      	ldr	r3, [pc, #144]	; (8005ddc <vTaskSwitchContext+0xb0>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	60fb      	str	r3, [r7, #12]
 8005d4e:	e010      	b.n	8005d72 <vTaskSwitchContext+0x46>
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d10a      	bne.n	8005d6c <vTaskSwitchContext+0x40>
	__asm volatile
 8005d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d5a:	f383 8811 	msr	BASEPRI, r3
 8005d5e:	f3bf 8f6f 	isb	sy
 8005d62:	f3bf 8f4f 	dsb	sy
 8005d66:	607b      	str	r3, [r7, #4]
}
 8005d68:	bf00      	nop
 8005d6a:	e7fe      	b.n	8005d6a <vTaskSwitchContext+0x3e>
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	3b01      	subs	r3, #1
 8005d70:	60fb      	str	r3, [r7, #12]
 8005d72:	491b      	ldr	r1, [pc, #108]	; (8005de0 <vTaskSwitchContext+0xb4>)
 8005d74:	68fa      	ldr	r2, [r7, #12]
 8005d76:	4613      	mov	r3, r2
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	4413      	add	r3, r2
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	440b      	add	r3, r1
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d0e4      	beq.n	8005d50 <vTaskSwitchContext+0x24>
 8005d86:	68fa      	ldr	r2, [r7, #12]
 8005d88:	4613      	mov	r3, r2
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	4413      	add	r3, r2
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	4a13      	ldr	r2, [pc, #76]	; (8005de0 <vTaskSwitchContext+0xb4>)
 8005d92:	4413      	add	r3, r2
 8005d94:	60bb      	str	r3, [r7, #8]
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	685a      	ldr	r2, [r3, #4]
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	605a      	str	r2, [r3, #4]
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	685a      	ldr	r2, [r3, #4]
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	3308      	adds	r3, #8
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d104      	bne.n	8005db6 <vTaskSwitchContext+0x8a>
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	685a      	ldr	r2, [r3, #4]
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	605a      	str	r2, [r3, #4]
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	4a09      	ldr	r2, [pc, #36]	; (8005de4 <vTaskSwitchContext+0xb8>)
 8005dbe:	6013      	str	r3, [r2, #0]
 8005dc0:	4a06      	ldr	r2, [pc, #24]	; (8005ddc <vTaskSwitchContext+0xb0>)
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	6013      	str	r3, [r2, #0]
}
 8005dc6:	bf00      	nop
 8005dc8:	3714      	adds	r7, #20
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop
 8005dd4:	20000bf4 	.word	0x20000bf4
 8005dd8:	20000be0 	.word	0x20000be0
 8005ddc:	20000bd4 	.word	0x20000bd4
 8005de0:	200006fc 	.word	0x200006fc
 8005de4:	200006f8 	.word	0x200006f8

08005de8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b084      	sub	sp, #16
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d10a      	bne.n	8005e0e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dfc:	f383 8811 	msr	BASEPRI, r3
 8005e00:	f3bf 8f6f 	isb	sy
 8005e04:	f3bf 8f4f 	dsb	sy
 8005e08:	60fb      	str	r3, [r7, #12]
}
 8005e0a:	bf00      	nop
 8005e0c:	e7fe      	b.n	8005e0c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005e0e:	4b07      	ldr	r3, [pc, #28]	; (8005e2c <vTaskPlaceOnEventList+0x44>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	3318      	adds	r3, #24
 8005e14:	4619      	mov	r1, r3
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f7fe fc9d 	bl	8004756 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005e1c:	2101      	movs	r1, #1
 8005e1e:	6838      	ldr	r0, [r7, #0]
 8005e20:	f000 fb7a 	bl	8006518 <prvAddCurrentTaskToDelayedList>
}
 8005e24:	bf00      	nop
 8005e26:	3710      	adds	r7, #16
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}
 8005e2c:	200006f8 	.word	0x200006f8

08005e30 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b086      	sub	sp, #24
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d10a      	bne.n	8005e58 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e46:	f383 8811 	msr	BASEPRI, r3
 8005e4a:	f3bf 8f6f 	isb	sy
 8005e4e:	f3bf 8f4f 	dsb	sy
 8005e52:	617b      	str	r3, [r7, #20]
}
 8005e54:	bf00      	nop
 8005e56:	e7fe      	b.n	8005e56 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005e58:	4b0a      	ldr	r3, [pc, #40]	; (8005e84 <vTaskPlaceOnEventListRestricted+0x54>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	3318      	adds	r3, #24
 8005e5e:	4619      	mov	r1, r3
 8005e60:	68f8      	ldr	r0, [r7, #12]
 8005e62:	f7fe fc54 	bl	800470e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d002      	beq.n	8005e72 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8005e70:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005e72:	6879      	ldr	r1, [r7, #4]
 8005e74:	68b8      	ldr	r0, [r7, #8]
 8005e76:	f000 fb4f 	bl	8006518 <prvAddCurrentTaskToDelayedList>
	}
 8005e7a:	bf00      	nop
 8005e7c:	3718      	adds	r7, #24
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop
 8005e84:	200006f8 	.word	0x200006f8

08005e88 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b086      	sub	sp, #24
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d10a      	bne.n	8005eb4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea2:	f383 8811 	msr	BASEPRI, r3
 8005ea6:	f3bf 8f6f 	isb	sy
 8005eaa:	f3bf 8f4f 	dsb	sy
 8005eae:	60fb      	str	r3, [r7, #12]
}
 8005eb0:	bf00      	nop
 8005eb2:	e7fe      	b.n	8005eb2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	3318      	adds	r3, #24
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f7fe fc85 	bl	80047c8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ebe:	4b1e      	ldr	r3, [pc, #120]	; (8005f38 <xTaskRemoveFromEventList+0xb0>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d11d      	bne.n	8005f02 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	3304      	adds	r3, #4
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f7fe fc7c 	bl	80047c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ed4:	4b19      	ldr	r3, [pc, #100]	; (8005f3c <xTaskRemoveFromEventList+0xb4>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d903      	bls.n	8005ee4 <xTaskRemoveFromEventList+0x5c>
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee0:	4a16      	ldr	r2, [pc, #88]	; (8005f3c <xTaskRemoveFromEventList+0xb4>)
 8005ee2:	6013      	str	r3, [r2, #0]
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ee8:	4613      	mov	r3, r2
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	4413      	add	r3, r2
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	4a13      	ldr	r2, [pc, #76]	; (8005f40 <xTaskRemoveFromEventList+0xb8>)
 8005ef2:	441a      	add	r2, r3
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	3304      	adds	r3, #4
 8005ef8:	4619      	mov	r1, r3
 8005efa:	4610      	mov	r0, r2
 8005efc:	f7fe fc07 	bl	800470e <vListInsertEnd>
 8005f00:	e005      	b.n	8005f0e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	3318      	adds	r3, #24
 8005f06:	4619      	mov	r1, r3
 8005f08:	480e      	ldr	r0, [pc, #56]	; (8005f44 <xTaskRemoveFromEventList+0xbc>)
 8005f0a:	f7fe fc00 	bl	800470e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f12:	4b0d      	ldr	r3, [pc, #52]	; (8005f48 <xTaskRemoveFromEventList+0xc0>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d905      	bls.n	8005f28 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005f20:	4b0a      	ldr	r3, [pc, #40]	; (8005f4c <xTaskRemoveFromEventList+0xc4>)
 8005f22:	2201      	movs	r2, #1
 8005f24:	601a      	str	r2, [r3, #0]
 8005f26:	e001      	b.n	8005f2c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005f2c:	697b      	ldr	r3, [r7, #20]
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3718      	adds	r7, #24
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	20000bf4 	.word	0x20000bf4
 8005f3c:	20000bd4 	.word	0x20000bd4
 8005f40:	200006fc 	.word	0x200006fc
 8005f44:	20000b8c 	.word	0x20000b8c
 8005f48:	200006f8 	.word	0x200006f8
 8005f4c:	20000be0 	.word	0x20000be0

08005f50 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005f50:	b480      	push	{r7}
 8005f52:	b083      	sub	sp, #12
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005f58:	4b06      	ldr	r3, [pc, #24]	; (8005f74 <vTaskInternalSetTimeOutState+0x24>)
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005f60:	4b05      	ldr	r3, [pc, #20]	; (8005f78 <vTaskInternalSetTimeOutState+0x28>)
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	605a      	str	r2, [r3, #4]
}
 8005f68:	bf00      	nop
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr
 8005f74:	20000be4 	.word	0x20000be4
 8005f78:	20000bd0 	.word	0x20000bd0

08005f7c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b088      	sub	sp, #32
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d10a      	bne.n	8005fa2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f90:	f383 8811 	msr	BASEPRI, r3
 8005f94:	f3bf 8f6f 	isb	sy
 8005f98:	f3bf 8f4f 	dsb	sy
 8005f9c:	613b      	str	r3, [r7, #16]
}
 8005f9e:	bf00      	nop
 8005fa0:	e7fe      	b.n	8005fa0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d10a      	bne.n	8005fbe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fac:	f383 8811 	msr	BASEPRI, r3
 8005fb0:	f3bf 8f6f 	isb	sy
 8005fb4:	f3bf 8f4f 	dsb	sy
 8005fb8:	60fb      	str	r3, [r7, #12]
}
 8005fba:	bf00      	nop
 8005fbc:	e7fe      	b.n	8005fbc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005fbe:	f000 ff79 	bl	8006eb4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005fc2:	4b1d      	ldr	r3, [pc, #116]	; (8006038 <xTaskCheckForTimeOut+0xbc>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	69ba      	ldr	r2, [r7, #24]
 8005fce:	1ad3      	subs	r3, r2, r3
 8005fd0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fda:	d102      	bne.n	8005fe2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	61fb      	str	r3, [r7, #28]
 8005fe0:	e023      	b.n	800602a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	4b15      	ldr	r3, [pc, #84]	; (800603c <xTaskCheckForTimeOut+0xc0>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d007      	beq.n	8005ffe <xTaskCheckForTimeOut+0x82>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	69ba      	ldr	r2, [r7, #24]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d302      	bcc.n	8005ffe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	61fb      	str	r3, [r7, #28]
 8005ffc:	e015      	b.n	800602a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	697a      	ldr	r2, [r7, #20]
 8006004:	429a      	cmp	r2, r3
 8006006:	d20b      	bcs.n	8006020 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	1ad2      	subs	r2, r2, r3
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f7ff ff9b 	bl	8005f50 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800601a:	2300      	movs	r3, #0
 800601c:	61fb      	str	r3, [r7, #28]
 800601e:	e004      	b.n	800602a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	2200      	movs	r2, #0
 8006024:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006026:	2301      	movs	r3, #1
 8006028:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800602a:	f000 ff73 	bl	8006f14 <vPortExitCritical>

	return xReturn;
 800602e:	69fb      	ldr	r3, [r7, #28]
}
 8006030:	4618      	mov	r0, r3
 8006032:	3720      	adds	r7, #32
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}
 8006038:	20000bd0 	.word	0x20000bd0
 800603c:	20000be4 	.word	0x20000be4

08006040 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006040:	b480      	push	{r7}
 8006042:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006044:	4b03      	ldr	r3, [pc, #12]	; (8006054 <vTaskMissedYield+0x14>)
 8006046:	2201      	movs	r2, #1
 8006048:	601a      	str	r2, [r3, #0]
}
 800604a:	bf00      	nop
 800604c:	46bd      	mov	sp, r7
 800604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006052:	4770      	bx	lr
 8006054:	20000be0 	.word	0x20000be0

08006058 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b082      	sub	sp, #8
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006060:	f000 f852 	bl	8006108 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006064:	4b06      	ldr	r3, [pc, #24]	; (8006080 <prvIdleTask+0x28>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	2b01      	cmp	r3, #1
 800606a:	d9f9      	bls.n	8006060 <prvIdleTask+0x8>
			{
				taskYIELD();
 800606c:	4b05      	ldr	r3, [pc, #20]	; (8006084 <prvIdleTask+0x2c>)
 800606e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006072:	601a      	str	r2, [r3, #0]
 8006074:	f3bf 8f4f 	dsb	sy
 8006078:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800607c:	e7f0      	b.n	8006060 <prvIdleTask+0x8>
 800607e:	bf00      	nop
 8006080:	200006fc 	.word	0x200006fc
 8006084:	e000ed04 	.word	0xe000ed04

08006088 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b082      	sub	sp, #8
 800608c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800608e:	2300      	movs	r3, #0
 8006090:	607b      	str	r3, [r7, #4]
 8006092:	e00c      	b.n	80060ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	4613      	mov	r3, r2
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	4413      	add	r3, r2
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	4a12      	ldr	r2, [pc, #72]	; (80060e8 <prvInitialiseTaskLists+0x60>)
 80060a0:	4413      	add	r3, r2
 80060a2:	4618      	mov	r0, r3
 80060a4:	f7fe fb06 	bl	80046b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	3301      	adds	r3, #1
 80060ac:	607b      	str	r3, [r7, #4]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2b37      	cmp	r3, #55	; 0x37
 80060b2:	d9ef      	bls.n	8006094 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80060b4:	480d      	ldr	r0, [pc, #52]	; (80060ec <prvInitialiseTaskLists+0x64>)
 80060b6:	f7fe fafd 	bl	80046b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80060ba:	480d      	ldr	r0, [pc, #52]	; (80060f0 <prvInitialiseTaskLists+0x68>)
 80060bc:	f7fe fafa 	bl	80046b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80060c0:	480c      	ldr	r0, [pc, #48]	; (80060f4 <prvInitialiseTaskLists+0x6c>)
 80060c2:	f7fe faf7 	bl	80046b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80060c6:	480c      	ldr	r0, [pc, #48]	; (80060f8 <prvInitialiseTaskLists+0x70>)
 80060c8:	f7fe faf4 	bl	80046b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80060cc:	480b      	ldr	r0, [pc, #44]	; (80060fc <prvInitialiseTaskLists+0x74>)
 80060ce:	f7fe faf1 	bl	80046b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80060d2:	4b0b      	ldr	r3, [pc, #44]	; (8006100 <prvInitialiseTaskLists+0x78>)
 80060d4:	4a05      	ldr	r2, [pc, #20]	; (80060ec <prvInitialiseTaskLists+0x64>)
 80060d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80060d8:	4b0a      	ldr	r3, [pc, #40]	; (8006104 <prvInitialiseTaskLists+0x7c>)
 80060da:	4a05      	ldr	r2, [pc, #20]	; (80060f0 <prvInitialiseTaskLists+0x68>)
 80060dc:	601a      	str	r2, [r3, #0]
}
 80060de:	bf00      	nop
 80060e0:	3708      	adds	r7, #8
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	bf00      	nop
 80060e8:	200006fc 	.word	0x200006fc
 80060ec:	20000b5c 	.word	0x20000b5c
 80060f0:	20000b70 	.word	0x20000b70
 80060f4:	20000b8c 	.word	0x20000b8c
 80060f8:	20000ba0 	.word	0x20000ba0
 80060fc:	20000bb8 	.word	0x20000bb8
 8006100:	20000b84 	.word	0x20000b84
 8006104:	20000b88 	.word	0x20000b88

08006108 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b082      	sub	sp, #8
 800610c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800610e:	e019      	b.n	8006144 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006110:	f000 fed0 	bl	8006eb4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006114:	4b10      	ldr	r3, [pc, #64]	; (8006158 <prvCheckTasksWaitingTermination+0x50>)
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	68db      	ldr	r3, [r3, #12]
 800611a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	3304      	adds	r3, #4
 8006120:	4618      	mov	r0, r3
 8006122:	f7fe fb51 	bl	80047c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006126:	4b0d      	ldr	r3, [pc, #52]	; (800615c <prvCheckTasksWaitingTermination+0x54>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	3b01      	subs	r3, #1
 800612c:	4a0b      	ldr	r2, [pc, #44]	; (800615c <prvCheckTasksWaitingTermination+0x54>)
 800612e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006130:	4b0b      	ldr	r3, [pc, #44]	; (8006160 <prvCheckTasksWaitingTermination+0x58>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	3b01      	subs	r3, #1
 8006136:	4a0a      	ldr	r2, [pc, #40]	; (8006160 <prvCheckTasksWaitingTermination+0x58>)
 8006138:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800613a:	f000 feeb 	bl	8006f14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 f810 	bl	8006164 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006144:	4b06      	ldr	r3, [pc, #24]	; (8006160 <prvCheckTasksWaitingTermination+0x58>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d1e1      	bne.n	8006110 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800614c:	bf00      	nop
 800614e:	bf00      	nop
 8006150:	3708      	adds	r7, #8
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop
 8006158:	20000ba0 	.word	0x20000ba0
 800615c:	20000bcc 	.word	0x20000bcc
 8006160:	20000bb4 	.word	0x20000bb4

08006164 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006164:	b580      	push	{r7, lr}
 8006166:	b084      	sub	sp, #16
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006172:	2b00      	cmp	r3, #0
 8006174:	d108      	bne.n	8006188 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800617a:	4618      	mov	r0, r3
 800617c:	f001 f888 	bl	8007290 <vPortFree>
				vPortFree( pxTCB );
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f001 f885 	bl	8007290 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006186:	e018      	b.n	80061ba <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800618e:	2b01      	cmp	r3, #1
 8006190:	d103      	bne.n	800619a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f001 f87c 	bl	8007290 <vPortFree>
	}
 8006198:	e00f      	b.n	80061ba <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80061a0:	2b02      	cmp	r3, #2
 80061a2:	d00a      	beq.n	80061ba <prvDeleteTCB+0x56>
	__asm volatile
 80061a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a8:	f383 8811 	msr	BASEPRI, r3
 80061ac:	f3bf 8f6f 	isb	sy
 80061b0:	f3bf 8f4f 	dsb	sy
 80061b4:	60fb      	str	r3, [r7, #12]
}
 80061b6:	bf00      	nop
 80061b8:	e7fe      	b.n	80061b8 <prvDeleteTCB+0x54>
	}
 80061ba:	bf00      	nop
 80061bc:	3710      	adds	r7, #16
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
	...

080061c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80061c4:	b480      	push	{r7}
 80061c6:	b083      	sub	sp, #12
 80061c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061ca:	4b0c      	ldr	r3, [pc, #48]	; (80061fc <prvResetNextTaskUnblockTime+0x38>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d104      	bne.n	80061de <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80061d4:	4b0a      	ldr	r3, [pc, #40]	; (8006200 <prvResetNextTaskUnblockTime+0x3c>)
 80061d6:	f04f 32ff 	mov.w	r2, #4294967295
 80061da:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80061dc:	e008      	b.n	80061f0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061de:	4b07      	ldr	r3, [pc, #28]	; (80061fc <prvResetNextTaskUnblockTime+0x38>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	4a04      	ldr	r2, [pc, #16]	; (8006200 <prvResetNextTaskUnblockTime+0x3c>)
 80061ee:	6013      	str	r3, [r2, #0]
}
 80061f0:	bf00      	nop
 80061f2:	370c      	adds	r7, #12
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr
 80061fc:	20000b84 	.word	0x20000b84
 8006200:	20000bec 	.word	0x20000bec

08006204 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006204:	b480      	push	{r7}
 8006206:	b083      	sub	sp, #12
 8006208:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800620a:	4b0b      	ldr	r3, [pc, #44]	; (8006238 <xTaskGetSchedulerState+0x34>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d102      	bne.n	8006218 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006212:	2301      	movs	r3, #1
 8006214:	607b      	str	r3, [r7, #4]
 8006216:	e008      	b.n	800622a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006218:	4b08      	ldr	r3, [pc, #32]	; (800623c <xTaskGetSchedulerState+0x38>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d102      	bne.n	8006226 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006220:	2302      	movs	r3, #2
 8006222:	607b      	str	r3, [r7, #4]
 8006224:	e001      	b.n	800622a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006226:	2300      	movs	r3, #0
 8006228:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800622a:	687b      	ldr	r3, [r7, #4]
	}
 800622c:	4618      	mov	r0, r3
 800622e:	370c      	adds	r7, #12
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr
 8006238:	20000bd8 	.word	0x20000bd8
 800623c:	20000bf4 	.word	0x20000bf4

08006240 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800624c:	2300      	movs	r3, #0
 800624e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d051      	beq.n	80062fa <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800625a:	4b2a      	ldr	r3, [pc, #168]	; (8006304 <xTaskPriorityInherit+0xc4>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006260:	429a      	cmp	r2, r3
 8006262:	d241      	bcs.n	80062e8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	699b      	ldr	r3, [r3, #24]
 8006268:	2b00      	cmp	r3, #0
 800626a:	db06      	blt.n	800627a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800626c:	4b25      	ldr	r3, [pc, #148]	; (8006304 <xTaskPriorityInherit+0xc4>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006272:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	6959      	ldr	r1, [r3, #20]
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006282:	4613      	mov	r3, r2
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	4413      	add	r3, r2
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	4a1f      	ldr	r2, [pc, #124]	; (8006308 <xTaskPriorityInherit+0xc8>)
 800628c:	4413      	add	r3, r2
 800628e:	4299      	cmp	r1, r3
 8006290:	d122      	bne.n	80062d8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	3304      	adds	r3, #4
 8006296:	4618      	mov	r0, r3
 8006298:	f7fe fa96 	bl	80047c8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800629c:	4b19      	ldr	r3, [pc, #100]	; (8006304 <xTaskPriorityInherit+0xc4>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062aa:	4b18      	ldr	r3, [pc, #96]	; (800630c <xTaskPriorityInherit+0xcc>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d903      	bls.n	80062ba <xTaskPriorityInherit+0x7a>
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b6:	4a15      	ldr	r2, [pc, #84]	; (800630c <xTaskPriorityInherit+0xcc>)
 80062b8:	6013      	str	r3, [r2, #0]
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062be:	4613      	mov	r3, r2
 80062c0:	009b      	lsls	r3, r3, #2
 80062c2:	4413      	add	r3, r2
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	4a10      	ldr	r2, [pc, #64]	; (8006308 <xTaskPriorityInherit+0xc8>)
 80062c8:	441a      	add	r2, r3
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	3304      	adds	r3, #4
 80062ce:	4619      	mov	r1, r3
 80062d0:	4610      	mov	r0, r2
 80062d2:	f7fe fa1c 	bl	800470e <vListInsertEnd>
 80062d6:	e004      	b.n	80062e2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80062d8:	4b0a      	ldr	r3, [pc, #40]	; (8006304 <xTaskPriorityInherit+0xc4>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80062e2:	2301      	movs	r3, #1
 80062e4:	60fb      	str	r3, [r7, #12]
 80062e6:	e008      	b.n	80062fa <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80062ec:	4b05      	ldr	r3, [pc, #20]	; (8006304 <xTaskPriorityInherit+0xc4>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d201      	bcs.n	80062fa <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80062f6:	2301      	movs	r3, #1
 80062f8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80062fa:	68fb      	ldr	r3, [r7, #12]
	}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3710      	adds	r7, #16
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}
 8006304:	200006f8 	.word	0x200006f8
 8006308:	200006fc 	.word	0x200006fc
 800630c:	20000bd4 	.word	0x20000bd4

08006310 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006310:	b580      	push	{r7, lr}
 8006312:	b086      	sub	sp, #24
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800631c:	2300      	movs	r3, #0
 800631e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d056      	beq.n	80063d4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006326:	4b2e      	ldr	r3, [pc, #184]	; (80063e0 <xTaskPriorityDisinherit+0xd0>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	693a      	ldr	r2, [r7, #16]
 800632c:	429a      	cmp	r2, r3
 800632e:	d00a      	beq.n	8006346 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006334:	f383 8811 	msr	BASEPRI, r3
 8006338:	f3bf 8f6f 	isb	sy
 800633c:	f3bf 8f4f 	dsb	sy
 8006340:	60fb      	str	r3, [r7, #12]
}
 8006342:	bf00      	nop
 8006344:	e7fe      	b.n	8006344 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800634a:	2b00      	cmp	r3, #0
 800634c:	d10a      	bne.n	8006364 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800634e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006352:	f383 8811 	msr	BASEPRI, r3
 8006356:	f3bf 8f6f 	isb	sy
 800635a:	f3bf 8f4f 	dsb	sy
 800635e:	60bb      	str	r3, [r7, #8]
}
 8006360:	bf00      	nop
 8006362:	e7fe      	b.n	8006362 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006368:	1e5a      	subs	r2, r3, #1
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006376:	429a      	cmp	r2, r3
 8006378:	d02c      	beq.n	80063d4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800637e:	2b00      	cmp	r3, #0
 8006380:	d128      	bne.n	80063d4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	3304      	adds	r3, #4
 8006386:	4618      	mov	r0, r3
 8006388:	f7fe fa1e 	bl	80047c8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006398:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063a4:	4b0f      	ldr	r3, [pc, #60]	; (80063e4 <xTaskPriorityDisinherit+0xd4>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d903      	bls.n	80063b4 <xTaskPriorityDisinherit+0xa4>
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b0:	4a0c      	ldr	r2, [pc, #48]	; (80063e4 <xTaskPriorityDisinherit+0xd4>)
 80063b2:	6013      	str	r3, [r2, #0]
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063b8:	4613      	mov	r3, r2
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	4413      	add	r3, r2
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	4a09      	ldr	r2, [pc, #36]	; (80063e8 <xTaskPriorityDisinherit+0xd8>)
 80063c2:	441a      	add	r2, r3
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	3304      	adds	r3, #4
 80063c8:	4619      	mov	r1, r3
 80063ca:	4610      	mov	r0, r2
 80063cc:	f7fe f99f 	bl	800470e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80063d0:	2301      	movs	r3, #1
 80063d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80063d4:	697b      	ldr	r3, [r7, #20]
	}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3718      	adds	r7, #24
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	200006f8 	.word	0x200006f8
 80063e4:	20000bd4 	.word	0x20000bd4
 80063e8:	200006fc 	.word	0x200006fc

080063ec <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b088      	sub	sp, #32
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80063fa:	2301      	movs	r3, #1
 80063fc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d06a      	beq.n	80064da <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006404:	69bb      	ldr	r3, [r7, #24]
 8006406:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006408:	2b00      	cmp	r3, #0
 800640a:	d10a      	bne.n	8006422 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800640c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006410:	f383 8811 	msr	BASEPRI, r3
 8006414:	f3bf 8f6f 	isb	sy
 8006418:	f3bf 8f4f 	dsb	sy
 800641c:	60fb      	str	r3, [r7, #12]
}
 800641e:	bf00      	nop
 8006420:	e7fe      	b.n	8006420 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006422:	69bb      	ldr	r3, [r7, #24]
 8006424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006426:	683a      	ldr	r2, [r7, #0]
 8006428:	429a      	cmp	r2, r3
 800642a:	d902      	bls.n	8006432 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	61fb      	str	r3, [r7, #28]
 8006430:	e002      	b.n	8006438 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006432:	69bb      	ldr	r3, [r7, #24]
 8006434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006436:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006438:	69bb      	ldr	r3, [r7, #24]
 800643a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800643c:	69fa      	ldr	r2, [r7, #28]
 800643e:	429a      	cmp	r2, r3
 8006440:	d04b      	beq.n	80064da <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006442:	69bb      	ldr	r3, [r7, #24]
 8006444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006446:	697a      	ldr	r2, [r7, #20]
 8006448:	429a      	cmp	r2, r3
 800644a:	d146      	bne.n	80064da <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800644c:	4b25      	ldr	r3, [pc, #148]	; (80064e4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	69ba      	ldr	r2, [r7, #24]
 8006452:	429a      	cmp	r2, r3
 8006454:	d10a      	bne.n	800646c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8006456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800645a:	f383 8811 	msr	BASEPRI, r3
 800645e:	f3bf 8f6f 	isb	sy
 8006462:	f3bf 8f4f 	dsb	sy
 8006466:	60bb      	str	r3, [r7, #8]
}
 8006468:	bf00      	nop
 800646a:	e7fe      	b.n	800646a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800646c:	69bb      	ldr	r3, [r7, #24]
 800646e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006470:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006472:	69bb      	ldr	r3, [r7, #24]
 8006474:	69fa      	ldr	r2, [r7, #28]
 8006476:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006478:	69bb      	ldr	r3, [r7, #24]
 800647a:	699b      	ldr	r3, [r3, #24]
 800647c:	2b00      	cmp	r3, #0
 800647e:	db04      	blt.n	800648a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006480:	69fb      	ldr	r3, [r7, #28]
 8006482:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006486:	69bb      	ldr	r3, [r7, #24]
 8006488:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	6959      	ldr	r1, [r3, #20]
 800648e:	693a      	ldr	r2, [r7, #16]
 8006490:	4613      	mov	r3, r2
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	4413      	add	r3, r2
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	4a13      	ldr	r2, [pc, #76]	; (80064e8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800649a:	4413      	add	r3, r2
 800649c:	4299      	cmp	r1, r3
 800649e:	d11c      	bne.n	80064da <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064a0:	69bb      	ldr	r3, [r7, #24]
 80064a2:	3304      	adds	r3, #4
 80064a4:	4618      	mov	r0, r3
 80064a6:	f7fe f98f 	bl	80047c8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80064aa:	69bb      	ldr	r3, [r7, #24]
 80064ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064ae:	4b0f      	ldr	r3, [pc, #60]	; (80064ec <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d903      	bls.n	80064be <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ba:	4a0c      	ldr	r2, [pc, #48]	; (80064ec <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80064bc:	6013      	str	r3, [r2, #0]
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064c2:	4613      	mov	r3, r2
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	4413      	add	r3, r2
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	4a07      	ldr	r2, [pc, #28]	; (80064e8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80064cc:	441a      	add	r2, r3
 80064ce:	69bb      	ldr	r3, [r7, #24]
 80064d0:	3304      	adds	r3, #4
 80064d2:	4619      	mov	r1, r3
 80064d4:	4610      	mov	r0, r2
 80064d6:	f7fe f91a 	bl	800470e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80064da:	bf00      	nop
 80064dc:	3720      	adds	r7, #32
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	bf00      	nop
 80064e4:	200006f8 	.word	0x200006f8
 80064e8:	200006fc 	.word	0x200006fc
 80064ec:	20000bd4 	.word	0x20000bd4

080064f0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80064f0:	b480      	push	{r7}
 80064f2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80064f4:	4b07      	ldr	r3, [pc, #28]	; (8006514 <pvTaskIncrementMutexHeldCount+0x24>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d004      	beq.n	8006506 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80064fc:	4b05      	ldr	r3, [pc, #20]	; (8006514 <pvTaskIncrementMutexHeldCount+0x24>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006502:	3201      	adds	r2, #1
 8006504:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8006506:	4b03      	ldr	r3, [pc, #12]	; (8006514 <pvTaskIncrementMutexHeldCount+0x24>)
 8006508:	681b      	ldr	r3, [r3, #0]
	}
 800650a:	4618      	mov	r0, r3
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr
 8006514:	200006f8 	.word	0x200006f8

08006518 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006522:	4b21      	ldr	r3, [pc, #132]	; (80065a8 <prvAddCurrentTaskToDelayedList+0x90>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006528:	4b20      	ldr	r3, [pc, #128]	; (80065ac <prvAddCurrentTaskToDelayedList+0x94>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	3304      	adds	r3, #4
 800652e:	4618      	mov	r0, r3
 8006530:	f7fe f94a 	bl	80047c8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800653a:	d10a      	bne.n	8006552 <prvAddCurrentTaskToDelayedList+0x3a>
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d007      	beq.n	8006552 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006542:	4b1a      	ldr	r3, [pc, #104]	; (80065ac <prvAddCurrentTaskToDelayedList+0x94>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	3304      	adds	r3, #4
 8006548:	4619      	mov	r1, r3
 800654a:	4819      	ldr	r0, [pc, #100]	; (80065b0 <prvAddCurrentTaskToDelayedList+0x98>)
 800654c:	f7fe f8df 	bl	800470e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006550:	e026      	b.n	80065a0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006552:	68fa      	ldr	r2, [r7, #12]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4413      	add	r3, r2
 8006558:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800655a:	4b14      	ldr	r3, [pc, #80]	; (80065ac <prvAddCurrentTaskToDelayedList+0x94>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	68ba      	ldr	r2, [r7, #8]
 8006560:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006562:	68ba      	ldr	r2, [r7, #8]
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	429a      	cmp	r2, r3
 8006568:	d209      	bcs.n	800657e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800656a:	4b12      	ldr	r3, [pc, #72]	; (80065b4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	4b0f      	ldr	r3, [pc, #60]	; (80065ac <prvAddCurrentTaskToDelayedList+0x94>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	3304      	adds	r3, #4
 8006574:	4619      	mov	r1, r3
 8006576:	4610      	mov	r0, r2
 8006578:	f7fe f8ed 	bl	8004756 <vListInsert>
}
 800657c:	e010      	b.n	80065a0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800657e:	4b0e      	ldr	r3, [pc, #56]	; (80065b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	4b0a      	ldr	r3, [pc, #40]	; (80065ac <prvAddCurrentTaskToDelayedList+0x94>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	3304      	adds	r3, #4
 8006588:	4619      	mov	r1, r3
 800658a:	4610      	mov	r0, r2
 800658c:	f7fe f8e3 	bl	8004756 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006590:	4b0a      	ldr	r3, [pc, #40]	; (80065bc <prvAddCurrentTaskToDelayedList+0xa4>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	68ba      	ldr	r2, [r7, #8]
 8006596:	429a      	cmp	r2, r3
 8006598:	d202      	bcs.n	80065a0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800659a:	4a08      	ldr	r2, [pc, #32]	; (80065bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	6013      	str	r3, [r2, #0]
}
 80065a0:	bf00      	nop
 80065a2:	3710      	adds	r7, #16
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	20000bd0 	.word	0x20000bd0
 80065ac:	200006f8 	.word	0x200006f8
 80065b0:	20000bb8 	.word	0x20000bb8
 80065b4:	20000b88 	.word	0x20000b88
 80065b8:	20000b84 	.word	0x20000b84
 80065bc:	20000bec 	.word	0x20000bec

080065c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b08a      	sub	sp, #40	; 0x28
 80065c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80065c6:	2300      	movs	r3, #0
 80065c8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80065ca:	f000 fb07 	bl	8006bdc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80065ce:	4b1c      	ldr	r3, [pc, #112]	; (8006640 <xTimerCreateTimerTask+0x80>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d021      	beq.n	800661a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80065d6:	2300      	movs	r3, #0
 80065d8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80065da:	2300      	movs	r3, #0
 80065dc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80065de:	1d3a      	adds	r2, r7, #4
 80065e0:	f107 0108 	add.w	r1, r7, #8
 80065e4:	f107 030c 	add.w	r3, r7, #12
 80065e8:	4618      	mov	r0, r3
 80065ea:	f7fe f849 	bl	8004680 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80065ee:	6879      	ldr	r1, [r7, #4]
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	68fa      	ldr	r2, [r7, #12]
 80065f4:	9202      	str	r2, [sp, #8]
 80065f6:	9301      	str	r3, [sp, #4]
 80065f8:	2302      	movs	r3, #2
 80065fa:	9300      	str	r3, [sp, #0]
 80065fc:	2300      	movs	r3, #0
 80065fe:	460a      	mov	r2, r1
 8006600:	4910      	ldr	r1, [pc, #64]	; (8006644 <xTimerCreateTimerTask+0x84>)
 8006602:	4811      	ldr	r0, [pc, #68]	; (8006648 <xTimerCreateTimerTask+0x88>)
 8006604:	f7fe ffe0 	bl	80055c8 <xTaskCreateStatic>
 8006608:	4603      	mov	r3, r0
 800660a:	4a10      	ldr	r2, [pc, #64]	; (800664c <xTimerCreateTimerTask+0x8c>)
 800660c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800660e:	4b0f      	ldr	r3, [pc, #60]	; (800664c <xTimerCreateTimerTask+0x8c>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d001      	beq.n	800661a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006616:	2301      	movs	r3, #1
 8006618:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d10a      	bne.n	8006636 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006624:	f383 8811 	msr	BASEPRI, r3
 8006628:	f3bf 8f6f 	isb	sy
 800662c:	f3bf 8f4f 	dsb	sy
 8006630:	613b      	str	r3, [r7, #16]
}
 8006632:	bf00      	nop
 8006634:	e7fe      	b.n	8006634 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006636:	697b      	ldr	r3, [r7, #20]
}
 8006638:	4618      	mov	r0, r3
 800663a:	3718      	adds	r7, #24
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}
 8006640:	20000c28 	.word	0x20000c28
 8006644:	08007eb4 	.word	0x08007eb4
 8006648:	08006785 	.word	0x08006785
 800664c:	20000c2c 	.word	0x20000c2c

08006650 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b08a      	sub	sp, #40	; 0x28
 8006654:	af00      	add	r7, sp, #0
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	607a      	str	r2, [r7, #4]
 800665c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800665e:	2300      	movs	r3, #0
 8006660:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d10a      	bne.n	800667e <xTimerGenericCommand+0x2e>
	__asm volatile
 8006668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800666c:	f383 8811 	msr	BASEPRI, r3
 8006670:	f3bf 8f6f 	isb	sy
 8006674:	f3bf 8f4f 	dsb	sy
 8006678:	623b      	str	r3, [r7, #32]
}
 800667a:	bf00      	nop
 800667c:	e7fe      	b.n	800667c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800667e:	4b1a      	ldr	r3, [pc, #104]	; (80066e8 <xTimerGenericCommand+0x98>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d02a      	beq.n	80066dc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	2b05      	cmp	r3, #5
 8006696:	dc18      	bgt.n	80066ca <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006698:	f7ff fdb4 	bl	8006204 <xTaskGetSchedulerState>
 800669c:	4603      	mov	r3, r0
 800669e:	2b02      	cmp	r3, #2
 80066a0:	d109      	bne.n	80066b6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80066a2:	4b11      	ldr	r3, [pc, #68]	; (80066e8 <xTimerGenericCommand+0x98>)
 80066a4:	6818      	ldr	r0, [r3, #0]
 80066a6:	f107 0110 	add.w	r1, r7, #16
 80066aa:	2300      	movs	r3, #0
 80066ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066ae:	f7fe f9f3 	bl	8004a98 <xQueueGenericSend>
 80066b2:	6278      	str	r0, [r7, #36]	; 0x24
 80066b4:	e012      	b.n	80066dc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80066b6:	4b0c      	ldr	r3, [pc, #48]	; (80066e8 <xTimerGenericCommand+0x98>)
 80066b8:	6818      	ldr	r0, [r3, #0]
 80066ba:	f107 0110 	add.w	r1, r7, #16
 80066be:	2300      	movs	r3, #0
 80066c0:	2200      	movs	r2, #0
 80066c2:	f7fe f9e9 	bl	8004a98 <xQueueGenericSend>
 80066c6:	6278      	str	r0, [r7, #36]	; 0x24
 80066c8:	e008      	b.n	80066dc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80066ca:	4b07      	ldr	r3, [pc, #28]	; (80066e8 <xTimerGenericCommand+0x98>)
 80066cc:	6818      	ldr	r0, [r3, #0]
 80066ce:	f107 0110 	add.w	r1, r7, #16
 80066d2:	2300      	movs	r3, #0
 80066d4:	683a      	ldr	r2, [r7, #0]
 80066d6:	f7fe fadd 	bl	8004c94 <xQueueGenericSendFromISR>
 80066da:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80066dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3728      	adds	r7, #40	; 0x28
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	bf00      	nop
 80066e8:	20000c28 	.word	0x20000c28

080066ec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b088      	sub	sp, #32
 80066f0:	af02      	add	r7, sp, #8
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066f6:	4b22      	ldr	r3, [pc, #136]	; (8006780 <prvProcessExpiredTimer+0x94>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	68db      	ldr	r3, [r3, #12]
 80066fe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	3304      	adds	r3, #4
 8006704:	4618      	mov	r0, r3
 8006706:	f7fe f85f 	bl	80047c8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006710:	f003 0304 	and.w	r3, r3, #4
 8006714:	2b00      	cmp	r3, #0
 8006716:	d022      	beq.n	800675e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	699a      	ldr	r2, [r3, #24]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	18d1      	adds	r1, r2, r3
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	683a      	ldr	r2, [r7, #0]
 8006724:	6978      	ldr	r0, [r7, #20]
 8006726:	f000 f8d1 	bl	80068cc <prvInsertTimerInActiveList>
 800672a:	4603      	mov	r3, r0
 800672c:	2b00      	cmp	r3, #0
 800672e:	d01f      	beq.n	8006770 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006730:	2300      	movs	r3, #0
 8006732:	9300      	str	r3, [sp, #0]
 8006734:	2300      	movs	r3, #0
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	2100      	movs	r1, #0
 800673a:	6978      	ldr	r0, [r7, #20]
 800673c:	f7ff ff88 	bl	8006650 <xTimerGenericCommand>
 8006740:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d113      	bne.n	8006770 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800674c:	f383 8811 	msr	BASEPRI, r3
 8006750:	f3bf 8f6f 	isb	sy
 8006754:	f3bf 8f4f 	dsb	sy
 8006758:	60fb      	str	r3, [r7, #12]
}
 800675a:	bf00      	nop
 800675c:	e7fe      	b.n	800675c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006764:	f023 0301 	bic.w	r3, r3, #1
 8006768:	b2da      	uxtb	r2, r3
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	6a1b      	ldr	r3, [r3, #32]
 8006774:	6978      	ldr	r0, [r7, #20]
 8006776:	4798      	blx	r3
}
 8006778:	bf00      	nop
 800677a:	3718      	adds	r7, #24
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}
 8006780:	20000c20 	.word	0x20000c20

08006784 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b084      	sub	sp, #16
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800678c:	f107 0308 	add.w	r3, r7, #8
 8006790:	4618      	mov	r0, r3
 8006792:	f000 f857 	bl	8006844 <prvGetNextExpireTime>
 8006796:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	4619      	mov	r1, r3
 800679c:	68f8      	ldr	r0, [r7, #12]
 800679e:	f000 f803 	bl	80067a8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80067a2:	f000 f8d5 	bl	8006950 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80067a6:	e7f1      	b.n	800678c <prvTimerTask+0x8>

080067a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80067b2:	f7ff f945 	bl	8005a40 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80067b6:	f107 0308 	add.w	r3, r7, #8
 80067ba:	4618      	mov	r0, r3
 80067bc:	f000 f866 	bl	800688c <prvSampleTimeNow>
 80067c0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d130      	bne.n	800682a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d10a      	bne.n	80067e4 <prvProcessTimerOrBlockTask+0x3c>
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d806      	bhi.n	80067e4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80067d6:	f7ff f941 	bl	8005a5c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80067da:	68f9      	ldr	r1, [r7, #12]
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f7ff ff85 	bl	80066ec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80067e2:	e024      	b.n	800682e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d008      	beq.n	80067fc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80067ea:	4b13      	ldr	r3, [pc, #76]	; (8006838 <prvProcessTimerOrBlockTask+0x90>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d101      	bne.n	80067f8 <prvProcessTimerOrBlockTask+0x50>
 80067f4:	2301      	movs	r3, #1
 80067f6:	e000      	b.n	80067fa <prvProcessTimerOrBlockTask+0x52>
 80067f8:	2300      	movs	r3, #0
 80067fa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80067fc:	4b0f      	ldr	r3, [pc, #60]	; (800683c <prvProcessTimerOrBlockTask+0x94>)
 80067fe:	6818      	ldr	r0, [r3, #0]
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	1ad3      	subs	r3, r2, r3
 8006806:	683a      	ldr	r2, [r7, #0]
 8006808:	4619      	mov	r1, r3
 800680a:	f7fe fea9 	bl	8005560 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800680e:	f7ff f925 	bl	8005a5c <xTaskResumeAll>
 8006812:	4603      	mov	r3, r0
 8006814:	2b00      	cmp	r3, #0
 8006816:	d10a      	bne.n	800682e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006818:	4b09      	ldr	r3, [pc, #36]	; (8006840 <prvProcessTimerOrBlockTask+0x98>)
 800681a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800681e:	601a      	str	r2, [r3, #0]
 8006820:	f3bf 8f4f 	dsb	sy
 8006824:	f3bf 8f6f 	isb	sy
}
 8006828:	e001      	b.n	800682e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800682a:	f7ff f917 	bl	8005a5c <xTaskResumeAll>
}
 800682e:	bf00      	nop
 8006830:	3710      	adds	r7, #16
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
 8006836:	bf00      	nop
 8006838:	20000c24 	.word	0x20000c24
 800683c:	20000c28 	.word	0x20000c28
 8006840:	e000ed04 	.word	0xe000ed04

08006844 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006844:	b480      	push	{r7}
 8006846:	b085      	sub	sp, #20
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800684c:	4b0e      	ldr	r3, [pc, #56]	; (8006888 <prvGetNextExpireTime+0x44>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d101      	bne.n	800685a <prvGetNextExpireTime+0x16>
 8006856:	2201      	movs	r2, #1
 8006858:	e000      	b.n	800685c <prvGetNextExpireTime+0x18>
 800685a:	2200      	movs	r2, #0
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d105      	bne.n	8006874 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006868:	4b07      	ldr	r3, [pc, #28]	; (8006888 <prvGetNextExpireTime+0x44>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	60fb      	str	r3, [r7, #12]
 8006872:	e001      	b.n	8006878 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006874:	2300      	movs	r3, #0
 8006876:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006878:	68fb      	ldr	r3, [r7, #12]
}
 800687a:	4618      	mov	r0, r3
 800687c:	3714      	adds	r7, #20
 800687e:	46bd      	mov	sp, r7
 8006880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006884:	4770      	bx	lr
 8006886:	bf00      	nop
 8006888:	20000c20 	.word	0x20000c20

0800688c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006894:	f7ff f980 	bl	8005b98 <xTaskGetTickCount>
 8006898:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800689a:	4b0b      	ldr	r3, [pc, #44]	; (80068c8 <prvSampleTimeNow+0x3c>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	68fa      	ldr	r2, [r7, #12]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d205      	bcs.n	80068b0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80068a4:	f000 f936 	bl	8006b14 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2201      	movs	r2, #1
 80068ac:	601a      	str	r2, [r3, #0]
 80068ae:	e002      	b.n	80068b6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2200      	movs	r2, #0
 80068b4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80068b6:	4a04      	ldr	r2, [pc, #16]	; (80068c8 <prvSampleTimeNow+0x3c>)
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80068bc:	68fb      	ldr	r3, [r7, #12]
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3710      	adds	r7, #16
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	20000c30 	.word	0x20000c30

080068cc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b086      	sub	sp, #24
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	60f8      	str	r0, [r7, #12]
 80068d4:	60b9      	str	r1, [r7, #8]
 80068d6:	607a      	str	r2, [r7, #4]
 80068d8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80068da:	2300      	movs	r3, #0
 80068dc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	68ba      	ldr	r2, [r7, #8]
 80068e2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	68fa      	ldr	r2, [r7, #12]
 80068e8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80068ea:	68ba      	ldr	r2, [r7, #8]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d812      	bhi.n	8006918 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	1ad2      	subs	r2, r2, r3
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	699b      	ldr	r3, [r3, #24]
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d302      	bcc.n	8006906 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006900:	2301      	movs	r3, #1
 8006902:	617b      	str	r3, [r7, #20]
 8006904:	e01b      	b.n	800693e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006906:	4b10      	ldr	r3, [pc, #64]	; (8006948 <prvInsertTimerInActiveList+0x7c>)
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	3304      	adds	r3, #4
 800690e:	4619      	mov	r1, r3
 8006910:	4610      	mov	r0, r2
 8006912:	f7fd ff20 	bl	8004756 <vListInsert>
 8006916:	e012      	b.n	800693e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	429a      	cmp	r2, r3
 800691e:	d206      	bcs.n	800692e <prvInsertTimerInActiveList+0x62>
 8006920:	68ba      	ldr	r2, [r7, #8]
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	429a      	cmp	r2, r3
 8006926:	d302      	bcc.n	800692e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006928:	2301      	movs	r3, #1
 800692a:	617b      	str	r3, [r7, #20]
 800692c:	e007      	b.n	800693e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800692e:	4b07      	ldr	r3, [pc, #28]	; (800694c <prvInsertTimerInActiveList+0x80>)
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	3304      	adds	r3, #4
 8006936:	4619      	mov	r1, r3
 8006938:	4610      	mov	r0, r2
 800693a:	f7fd ff0c 	bl	8004756 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800693e:	697b      	ldr	r3, [r7, #20]
}
 8006940:	4618      	mov	r0, r3
 8006942:	3718      	adds	r7, #24
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}
 8006948:	20000c24 	.word	0x20000c24
 800694c:	20000c20 	.word	0x20000c20

08006950 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b08e      	sub	sp, #56	; 0x38
 8006954:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006956:	e0ca      	b.n	8006aee <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2b00      	cmp	r3, #0
 800695c:	da18      	bge.n	8006990 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800695e:	1d3b      	adds	r3, r7, #4
 8006960:	3304      	adds	r3, #4
 8006962:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006966:	2b00      	cmp	r3, #0
 8006968:	d10a      	bne.n	8006980 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800696a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800696e:	f383 8811 	msr	BASEPRI, r3
 8006972:	f3bf 8f6f 	isb	sy
 8006976:	f3bf 8f4f 	dsb	sy
 800697a:	61fb      	str	r3, [r7, #28]
}
 800697c:	bf00      	nop
 800697e:	e7fe      	b.n	800697e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006986:	6850      	ldr	r0, [r2, #4]
 8006988:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800698a:	6892      	ldr	r2, [r2, #8]
 800698c:	4611      	mov	r1, r2
 800698e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2b00      	cmp	r3, #0
 8006994:	f2c0 80aa 	blt.w	8006aec <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800699c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800699e:	695b      	ldr	r3, [r3, #20]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d004      	beq.n	80069ae <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80069a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a6:	3304      	adds	r3, #4
 80069a8:	4618      	mov	r0, r3
 80069aa:	f7fd ff0d 	bl	80047c8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80069ae:	463b      	mov	r3, r7
 80069b0:	4618      	mov	r0, r3
 80069b2:	f7ff ff6b 	bl	800688c <prvSampleTimeNow>
 80069b6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2b09      	cmp	r3, #9
 80069bc:	f200 8097 	bhi.w	8006aee <prvProcessReceivedCommands+0x19e>
 80069c0:	a201      	add	r2, pc, #4	; (adr r2, 80069c8 <prvProcessReceivedCommands+0x78>)
 80069c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069c6:	bf00      	nop
 80069c8:	080069f1 	.word	0x080069f1
 80069cc:	080069f1 	.word	0x080069f1
 80069d0:	080069f1 	.word	0x080069f1
 80069d4:	08006a65 	.word	0x08006a65
 80069d8:	08006a79 	.word	0x08006a79
 80069dc:	08006ac3 	.word	0x08006ac3
 80069e0:	080069f1 	.word	0x080069f1
 80069e4:	080069f1 	.word	0x080069f1
 80069e8:	08006a65 	.word	0x08006a65
 80069ec:	08006a79 	.word	0x08006a79
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80069f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069f6:	f043 0301 	orr.w	r3, r3, #1
 80069fa:	b2da      	uxtb	r2, r3
 80069fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006a02:	68ba      	ldr	r2, [r7, #8]
 8006a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a06:	699b      	ldr	r3, [r3, #24]
 8006a08:	18d1      	adds	r1, r2, r3
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a10:	f7ff ff5c 	bl	80068cc <prvInsertTimerInActiveList>
 8006a14:	4603      	mov	r3, r0
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d069      	beq.n	8006aee <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a1c:	6a1b      	ldr	r3, [r3, #32]
 8006a1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a20:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a28:	f003 0304 	and.w	r3, r3, #4
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d05e      	beq.n	8006aee <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006a30:	68ba      	ldr	r2, [r7, #8]
 8006a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a34:	699b      	ldr	r3, [r3, #24]
 8006a36:	441a      	add	r2, r3
 8006a38:	2300      	movs	r3, #0
 8006a3a:	9300      	str	r3, [sp, #0]
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	2100      	movs	r1, #0
 8006a40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a42:	f7ff fe05 	bl	8006650 <xTimerGenericCommand>
 8006a46:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006a48:	6a3b      	ldr	r3, [r7, #32]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d14f      	bne.n	8006aee <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a52:	f383 8811 	msr	BASEPRI, r3
 8006a56:	f3bf 8f6f 	isb	sy
 8006a5a:	f3bf 8f4f 	dsb	sy
 8006a5e:	61bb      	str	r3, [r7, #24]
}
 8006a60:	bf00      	nop
 8006a62:	e7fe      	b.n	8006a62 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a6a:	f023 0301 	bic.w	r3, r3, #1
 8006a6e:	b2da      	uxtb	r2, r3
 8006a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006a76:	e03a      	b.n	8006aee <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a7e:	f043 0301 	orr.w	r3, r3, #1
 8006a82:	b2da      	uxtb	r2, r3
 8006a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006a8a:	68ba      	ldr	r2, [r7, #8]
 8006a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a8e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a92:	699b      	ldr	r3, [r3, #24]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d10a      	bne.n	8006aae <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a9c:	f383 8811 	msr	BASEPRI, r3
 8006aa0:	f3bf 8f6f 	isb	sy
 8006aa4:	f3bf 8f4f 	dsb	sy
 8006aa8:	617b      	str	r3, [r7, #20]
}
 8006aaa:	bf00      	nop
 8006aac:	e7fe      	b.n	8006aac <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab0:	699a      	ldr	r2, [r3, #24]
 8006ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab4:	18d1      	adds	r1, r2, r3
 8006ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006aba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006abc:	f7ff ff06 	bl	80068cc <prvInsertTimerInActiveList>
					break;
 8006ac0:	e015      	b.n	8006aee <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ac8:	f003 0302 	and.w	r3, r3, #2
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d103      	bne.n	8006ad8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006ad0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ad2:	f000 fbdd 	bl	8007290 <vPortFree>
 8006ad6:	e00a      	b.n	8006aee <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ada:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ade:	f023 0301 	bic.w	r3, r3, #1
 8006ae2:	b2da      	uxtb	r2, r3
 8006ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006aea:	e000      	b.n	8006aee <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006aec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006aee:	4b08      	ldr	r3, [pc, #32]	; (8006b10 <prvProcessReceivedCommands+0x1c0>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	1d39      	adds	r1, r7, #4
 8006af4:	2200      	movs	r2, #0
 8006af6:	4618      	mov	r0, r3
 8006af8:	f7fe f9f4 	bl	8004ee4 <xQueueReceive>
 8006afc:	4603      	mov	r3, r0
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	f47f af2a 	bne.w	8006958 <prvProcessReceivedCommands+0x8>
	}
}
 8006b04:	bf00      	nop
 8006b06:	bf00      	nop
 8006b08:	3730      	adds	r7, #48	; 0x30
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
 8006b0e:	bf00      	nop
 8006b10:	20000c28 	.word	0x20000c28

08006b14 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b088      	sub	sp, #32
 8006b18:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006b1a:	e048      	b.n	8006bae <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b1c:	4b2d      	ldr	r3, [pc, #180]	; (8006bd4 <prvSwitchTimerLists+0xc0>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68db      	ldr	r3, [r3, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b26:	4b2b      	ldr	r3, [pc, #172]	; (8006bd4 <prvSwitchTimerLists+0xc0>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	68db      	ldr	r3, [r3, #12]
 8006b2c:	68db      	ldr	r3, [r3, #12]
 8006b2e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	3304      	adds	r3, #4
 8006b34:	4618      	mov	r0, r3
 8006b36:	f7fd fe47 	bl	80047c8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	6a1b      	ldr	r3, [r3, #32]
 8006b3e:	68f8      	ldr	r0, [r7, #12]
 8006b40:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b48:	f003 0304 	and.w	r3, r3, #4
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d02e      	beq.n	8006bae <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	699b      	ldr	r3, [r3, #24]
 8006b54:	693a      	ldr	r2, [r7, #16]
 8006b56:	4413      	add	r3, r2
 8006b58:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006b5a:	68ba      	ldr	r2, [r7, #8]
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d90e      	bls.n	8006b80 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	68ba      	ldr	r2, [r7, #8]
 8006b66:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	68fa      	ldr	r2, [r7, #12]
 8006b6c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006b6e:	4b19      	ldr	r3, [pc, #100]	; (8006bd4 <prvSwitchTimerLists+0xc0>)
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	3304      	adds	r3, #4
 8006b76:	4619      	mov	r1, r3
 8006b78:	4610      	mov	r0, r2
 8006b7a:	f7fd fdec 	bl	8004756 <vListInsert>
 8006b7e:	e016      	b.n	8006bae <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006b80:	2300      	movs	r3, #0
 8006b82:	9300      	str	r3, [sp, #0]
 8006b84:	2300      	movs	r3, #0
 8006b86:	693a      	ldr	r2, [r7, #16]
 8006b88:	2100      	movs	r1, #0
 8006b8a:	68f8      	ldr	r0, [r7, #12]
 8006b8c:	f7ff fd60 	bl	8006650 <xTimerGenericCommand>
 8006b90:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d10a      	bne.n	8006bae <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b9c:	f383 8811 	msr	BASEPRI, r3
 8006ba0:	f3bf 8f6f 	isb	sy
 8006ba4:	f3bf 8f4f 	dsb	sy
 8006ba8:	603b      	str	r3, [r7, #0]
}
 8006baa:	bf00      	nop
 8006bac:	e7fe      	b.n	8006bac <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006bae:	4b09      	ldr	r3, [pc, #36]	; (8006bd4 <prvSwitchTimerLists+0xc0>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d1b1      	bne.n	8006b1c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006bb8:	4b06      	ldr	r3, [pc, #24]	; (8006bd4 <prvSwitchTimerLists+0xc0>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006bbe:	4b06      	ldr	r3, [pc, #24]	; (8006bd8 <prvSwitchTimerLists+0xc4>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a04      	ldr	r2, [pc, #16]	; (8006bd4 <prvSwitchTimerLists+0xc0>)
 8006bc4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006bc6:	4a04      	ldr	r2, [pc, #16]	; (8006bd8 <prvSwitchTimerLists+0xc4>)
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	6013      	str	r3, [r2, #0]
}
 8006bcc:	bf00      	nop
 8006bce:	3718      	adds	r7, #24
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}
 8006bd4:	20000c20 	.word	0x20000c20
 8006bd8:	20000c24 	.word	0x20000c24

08006bdc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b082      	sub	sp, #8
 8006be0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006be2:	f000 f967 	bl	8006eb4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006be6:	4b15      	ldr	r3, [pc, #84]	; (8006c3c <prvCheckForValidListAndQueue+0x60>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d120      	bne.n	8006c30 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006bee:	4814      	ldr	r0, [pc, #80]	; (8006c40 <prvCheckForValidListAndQueue+0x64>)
 8006bf0:	f7fd fd60 	bl	80046b4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006bf4:	4813      	ldr	r0, [pc, #76]	; (8006c44 <prvCheckForValidListAndQueue+0x68>)
 8006bf6:	f7fd fd5d 	bl	80046b4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006bfa:	4b13      	ldr	r3, [pc, #76]	; (8006c48 <prvCheckForValidListAndQueue+0x6c>)
 8006bfc:	4a10      	ldr	r2, [pc, #64]	; (8006c40 <prvCheckForValidListAndQueue+0x64>)
 8006bfe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006c00:	4b12      	ldr	r3, [pc, #72]	; (8006c4c <prvCheckForValidListAndQueue+0x70>)
 8006c02:	4a10      	ldr	r2, [pc, #64]	; (8006c44 <prvCheckForValidListAndQueue+0x68>)
 8006c04:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006c06:	2300      	movs	r3, #0
 8006c08:	9300      	str	r3, [sp, #0]
 8006c0a:	4b11      	ldr	r3, [pc, #68]	; (8006c50 <prvCheckForValidListAndQueue+0x74>)
 8006c0c:	4a11      	ldr	r2, [pc, #68]	; (8006c54 <prvCheckForValidListAndQueue+0x78>)
 8006c0e:	2110      	movs	r1, #16
 8006c10:	200a      	movs	r0, #10
 8006c12:	f7fd fe6b 	bl	80048ec <xQueueGenericCreateStatic>
 8006c16:	4603      	mov	r3, r0
 8006c18:	4a08      	ldr	r2, [pc, #32]	; (8006c3c <prvCheckForValidListAndQueue+0x60>)
 8006c1a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006c1c:	4b07      	ldr	r3, [pc, #28]	; (8006c3c <prvCheckForValidListAndQueue+0x60>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d005      	beq.n	8006c30 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006c24:	4b05      	ldr	r3, [pc, #20]	; (8006c3c <prvCheckForValidListAndQueue+0x60>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	490b      	ldr	r1, [pc, #44]	; (8006c58 <prvCheckForValidListAndQueue+0x7c>)
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f7fe fc6e 	bl	800550c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006c30:	f000 f970 	bl	8006f14 <vPortExitCritical>
}
 8006c34:	bf00      	nop
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}
 8006c3a:	bf00      	nop
 8006c3c:	20000c28 	.word	0x20000c28
 8006c40:	20000bf8 	.word	0x20000bf8
 8006c44:	20000c0c 	.word	0x20000c0c
 8006c48:	20000c20 	.word	0x20000c20
 8006c4c:	20000c24 	.word	0x20000c24
 8006c50:	20000cd4 	.word	0x20000cd4
 8006c54:	20000c34 	.word	0x20000c34
 8006c58:	08007ebc 	.word	0x08007ebc

08006c5c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b085      	sub	sp, #20
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	60f8      	str	r0, [r7, #12]
 8006c64:	60b9      	str	r1, [r7, #8]
 8006c66:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	3b04      	subs	r3, #4
 8006c6c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006c74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	3b04      	subs	r3, #4
 8006c7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	f023 0201 	bic.w	r2, r3, #1
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	3b04      	subs	r3, #4
 8006c8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006c8c:	4a0c      	ldr	r2, [pc, #48]	; (8006cc0 <pxPortInitialiseStack+0x64>)
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	3b14      	subs	r3, #20
 8006c96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	3b04      	subs	r3, #4
 8006ca2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f06f 0202 	mvn.w	r2, #2
 8006caa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	3b20      	subs	r3, #32
 8006cb0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3714      	adds	r7, #20
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr
 8006cc0:	08006cc5 	.word	0x08006cc5

08006cc4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b085      	sub	sp, #20
 8006cc8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006cce:	4b12      	ldr	r3, [pc, #72]	; (8006d18 <prvTaskExitError+0x54>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cd6:	d00a      	beq.n	8006cee <prvTaskExitError+0x2a>
	__asm volatile
 8006cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cdc:	f383 8811 	msr	BASEPRI, r3
 8006ce0:	f3bf 8f6f 	isb	sy
 8006ce4:	f3bf 8f4f 	dsb	sy
 8006ce8:	60fb      	str	r3, [r7, #12]
}
 8006cea:	bf00      	nop
 8006cec:	e7fe      	b.n	8006cec <prvTaskExitError+0x28>
	__asm volatile
 8006cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf2:	f383 8811 	msr	BASEPRI, r3
 8006cf6:	f3bf 8f6f 	isb	sy
 8006cfa:	f3bf 8f4f 	dsb	sy
 8006cfe:	60bb      	str	r3, [r7, #8]
}
 8006d00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006d02:	bf00      	nop
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d0fc      	beq.n	8006d04 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006d0a:	bf00      	nop
 8006d0c:	bf00      	nop
 8006d0e:	3714      	adds	r7, #20
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr
 8006d18:	2000000c 	.word	0x2000000c
 8006d1c:	00000000 	.word	0x00000000

08006d20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006d20:	4b07      	ldr	r3, [pc, #28]	; (8006d40 <pxCurrentTCBConst2>)
 8006d22:	6819      	ldr	r1, [r3, #0]
 8006d24:	6808      	ldr	r0, [r1, #0]
 8006d26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d2a:	f380 8809 	msr	PSP, r0
 8006d2e:	f3bf 8f6f 	isb	sy
 8006d32:	f04f 0000 	mov.w	r0, #0
 8006d36:	f380 8811 	msr	BASEPRI, r0
 8006d3a:	4770      	bx	lr
 8006d3c:	f3af 8000 	nop.w

08006d40 <pxCurrentTCBConst2>:
 8006d40:	200006f8 	.word	0x200006f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006d44:	bf00      	nop
 8006d46:	bf00      	nop

08006d48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006d48:	4808      	ldr	r0, [pc, #32]	; (8006d6c <prvPortStartFirstTask+0x24>)
 8006d4a:	6800      	ldr	r0, [r0, #0]
 8006d4c:	6800      	ldr	r0, [r0, #0]
 8006d4e:	f380 8808 	msr	MSP, r0
 8006d52:	f04f 0000 	mov.w	r0, #0
 8006d56:	f380 8814 	msr	CONTROL, r0
 8006d5a:	b662      	cpsie	i
 8006d5c:	b661      	cpsie	f
 8006d5e:	f3bf 8f4f 	dsb	sy
 8006d62:	f3bf 8f6f 	isb	sy
 8006d66:	df00      	svc	0
 8006d68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006d6a:	bf00      	nop
 8006d6c:	e000ed08 	.word	0xe000ed08

08006d70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b086      	sub	sp, #24
 8006d74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006d76:	4b46      	ldr	r3, [pc, #280]	; (8006e90 <xPortStartScheduler+0x120>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a46      	ldr	r2, [pc, #280]	; (8006e94 <xPortStartScheduler+0x124>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d10a      	bne.n	8006d96 <xPortStartScheduler+0x26>
	__asm volatile
 8006d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d84:	f383 8811 	msr	BASEPRI, r3
 8006d88:	f3bf 8f6f 	isb	sy
 8006d8c:	f3bf 8f4f 	dsb	sy
 8006d90:	613b      	str	r3, [r7, #16]
}
 8006d92:	bf00      	nop
 8006d94:	e7fe      	b.n	8006d94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006d96:	4b3e      	ldr	r3, [pc, #248]	; (8006e90 <xPortStartScheduler+0x120>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a3f      	ldr	r2, [pc, #252]	; (8006e98 <xPortStartScheduler+0x128>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d10a      	bne.n	8006db6 <xPortStartScheduler+0x46>
	__asm volatile
 8006da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da4:	f383 8811 	msr	BASEPRI, r3
 8006da8:	f3bf 8f6f 	isb	sy
 8006dac:	f3bf 8f4f 	dsb	sy
 8006db0:	60fb      	str	r3, [r7, #12]
}
 8006db2:	bf00      	nop
 8006db4:	e7fe      	b.n	8006db4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006db6:	4b39      	ldr	r3, [pc, #228]	; (8006e9c <xPortStartScheduler+0x12c>)
 8006db8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	b2db      	uxtb	r3, r3
 8006dc0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	22ff      	movs	r2, #255	; 0xff
 8006dc6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006dd0:	78fb      	ldrb	r3, [r7, #3]
 8006dd2:	b2db      	uxtb	r3, r3
 8006dd4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006dd8:	b2da      	uxtb	r2, r3
 8006dda:	4b31      	ldr	r3, [pc, #196]	; (8006ea0 <xPortStartScheduler+0x130>)
 8006ddc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006dde:	4b31      	ldr	r3, [pc, #196]	; (8006ea4 <xPortStartScheduler+0x134>)
 8006de0:	2207      	movs	r2, #7
 8006de2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006de4:	e009      	b.n	8006dfa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006de6:	4b2f      	ldr	r3, [pc, #188]	; (8006ea4 <xPortStartScheduler+0x134>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	3b01      	subs	r3, #1
 8006dec:	4a2d      	ldr	r2, [pc, #180]	; (8006ea4 <xPortStartScheduler+0x134>)
 8006dee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006df0:	78fb      	ldrb	r3, [r7, #3]
 8006df2:	b2db      	uxtb	r3, r3
 8006df4:	005b      	lsls	r3, r3, #1
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006dfa:	78fb      	ldrb	r3, [r7, #3]
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e02:	2b80      	cmp	r3, #128	; 0x80
 8006e04:	d0ef      	beq.n	8006de6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006e06:	4b27      	ldr	r3, [pc, #156]	; (8006ea4 <xPortStartScheduler+0x134>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f1c3 0307 	rsb	r3, r3, #7
 8006e0e:	2b04      	cmp	r3, #4
 8006e10:	d00a      	beq.n	8006e28 <xPortStartScheduler+0xb8>
	__asm volatile
 8006e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e16:	f383 8811 	msr	BASEPRI, r3
 8006e1a:	f3bf 8f6f 	isb	sy
 8006e1e:	f3bf 8f4f 	dsb	sy
 8006e22:	60bb      	str	r3, [r7, #8]
}
 8006e24:	bf00      	nop
 8006e26:	e7fe      	b.n	8006e26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006e28:	4b1e      	ldr	r3, [pc, #120]	; (8006ea4 <xPortStartScheduler+0x134>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	021b      	lsls	r3, r3, #8
 8006e2e:	4a1d      	ldr	r2, [pc, #116]	; (8006ea4 <xPortStartScheduler+0x134>)
 8006e30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006e32:	4b1c      	ldr	r3, [pc, #112]	; (8006ea4 <xPortStartScheduler+0x134>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006e3a:	4a1a      	ldr	r2, [pc, #104]	; (8006ea4 <xPortStartScheduler+0x134>)
 8006e3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	b2da      	uxtb	r2, r3
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006e46:	4b18      	ldr	r3, [pc, #96]	; (8006ea8 <xPortStartScheduler+0x138>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a17      	ldr	r2, [pc, #92]	; (8006ea8 <xPortStartScheduler+0x138>)
 8006e4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006e50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006e52:	4b15      	ldr	r3, [pc, #84]	; (8006ea8 <xPortStartScheduler+0x138>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a14      	ldr	r2, [pc, #80]	; (8006ea8 <xPortStartScheduler+0x138>)
 8006e58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006e5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006e5e:	f000 f8dd 	bl	800701c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006e62:	4b12      	ldr	r3, [pc, #72]	; (8006eac <xPortStartScheduler+0x13c>)
 8006e64:	2200      	movs	r2, #0
 8006e66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006e68:	f000 f8fc 	bl	8007064 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006e6c:	4b10      	ldr	r3, [pc, #64]	; (8006eb0 <xPortStartScheduler+0x140>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a0f      	ldr	r2, [pc, #60]	; (8006eb0 <xPortStartScheduler+0x140>)
 8006e72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006e76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006e78:	f7ff ff66 	bl	8006d48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006e7c:	f7fe ff56 	bl	8005d2c <vTaskSwitchContext>
	prvTaskExitError();
 8006e80:	f7ff ff20 	bl	8006cc4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006e84:	2300      	movs	r3, #0
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3718      	adds	r7, #24
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	bf00      	nop
 8006e90:	e000ed00 	.word	0xe000ed00
 8006e94:	410fc271 	.word	0x410fc271
 8006e98:	410fc270 	.word	0x410fc270
 8006e9c:	e000e400 	.word	0xe000e400
 8006ea0:	20000d24 	.word	0x20000d24
 8006ea4:	20000d28 	.word	0x20000d28
 8006ea8:	e000ed20 	.word	0xe000ed20
 8006eac:	2000000c 	.word	0x2000000c
 8006eb0:	e000ef34 	.word	0xe000ef34

08006eb4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b083      	sub	sp, #12
 8006eb8:	af00      	add	r7, sp, #0
	__asm volatile
 8006eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ebe:	f383 8811 	msr	BASEPRI, r3
 8006ec2:	f3bf 8f6f 	isb	sy
 8006ec6:	f3bf 8f4f 	dsb	sy
 8006eca:	607b      	str	r3, [r7, #4]
}
 8006ecc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006ece:	4b0f      	ldr	r3, [pc, #60]	; (8006f0c <vPortEnterCritical+0x58>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	4a0d      	ldr	r2, [pc, #52]	; (8006f0c <vPortEnterCritical+0x58>)
 8006ed6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006ed8:	4b0c      	ldr	r3, [pc, #48]	; (8006f0c <vPortEnterCritical+0x58>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d10f      	bne.n	8006f00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006ee0:	4b0b      	ldr	r3, [pc, #44]	; (8006f10 <vPortEnterCritical+0x5c>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d00a      	beq.n	8006f00 <vPortEnterCritical+0x4c>
	__asm volatile
 8006eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eee:	f383 8811 	msr	BASEPRI, r3
 8006ef2:	f3bf 8f6f 	isb	sy
 8006ef6:	f3bf 8f4f 	dsb	sy
 8006efa:	603b      	str	r3, [r7, #0]
}
 8006efc:	bf00      	nop
 8006efe:	e7fe      	b.n	8006efe <vPortEnterCritical+0x4a>
	}
}
 8006f00:	bf00      	nop
 8006f02:	370c      	adds	r7, #12
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr
 8006f0c:	2000000c 	.word	0x2000000c
 8006f10:	e000ed04 	.word	0xe000ed04

08006f14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006f14:	b480      	push	{r7}
 8006f16:	b083      	sub	sp, #12
 8006f18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006f1a:	4b12      	ldr	r3, [pc, #72]	; (8006f64 <vPortExitCritical+0x50>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d10a      	bne.n	8006f38 <vPortExitCritical+0x24>
	__asm volatile
 8006f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f26:	f383 8811 	msr	BASEPRI, r3
 8006f2a:	f3bf 8f6f 	isb	sy
 8006f2e:	f3bf 8f4f 	dsb	sy
 8006f32:	607b      	str	r3, [r7, #4]
}
 8006f34:	bf00      	nop
 8006f36:	e7fe      	b.n	8006f36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006f38:	4b0a      	ldr	r3, [pc, #40]	; (8006f64 <vPortExitCritical+0x50>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	3b01      	subs	r3, #1
 8006f3e:	4a09      	ldr	r2, [pc, #36]	; (8006f64 <vPortExitCritical+0x50>)
 8006f40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006f42:	4b08      	ldr	r3, [pc, #32]	; (8006f64 <vPortExitCritical+0x50>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d105      	bne.n	8006f56 <vPortExitCritical+0x42>
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	f383 8811 	msr	BASEPRI, r3
}
 8006f54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006f56:	bf00      	nop
 8006f58:	370c      	adds	r7, #12
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr
 8006f62:	bf00      	nop
 8006f64:	2000000c 	.word	0x2000000c
	...

08006f70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006f70:	f3ef 8009 	mrs	r0, PSP
 8006f74:	f3bf 8f6f 	isb	sy
 8006f78:	4b15      	ldr	r3, [pc, #84]	; (8006fd0 <pxCurrentTCBConst>)
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	f01e 0f10 	tst.w	lr, #16
 8006f80:	bf08      	it	eq
 8006f82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006f86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f8a:	6010      	str	r0, [r2, #0]
 8006f8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006f90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006f94:	f380 8811 	msr	BASEPRI, r0
 8006f98:	f3bf 8f4f 	dsb	sy
 8006f9c:	f3bf 8f6f 	isb	sy
 8006fa0:	f7fe fec4 	bl	8005d2c <vTaskSwitchContext>
 8006fa4:	f04f 0000 	mov.w	r0, #0
 8006fa8:	f380 8811 	msr	BASEPRI, r0
 8006fac:	bc09      	pop	{r0, r3}
 8006fae:	6819      	ldr	r1, [r3, #0]
 8006fb0:	6808      	ldr	r0, [r1, #0]
 8006fb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fb6:	f01e 0f10 	tst.w	lr, #16
 8006fba:	bf08      	it	eq
 8006fbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006fc0:	f380 8809 	msr	PSP, r0
 8006fc4:	f3bf 8f6f 	isb	sy
 8006fc8:	4770      	bx	lr
 8006fca:	bf00      	nop
 8006fcc:	f3af 8000 	nop.w

08006fd0 <pxCurrentTCBConst>:
 8006fd0:	200006f8 	.word	0x200006f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006fd4:	bf00      	nop
 8006fd6:	bf00      	nop

08006fd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b082      	sub	sp, #8
 8006fdc:	af00      	add	r7, sp, #0
	__asm volatile
 8006fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe2:	f383 8811 	msr	BASEPRI, r3
 8006fe6:	f3bf 8f6f 	isb	sy
 8006fea:	f3bf 8f4f 	dsb	sy
 8006fee:	607b      	str	r3, [r7, #4]
}
 8006ff0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006ff2:	f7fe fde1 	bl	8005bb8 <xTaskIncrementTick>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d003      	beq.n	8007004 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006ffc:	4b06      	ldr	r3, [pc, #24]	; (8007018 <xPortSysTickHandler+0x40>)
 8006ffe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007002:	601a      	str	r2, [r3, #0]
 8007004:	2300      	movs	r3, #0
 8007006:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	f383 8811 	msr	BASEPRI, r3
}
 800700e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007010:	bf00      	nop
 8007012:	3708      	adds	r7, #8
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}
 8007018:	e000ed04 	.word	0xe000ed04

0800701c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800701c:	b480      	push	{r7}
 800701e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007020:	4b0b      	ldr	r3, [pc, #44]	; (8007050 <vPortSetupTimerInterrupt+0x34>)
 8007022:	2200      	movs	r2, #0
 8007024:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007026:	4b0b      	ldr	r3, [pc, #44]	; (8007054 <vPortSetupTimerInterrupt+0x38>)
 8007028:	2200      	movs	r2, #0
 800702a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800702c:	4b0a      	ldr	r3, [pc, #40]	; (8007058 <vPortSetupTimerInterrupt+0x3c>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a0a      	ldr	r2, [pc, #40]	; (800705c <vPortSetupTimerInterrupt+0x40>)
 8007032:	fba2 2303 	umull	r2, r3, r2, r3
 8007036:	099b      	lsrs	r3, r3, #6
 8007038:	4a09      	ldr	r2, [pc, #36]	; (8007060 <vPortSetupTimerInterrupt+0x44>)
 800703a:	3b01      	subs	r3, #1
 800703c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800703e:	4b04      	ldr	r3, [pc, #16]	; (8007050 <vPortSetupTimerInterrupt+0x34>)
 8007040:	2207      	movs	r2, #7
 8007042:	601a      	str	r2, [r3, #0]
}
 8007044:	bf00      	nop
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr
 800704e:	bf00      	nop
 8007050:	e000e010 	.word	0xe000e010
 8007054:	e000e018 	.word	0xe000e018
 8007058:	20000000 	.word	0x20000000
 800705c:	10624dd3 	.word	0x10624dd3
 8007060:	e000e014 	.word	0xe000e014

08007064 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007064:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007074 <vPortEnableVFP+0x10>
 8007068:	6801      	ldr	r1, [r0, #0]
 800706a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800706e:	6001      	str	r1, [r0, #0]
 8007070:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007072:	bf00      	nop
 8007074:	e000ed88 	.word	0xe000ed88

08007078 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007078:	b480      	push	{r7}
 800707a:	b085      	sub	sp, #20
 800707c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800707e:	f3ef 8305 	mrs	r3, IPSR
 8007082:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2b0f      	cmp	r3, #15
 8007088:	d914      	bls.n	80070b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800708a:	4a17      	ldr	r2, [pc, #92]	; (80070e8 <vPortValidateInterruptPriority+0x70>)
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	4413      	add	r3, r2
 8007090:	781b      	ldrb	r3, [r3, #0]
 8007092:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007094:	4b15      	ldr	r3, [pc, #84]	; (80070ec <vPortValidateInterruptPriority+0x74>)
 8007096:	781b      	ldrb	r3, [r3, #0]
 8007098:	7afa      	ldrb	r2, [r7, #11]
 800709a:	429a      	cmp	r2, r3
 800709c:	d20a      	bcs.n	80070b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800709e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a2:	f383 8811 	msr	BASEPRI, r3
 80070a6:	f3bf 8f6f 	isb	sy
 80070aa:	f3bf 8f4f 	dsb	sy
 80070ae:	607b      	str	r3, [r7, #4]
}
 80070b0:	bf00      	nop
 80070b2:	e7fe      	b.n	80070b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80070b4:	4b0e      	ldr	r3, [pc, #56]	; (80070f0 <vPortValidateInterruptPriority+0x78>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80070bc:	4b0d      	ldr	r3, [pc, #52]	; (80070f4 <vPortValidateInterruptPriority+0x7c>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d90a      	bls.n	80070da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80070c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c8:	f383 8811 	msr	BASEPRI, r3
 80070cc:	f3bf 8f6f 	isb	sy
 80070d0:	f3bf 8f4f 	dsb	sy
 80070d4:	603b      	str	r3, [r7, #0]
}
 80070d6:	bf00      	nop
 80070d8:	e7fe      	b.n	80070d8 <vPortValidateInterruptPriority+0x60>
	}
 80070da:	bf00      	nop
 80070dc:	3714      	adds	r7, #20
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr
 80070e6:	bf00      	nop
 80070e8:	e000e3f0 	.word	0xe000e3f0
 80070ec:	20000d24 	.word	0x20000d24
 80070f0:	e000ed0c 	.word	0xe000ed0c
 80070f4:	20000d28 	.word	0x20000d28

080070f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b08a      	sub	sp, #40	; 0x28
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007100:	2300      	movs	r3, #0
 8007102:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007104:	f7fe fc9c 	bl	8005a40 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007108:	4b5b      	ldr	r3, [pc, #364]	; (8007278 <pvPortMalloc+0x180>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d101      	bne.n	8007114 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007110:	f000 f920 	bl	8007354 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007114:	4b59      	ldr	r3, [pc, #356]	; (800727c <pvPortMalloc+0x184>)
 8007116:	681a      	ldr	r2, [r3, #0]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	4013      	ands	r3, r2
 800711c:	2b00      	cmp	r3, #0
 800711e:	f040 8093 	bne.w	8007248 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d01d      	beq.n	8007164 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007128:	2208      	movs	r2, #8
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	4413      	add	r3, r2
 800712e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f003 0307 	and.w	r3, r3, #7
 8007136:	2b00      	cmp	r3, #0
 8007138:	d014      	beq.n	8007164 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f023 0307 	bic.w	r3, r3, #7
 8007140:	3308      	adds	r3, #8
 8007142:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f003 0307 	and.w	r3, r3, #7
 800714a:	2b00      	cmp	r3, #0
 800714c:	d00a      	beq.n	8007164 <pvPortMalloc+0x6c>
	__asm volatile
 800714e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007152:	f383 8811 	msr	BASEPRI, r3
 8007156:	f3bf 8f6f 	isb	sy
 800715a:	f3bf 8f4f 	dsb	sy
 800715e:	617b      	str	r3, [r7, #20]
}
 8007160:	bf00      	nop
 8007162:	e7fe      	b.n	8007162 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d06e      	beq.n	8007248 <pvPortMalloc+0x150>
 800716a:	4b45      	ldr	r3, [pc, #276]	; (8007280 <pvPortMalloc+0x188>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	429a      	cmp	r2, r3
 8007172:	d869      	bhi.n	8007248 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007174:	4b43      	ldr	r3, [pc, #268]	; (8007284 <pvPortMalloc+0x18c>)
 8007176:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007178:	4b42      	ldr	r3, [pc, #264]	; (8007284 <pvPortMalloc+0x18c>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800717e:	e004      	b.n	800718a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007182:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800718a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	687a      	ldr	r2, [r7, #4]
 8007190:	429a      	cmp	r2, r3
 8007192:	d903      	bls.n	800719c <pvPortMalloc+0xa4>
 8007194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d1f1      	bne.n	8007180 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800719c:	4b36      	ldr	r3, [pc, #216]	; (8007278 <pvPortMalloc+0x180>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d050      	beq.n	8007248 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80071a6:	6a3b      	ldr	r3, [r7, #32]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	2208      	movs	r2, #8
 80071ac:	4413      	add	r3, r2
 80071ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80071b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	6a3b      	ldr	r3, [r7, #32]
 80071b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80071b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ba:	685a      	ldr	r2, [r3, #4]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	1ad2      	subs	r2, r2, r3
 80071c0:	2308      	movs	r3, #8
 80071c2:	005b      	lsls	r3, r3, #1
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d91f      	bls.n	8007208 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80071c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	4413      	add	r3, r2
 80071ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80071d0:	69bb      	ldr	r3, [r7, #24]
 80071d2:	f003 0307 	and.w	r3, r3, #7
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d00a      	beq.n	80071f0 <pvPortMalloc+0xf8>
	__asm volatile
 80071da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071de:	f383 8811 	msr	BASEPRI, r3
 80071e2:	f3bf 8f6f 	isb	sy
 80071e6:	f3bf 8f4f 	dsb	sy
 80071ea:	613b      	str	r3, [r7, #16]
}
 80071ec:	bf00      	nop
 80071ee:	e7fe      	b.n	80071ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80071f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f2:	685a      	ldr	r2, [r3, #4]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	1ad2      	subs	r2, r2, r3
 80071f8:	69bb      	ldr	r3, [r7, #24]
 80071fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80071fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007202:	69b8      	ldr	r0, [r7, #24]
 8007204:	f000 f908 	bl	8007418 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007208:	4b1d      	ldr	r3, [pc, #116]	; (8007280 <pvPortMalloc+0x188>)
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	1ad3      	subs	r3, r2, r3
 8007212:	4a1b      	ldr	r2, [pc, #108]	; (8007280 <pvPortMalloc+0x188>)
 8007214:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007216:	4b1a      	ldr	r3, [pc, #104]	; (8007280 <pvPortMalloc+0x188>)
 8007218:	681a      	ldr	r2, [r3, #0]
 800721a:	4b1b      	ldr	r3, [pc, #108]	; (8007288 <pvPortMalloc+0x190>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	429a      	cmp	r2, r3
 8007220:	d203      	bcs.n	800722a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007222:	4b17      	ldr	r3, [pc, #92]	; (8007280 <pvPortMalloc+0x188>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a18      	ldr	r2, [pc, #96]	; (8007288 <pvPortMalloc+0x190>)
 8007228:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800722a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800722c:	685a      	ldr	r2, [r3, #4]
 800722e:	4b13      	ldr	r3, [pc, #76]	; (800727c <pvPortMalloc+0x184>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	431a      	orrs	r2, r3
 8007234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007236:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723a:	2200      	movs	r2, #0
 800723c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800723e:	4b13      	ldr	r3, [pc, #76]	; (800728c <pvPortMalloc+0x194>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	3301      	adds	r3, #1
 8007244:	4a11      	ldr	r2, [pc, #68]	; (800728c <pvPortMalloc+0x194>)
 8007246:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007248:	f7fe fc08 	bl	8005a5c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800724c:	69fb      	ldr	r3, [r7, #28]
 800724e:	f003 0307 	and.w	r3, r3, #7
 8007252:	2b00      	cmp	r3, #0
 8007254:	d00a      	beq.n	800726c <pvPortMalloc+0x174>
	__asm volatile
 8007256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800725a:	f383 8811 	msr	BASEPRI, r3
 800725e:	f3bf 8f6f 	isb	sy
 8007262:	f3bf 8f4f 	dsb	sy
 8007266:	60fb      	str	r3, [r7, #12]
}
 8007268:	bf00      	nop
 800726a:	e7fe      	b.n	800726a <pvPortMalloc+0x172>
	return pvReturn;
 800726c:	69fb      	ldr	r3, [r7, #28]
}
 800726e:	4618      	mov	r0, r3
 8007270:	3728      	adds	r7, #40	; 0x28
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
 8007276:	bf00      	nop
 8007278:	200018ec 	.word	0x200018ec
 800727c:	20001900 	.word	0x20001900
 8007280:	200018f0 	.word	0x200018f0
 8007284:	200018e4 	.word	0x200018e4
 8007288:	200018f4 	.word	0x200018f4
 800728c:	200018f8 	.word	0x200018f8

08007290 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b086      	sub	sp, #24
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d04d      	beq.n	800733e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80072a2:	2308      	movs	r3, #8
 80072a4:	425b      	negs	r3, r3
 80072a6:	697a      	ldr	r2, [r7, #20]
 80072a8:	4413      	add	r3, r2
 80072aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	685a      	ldr	r2, [r3, #4]
 80072b4:	4b24      	ldr	r3, [pc, #144]	; (8007348 <vPortFree+0xb8>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4013      	ands	r3, r2
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d10a      	bne.n	80072d4 <vPortFree+0x44>
	__asm volatile
 80072be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c2:	f383 8811 	msr	BASEPRI, r3
 80072c6:	f3bf 8f6f 	isb	sy
 80072ca:	f3bf 8f4f 	dsb	sy
 80072ce:	60fb      	str	r3, [r7, #12]
}
 80072d0:	bf00      	nop
 80072d2:	e7fe      	b.n	80072d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d00a      	beq.n	80072f2 <vPortFree+0x62>
	__asm volatile
 80072dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e0:	f383 8811 	msr	BASEPRI, r3
 80072e4:	f3bf 8f6f 	isb	sy
 80072e8:	f3bf 8f4f 	dsb	sy
 80072ec:	60bb      	str	r3, [r7, #8]
}
 80072ee:	bf00      	nop
 80072f0:	e7fe      	b.n	80072f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	685a      	ldr	r2, [r3, #4]
 80072f6:	4b14      	ldr	r3, [pc, #80]	; (8007348 <vPortFree+0xb8>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4013      	ands	r3, r2
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d01e      	beq.n	800733e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d11a      	bne.n	800733e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	685a      	ldr	r2, [r3, #4]
 800730c:	4b0e      	ldr	r3, [pc, #56]	; (8007348 <vPortFree+0xb8>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	43db      	mvns	r3, r3
 8007312:	401a      	ands	r2, r3
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007318:	f7fe fb92 	bl	8005a40 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	685a      	ldr	r2, [r3, #4]
 8007320:	4b0a      	ldr	r3, [pc, #40]	; (800734c <vPortFree+0xbc>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4413      	add	r3, r2
 8007326:	4a09      	ldr	r2, [pc, #36]	; (800734c <vPortFree+0xbc>)
 8007328:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800732a:	6938      	ldr	r0, [r7, #16]
 800732c:	f000 f874 	bl	8007418 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007330:	4b07      	ldr	r3, [pc, #28]	; (8007350 <vPortFree+0xc0>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	3301      	adds	r3, #1
 8007336:	4a06      	ldr	r2, [pc, #24]	; (8007350 <vPortFree+0xc0>)
 8007338:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800733a:	f7fe fb8f 	bl	8005a5c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800733e:	bf00      	nop
 8007340:	3718      	adds	r7, #24
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}
 8007346:	bf00      	nop
 8007348:	20001900 	.word	0x20001900
 800734c:	200018f0 	.word	0x200018f0
 8007350:	200018fc 	.word	0x200018fc

08007354 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007354:	b480      	push	{r7}
 8007356:	b085      	sub	sp, #20
 8007358:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800735a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800735e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007360:	4b27      	ldr	r3, [pc, #156]	; (8007400 <prvHeapInit+0xac>)
 8007362:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f003 0307 	and.w	r3, r3, #7
 800736a:	2b00      	cmp	r3, #0
 800736c:	d00c      	beq.n	8007388 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	3307      	adds	r3, #7
 8007372:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f023 0307 	bic.w	r3, r3, #7
 800737a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800737c:	68ba      	ldr	r2, [r7, #8]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	1ad3      	subs	r3, r2, r3
 8007382:	4a1f      	ldr	r2, [pc, #124]	; (8007400 <prvHeapInit+0xac>)
 8007384:	4413      	add	r3, r2
 8007386:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800738c:	4a1d      	ldr	r2, [pc, #116]	; (8007404 <prvHeapInit+0xb0>)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007392:	4b1c      	ldr	r3, [pc, #112]	; (8007404 <prvHeapInit+0xb0>)
 8007394:	2200      	movs	r2, #0
 8007396:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	68ba      	ldr	r2, [r7, #8]
 800739c:	4413      	add	r3, r2
 800739e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80073a0:	2208      	movs	r2, #8
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	1a9b      	subs	r3, r3, r2
 80073a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f023 0307 	bic.w	r3, r3, #7
 80073ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	4a15      	ldr	r2, [pc, #84]	; (8007408 <prvHeapInit+0xb4>)
 80073b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80073b6:	4b14      	ldr	r3, [pc, #80]	; (8007408 <prvHeapInit+0xb4>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	2200      	movs	r2, #0
 80073bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80073be:	4b12      	ldr	r3, [pc, #72]	; (8007408 <prvHeapInit+0xb4>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	2200      	movs	r2, #0
 80073c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	68fa      	ldr	r2, [r7, #12]
 80073ce:	1ad2      	subs	r2, r2, r3
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80073d4:	4b0c      	ldr	r3, [pc, #48]	; (8007408 <prvHeapInit+0xb4>)
 80073d6:	681a      	ldr	r2, [r3, #0]
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	4a0a      	ldr	r2, [pc, #40]	; (800740c <prvHeapInit+0xb8>)
 80073e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	4a09      	ldr	r2, [pc, #36]	; (8007410 <prvHeapInit+0xbc>)
 80073ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80073ec:	4b09      	ldr	r3, [pc, #36]	; (8007414 <prvHeapInit+0xc0>)
 80073ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80073f2:	601a      	str	r2, [r3, #0]
}
 80073f4:	bf00      	nop
 80073f6:	3714      	adds	r7, #20
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr
 8007400:	20000d2c 	.word	0x20000d2c
 8007404:	200018e4 	.word	0x200018e4
 8007408:	200018ec 	.word	0x200018ec
 800740c:	200018f4 	.word	0x200018f4
 8007410:	200018f0 	.word	0x200018f0
 8007414:	20001900 	.word	0x20001900

08007418 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007418:	b480      	push	{r7}
 800741a:	b085      	sub	sp, #20
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007420:	4b28      	ldr	r3, [pc, #160]	; (80074c4 <prvInsertBlockIntoFreeList+0xac>)
 8007422:	60fb      	str	r3, [r7, #12]
 8007424:	e002      	b.n	800742c <prvInsertBlockIntoFreeList+0x14>
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	60fb      	str	r3, [r7, #12]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	687a      	ldr	r2, [r7, #4]
 8007432:	429a      	cmp	r2, r3
 8007434:	d8f7      	bhi.n	8007426 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	68ba      	ldr	r2, [r7, #8]
 8007440:	4413      	add	r3, r2
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	429a      	cmp	r2, r3
 8007446:	d108      	bne.n	800745a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	685a      	ldr	r2, [r3, #4]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	441a      	add	r2, r3
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	68ba      	ldr	r2, [r7, #8]
 8007464:	441a      	add	r2, r3
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	429a      	cmp	r2, r3
 800746c:	d118      	bne.n	80074a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	4b15      	ldr	r3, [pc, #84]	; (80074c8 <prvInsertBlockIntoFreeList+0xb0>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	429a      	cmp	r2, r3
 8007478:	d00d      	beq.n	8007496 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	685a      	ldr	r2, [r3, #4]
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	441a      	add	r2, r3
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	601a      	str	r2, [r3, #0]
 8007494:	e008      	b.n	80074a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007496:	4b0c      	ldr	r3, [pc, #48]	; (80074c8 <prvInsertBlockIntoFreeList+0xb0>)
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	601a      	str	r2, [r3, #0]
 800749e:	e003      	b.n	80074a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681a      	ldr	r2, [r3, #0]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80074a8:	68fa      	ldr	r2, [r7, #12]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d002      	beq.n	80074b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	687a      	ldr	r2, [r7, #4]
 80074b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80074b6:	bf00      	nop
 80074b8:	3714      	adds	r7, #20
 80074ba:	46bd      	mov	sp, r7
 80074bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c0:	4770      	bx	lr
 80074c2:	bf00      	nop
 80074c4:	200018e4 	.word	0x200018e4
 80074c8:	200018ec 	.word	0x200018ec

080074cc <IIM42652_ReadRegister>:


/* Function implementation */

HAL_StatusTypeDef IIM42652_ReadRegister( IIM42652 *dev, uint8_t reg, uint8_t *data )
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b088      	sub	sp, #32
 80074d0:	af02      	add	r7, sp, #8
 80074d2:	60f8      	str	r0, [r7, #12]
 80074d4:	460b      	mov	r3, r1
 80074d6:	607a      	str	r2, [r7, #4]
 80074d8:	72fb      	strb	r3, [r7, #11]
	//return HAL_I2C_Mem_Read( dev->i2cHandle, IIM42652_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);

	/* Start non bloking transaction and blocks until semaphore is given by I2C transaction callback */
	HAL_StatusTypeDef status;
	status = HAL_I2C_Mem_Read_IT( dev->i2cHandle, IIM42652_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, 1);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	6818      	ldr	r0, [r3, #0]
 80074de:	7afb      	ldrb	r3, [r7, #11]
 80074e0:	b29a      	uxth	r2, r3
 80074e2:	2301      	movs	r3, #1
 80074e4:	9301      	str	r3, [sp, #4]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	9300      	str	r3, [sp, #0]
 80074ea:	2301      	movs	r3, #1
 80074ec:	21d2      	movs	r1, #210	; 0xd2
 80074ee:	f7fa f8ab 	bl	8001648 <HAL_I2C_Mem_Read_IT>
 80074f2:	4603      	mov	r3, r0
 80074f4:	75fb      	strb	r3, [r7, #23]
	xSemaphoreTake(xSemI2C_transfer, portMAX_DELAY);
 80074f6:	4b06      	ldr	r3, [pc, #24]	; (8007510 <IIM42652_ReadRegister+0x44>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f04f 31ff 	mov.w	r1, #4294967295
 80074fe:	4618      	mov	r0, r3
 8007500:	f7fd fdd0 	bl	80050a4 <xQueueSemaphoreTake>

	return status;
 8007504:	7dfb      	ldrb	r3, [r7, #23]
}
 8007506:	4618      	mov	r0, r3
 8007508:	3718      	adds	r7, #24
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}
 800750e:	bf00      	nop
 8007510:	20001908 	.word	0x20001908

08007514 <IIM42652_ReadMultipleRegisters>:


HAL_StatusTypeDef IIM42652_ReadMultipleRegisters( IIM42652 *dev, uint8_t reg, uint8_t *data, uint8_t length )
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b086      	sub	sp, #24
 8007518:	af02      	add	r7, sp, #8
 800751a:	60f8      	str	r0, [r7, #12]
 800751c:	607a      	str	r2, [r7, #4]
 800751e:	461a      	mov	r2, r3
 8007520:	460b      	mov	r3, r1
 8007522:	72fb      	strb	r3, [r7, #11]
 8007524:	4613      	mov	r3, r2
 8007526:	72bb      	strb	r3, [r7, #10]
	//return HAL_I2C_Mem_Read( dev->i2cHandle, IIM42652_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, length, HAL_MAX_DELAY);
	return HAL_I2C_Mem_Read_IT( dev->i2cHandle, IIM42652_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, length);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	6818      	ldr	r0, [r3, #0]
 800752c:	7afb      	ldrb	r3, [r7, #11]
 800752e:	b29a      	uxth	r2, r3
 8007530:	7abb      	ldrb	r3, [r7, #10]
 8007532:	b29b      	uxth	r3, r3
 8007534:	9301      	str	r3, [sp, #4]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	9300      	str	r3, [sp, #0]
 800753a:	2301      	movs	r3, #1
 800753c:	21d2      	movs	r1, #210	; 0xd2
 800753e:	f7fa f883 	bl	8001648 <HAL_I2C_Mem_Read_IT>
 8007542:	4603      	mov	r3, r0
	xSemaphoreTake(xSemI2C_transfer, portMAX_DELAY);
}
 8007544:	4618      	mov	r0, r3
 8007546:	3710      	adds	r7, #16
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <IIM42652_WriteRegister>:


HAL_StatusTypeDef IIM42652_WriteRegister( IIM42652 *dev, uint8_t reg, uint8_t *data )
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b088      	sub	sp, #32
 8007550:	af04      	add	r7, sp, #16
 8007552:	60f8      	str	r0, [r7, #12]
 8007554:	460b      	mov	r3, r1
 8007556:	607a      	str	r2, [r7, #4]
 8007558:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Write( dev->i2cHandle, IIM42652_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	6818      	ldr	r0, [r3, #0]
 800755e:	7afb      	ldrb	r3, [r7, #11]
 8007560:	b29a      	uxth	r2, r3
 8007562:	f04f 33ff 	mov.w	r3, #4294967295
 8007566:	9302      	str	r3, [sp, #8]
 8007568:	2301      	movs	r3, #1
 800756a:	9301      	str	r3, [sp, #4]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	9300      	str	r3, [sp, #0]
 8007570:	2301      	movs	r3, #1
 8007572:	21d2      	movs	r1, #210	; 0xd2
 8007574:	f7f9 ff54 	bl	8001420 <HAL_I2C_Mem_Write>
 8007578:	4603      	mov	r3, r0
}
 800757a:	4618      	mov	r0, r3
 800757c:	3710      	adds	r7, #16
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}

08007582 <IIM42652_SoftReset>:


/* Function that performs a soft reset of device */
HAL_StatusTypeDef IIM42652_SoftReset( IIM42652 *dev )
{
 8007582:	b580      	push	{r7, lr}
 8007584:	b084      	sub	sp, #16
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef status;
	uint8_t config;

	/* Reads config register, enables reset bit and writes changes */
	status =  IIM42652_ReadRegister( dev, DEVICE_CONFIG_ADD, &config );
 800758a:	f107 030e 	add.w	r3, r7, #14
 800758e:	461a      	mov	r2, r3
 8007590:	2111      	movs	r1, #17
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f7ff ff9a 	bl	80074cc <IIM42652_ReadRegister>
 8007598:	4603      	mov	r3, r0
 800759a:	73fb      	strb	r3, [r7, #15]

	config |= 0x01;
 800759c:	7bbb      	ldrb	r3, [r7, #14]
 800759e:	f043 0301 	orr.w	r3, r3, #1
 80075a2:	b2db      	uxtb	r3, r3
 80075a4:	73bb      	strb	r3, [r7, #14]

	status |= IIM42652_WriteRegister( dev, DEVICE_CONFIG_ADD, &config );
 80075a6:	f107 030e 	add.w	r3, r7, #14
 80075aa:	461a      	mov	r2, r3
 80075ac:	2111      	movs	r1, #17
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f7ff ffcc 	bl	800754c <IIM42652_WriteRegister>
 80075b4:	4603      	mov	r3, r0
 80075b6:	461a      	mov	r2, r3
 80075b8:	7bfb      	ldrb	r3, [r7, #15]
 80075ba:	4313      	orrs	r3, r2
 80075bc:	73fb      	strb	r3, [r7, #15]

	/* Waits 2ms for soft reset to be effective */
	//vTaskDelay( 2 / portTICK_PERIOD_MS );
	HAL_Delay( 2 );
 80075be:	2002      	movs	r0, #2
 80075c0:	f7f9 f99e 	bl	8000900 <HAL_Delay>

	return status;
 80075c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3710      	adds	r7, #16
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}

080075ce <IIM42652_EnableGyro>:


/* Function enables gyroscope */
HAL_StatusTypeDef IIM42652_EnableGyro( IIM42652 *dev )
{
 80075ce:	b580      	push	{r7, lr}
 80075d0:	b084      	sub	sp, #16
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef status;
	uint8_t config;

	/* Reads config register, enables reset bit and writes changes */
	status =  IIM42652_ReadRegister( dev, PWR_MGMT0_ADD, &config );
 80075d6:	f107 030e 	add.w	r3, r7, #14
 80075da:	461a      	mov	r2, r3
 80075dc:	214e      	movs	r1, #78	; 0x4e
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f7ff ff74 	bl	80074cc <IIM42652_ReadRegister>
 80075e4:	4603      	mov	r3, r0
 80075e6:	73fb      	strb	r3, [r7, #15]

	config |= IIM42652_SET_GYRO_TLOW_NOISE_MODE;
 80075e8:	7bbb      	ldrb	r3, [r7, #14]
 80075ea:	f043 030c 	orr.w	r3, r3, #12
 80075ee:	b2db      	uxtb	r3, r3
 80075f0:	73bb      	strb	r3, [r7, #14]

	status |= IIM42652_WriteRegister( dev, PWR_MGMT0_ADD, &config );
 80075f2:	f107 030e 	add.w	r3, r7, #14
 80075f6:	461a      	mov	r2, r3
 80075f8:	214e      	movs	r1, #78	; 0x4e
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f7ff ffa6 	bl	800754c <IIM42652_WriteRegister>
 8007600:	4603      	mov	r3, r0
 8007602:	461a      	mov	r2, r3
 8007604:	7bfb      	ldrb	r3, [r7, #15]
 8007606:	4313      	orrs	r3, r2
 8007608:	73fb      	strb	r3, [r7, #15]

	/* Waits for gyroscope power on */
	//vTaskDelay( 1 / portTICK_PERIOD_MS );
	HAL_Delay( 1 );
 800760a:	2001      	movs	r0, #1
 800760c:	f7f9 f978 	bl	8000900 <HAL_Delay>

	return status;
 8007610:	7bfb      	ldrb	r3, [r7, #15]
}
 8007612:	4618      	mov	r0, r3
 8007614:	3710      	adds	r7, #16
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}

0800761a <IIM42652_EnableAccel>:


/* Function enables gyroscope */
HAL_StatusTypeDef IIM42652_EnableAccel( IIM42652 *dev )
{
 800761a:	b580      	push	{r7, lr}
 800761c:	b084      	sub	sp, #16
 800761e:	af00      	add	r7, sp, #0
 8007620:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef status;
	uint8_t config;

	/* Reads config register, enables reset bit and writes changes */
	status =  IIM42652_ReadRegister( dev, PWR_MGMT0_ADD, &config );
 8007622:	f107 030e 	add.w	r3, r7, #14
 8007626:	461a      	mov	r2, r3
 8007628:	214e      	movs	r1, #78	; 0x4e
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f7ff ff4e 	bl	80074cc <IIM42652_ReadRegister>
 8007630:	4603      	mov	r3, r0
 8007632:	73fb      	strb	r3, [r7, #15]

	config |= IIM42652_SET_ACCEL_LOW_NOISE_MODE;
 8007634:	7bbb      	ldrb	r3, [r7, #14]
 8007636:	f043 0303 	orr.w	r3, r3, #3
 800763a:	b2db      	uxtb	r3, r3
 800763c:	73bb      	strb	r3, [r7, #14]

	status |= IIM42652_WriteRegister( dev, PWR_MGMT0_ADD, &config );
 800763e:	f107 030e 	add.w	r3, r7, #14
 8007642:	461a      	mov	r2, r3
 8007644:	214e      	movs	r1, #78	; 0x4e
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f7ff ff80 	bl	800754c <IIM42652_WriteRegister>
 800764c:	4603      	mov	r3, r0
 800764e:	461a      	mov	r2, r3
 8007650:	7bfb      	ldrb	r3, [r7, #15]
 8007652:	4313      	orrs	r3, r2
 8007654:	73fb      	strb	r3, [r7, #15]

	/* Waits for accelerometer power on */
	HAL_Delay( 1 );
 8007656:	2001      	movs	r0, #1
 8007658:	f7f9 f952 	bl	8000900 <HAL_Delay>
	//vTaskDelay( 1 / portTICK_PERIOD_MS );

	return status;
 800765c:	7bfb      	ldrb	r3, [r7, #15]
}
 800765e:	4618      	mov	r0, r3
 8007660:	3710      	adds	r7, #16
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}

08007666 <IIM42652_setConfigGyro>:


/* Configures gyroscope parameters */
HAL_StatusTypeDef IIM42652_setConfigGyro( IIM42652 *dev, IIM42652_GYRO_CFG_t gyrCfg )
{
 8007666:	b580      	push	{r7, lr}
 8007668:	b086      	sub	sp, #24
 800766a:	af00      	add	r7, sp, #0
 800766c:	60f8      	str	r0, [r7, #12]
 800766e:	1d3b      	adds	r3, r7, #4
 8007670:	e883 0006 	stmia.w	r3, {r1, r2}
	uint8_t config = 0x00;
 8007674:	2300      	movs	r3, #0
 8007676:	75bb      	strb	r3, [r7, #22]
	HAL_StatusTypeDef status = HAL_OK;
 8007678:	2300      	movs	r3, #0
 800767a:	75fb      	strb	r3, [r7, #23]

	/* Writes gyroscope selected registers */

	config  = ( gyrCfg.gyro_fs_sel & ( BIT_MASK_BIT_2 | BIT_MASK_BIT_1 | BIT_MASK_BIT_0 ) ) << 5;
 800767c:	793b      	ldrb	r3, [r7, #4]
 800767e:	015b      	lsls	r3, r3, #5
 8007680:	b2db      	uxtb	r3, r3
 8007682:	75bb      	strb	r3, [r7, #22]
	config |=   gyrCfg.gyro_odr    & ( BIT_MASK_BIT_3 | BIT_MASK_BIT_2 | BIT_MASK_BIT_1 | BIT_MASK_BIT_0 );
 8007684:	797b      	ldrb	r3, [r7, #5]
 8007686:	b25b      	sxtb	r3, r3
 8007688:	f003 030f 	and.w	r3, r3, #15
 800768c:	b25a      	sxtb	r2, r3
 800768e:	7dbb      	ldrb	r3, [r7, #22]
 8007690:	b25b      	sxtb	r3, r3
 8007692:	4313      	orrs	r3, r2
 8007694:	b25b      	sxtb	r3, r3
 8007696:	b2db      	uxtb	r3, r3
 8007698:	75bb      	strb	r3, [r7, #22]

	status = IIM42652_WriteRegister( dev, GYRO_CONFIG0_ADD, &config );
 800769a:	f107 0316 	add.w	r3, r7, #22
 800769e:	461a      	mov	r2, r3
 80076a0:	214f      	movs	r1, #79	; 0x4f
 80076a2:	68f8      	ldr	r0, [r7, #12]
 80076a4:	f7ff ff52 	bl	800754c <IIM42652_WriteRegister>
 80076a8:	4603      	mov	r3, r0
 80076aa:	75fb      	strb	r3, [r7, #23]

	config  =  ( gyrCfg.gyro_ui_filt_ord  & ( BIT_MASK_BIT_1 | BIT_MASK_BIT_0 ) ) << 2;
 80076ac:	79bb      	ldrb	r3, [r7, #6]
 80076ae:	009b      	lsls	r3, r3, #2
 80076b0:	b2db      	uxtb	r3, r3
 80076b2:	f003 030c 	and.w	r3, r3, #12
 80076b6:	b2db      	uxtb	r3, r3
 80076b8:	75bb      	strb	r3, [r7, #22]
	config |=    gyrCfg.gyro_dec2_m2_ord  & ( BIT_MASK_BIT_1 | BIT_MASK_BIT_0 );
 80076ba:	79fb      	ldrb	r3, [r7, #7]
 80076bc:	b25b      	sxtb	r3, r3
 80076be:	f003 0303 	and.w	r3, r3, #3
 80076c2:	b25a      	sxtb	r2, r3
 80076c4:	7dbb      	ldrb	r3, [r7, #22]
 80076c6:	b25b      	sxtb	r3, r3
 80076c8:	4313      	orrs	r3, r2
 80076ca:	b25b      	sxtb	r3, r3
 80076cc:	b2db      	uxtb	r3, r3
 80076ce:	75bb      	strb	r3, [r7, #22]

	status |= IIM42652_WriteRegister( dev, GYRO_CONFIG1_ADD, &config );
 80076d0:	f107 0316 	add.w	r3, r7, #22
 80076d4:	461a      	mov	r2, r3
 80076d6:	2151      	movs	r1, #81	; 0x51
 80076d8:	68f8      	ldr	r0, [r7, #12]
 80076da:	f7ff ff37 	bl	800754c <IIM42652_WriteRegister>
 80076de:	4603      	mov	r3, r0
 80076e0:	461a      	mov	r2, r3
 80076e2:	7dfb      	ldrb	r3, [r7, #23]
 80076e4:	4313      	orrs	r3, r2
 80076e6:	75fb      	strb	r3, [r7, #23]


	status |=  IIM42652_ReadRegister( dev, GYR_ACC_CONFIG0_ADD, &config );
 80076e8:	f107 0316 	add.w	r3, r7, #22
 80076ec:	461a      	mov	r2, r3
 80076ee:	2152      	movs	r1, #82	; 0x52
 80076f0:	68f8      	ldr	r0, [r7, #12]
 80076f2:	f7ff feeb 	bl	80074cc <IIM42652_ReadRegister>
 80076f6:	4603      	mov	r3, r0
 80076f8:	461a      	mov	r2, r3
 80076fa:	7dfb      	ldrb	r3, [r7, #23]
 80076fc:	4313      	orrs	r3, r2
 80076fe:	75fb      	strb	r3, [r7, #23]

	config |= gyrCfg.gyro_ui_filt_bw & ( BIT_MASK_BIT_3 | BIT_MASK_BIT_2 | BIT_MASK_BIT_1 | BIT_MASK_BIT_0 );
 8007700:	7a3b      	ldrb	r3, [r7, #8]
 8007702:	b25b      	sxtb	r3, r3
 8007704:	f003 030f 	and.w	r3, r3, #15
 8007708:	b25a      	sxtb	r2, r3
 800770a:	7dbb      	ldrb	r3, [r7, #22]
 800770c:	b25b      	sxtb	r3, r3
 800770e:	4313      	orrs	r3, r2
 8007710:	b25b      	sxtb	r3, r3
 8007712:	b2db      	uxtb	r3, r3
 8007714:	75bb      	strb	r3, [r7, #22]

	status |= IIM42652_WriteRegister( dev, GYRO_CONFIG1_ADD, &config );
 8007716:	f107 0316 	add.w	r3, r7, #22
 800771a:	461a      	mov	r2, r3
 800771c:	2151      	movs	r1, #81	; 0x51
 800771e:	68f8      	ldr	r0, [r7, #12]
 8007720:	f7ff ff14 	bl	800754c <IIM42652_WriteRegister>
 8007724:	4603      	mov	r3, r0
 8007726:	461a      	mov	r2, r3
 8007728:	7dfb      	ldrb	r3, [r7, #23]
 800772a:	4313      	orrs	r3, r2
 800772c:	75fb      	strb	r3, [r7, #23]


	return status;
 800772e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007730:	4618      	mov	r0, r3
 8007732:	3718      	adds	r7, #24
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <IIM42652_setConfigAccel>:


/* Configure accelerometer parameters */
HAL_StatusTypeDef IIM42652_setConfigAccel( IIM42652 *dev, IIM42652_ACCL_CFG_t accCfg )
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b086      	sub	sp, #24
 800773c:	af00      	add	r7, sp, #0
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	1d3b      	adds	r3, r7, #4
 8007742:	e883 0006 	stmia.w	r3, {r1, r2}
	uint8_t config = 0x00;
 8007746:	2300      	movs	r3, #0
 8007748:	75bb      	strb	r3, [r7, #22]
	HAL_StatusTypeDef status = HAL_OK;
 800774a:	2300      	movs	r3, #0
 800774c:	75fb      	strb	r3, [r7, #23]

	/* Writes gyroscope selected registers */

	config  = ( accCfg.accel_fs_sel & ( BIT_MASK_BIT_2 | BIT_MASK_BIT_1 | BIT_MASK_BIT_0 ) ) << 5;
 800774e:	793b      	ldrb	r3, [r7, #4]
 8007750:	015b      	lsls	r3, r3, #5
 8007752:	b2db      	uxtb	r3, r3
 8007754:	75bb      	strb	r3, [r7, #22]
	config |=   accCfg.accel_odr    & ( BIT_MASK_BIT_3 | BIT_MASK_BIT_2 | BIT_MASK_BIT_1 | BIT_MASK_BIT_0 );
 8007756:	797b      	ldrb	r3, [r7, #5]
 8007758:	b25b      	sxtb	r3, r3
 800775a:	f003 030f 	and.w	r3, r3, #15
 800775e:	b25a      	sxtb	r2, r3
 8007760:	7dbb      	ldrb	r3, [r7, #22]
 8007762:	b25b      	sxtb	r3, r3
 8007764:	4313      	orrs	r3, r2
 8007766:	b25b      	sxtb	r3, r3
 8007768:	b2db      	uxtb	r3, r3
 800776a:	75bb      	strb	r3, [r7, #22]

	status |= IIM42652_WriteRegister( dev, ACCL_CONFIG0_ADD, &config );
 800776c:	f107 0316 	add.w	r3, r7, #22
 8007770:	461a      	mov	r2, r3
 8007772:	2150      	movs	r1, #80	; 0x50
 8007774:	68f8      	ldr	r0, [r7, #12]
 8007776:	f7ff fee9 	bl	800754c <IIM42652_WriteRegister>
 800777a:	4603      	mov	r3, r0
 800777c:	461a      	mov	r2, r3
 800777e:	7dfb      	ldrb	r3, [r7, #23]
 8007780:	4313      	orrs	r3, r2
 8007782:	75fb      	strb	r3, [r7, #23]

	status |=  IIM42652_ReadRegister( dev, GYR_ACC_CONFIG0_ADD, &config );
 8007784:	f107 0316 	add.w	r3, r7, #22
 8007788:	461a      	mov	r2, r3
 800778a:	2152      	movs	r1, #82	; 0x52
 800778c:	68f8      	ldr	r0, [r7, #12]
 800778e:	f7ff fe9d 	bl	80074cc <IIM42652_ReadRegister>
 8007792:	4603      	mov	r3, r0
 8007794:	461a      	mov	r2, r3
 8007796:	7dfb      	ldrb	r3, [r7, #23]
 8007798:	4313      	orrs	r3, r2
 800779a:	75fb      	strb	r3, [r7, #23]

	config |= ( accCfg.accel_ui_filt_bw & ( BIT_MASK_BIT_3 | BIT_MASK_BIT_2 | BIT_MASK_BIT_1 | BIT_MASK_BIT_0 ) ) << 4;
 800779c:	79bb      	ldrb	r3, [r7, #6]
 800779e:	011b      	lsls	r3, r3, #4
 80077a0:	b25a      	sxtb	r2, r3
 80077a2:	7dbb      	ldrb	r3, [r7, #22]
 80077a4:	b25b      	sxtb	r3, r3
 80077a6:	4313      	orrs	r3, r2
 80077a8:	b25b      	sxtb	r3, r3
 80077aa:	b2db      	uxtb	r3, r3
 80077ac:	75bb      	strb	r3, [r7, #22]

	status |= IIM42652_WriteRegister( dev, GYR_ACC_CONFIG0_ADD, &config );
 80077ae:	f107 0316 	add.w	r3, r7, #22
 80077b2:	461a      	mov	r2, r3
 80077b4:	2152      	movs	r1, #82	; 0x52
 80077b6:	68f8      	ldr	r0, [r7, #12]
 80077b8:	f7ff fec8 	bl	800754c <IIM42652_WriteRegister>
 80077bc:	4603      	mov	r3, r0
 80077be:	461a      	mov	r2, r3
 80077c0:	7dfb      	ldrb	r3, [r7, #23]
 80077c2:	4313      	orrs	r3, r2
 80077c4:	75fb      	strb	r3, [r7, #23]

	config  =  ( accCfg.accel_ui_filt_ord  & ( BIT_MASK_BIT_1 | BIT_MASK_BIT_0 ) ) << 3;
 80077c6:	79fb      	ldrb	r3, [r7, #7]
 80077c8:	00db      	lsls	r3, r3, #3
 80077ca:	b2db      	uxtb	r3, r3
 80077cc:	f003 0318 	and.w	r3, r3, #24
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	75bb      	strb	r3, [r7, #22]
	config |=  ( accCfg.accel_dec2_m2_ord  & ( BIT_MASK_BIT_1 | BIT_MASK_BIT_0 ) ) << 1;
 80077d4:	7a3b      	ldrb	r3, [r7, #8]
 80077d6:	005b      	lsls	r3, r3, #1
 80077d8:	b25b      	sxtb	r3, r3
 80077da:	f003 0306 	and.w	r3, r3, #6
 80077de:	b25a      	sxtb	r2, r3
 80077e0:	7dbb      	ldrb	r3, [r7, #22]
 80077e2:	b25b      	sxtb	r3, r3
 80077e4:	4313      	orrs	r3, r2
 80077e6:	b25b      	sxtb	r3, r3
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	75bb      	strb	r3, [r7, #22]

	status |= IIM42652_WriteRegister( dev, ACCL_CONFIG1_ADD, &config );
 80077ec:	f107 0316 	add.w	r3, r7, #22
 80077f0:	461a      	mov	r2, r3
 80077f2:	2153      	movs	r1, #83	; 0x53
 80077f4:	68f8      	ldr	r0, [r7, #12]
 80077f6:	f7ff fea9 	bl	800754c <IIM42652_WriteRegister>
 80077fa:	4603      	mov	r3, r0
 80077fc:	461a      	mov	r2, r3
 80077fe:	7dfb      	ldrb	r3, [r7, #23]
 8007800:	4313      	orrs	r3, r2
 8007802:	75fb      	strb	r3, [r7, #23]

	return status;
 8007804:	7dfb      	ldrb	r3, [r7, #23]
}
 8007806:	4618      	mov	r0, r3
 8007808:	3718      	adds	r7, #24
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}

0800780e <IIM42652_ConfigInterrupt>:


/* Configure interrupt parameters */
HAL_StatusTypeDef IIM42652_ConfigInterrupt( IIM42652 *dev )
{
 800780e:	b580      	push	{r7, lr}
 8007810:	b084      	sub	sp, #16
 8007812:	af00      	add	r7, sp, #0
 8007814:	6078      	str	r0, [r7, #4]
	uint8_t config = 0x00;
 8007816:	2300      	movs	r3, #0
 8007818:	73bb      	strb	r3, [r7, #14]
	HAL_StatusTypeDef status = HAL_OK;
 800781a:	2300      	movs	r3, #0
 800781c:	73fb      	strb	r3, [r7, #15]

	/* Implement interrupt configuration */
	//config = IIM42654_SET_INT1 | IIM42652_SET_INT_ACTIVE_HI | IIM42652_SET_INT2;
	config = 0x00;
 800781e:	2300      	movs	r3, #0
 8007820:	73bb      	strb	r3, [r7, #14]
	status = IIM42652_WriteRegister( dev, INT_CONFIG_ADD, &config );
 8007822:	f107 030e 	add.w	r3, r7, #14
 8007826:	461a      	mov	r2, r3
 8007828:	2114      	movs	r1, #20
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f7ff fe8e 	bl	800754c <IIM42652_WriteRegister>
 8007830:	4603      	mov	r3, r0
 8007832:	73fb      	strb	r3, [r7, #15]

	config = IIM42652_SET_UI_DRDY_INT_CLEAR;
 8007834:	2320      	movs	r3, #32
 8007836:	73bb      	strb	r3, [r7, #14]
	status = IIM42652_WriteRegister( dev, INT_CONFIG0_ADD, &config );
 8007838:	f107 030e 	add.w	r3, r7, #14
 800783c:	461a      	mov	r2, r3
 800783e:	2163      	movs	r1, #99	; 0x63
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f7ff fe83 	bl	800754c <IIM42652_WriteRegister>
 8007846:	4603      	mov	r3, r0
 8007848:	73fb      	strb	r3, [r7, #15]

	config = IIM42652_SET_UI_DRDY_INT1_EN;
 800784a:	2308      	movs	r3, #8
 800784c:	73bb      	strb	r3, [r7, #14]
	status = IIM42652_WriteRegister( dev, INT_SOURCE0_ADD, &config );
 800784e:	f107 030e 	add.w	r3, r7, #14
 8007852:	461a      	mov	r2, r3
 8007854:	2165      	movs	r1, #101	; 0x65
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f7ff fe78 	bl	800754c <IIM42652_WriteRegister>
 800785c:	4603      	mov	r3, r0
 800785e:	73fb      	strb	r3, [r7, #15]

	return status;
 8007860:	7bfb      	ldrb	r3, [r7, #15]
}
 8007862:	4618      	mov	r0, r3
 8007864:	3710      	adds	r7, #16
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
	...

0800786c <IIM42652_Init>:


uint8_t IIM42652_Init( IIM42652 *dev, I2C_HandleTypeDef *i2cHandle )
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b088      	sub	sp, #32
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	6039      	str	r1, [r7, #0]

	IIM42652_ACCL_CFG_t ACC_CFG;
	IIM42652_GYRO_CFG_t GYR_CFG;

	/* Initializes I2C semaphore and takes it */
	xSemI2C_transfer = xSemaphoreCreateBinary();
 8007876:	2203      	movs	r2, #3
 8007878:	2100      	movs	r1, #0
 800787a:	2001      	movs	r0, #1
 800787c:	f7fd f8ae 	bl	80049dc <xQueueGenericCreate>
 8007880:	4603      	mov	r3, r0
 8007882:	4a4a      	ldr	r2, [pc, #296]	; (80079ac <IIM42652_Init+0x140>)
 8007884:	6013      	str	r3, [r2, #0]
	xSemaphoreTake(xSemI2C_transfer, 0);
 8007886:	4b49      	ldr	r3, [pc, #292]	; (80079ac <IIM42652_Init+0x140>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	2100      	movs	r1, #0
 800788c:	4618      	mov	r0, r3
 800788e:	f7fd fc09 	bl	80050a4 <xQueueSemaphoreTake>

	/* Initializes structure parameters */
	dev->i2cHandle = i2cHandle;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	683a      	ldr	r2, [r7, #0]
 8007896:	601a      	str	r2, [r3, #0]

	dev->acc[0] = 0.0f;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2200      	movs	r2, #0
 800789c:	809a      	strh	r2, [r3, #4]
	dev->acc[1] = 0.0f;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2200      	movs	r2, #0
 80078a2:	80da      	strh	r2, [r3, #6]
	dev->acc[2] = 0.0f;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2200      	movs	r2, #0
 80078a8:	811a      	strh	r2, [r3, #8]

	dev->gyr[0] = 0.0f;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2200      	movs	r2, #0
 80078ae:	815a      	strh	r2, [r3, #10]
	dev->gyr[1] = 0.0f;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2200      	movs	r2, #0
 80078b4:	819a      	strh	r2, [r3, #12]
	dev->gyr[2] = 0.0f;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2200      	movs	r2, #0
 80078ba:	81da      	strh	r2, [r3, #14]

	dev->temp_c = 0.0f;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f04f 0200 	mov.w	r2, #0
 80078c2:	611a      	str	r2, [r3, #16]

	/* I2C transaction errors */
	uint8_t errNum = 0;
 80078c4:	2300      	movs	r3, #0
 80078c6:	77fb      	strb	r3, [r7, #31]
	HAL_StatusTypeDef status;

	/* Check for device ID */
	uint8_t regDataID;

	status = IIM42652_ReadRegister(dev, WHO_AM_I_ADD, &regDataID);
 80078c8:	f107 030f 	add.w	r3, r7, #15
 80078cc:	461a      	mov	r2, r3
 80078ce:	2175      	movs	r1, #117	; 0x75
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f7ff fdfb 	bl	80074cc <IIM42652_ReadRegister>
 80078d6:	4603      	mov	r3, r0
 80078d8:	77bb      	strb	r3, [r7, #30]
	errNum += ( status != HAL_OK );
 80078da:	7fbb      	ldrb	r3, [r7, #30]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	bf14      	ite	ne
 80078e0:	2301      	movne	r3, #1
 80078e2:	2300      	moveq	r3, #0
 80078e4:	b2db      	uxtb	r3, r3
 80078e6:	461a      	mov	r2, r3
 80078e8:	7ffb      	ldrb	r3, [r7, #31]
 80078ea:	4413      	add	r3, r2
 80078ec:	77fb      	strb	r3, [r7, #31]

	/* If ID not equal to IIM42652_I2C_ID, Init returns with an error code */
	if( regDataID != IIM42652_I2C_ID ) return HAL_ERROR;
 80078ee:	7bfb      	ldrb	r3, [r7, #15]
 80078f0:	2b6f      	cmp	r3, #111	; 0x6f
 80078f2:	d001      	beq.n	80078f8 <IIM42652_Init+0x8c>
 80078f4:	2301      	movs	r3, #1
 80078f6:	e054      	b.n	80079a2 <IIM42652_Init+0x136>
	else {

		/* Initialize routine */
		status |= IIM42652_SoftReset  ( dev );
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f7ff fe42 	bl	8007582 <IIM42652_SoftReset>
 80078fe:	4603      	mov	r3, r0
 8007900:	461a      	mov	r2, r3
 8007902:	7fbb      	ldrb	r3, [r7, #30]
 8007904:	4313      	orrs	r3, r2
 8007906:	77bb      	strb	r3, [r7, #30]
		status |= IIM42652_EnableGyro ( dev );
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f7ff fe60 	bl	80075ce <IIM42652_EnableGyro>
 800790e:	4603      	mov	r3, r0
 8007910:	461a      	mov	r2, r3
 8007912:	7fbb      	ldrb	r3, [r7, #30]
 8007914:	4313      	orrs	r3, r2
 8007916:	77bb      	strb	r3, [r7, #30]
		status |= IIM42652_EnableAccel( dev );
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f7ff fe7e 	bl	800761a <IIM42652_EnableAccel>
 800791e:	4603      	mov	r3, r0
 8007920:	461a      	mov	r2, r3
 8007922:	7fbb      	ldrb	r3, [r7, #30]
 8007924:	4313      	orrs	r3, r2
 8007926:	77bb      	strb	r3, [r7, #30]


		GYR_CFG.gyro_fs_sel      = IIM42652_SET_GYRO_FS_SEL_500_dps;
 8007928:	2302      	movs	r3, #2
 800792a:	743b      	strb	r3, [r7, #16]
		GYR_CFG.gyro_odr         = IIM42652_SET_GYRO_ODR_12_5Hz;
 800792c:	230b      	movs	r3, #11
 800792e:	747b      	strb	r3, [r7, #17]
		GYR_CFG.gyro_ui_filt_ord = IIM42652_SET_GYRO_UI_FILT_ORD_2st;
 8007930:	2301      	movs	r3, #1
 8007932:	74bb      	strb	r3, [r7, #18]
		GYR_CFG.gyro_dec2_m2_ord = IIM42652_SET_GYRO_DEC2_M2_ORD_3st;
 8007934:	2302      	movs	r3, #2
 8007936:	74fb      	strb	r3, [r7, #19]
		GYR_CFG.gyro_ui_filt_bw  = IIM42652_SET_GYRO_UI_FILT_BW_ODR_4;
 8007938:	2301      	movs	r3, #1
 800793a:	753b      	strb	r3, [r7, #20]
	    status |= IIM42652_setConfigGyro( dev, GYR_CFG );
 800793c:	f107 0310 	add.w	r3, r7, #16
 8007940:	e893 0006 	ldmia.w	r3, {r1, r2}
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f7ff fe8e 	bl	8007666 <IIM42652_setConfigGyro>
 800794a:	4603      	mov	r3, r0
 800794c:	461a      	mov	r2, r3
 800794e:	7fbb      	ldrb	r3, [r7, #30]
 8007950:	4313      	orrs	r3, r2
 8007952:	77bb      	strb	r3, [r7, #30]

	    ACC_CFG.accel_fs_sel      = IIM42652_SET_ACCEL_FS_SEL_8g;
 8007954:	2301      	movs	r3, #1
 8007956:	763b      	strb	r3, [r7, #24]
	    ACC_CFG.accel_odr         = IIM42652_SET_ACCEL_ODR_12_5Hz;
 8007958:	230b      	movs	r3, #11
 800795a:	767b      	strb	r3, [r7, #25]
	    ACC_CFG.accel_ui_filt_bw  = IIM42652_SET_ACCEL_UI_FILT_BW_ODR_4;
 800795c:	2301      	movs	r3, #1
 800795e:	76bb      	strb	r3, [r7, #26]
	    ACC_CFG.accel_ui_filt_ord = IIM42652_SET_ACCEL_UI_FILT_ORD_2st;
 8007960:	2301      	movs	r3, #1
 8007962:	76fb      	strb	r3, [r7, #27]
	    ACC_CFG.accel_dec2_m2_ord = IIM42652_SET_ACCEL_DEC2_M2_ORD_3st;
 8007964:	2302      	movs	r3, #2
 8007966:	773b      	strb	r3, [r7, #28]
	    status |= IIM42652_setConfigAccel( dev, ACC_CFG );
 8007968:	f107 0318 	add.w	r3, r7, #24
 800796c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f7ff fee1 	bl	8007738 <IIM42652_setConfigAccel>
 8007976:	4603      	mov	r3, r0
 8007978:	461a      	mov	r2, r3
 800797a:	7fbb      	ldrb	r3, [r7, #30]
 800797c:	4313      	orrs	r3, r2
 800797e:	77bb      	strb	r3, [r7, #30]

	    /* Enables device interrupt on pin INT1 */
	    status |= IIM42652_ConfigInterrupt( dev );
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f7ff ff44 	bl	800780e <IIM42652_ConfigInterrupt>
 8007986:	4603      	mov	r3, r0
 8007988:	461a      	mov	r2, r3
 800798a:	7fbb      	ldrb	r3, [r7, #30]
 800798c:	4313      	orrs	r3, r2
 800798e:	77bb      	strb	r3, [r7, #30]

	    /* Initializes semaphore */
	    ImuIntSemaphore = xSemaphoreCreateBinary();
 8007990:	2203      	movs	r2, #3
 8007992:	2100      	movs	r1, #0
 8007994:	2001      	movs	r0, #1
 8007996:	f7fd f821 	bl	80049dc <xQueueGenericCreate>
 800799a:	4603      	mov	r3, r0
 800799c:	4a04      	ldr	r2, [pc, #16]	; (80079b0 <IIM42652_Init+0x144>)
 800799e:	6013      	str	r3, [r2, #0]
	    //xSemaphoreTake(ImuIntSemaphore, 0);
	}


	return 0;
 80079a0:	2300      	movs	r3, #0
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3720      	adds	r7, #32
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
 80079aa:	bf00      	nop
 80079ac:	20001908 	.word	0x20001908
 80079b0:	20001904 	.word	0x20001904

080079b4 <IIM42652_ReadMeasurementAxisAll>:



HAL_StatusTypeDef IIM42652_ReadMeasurementAxisAll( IIM42652 *dev )
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b08a      	sub	sp, #40	; 0x28
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
	uint8_t rxBuffer[12];
	int16_t xAccRead, yAccRead, zAccRead;
	int16_t xGyrRead, yGyrRead, zGyrRead;

	/* Takes semaphore until DRDY is ready again */
	xSemaphoreTake( ImuIntSemaphore, portMAX_DELAY );
 80079bc:	4b21      	ldr	r3, [pc, #132]	; (8007a44 <IIM42652_ReadMeasurementAxisAll+0x90>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f04f 31ff 	mov.w	r1, #4294967295
 80079c4:	4618      	mov	r0, r3
 80079c6:	f7fd fb6d 	bl	80050a4 <xQueueSemaphoreTake>
	DRDY_IIMFlag = 0x00;
 80079ca:	4b1f      	ldr	r3, [pc, #124]	; (8007a48 <IIM42652_ReadMeasurementAxisAll+0x94>)
 80079cc:	2200      	movs	r2, #0
 80079ce:	701a      	strb	r2, [r3, #0]

	/* Reads Accelerometer and gyroscope data */
	readStatus = IIM42652_ReadMultipleRegisters( dev, ACCL_DATA_XHI_ADD, rxBuffer, 12 );
 80079d0:	f107 020c 	add.w	r2, r7, #12
 80079d4:	230c      	movs	r3, #12
 80079d6:	211f      	movs	r1, #31
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f7ff fd9b 	bl	8007514 <IIM42652_ReadMultipleRegisters>
 80079de:	4603      	mov	r3, r0
 80079e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	xAccRead = (rxBuffer[0] << 8)  | rxBuffer[1];
 80079e4:	7b3b      	ldrb	r3, [r7, #12]
 80079e6:	021b      	lsls	r3, r3, #8
 80079e8:	b21a      	sxth	r2, r3
 80079ea:	7b7b      	ldrb	r3, [r7, #13]
 80079ec:	b21b      	sxth	r3, r3
 80079ee:	4313      	orrs	r3, r2
 80079f0:	84bb      	strh	r3, [r7, #36]	; 0x24
	yAccRead = (rxBuffer[2] << 8)  | rxBuffer[3];
 80079f2:	7bbb      	ldrb	r3, [r7, #14]
 80079f4:	021b      	lsls	r3, r3, #8
 80079f6:	b21a      	sxth	r2, r3
 80079f8:	7bfb      	ldrb	r3, [r7, #15]
 80079fa:	b21b      	sxth	r3, r3
 80079fc:	4313      	orrs	r3, r2
 80079fe:	847b      	strh	r3, [r7, #34]	; 0x22
	zAccRead = (rxBuffer[4] << 8)  | rxBuffer[5];
 8007a00:	7c3b      	ldrb	r3, [r7, #16]
 8007a02:	021b      	lsls	r3, r3, #8
 8007a04:	b21a      	sxth	r2, r3
 8007a06:	7c7b      	ldrb	r3, [r7, #17]
 8007a08:	b21b      	sxth	r3, r3
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	843b      	strh	r3, [r7, #32]

	xGyrRead = (rxBuffer[6] << 8)  | rxBuffer[7];
 8007a0e:	7cbb      	ldrb	r3, [r7, #18]
 8007a10:	021b      	lsls	r3, r3, #8
 8007a12:	b21a      	sxth	r2, r3
 8007a14:	7cfb      	ldrb	r3, [r7, #19]
 8007a16:	b21b      	sxth	r3, r3
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	83fb      	strh	r3, [r7, #30]
	yGyrRead = (rxBuffer[8] << 8)  | rxBuffer[9];
 8007a1c:	7d3b      	ldrb	r3, [r7, #20]
 8007a1e:	021b      	lsls	r3, r3, #8
 8007a20:	b21a      	sxth	r2, r3
 8007a22:	7d7b      	ldrb	r3, [r7, #21]
 8007a24:	b21b      	sxth	r3, r3
 8007a26:	4313      	orrs	r3, r2
 8007a28:	83bb      	strh	r3, [r7, #28]
	zGyrRead = (rxBuffer[10] << 8) | rxBuffer[11];
 8007a2a:	7dbb      	ldrb	r3, [r7, #22]
 8007a2c:	021b      	lsls	r3, r3, #8
 8007a2e:	b21a      	sxth	r2, r3
 8007a30:	7dfb      	ldrb	r3, [r7, #23]
 8007a32:	b21b      	sxth	r3, r3
 8007a34:	4313      	orrs	r3, r2
 8007a36:	837b      	strh	r3, [r7, #26]

	return readStatus;
 8007a38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3728      	adds	r7, #40	; 0x28
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}
 8007a44:	20001904 	.word	0x20001904
 8007a48:	2000190c 	.word	0x2000190c

08007a4c <IIM42652_DRDYCallback>:


/* Callback for device interrupt */
void IIM42652_DRDYCallback( void )
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b082      	sub	sp, #8
 8007a50:	af00      	add	r7, sp, #0
	/* Gives semaphore and yields */

	if(DRDY_IIMFlag == 0x00)
 8007a52:	4b0f      	ldr	r3, [pc, #60]	; (8007a90 <IIM42652_DRDYCallback+0x44>)
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d116      	bne.n	8007a88 <IIM42652_DRDYCallback+0x3c>
	{
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	607b      	str	r3, [r7, #4]
		xSemaphoreGiveFromISR( ImuIntSemaphore, &xHigherPriorityTaskWoken );
 8007a5e:	4b0d      	ldr	r3, [pc, #52]	; (8007a94 <IIM42652_DRDYCallback+0x48>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	1d3a      	adds	r2, r7, #4
 8007a64:	4611      	mov	r1, r2
 8007a66:	4618      	mov	r0, r3
 8007a68:	f7fd f9af 	bl	8004dca <xQueueGiveFromISR>
		portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d007      	beq.n	8007a82 <IIM42652_DRDYCallback+0x36>
 8007a72:	4b09      	ldr	r3, [pc, #36]	; (8007a98 <IIM42652_DRDYCallback+0x4c>)
 8007a74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a78:	601a      	str	r2, [r3, #0]
 8007a7a:	f3bf 8f4f 	dsb	sy
 8007a7e:	f3bf 8f6f 	isb	sy

		DRDY_IIMFlag = 0x01;
 8007a82:	4b03      	ldr	r3, [pc, #12]	; (8007a90 <IIM42652_DRDYCallback+0x44>)
 8007a84:	2201      	movs	r2, #1
 8007a86:	701a      	strb	r2, [r3, #0]
	}
}
 8007a88:	bf00      	nop
 8007a8a:	3708      	adds	r7, #8
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}
 8007a90:	2000190c 	.word	0x2000190c
 8007a94:	20001904 	.word	0x20001904
 8007a98:	e000ed04 	.word	0xe000ed04

08007a9c <IIM42652_I2C2Callback>:

/* Callback for I2C callback */
void IIM42652_I2C2Callback( void )
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b082      	sub	sp, #8
 8007aa0:	af00      	add	r7, sp, #0
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	607b      	str	r3, [r7, #4]
    xSemaphoreGiveFromISR( xSemI2C_transfer, &xHigherPriorityTaskWoken );
 8007aa6:	4b0b      	ldr	r3, [pc, #44]	; (8007ad4 <IIM42652_I2C2Callback+0x38>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	1d3a      	adds	r2, r7, #4
 8007aac:	4611      	mov	r1, r2
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f7fd f98b 	bl	8004dca <xQueueGiveFromISR>
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d007      	beq.n	8007aca <IIM42652_I2C2Callback+0x2e>
 8007aba:	4b07      	ldr	r3, [pc, #28]	; (8007ad8 <IIM42652_I2C2Callback+0x3c>)
 8007abc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ac0:	601a      	str	r2, [r3, #0]
 8007ac2:	f3bf 8f4f 	dsb	sy
 8007ac6:	f3bf 8f6f 	isb	sy
}
 8007aca:	bf00      	nop
 8007acc:	3708      	adds	r7, #8
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	20001908 	.word	0x20001908
 8007ad8:	e000ed04 	.word	0xe000ed04

08007adc <sendI2C>:

/* Internal function declaration */

/* Function that communicates with MLX90393, first sending the command and waiting for the response */
HAL_StatusTypeDef sendI2C( I2C_HandleTypeDef *hi2c, uint8_t *receiveBuffer, uint8_t *sendBuffer, uint8_t sendMessageLength, uint8_t receiveMessageLength )
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b088      	sub	sp, #32
 8007ae0:	af02      	add	r7, sp, #8
 8007ae2:	60f8      	str	r0, [r7, #12]
 8007ae4:	60b9      	str	r1, [r7, #8]
 8007ae6:	607a      	str	r2, [r7, #4]
 8007ae8:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef i2c_status = HAL_OK;
 8007aea:	2300      	movs	r3, #0
 8007aec:	75fb      	strb	r3, [r7, #23]

	i2c_status |= HAL_I2C_Master_Transmit( hi2c, MLX90393_I2C_ADDRESS, sendBuffer, sendMessageLength, HAL_MAX_DELAY );
 8007aee:	78fb      	ldrb	r3, [r7, #3]
 8007af0:	b29b      	uxth	r3, r3
 8007af2:	f04f 32ff 	mov.w	r2, #4294967295
 8007af6:	9200      	str	r2, [sp, #0]
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	211c      	movs	r1, #28
 8007afc:	68f8      	ldr	r0, [r7, #12]
 8007afe:	f7f9 faa5 	bl	800104c <HAL_I2C_Master_Transmit>
 8007b02:	4603      	mov	r3, r0
 8007b04:	461a      	mov	r2, r3
 8007b06:	7dfb      	ldrb	r3, [r7, #23]
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	75fb      	strb	r3, [r7, #23]
	i2c_status |= HAL_I2C_Master_Receive ( hi2c, MLX90393_I2C_ADDRESS, receiveBuffer, receiveMessageLength, HAL_MAX_DELAY );
 8007b0c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	f04f 32ff 	mov.w	r2, #4294967295
 8007b16:	9200      	str	r2, [sp, #0]
 8007b18:	68ba      	ldr	r2, [r7, #8]
 8007b1a:	211c      	movs	r1, #28
 8007b1c:	68f8      	ldr	r0, [r7, #12]
 8007b1e:	f7f9 fb89 	bl	8001234 <HAL_I2C_Master_Receive>
 8007b22:	4603      	mov	r3, r0
 8007b24:	461a      	mov	r2, r3
 8007b26:	7dfb      	ldrb	r3, [r7, #23]
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	75fb      	strb	r3, [r7, #23]

    return i2c_status;
 8007b2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3718      	adds	r7, #24
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}

08007b36 <MLX90393_RM>:
 *
 * readData needs to be a pointer to an array of size RM_DATA_LENGHT
 *
 */
uint8_t MLX90393_RM	( MLX90393 *dev, uint8_t zyxt, uint8_t* readData )
{
 8007b36:	b580      	push	{r7, lr}
 8007b38:	b088      	sub	sp, #32
 8007b3a:	af02      	add	r7, sp, #8
 8007b3c:	60f8      	str	r0, [r7, #12]
 8007b3e:	460b      	mov	r3, r1
 8007b40:	607a      	str	r2, [r7, #4]
 8007b42:	72fb      	strb	r3, [r7, #11]
	uint8_t status;
	HAL_StatusTypeDef i2c_status = HAL_OK;
 8007b44:	2300      	movs	r3, #0
 8007b46:	75fb      	strb	r3, [r7, #23]

	/* Construct the SB command with axis from function parameters */
	uint8_t command = MLX90393_REG_RM | ( zyxt & 0x0F );
 8007b48:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8007b4c:	f003 030f 	and.w	r3, r3, #15
 8007b50:	b25b      	sxtb	r3, r3
 8007b52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b56:	b25b      	sxtb	r3, r3
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	757b      	strb	r3, [r7, #21]

	i2c_status = sendI2C( dev->i2cHandle, readData, &command, 1, RM_DATA_LENGHT );
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	6818      	ldr	r0, [r3, #0]
 8007b60:	f107 0215 	add.w	r2, r7, #21
 8007b64:	2309      	movs	r3, #9
 8007b66:	9300      	str	r3, [sp, #0]
 8007b68:	2301      	movs	r3, #1
 8007b6a:	6879      	ldr	r1, [r7, #4]
 8007b6c:	f7ff ffb6 	bl	8007adc <sendI2C>
 8007b70:	4603      	mov	r3, r0
 8007b72:	75fb      	strb	r3, [r7, #23]

	/* First byte in data buffer is status */
	status = readData[0];
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	781b      	ldrb	r3, [r3, #0]
 8007b78:	75bb      	strb	r3, [r7, #22]

	/* Checks the HAL status of i2c transaction */
	if(i2c_status != HAL_OK) return MLX90393_STATUS_ERROR;
 8007b7a:	7dfb      	ldrb	r3, [r7, #23]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d001      	beq.n	8007b84 <MLX90393_RM+0x4e>
 8007b80:	23ff      	movs	r3, #255	; 0xff
 8007b82:	e000      	b.n	8007b86 <MLX90393_RM+0x50>
	else{
		return status;
 8007b84:	7dbb      	ldrb	r3, [r7, #22]
	}
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3718      	adds	r7, #24
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}

08007b8e <MLX90393_WR>:
}


/* Write Register command, writes a word size register directly into volatile RAM */
uint8_t MLX90393_WR	( MLX90393 *dev, uint16_t *data, uint8_t regAddress )
{
 8007b8e:	b580      	push	{r7, lr}
 8007b90:	b088      	sub	sp, #32
 8007b92:	af02      	add	r7, sp, #8
 8007b94:	60f8      	str	r0, [r7, #12]
 8007b96:	60b9      	str	r1, [r7, #8]
 8007b98:	4613      	mov	r3, r2
 8007b9a:	71fb      	strb	r3, [r7, #7]
	uint8_t status;
	uint8_t sendBuffer[4];
	HAL_StatusTypeDef i2c_status = HAL_OK;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	75fb      	strb	r3, [r7, #23]

	/* Constructs send buffer with Command + dataHI + dataLO + address */
	sendBuffer[0] = MLX90393_REG_WR;
 8007ba0:	2360      	movs	r3, #96	; 0x60
 8007ba2:	743b      	strb	r3, [r7, #16]
	sendBuffer[1] = (*data >> 8);
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	881b      	ldrh	r3, [r3, #0]
 8007ba8:	0a1b      	lsrs	r3, r3, #8
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	b2db      	uxtb	r3, r3
 8007bae:	747b      	strb	r3, [r7, #17]
	sendBuffer[2] = (*data & 0xFF);
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	881b      	ldrh	r3, [r3, #0]
 8007bb4:	b2db      	uxtb	r3, r3
 8007bb6:	74bb      	strb	r3, [r7, #18]
	sendBuffer[3] = regAddress;
 8007bb8:	79fb      	ldrb	r3, [r7, #7]
 8007bba:	74fb      	strb	r3, [r7, #19]

	i2c_status = sendI2C( dev->i2cHandle, &status, sendBuffer, WR_DATA_LENGHT, 1 );
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	6818      	ldr	r0, [r3, #0]
 8007bc0:	f107 0210 	add.w	r2, r7, #16
 8007bc4:	f107 0116 	add.w	r1, r7, #22
 8007bc8:	2301      	movs	r3, #1
 8007bca:	9300      	str	r3, [sp, #0]
 8007bcc:	2304      	movs	r3, #4
 8007bce:	f7ff ff85 	bl	8007adc <sendI2C>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	75fb      	strb	r3, [r7, #23]

	/* Checks the HAL status of i2c transaction */
	if(i2c_status != HAL_OK) return MLX90393_STATUS_ERROR;
 8007bd6:	7dfb      	ldrb	r3, [r7, #23]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d001      	beq.n	8007be0 <MLX90393_WR+0x52>
 8007bdc:	23ff      	movs	r3, #255	; 0xff
 8007bde:	e000      	b.n	8007be2 <MLX90393_WR+0x54>
	else{
		return status;
 8007be0:	7dbb      	ldrb	r3, [r7, #22]
	}
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3718      	adds	r7, #24
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}

08007bea <MLX90393_RT>:


/* Reset command, is used to reset the device, if device is runnning it will reset to idle mode */
uint8_t MLX90393_RT	( MLX90393 *dev )
{
 8007bea:	b580      	push	{r7, lr}
 8007bec:	b086      	sub	sp, #24
 8007bee:	af02      	add	r7, sp, #8
 8007bf0:	6078      	str	r0, [r7, #4]
	uint8_t status;
	HAL_StatusTypeDef i2c_status = HAL_OK;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	73fb      	strb	r3, [r7, #15]

	i2c_status = sendI2C( dev->i2cHandle, &status, (uint8_t*)MLX90393_REG_RT, 1, 1 );
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6818      	ldr	r0, [r3, #0]
 8007bfa:	f107 010e 	add.w	r1, r7, #14
 8007bfe:	2301      	movs	r3, #1
 8007c00:	9300      	str	r3, [sp, #0]
 8007c02:	2301      	movs	r3, #1
 8007c04:	22f0      	movs	r2, #240	; 0xf0
 8007c06:	f7ff ff69 	bl	8007adc <sendI2C>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	73fb      	strb	r3, [r7, #15]

	/* Checks the HAL status of i2c transaction */
	if(i2c_status != HAL_OK) return MLX90393_STATUS_ERROR;
 8007c0e:	7bfb      	ldrb	r3, [r7, #15]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d001      	beq.n	8007c18 <MLX90393_RT+0x2e>
 8007c14:	23ff      	movs	r3, #255	; 0xff
 8007c16:	e000      	b.n	8007c1a <MLX90393_RT+0x30>
	else{
		return status;
 8007c18:	7bbb      	ldrb	r3, [r7, #14]
	}
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3710      	adds	r7, #16
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
	...

08007c24 <MLX90393_Init>:
}


/* Initialization of sensor */
uint8_t MLX90393_Init ( MLX90393 *dev, I2C_HandleTypeDef *i2cHandle )
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b086      	sub	sp, #24
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	6039      	str	r1, [r7, #0]
	/* Initialize structure parameters */
	dev->i2cHandle = i2cHandle;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	683a      	ldr	r2, [r7, #0]
 8007c32:	601a      	str	r2, [r3, #0]

	dev->mag[0] = 0.0f;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f04f 0200 	mov.w	r2, #0
 8007c3a:	605a      	str	r2, [r3, #4]
	dev->mag[1] = 0.0f;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f04f 0200 	mov.w	r2, #0
 8007c42:	609a      	str	r2, [r3, #8]
	dev->mag[2] = 0.0f;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f04f 0200 	mov.w	r2, #0
 8007c4a:	60da      	str	r2, [r3, #12]

	dev->temp_c = 0.0f;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f04f 0200 	mov.w	r2, #0
 8007c52:	611a      	str	r2, [r3, #16]

	/* Performs a NOP command to get the status of the device, returns HAL status */
	uint8_t status = 0;
 8007c54:	2300      	movs	r3, #0
 8007c56:	75fb      	strb	r3, [r7, #23]
	status = MLX90393_RT( dev );
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f7ff ffc6 	bl	8007bea <MLX90393_RT>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	75fb      	strb	r3, [r7, #23]

	vTaskDelay( 5 / portTICK_PERIOD_MS );
 8007c62:	2005      	movs	r0, #5
 8007c64:	f7fd fe52 	bl	800590c <vTaskDelay>

	if( status == MLX90393_STATUS_ERROR ) return HAL_ERROR;
 8007c68:	7dfb      	ldrb	r3, [r7, #23]
 8007c6a:	2bff      	cmp	r3, #255	; 0xff
 8007c6c:	d101      	bne.n	8007c72 <MLX90393_Init+0x4e>
 8007c6e:	2301      	movs	r3, #1
 8007c70:	e053      	b.n	8007d1a <MLX90393_Init+0xf6>
		/* Configure registers,  */
		MLX90393_CONF_1 configWord1;
		MLX90393_CONF_2 configWord2;
		MLX90393_CONF_3 configWord3;

		configWord1.data = 0x0000;
 8007c72:	2300      	movs	r3, #0
 8007c74:	823b      	strh	r3, [r7, #16]
		configWord2.data = 0x0000;
 8007c76:	2300      	movs	r3, #0
 8007c78:	81bb      	strh	r3, [r7, #12]
		configWord3.data = 0x0000;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	813b      	strh	r3, [r7, #8]

		configWord1.GAINSEL = 0x03;		/* Gain Select 3 */
 8007c7e:	7c3b      	ldrb	r3, [r7, #16]
 8007c80:	2203      	movs	r2, #3
 8007c82:	f362 1306 	bfi	r3, r2, #4, #3
 8007c86:	743b      	strb	r3, [r7, #16]

		configWord2.TRIGINT = 0x01;		/* Select pin as interrupt */
 8007c88:	7b7b      	ldrb	r3, [r7, #13]
 8007c8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c8e:	737b      	strb	r3, [r7, #13]

		configWord3.RESX 	= 0x03; 	/* X resolution 19 */
 8007c90:	7a3b      	ldrb	r3, [r7, #8]
 8007c92:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007c96:	723b      	strb	r3, [r7, #8]
		configWord3.RESY 	= 0x03; 	/* Y resolution 19 */
 8007c98:	893b      	ldrh	r3, [r7, #8]
 8007c9a:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007c9e:	813b      	strh	r3, [r7, #8]
		configWord3.RESZ 	= 0x00; 	/* Z resolution 16 */
 8007ca0:	7a7b      	ldrb	r3, [r7, #9]
 8007ca2:	f36f 0342 	bfc	r3, #1, #2
 8007ca6:	727b      	strb	r3, [r7, #9]
		configWord3.OSR 	= 0x03; 	/* OSR to 3 */
 8007ca8:	7a3b      	ldrb	r3, [r7, #8]
 8007caa:	f043 0303 	orr.w	r3, r3, #3
 8007cae:	723b      	strb	r3, [r7, #8]
		configWord3.OSR2	= 0x01;		/* OSR2 to 1 */
 8007cb0:	7a7b      	ldrb	r3, [r7, #9]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	f362 03c4 	bfi	r3, r2, #3, #2
 8007cb8:	727b      	strb	r3, [r7, #9]
		configWord3.DIGFIL 	= 0x06; 	/* Digital filter to 7 */
 8007cba:	7a3b      	ldrb	r3, [r7, #8]
 8007cbc:	2206      	movs	r2, #6
 8007cbe:	f362 0384 	bfi	r3, r2, #2, #3
 8007cc2:	723b      	strb	r3, [r7, #8]


		/* Write registers and returns status */
		uint8_t status1 = MLX90393_WR ( dev, &configWord1.data, MLX90393_CONF1 );
 8007cc4:	f107 0310 	add.w	r3, r7, #16
 8007cc8:	2200      	movs	r2, #0
 8007cca:	4619      	mov	r1, r3
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f7ff ff5e 	bl	8007b8e <MLX90393_WR>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	75bb      	strb	r3, [r7, #22]
		uint8_t status2 = MLX90393_WR ( dev, &configWord2.data, MLX90393_CONF2 );
 8007cd6:	f107 030c 	add.w	r3, r7, #12
 8007cda:	2201      	movs	r2, #1
 8007cdc:	4619      	mov	r1, r3
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f7ff ff55 	bl	8007b8e <MLX90393_WR>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	757b      	strb	r3, [r7, #21]
		uint8_t status3 = MLX90393_WR ( dev, &configWord3.data, MLX90393_CONF3 );
 8007ce8:	f107 0308 	add.w	r3, r7, #8
 8007cec:	2202      	movs	r2, #2
 8007cee:	4619      	mov	r1, r3
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f7ff ff4c 	bl	8007b8e <MLX90393_WR>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	753b      	strb	r3, [r7, #20]

		/* Initializes Semaphore*/
		MagIntSemaphore = xSemaphoreCreateBinary();
 8007cfa:	2203      	movs	r2, #3
 8007cfc:	2100      	movs	r1, #0
 8007cfe:	2001      	movs	r0, #1
 8007d00:	f7fc fe6c 	bl	80049dc <xQueueGenericCreate>
 8007d04:	4603      	mov	r3, r0
 8007d06:	4a07      	ldr	r2, [pc, #28]	; (8007d24 <MLX90393_Init+0x100>)
 8007d08:	6013      	str	r3, [r2, #0]

		/* Starts burst mode */
		//MLX90393_SB( dev, MLX90393_AXIS_ALL );

		status = status1 | status2 | status3;
 8007d0a:	7dba      	ldrb	r2, [r7, #22]
 8007d0c:	7d7b      	ldrb	r3, [r7, #21]
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	b2da      	uxtb	r2, r3
 8007d12:	7d3b      	ldrb	r3, [r7, #20]
 8007d14:	4313      	orrs	r3, r2
 8007d16:	75fb      	strb	r3, [r7, #23]

		return status;
 8007d18:	7dfb      	ldrb	r3, [r7, #23]
	}

}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3718      	adds	r7, #24
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}
 8007d22:	bf00      	nop
 8007d24:	200019cc 	.word	0x200019cc

08007d28 <MLX90393_ReadMeasurementAxisAll>:
 * This function reads the magnetic field in the x, y and z axis.
 * The data is output in the following order: T (MSB), T (LSB), X (MSB), X (LSB), Y (MSB), Y (LSB), Z (MSB), Z (LSB)
 *
 */
uint8_t MLX90393_ReadMeasurementAxisAll( MLX90393 *dev, int16_t *XmagRead, int16_t *YmagRead, int16_t *ZmagRead )
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b088      	sub	sp, #32
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	60f8      	str	r0, [r7, #12]
 8007d30:	60b9      	str	r1, [r7, #8]
 8007d32:	607a      	str	r2, [r7, #4]
 8007d34:	603b      	str	r3, [r7, #0]
	uint8_t readStatus;
	uint8_t dataBuffer[RM_DATA_LENGHT] = { 0x00 };
 8007d36:	2300      	movs	r3, #0
 8007d38:	617b      	str	r3, [r7, #20]
 8007d3a:	f107 0318 	add.w	r3, r7, #24
 8007d3e:	2200      	movs	r2, #0
 8007d40:	601a      	str	r2, [r3, #0]
 8007d42:	711a      	strb	r2, [r3, #4]

	/* Clears the DRDY flag and takes semaphore*/
	DRDYFlag = 0x00;
 8007d44:	4b19      	ldr	r3, [pc, #100]	; (8007dac <MLX90393_ReadMeasurementAxisAll+0x84>)
 8007d46:	2200      	movs	r2, #0
 8007d48:	701a      	strb	r2, [r3, #0]
	xSemaphoreTake( MagIntSemaphore, portMAX_DELAY );
 8007d4a:	4b19      	ldr	r3, [pc, #100]	; (8007db0 <MLX90393_ReadMeasurementAxisAll+0x88>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f04f 31ff 	mov.w	r1, #4294967295
 8007d52:	4618      	mov	r0, r3
 8007d54:	f7fd f9a6 	bl	80050a4 <xQueueSemaphoreTake>

	/* Reads data from MLX90393 device in all axis */
	readStatus = MLX90393_RM( dev, MLX90393_AXIS_ALL, dataBuffer );
 8007d58:	f107 0314 	add.w	r3, r7, #20
 8007d5c:	461a      	mov	r2, r3
 8007d5e:	210e      	movs	r1, #14
 8007d60:	68f8      	ldr	r0, [r7, #12]
 8007d62:	f7ff fee8 	bl	8007b36 <MLX90393_RM>
 8007d66:	4603      	mov	r3, r0
 8007d68:	77fb      	strb	r3, [r7, #31]

	*XmagRead = ( dataBuffer[2] << 8 ) | dataBuffer[1];
 8007d6a:	7dbb      	ldrb	r3, [r7, #22]
 8007d6c:	021b      	lsls	r3, r3, #8
 8007d6e:	b21a      	sxth	r2, r3
 8007d70:	7d7b      	ldrb	r3, [r7, #21]
 8007d72:	b21b      	sxth	r3, r3
 8007d74:	4313      	orrs	r3, r2
 8007d76:	b21a      	sxth	r2, r3
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	801a      	strh	r2, [r3, #0]
	*YmagRead = ( dataBuffer[4] << 8 ) | dataBuffer[3];
 8007d7c:	7e3b      	ldrb	r3, [r7, #24]
 8007d7e:	021b      	lsls	r3, r3, #8
 8007d80:	b21a      	sxth	r2, r3
 8007d82:	7dfb      	ldrb	r3, [r7, #23]
 8007d84:	b21b      	sxth	r3, r3
 8007d86:	4313      	orrs	r3, r2
 8007d88:	b21a      	sxth	r2, r3
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	801a      	strh	r2, [r3, #0]
	*ZmagRead = ( dataBuffer[6] << 8 ) | dataBuffer[5];
 8007d8e:	7ebb      	ldrb	r3, [r7, #26]
 8007d90:	021b      	lsls	r3, r3, #8
 8007d92:	b21a      	sxth	r2, r3
 8007d94:	7e7b      	ldrb	r3, [r7, #25]
 8007d96:	b21b      	sxth	r3, r3
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	b21a      	sxth	r2, r3
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	801a      	strh	r2, [r3, #0]


	return readStatus;
 8007da0:	7ffb      	ldrb	r3, [r7, #31]
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3720      	adds	r7, #32
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}
 8007daa:	bf00      	nop
 8007dac:	2000190d 	.word	0x2000190d
 8007db0:	200019cc 	.word	0x200019cc

08007db4 <MLX90393_DRDYCallback>:


/* Callback to DRDY interrupt */
void MLX90393_DRDYCallback( void )
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b082      	sub	sp, #8
 8007db8:	af00      	add	r7, sp, #0
	/* Gives semaphore and yields */

	if(DRDYFlag == 0x00)
 8007dba:	4b0f      	ldr	r3, [pc, #60]	; (8007df8 <MLX90393_DRDYCallback+0x44>)
 8007dbc:	781b      	ldrb	r3, [r3, #0]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d116      	bne.n	8007df0 <MLX90393_DRDYCallback+0x3c>
	{
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	607b      	str	r3, [r7, #4]
		xSemaphoreGiveFromISR( MagIntSemaphore, &xHigherPriorityTaskWoken );
 8007dc6:	4b0d      	ldr	r3, [pc, #52]	; (8007dfc <MLX90393_DRDYCallback+0x48>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	1d3a      	adds	r2, r7, #4
 8007dcc:	4611      	mov	r1, r2
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f7fc fffb 	bl	8004dca <xQueueGiveFromISR>
		portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d007      	beq.n	8007dea <MLX90393_DRDYCallback+0x36>
 8007dda:	4b09      	ldr	r3, [pc, #36]	; (8007e00 <MLX90393_DRDYCallback+0x4c>)
 8007ddc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007de0:	601a      	str	r2, [r3, #0]
 8007de2:	f3bf 8f4f 	dsb	sy
 8007de6:	f3bf 8f6f 	isb	sy

		DRDYFlag = 0x01;
 8007dea:	4b03      	ldr	r3, [pc, #12]	; (8007df8 <MLX90393_DRDYCallback+0x44>)
 8007dec:	2201      	movs	r2, #1
 8007dee:	701a      	strb	r2, [r3, #0]
	}
}
 8007df0:	bf00      	nop
 8007df2:	3708      	adds	r7, #8
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}
 8007df8:	2000190d 	.word	0x2000190d
 8007dfc:	200019cc 	.word	0x200019cc
 8007e00:	e000ed04 	.word	0xe000ed04

08007e04 <__libc_init_array>:
 8007e04:	b570      	push	{r4, r5, r6, lr}
 8007e06:	4d0d      	ldr	r5, [pc, #52]	; (8007e3c <__libc_init_array+0x38>)
 8007e08:	4c0d      	ldr	r4, [pc, #52]	; (8007e40 <__libc_init_array+0x3c>)
 8007e0a:	1b64      	subs	r4, r4, r5
 8007e0c:	10a4      	asrs	r4, r4, #2
 8007e0e:	2600      	movs	r6, #0
 8007e10:	42a6      	cmp	r6, r4
 8007e12:	d109      	bne.n	8007e28 <__libc_init_array+0x24>
 8007e14:	4d0b      	ldr	r5, [pc, #44]	; (8007e44 <__libc_init_array+0x40>)
 8007e16:	4c0c      	ldr	r4, [pc, #48]	; (8007e48 <__libc_init_array+0x44>)
 8007e18:	f000 f82e 	bl	8007e78 <_init>
 8007e1c:	1b64      	subs	r4, r4, r5
 8007e1e:	10a4      	asrs	r4, r4, #2
 8007e20:	2600      	movs	r6, #0
 8007e22:	42a6      	cmp	r6, r4
 8007e24:	d105      	bne.n	8007e32 <__libc_init_array+0x2e>
 8007e26:	bd70      	pop	{r4, r5, r6, pc}
 8007e28:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e2c:	4798      	blx	r3
 8007e2e:	3601      	adds	r6, #1
 8007e30:	e7ee      	b.n	8007e10 <__libc_init_array+0xc>
 8007e32:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e36:	4798      	blx	r3
 8007e38:	3601      	adds	r6, #1
 8007e3a:	e7f2      	b.n	8007e22 <__libc_init_array+0x1e>
 8007e3c:	08007f28 	.word	0x08007f28
 8007e40:	08007f28 	.word	0x08007f28
 8007e44:	08007f28 	.word	0x08007f28
 8007e48:	08007f2c 	.word	0x08007f2c

08007e4c <memcpy>:
 8007e4c:	440a      	add	r2, r1
 8007e4e:	4291      	cmp	r1, r2
 8007e50:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e54:	d100      	bne.n	8007e58 <memcpy+0xc>
 8007e56:	4770      	bx	lr
 8007e58:	b510      	push	{r4, lr}
 8007e5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e62:	4291      	cmp	r1, r2
 8007e64:	d1f9      	bne.n	8007e5a <memcpy+0xe>
 8007e66:	bd10      	pop	{r4, pc}

08007e68 <memset>:
 8007e68:	4402      	add	r2, r0
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d100      	bne.n	8007e72 <memset+0xa>
 8007e70:	4770      	bx	lr
 8007e72:	f803 1b01 	strb.w	r1, [r3], #1
 8007e76:	e7f9      	b.n	8007e6c <memset+0x4>

08007e78 <_init>:
 8007e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e7a:	bf00      	nop
 8007e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e7e:	bc08      	pop	{r3}
 8007e80:	469e      	mov	lr, r3
 8007e82:	4770      	bx	lr

08007e84 <_fini>:
 8007e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e86:	bf00      	nop
 8007e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e8a:	bc08      	pop	{r3}
 8007e8c:	469e      	mov	lr, r3
 8007e8e:	4770      	bx	lr
