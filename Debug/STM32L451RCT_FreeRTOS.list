
STM32L451RCT_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a38  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08005bd8  08005bd8  00015bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c6c  08005c6c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08005c6c  08005c6c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005c6c  08005c6c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c6c  08005c6c  00015c6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c70  08005c70  00015c70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005c74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019ac  20000010  08005c84  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200019bc  08005c84  000219bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019c71  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000367d  00000000  00000000  00039cb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001258  00000000  00000000  0003d330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010d0  00000000  00000000  0003e588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022c89  00000000  00000000  0003f658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014e20  00000000  00000000  000622e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf64e  00000000  00000000  00077101  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014674f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a18  00000000  00000000  001467a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005bc0 	.word	0x08005bc0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08005bc0 	.word	0x08005bc0

080001e0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80001e4:	4a04      	ldr	r2, [pc, #16]	; (80001f8 <MX_FREERTOS_Init+0x18>)
 80001e6:	2100      	movs	r1, #0
 80001e8:	4804      	ldr	r0, [pc, #16]	; (80001fc <MX_FREERTOS_Init+0x1c>)
 80001ea:	f002 fde9 	bl	8002dc0 <osThreadNew>
 80001ee:	4603      	mov	r3, r0
 80001f0:	4a03      	ldr	r2, [pc, #12]	; (8000200 <MX_FREERTOS_Init+0x20>)
 80001f2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80001f4:	bf00      	nop
 80001f6:	bd80      	pop	{r7, pc}
 80001f8:	08005c08 	.word	0x08005c08
 80001fc:	08000205 	.word	0x08000205
 8000200:	200018f4 	.word	0x200018f4

08000204 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800020c:	2001      	movs	r0, #1
 800020e:	f002 fe69 	bl	8002ee4 <osDelay>
 8000212:	e7fb      	b.n	800020c <StartDefaultTask+0x8>

08000214 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b08a      	sub	sp, #40	; 0x28
 8000218:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800021a:	f107 0314 	add.w	r3, r7, #20
 800021e:	2200      	movs	r2, #0
 8000220:	601a      	str	r2, [r3, #0]
 8000222:	605a      	str	r2, [r3, #4]
 8000224:	609a      	str	r2, [r3, #8]
 8000226:	60da      	str	r2, [r3, #12]
 8000228:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800022a:	4b2f      	ldr	r3, [pc, #188]	; (80002e8 <MX_GPIO_Init+0xd4>)
 800022c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800022e:	4a2e      	ldr	r2, [pc, #184]	; (80002e8 <MX_GPIO_Init+0xd4>)
 8000230:	f043 0304 	orr.w	r3, r3, #4
 8000234:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000236:	4b2c      	ldr	r3, [pc, #176]	; (80002e8 <MX_GPIO_Init+0xd4>)
 8000238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800023a:	f003 0304 	and.w	r3, r3, #4
 800023e:	613b      	str	r3, [r7, #16]
 8000240:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000242:	4b29      	ldr	r3, [pc, #164]	; (80002e8 <MX_GPIO_Init+0xd4>)
 8000244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000246:	4a28      	ldr	r2, [pc, #160]	; (80002e8 <MX_GPIO_Init+0xd4>)
 8000248:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800024c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800024e:	4b26      	ldr	r3, [pc, #152]	; (80002e8 <MX_GPIO_Init+0xd4>)
 8000250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000256:	60fb      	str	r3, [r7, #12]
 8000258:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800025a:	4b23      	ldr	r3, [pc, #140]	; (80002e8 <MX_GPIO_Init+0xd4>)
 800025c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800025e:	4a22      	ldr	r2, [pc, #136]	; (80002e8 <MX_GPIO_Init+0xd4>)
 8000260:	f043 0302 	orr.w	r3, r3, #2
 8000264:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000266:	4b20      	ldr	r3, [pc, #128]	; (80002e8 <MX_GPIO_Init+0xd4>)
 8000268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800026a:	f003 0302 	and.w	r3, r3, #2
 800026e:	60bb      	str	r3, [r7, #8]
 8000270:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000272:	4b1d      	ldr	r3, [pc, #116]	; (80002e8 <MX_GPIO_Init+0xd4>)
 8000274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000276:	4a1c      	ldr	r2, [pc, #112]	; (80002e8 <MX_GPIO_Init+0xd4>)
 8000278:	f043 0301 	orr.w	r3, r3, #1
 800027c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800027e:	4b1a      	ldr	r3, [pc, #104]	; (80002e8 <MX_GPIO_Init+0xd4>)
 8000280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000282:	f003 0301 	and.w	r3, r3, #1
 8000286:	607b      	str	r3, [r7, #4]
 8000288:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 800028a:	2200      	movs	r2, #0
 800028c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000290:	4816      	ldr	r0, [pc, #88]	; (80002ec <MX_GPIO_Init+0xd8>)
 8000292:	f000 fd09 	bl	8000ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000296:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800029a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800029c:	2301      	movs	r3, #1
 800029e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002a0:	2300      	movs	r3, #0
 80002a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002a4:	2300      	movs	r3, #0
 80002a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002a8:	f107 0314 	add.w	r3, r7, #20
 80002ac:	4619      	mov	r1, r3
 80002ae:	480f      	ldr	r0, [pc, #60]	; (80002ec <MX_GPIO_Init+0xd8>)
 80002b0:	f000 fb80 	bl	80009b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT_MAG_Pin;
 80002b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80002b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80002ba:	4b0d      	ldr	r3, [pc, #52]	; (80002f0 <MX_GPIO_Init+0xdc>)
 80002bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002be:	2300      	movs	r3, #0
 80002c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_MAG_GPIO_Port, &GPIO_InitStruct);
 80002c2:	f107 0314 	add.w	r3, r7, #20
 80002c6:	4619      	mov	r1, r3
 80002c8:	480a      	ldr	r0, [pc, #40]	; (80002f4 <MX_GPIO_Init+0xe0>)
 80002ca:	f000 fb73 	bl	80009b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80002ce:	2200      	movs	r2, #0
 80002d0:	2105      	movs	r1, #5
 80002d2:	2028      	movs	r0, #40	; 0x28
 80002d4:	f000 fb37 	bl	8000946 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80002d8:	2028      	movs	r0, #40	; 0x28
 80002da:	f000 fb50 	bl	800097e <HAL_NVIC_EnableIRQ>

}
 80002de:	bf00      	nop
 80002e0:	3728      	adds	r7, #40	; 0x28
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	40021000 	.word	0x40021000
 80002ec:	48000800 	.word	0x48000800
 80002f0:	10110000 	.word	0x10110000
 80002f4:	48000400 	.word	0x48000400

080002f8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	4603      	mov	r3, r0
 8000300:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == INT_MAG_Pin)
	{
		// Execute callback here
	}
}
 8000302:	bf00      	nop
 8000304:	370c      	adds	r7, #12
 8000306:	46bd      	mov	sp, r7
 8000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030c:	4770      	bx	lr
	...

08000310 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000314:	4b1b      	ldr	r3, [pc, #108]	; (8000384 <MX_I2C2_Init+0x74>)
 8000316:	4a1c      	ldr	r2, [pc, #112]	; (8000388 <MX_I2C2_Init+0x78>)
 8000318:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 800031a:	4b1a      	ldr	r3, [pc, #104]	; (8000384 <MX_I2C2_Init+0x74>)
 800031c:	4a1b      	ldr	r2, [pc, #108]	; (800038c <MX_I2C2_Init+0x7c>)
 800031e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000320:	4b18      	ldr	r3, [pc, #96]	; (8000384 <MX_I2C2_Init+0x74>)
 8000322:	2200      	movs	r2, #0
 8000324:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000326:	4b17      	ldr	r3, [pc, #92]	; (8000384 <MX_I2C2_Init+0x74>)
 8000328:	2201      	movs	r2, #1
 800032a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800032c:	4b15      	ldr	r3, [pc, #84]	; (8000384 <MX_I2C2_Init+0x74>)
 800032e:	2200      	movs	r2, #0
 8000330:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000332:	4b14      	ldr	r3, [pc, #80]	; (8000384 <MX_I2C2_Init+0x74>)
 8000334:	2200      	movs	r2, #0
 8000336:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000338:	4b12      	ldr	r3, [pc, #72]	; (8000384 <MX_I2C2_Init+0x74>)
 800033a:	2200      	movs	r2, #0
 800033c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800033e:	4b11      	ldr	r3, [pc, #68]	; (8000384 <MX_I2C2_Init+0x74>)
 8000340:	2200      	movs	r2, #0
 8000342:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000344:	4b0f      	ldr	r3, [pc, #60]	; (8000384 <MX_I2C2_Init+0x74>)
 8000346:	2200      	movs	r2, #0
 8000348:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800034a:	480e      	ldr	r0, [pc, #56]	; (8000384 <MX_I2C2_Init+0x74>)
 800034c:	f000 fcdc 	bl	8000d08 <HAL_I2C_Init>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000356:	f000 f8f2 	bl	800053e <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800035a:	2100      	movs	r1, #0
 800035c:	4809      	ldr	r0, [pc, #36]	; (8000384 <MX_I2C2_Init+0x74>)
 800035e:	f001 fa9b 	bl	8001898 <HAL_I2CEx_ConfigAnalogFilter>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000368:	f000 f8e9 	bl	800053e <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800036c:	2100      	movs	r1, #0
 800036e:	4805      	ldr	r0, [pc, #20]	; (8000384 <MX_I2C2_Init+0x74>)
 8000370:	f001 fadd 	bl	800192e <HAL_I2CEx_ConfigDigitalFilter>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800037a:	f000 f8e0 	bl	800053e <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800037e:	bf00      	nop
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	200018f8 	.word	0x200018f8
 8000388:	40005800 	.word	0x40005800
 800038c:	10909cec 	.word	0x10909cec

08000390 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b0a2      	sub	sp, #136	; 0x88
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000398:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800039c:	2200      	movs	r2, #0
 800039e:	601a      	str	r2, [r3, #0]
 80003a0:	605a      	str	r2, [r3, #4]
 80003a2:	609a      	str	r2, [r3, #8]
 80003a4:	60da      	str	r2, [r3, #12]
 80003a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003a8:	f107 0310 	add.w	r3, r7, #16
 80003ac:	2264      	movs	r2, #100	; 0x64
 80003ae:	2100      	movs	r1, #0
 80003b0:	4618      	mov	r0, r3
 80003b2:	f005 fbfd 	bl	8005bb0 <memset>
  if(i2cHandle->Instance==I2C2)
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	4a20      	ldr	r2, [pc, #128]	; (800043c <HAL_I2C_MspInit+0xac>)
 80003bc:	4293      	cmp	r3, r2
 80003be:	d138      	bne.n	8000432 <HAL_I2C_MspInit+0xa2>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80003c0:	2380      	movs	r3, #128	; 0x80
 80003c2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80003c4:	2300      	movs	r3, #0
 80003c6:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003c8:	f107 0310 	add.w	r3, r7, #16
 80003cc:	4618      	mov	r0, r3
 80003ce:	f002 f94d 	bl	800266c <HAL_RCCEx_PeriphCLKConfig>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d001      	beq.n	80003dc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80003d8:	f000 f8b1 	bl	800053e <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003dc:	4b18      	ldr	r3, [pc, #96]	; (8000440 <HAL_I2C_MspInit+0xb0>)
 80003de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003e0:	4a17      	ldr	r2, [pc, #92]	; (8000440 <HAL_I2C_MspInit+0xb0>)
 80003e2:	f043 0302 	orr.w	r3, r3, #2
 80003e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003e8:	4b15      	ldr	r3, [pc, #84]	; (8000440 <HAL_I2C_MspInit+0xb0>)
 80003ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ec:	f003 0302 	and.w	r3, r3, #2
 80003f0:	60fb      	str	r3, [r7, #12]
 80003f2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB13     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80003f4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80003f8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80003fa:	2312      	movs	r3, #18
 80003fc:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003fe:	2300      	movs	r3, #0
 8000400:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000402:	2303      	movs	r3, #3
 8000404:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000408:	2304      	movs	r3, #4
 800040a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800040e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000412:	4619      	mov	r1, r3
 8000414:	480b      	ldr	r0, [pc, #44]	; (8000444 <HAL_I2C_MspInit+0xb4>)
 8000416:	f000 facd 	bl	80009b4 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800041a:	4b09      	ldr	r3, [pc, #36]	; (8000440 <HAL_I2C_MspInit+0xb0>)
 800041c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800041e:	4a08      	ldr	r2, [pc, #32]	; (8000440 <HAL_I2C_MspInit+0xb0>)
 8000420:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000424:	6593      	str	r3, [r2, #88]	; 0x58
 8000426:	4b06      	ldr	r3, [pc, #24]	; (8000440 <HAL_I2C_MspInit+0xb0>)
 8000428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800042a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800042e:	60bb      	str	r3, [r7, #8]
 8000430:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000432:	bf00      	nop
 8000434:	3788      	adds	r7, #136	; 0x88
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	40005800 	.word	0x40005800
 8000440:	40021000 	.word	0x40021000
 8000444:	48000400 	.word	0x48000400

08000448 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800044e:	f000 f92a 	bl	80006a6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000452:	f000 f825 	bl	80004a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000456:	f7ff fedd 	bl	8000214 <MX_GPIO_Init>
  MX_I2C2_Init();
 800045a:	f7ff ff59 	bl	8000310 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  HAL_StatusTypeDef i2cStatus = HAL_OK;
 800045e:	2300      	movs	r3, #0
 8000460:	71fb      	strb	r3, [r7, #7]

  i2cStatus |= IIM42652_Init(&IMU, &hi2c2);
 8000462:	490c      	ldr	r1, [pc, #48]	; (8000494 <main+0x4c>)
 8000464:	480c      	ldr	r0, [pc, #48]	; (8000498 <main+0x50>)
 8000466:	f005 f9cc 	bl	8005802 <IIM42652_Init>
 800046a:	4603      	mov	r3, r0
 800046c:	461a      	mov	r2, r3
 800046e:	79fb      	ldrb	r3, [r7, #7]
 8000470:	4313      	orrs	r3, r2
 8000472:	71fb      	strb	r3, [r7, #7]
  i2cStatus |= MLX90393_Init(&MAG, &hi2c2);
 8000474:	4907      	ldr	r1, [pc, #28]	; (8000494 <main+0x4c>)
 8000476:	4809      	ldr	r0, [pc, #36]	; (800049c <main+0x54>)
 8000478:	f005 fad2 	bl	8005a20 <MLX90393_Init>
 800047c:	4603      	mov	r3, r0
 800047e:	461a      	mov	r2, r3
 8000480:	79fb      	ldrb	r3, [r7, #7]
 8000482:	4313      	orrs	r3, r2
 8000484:	71fb      	strb	r3, [r7, #7]
  if(i2cStatus == HAL_ERROR);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000486:	f002 fc51 	bl	8002d2c <osKernelInitialize>
  MX_FREERTOS_Init();
 800048a:	f7ff fea9 	bl	80001e0 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800048e:	f002 fc71 	bl	8002d74 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000492:	e7fe      	b.n	8000492 <main+0x4a>
 8000494:	200018f8 	.word	0x200018f8
 8000498:	20001944 	.word	0x20001944
 800049c:	20001964 	.word	0x20001964

080004a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b096      	sub	sp, #88	; 0x58
 80004a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004a6:	f107 0314 	add.w	r3, r7, #20
 80004aa:	2244      	movs	r2, #68	; 0x44
 80004ac:	2100      	movs	r1, #0
 80004ae:	4618      	mov	r0, r3
 80004b0:	f005 fb7e 	bl	8005bb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004b4:	463b      	mov	r3, r7
 80004b6:	2200      	movs	r2, #0
 80004b8:	601a      	str	r2, [r3, #0]
 80004ba:	605a      	str	r2, [r3, #4]
 80004bc:	609a      	str	r2, [r3, #8]
 80004be:	60da      	str	r2, [r3, #12]
 80004c0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80004c2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80004c6:	f001 fa8d 	bl	80019e4 <HAL_PWREx_ControlVoltageScaling>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d001      	beq.n	80004d4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80004d0:	f000 f835 	bl	800053e <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004d4:	2301      	movs	r3, #1
 80004d6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004de:	2302      	movs	r3, #2
 80004e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004e2:	2303      	movs	r3, #3
 80004e4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 80004e6:	2302      	movs	r3, #2
 80004e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80004ea:	2310      	movs	r3, #16
 80004ec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80004ee:	2307      	movs	r3, #7
 80004f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80004f2:	2302      	movs	r3, #2
 80004f4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80004f6:	2302      	movs	r3, #2
 80004f8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004fa:	f107 0314 	add.w	r3, r7, #20
 80004fe:	4618      	mov	r0, r3
 8000500:	f001 fac6 	bl	8001a90 <HAL_RCC_OscConfig>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800050a:	f000 f818 	bl	800053e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800050e:	230f      	movs	r3, #15
 8000510:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000512:	2303      	movs	r3, #3
 8000514:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000516:	2300      	movs	r3, #0
 8000518:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800051a:	2300      	movs	r3, #0
 800051c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800051e:	2300      	movs	r3, #0
 8000520:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000522:	463b      	mov	r3, r7
 8000524:	2104      	movs	r1, #4
 8000526:	4618      	mov	r0, r3
 8000528:	f001 fed2 	bl	80022d0 <HAL_RCC_ClockConfig>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000532:	f000 f804 	bl	800053e <Error_Handler>
  }
}
 8000536:	bf00      	nop
 8000538:	3758      	adds	r7, #88	; 0x58
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}

0800053e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800053e:	b480      	push	{r7}
 8000540:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000542:	b672      	cpsid	i
}
 8000544:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000546:	e7fe      	b.n	8000546 <Error_Handler+0x8>

08000548 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800054e:	4b11      	ldr	r3, [pc, #68]	; (8000594 <HAL_MspInit+0x4c>)
 8000550:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000552:	4a10      	ldr	r2, [pc, #64]	; (8000594 <HAL_MspInit+0x4c>)
 8000554:	f043 0301 	orr.w	r3, r3, #1
 8000558:	6613      	str	r3, [r2, #96]	; 0x60
 800055a:	4b0e      	ldr	r3, [pc, #56]	; (8000594 <HAL_MspInit+0x4c>)
 800055c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800055e:	f003 0301 	and.w	r3, r3, #1
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000566:	4b0b      	ldr	r3, [pc, #44]	; (8000594 <HAL_MspInit+0x4c>)
 8000568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800056a:	4a0a      	ldr	r2, [pc, #40]	; (8000594 <HAL_MspInit+0x4c>)
 800056c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000570:	6593      	str	r3, [r2, #88]	; 0x58
 8000572:	4b08      	ldr	r3, [pc, #32]	; (8000594 <HAL_MspInit+0x4c>)
 8000574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800057a:	603b      	str	r3, [r7, #0]
 800057c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800057e:	2200      	movs	r2, #0
 8000580:	210f      	movs	r1, #15
 8000582:	f06f 0001 	mvn.w	r0, #1
 8000586:	f000 f9de 	bl	8000946 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800058a:	bf00      	nop
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	40021000 	.word	0x40021000

08000598 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800059c:	e7fe      	b.n	800059c <NMI_Handler+0x4>

0800059e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800059e:	b480      	push	{r7}
 80005a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005a2:	e7fe      	b.n	80005a2 <HardFault_Handler+0x4>

080005a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005a8:	e7fe      	b.n	80005a8 <MemManage_Handler+0x4>

080005aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005aa:	b480      	push	{r7}
 80005ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005ae:	e7fe      	b.n	80005ae <BusFault_Handler+0x4>

080005b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005b4:	e7fe      	b.n	80005b4 <UsageFault_Handler+0x4>

080005b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005b6:	b480      	push	{r7}
 80005b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005ba:	bf00      	nop
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr

080005c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005c8:	f000 f8c2 	bl	8000750 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80005cc:	f004 f898 	bl	8004700 <xTaskGetSchedulerState>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d001      	beq.n	80005da <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80005d6:	f004 fe7f 	bl	80052d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005da:	bf00      	nop
 80005dc:	bd80      	pop	{r7, pc}

080005de <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80005de:	b580      	push	{r7, lr}
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80005e2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80005e6:	f000 fb77 	bl	8000cd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80005ea:	bf00      	nop
 80005ec:	bd80      	pop	{r7, pc}
	...

080005f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80005f4:	4b15      	ldr	r3, [pc, #84]	; (800064c <SystemInit+0x5c>)
 80005f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005fa:	4a14      	ldr	r2, [pc, #80]	; (800064c <SystemInit+0x5c>)
 80005fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000600:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000604:	4b12      	ldr	r3, [pc, #72]	; (8000650 <SystemInit+0x60>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a11      	ldr	r2, [pc, #68]	; (8000650 <SystemInit+0x60>)
 800060a:	f043 0301 	orr.w	r3, r3, #1
 800060e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000610:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <SystemInit+0x60>)
 8000612:	2200      	movs	r2, #0
 8000614:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000616:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <SystemInit+0x60>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4a0d      	ldr	r2, [pc, #52]	; (8000650 <SystemInit+0x60>)
 800061c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000620:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000624:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000626:	4b0a      	ldr	r3, [pc, #40]	; (8000650 <SystemInit+0x60>)
 8000628:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800062c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800062e:	4b08      	ldr	r3, [pc, #32]	; (8000650 <SystemInit+0x60>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4a07      	ldr	r2, [pc, #28]	; (8000650 <SystemInit+0x60>)
 8000634:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000638:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800063a:	4b05      	ldr	r3, [pc, #20]	; (8000650 <SystemInit+0x60>)
 800063c:	2200      	movs	r2, #0
 800063e:	619a      	str	r2, [r3, #24]
}
 8000640:	bf00      	nop
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	e000ed00 	.word	0xe000ed00
 8000650:	40021000 	.word	0x40021000

08000654 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000654:	f8df d034 	ldr.w	sp, [pc, #52]	; 800068c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000658:	f7ff ffca 	bl	80005f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800065c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800065e:	e003      	b.n	8000668 <LoopCopyDataInit>

08000660 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000660:	4b0b      	ldr	r3, [pc, #44]	; (8000690 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000662:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000664:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000666:	3104      	adds	r1, #4

08000668 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000668:	480a      	ldr	r0, [pc, #40]	; (8000694 <LoopForever+0xa>)
	ldr	r3, =_edata
 800066a:	4b0b      	ldr	r3, [pc, #44]	; (8000698 <LoopForever+0xe>)
	adds	r2, r0, r1
 800066c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800066e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000670:	d3f6      	bcc.n	8000660 <CopyDataInit>
	ldr	r2, =_sbss
 8000672:	4a0a      	ldr	r2, [pc, #40]	; (800069c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000674:	e002      	b.n	800067c <LoopFillZerobss>

08000676 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000676:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000678:	f842 3b04 	str.w	r3, [r2], #4

0800067c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800067c:	4b08      	ldr	r3, [pc, #32]	; (80006a0 <LoopForever+0x16>)
	cmp	r2, r3
 800067e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000680:	d3f9      	bcc.n	8000676 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000682:	f005 fa63 	bl	8005b4c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000686:	f7ff fedf 	bl	8000448 <main>

0800068a <LoopForever>:

LoopForever:
    b LoopForever
 800068a:	e7fe      	b.n	800068a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800068c:	20020000 	.word	0x20020000
	ldr	r3, =_sidata
 8000690:	08005c74 	.word	0x08005c74
	ldr	r0, =_sdata
 8000694:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000698:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 800069c:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 80006a0:	200019bc 	.word	0x200019bc

080006a4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006a4:	e7fe      	b.n	80006a4 <ADC1_IRQHandler>

080006a6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b082      	sub	sp, #8
 80006aa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006ac:	2300      	movs	r3, #0
 80006ae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006b0:	2003      	movs	r0, #3
 80006b2:	f000 f93d 	bl	8000930 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006b6:	200f      	movs	r0, #15
 80006b8:	f000 f80e 	bl	80006d8 <HAL_InitTick>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d002      	beq.n	80006c8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80006c2:	2301      	movs	r3, #1
 80006c4:	71fb      	strb	r3, [r7, #7]
 80006c6:	e001      	b.n	80006cc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80006c8:	f7ff ff3e 	bl	8000548 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80006cc:	79fb      	ldrb	r3, [r7, #7]
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
	...

080006d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b084      	sub	sp, #16
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80006e0:	2300      	movs	r3, #0
 80006e2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80006e4:	4b17      	ldr	r3, [pc, #92]	; (8000744 <HAL_InitTick+0x6c>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d023      	beq.n	8000734 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80006ec:	4b16      	ldr	r3, [pc, #88]	; (8000748 <HAL_InitTick+0x70>)
 80006ee:	681a      	ldr	r2, [r3, #0]
 80006f0:	4b14      	ldr	r3, [pc, #80]	; (8000744 <HAL_InitTick+0x6c>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	4619      	mov	r1, r3
 80006f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80006fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000702:	4618      	mov	r0, r3
 8000704:	f000 f949 	bl	800099a <HAL_SYSTICK_Config>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d10f      	bne.n	800072e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	2b0f      	cmp	r3, #15
 8000712:	d809      	bhi.n	8000728 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000714:	2200      	movs	r2, #0
 8000716:	6879      	ldr	r1, [r7, #4]
 8000718:	f04f 30ff 	mov.w	r0, #4294967295
 800071c:	f000 f913 	bl	8000946 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000720:	4a0a      	ldr	r2, [pc, #40]	; (800074c <HAL_InitTick+0x74>)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	6013      	str	r3, [r2, #0]
 8000726:	e007      	b.n	8000738 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000728:	2301      	movs	r3, #1
 800072a:	73fb      	strb	r3, [r7, #15]
 800072c:	e004      	b.n	8000738 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800072e:	2301      	movs	r3, #1
 8000730:	73fb      	strb	r3, [r7, #15]
 8000732:	e001      	b.n	8000738 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000734:	2301      	movs	r3, #1
 8000736:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000738:	7bfb      	ldrb	r3, [r7, #15]
}
 800073a:	4618      	mov	r0, r3
 800073c:	3710      	adds	r7, #16
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20000008 	.word	0x20000008
 8000748:	20000000 	.word	0x20000000
 800074c:	20000004 	.word	0x20000004

08000750 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <HAL_IncTick+0x20>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	461a      	mov	r2, r3
 800075a:	4b06      	ldr	r3, [pc, #24]	; (8000774 <HAL_IncTick+0x24>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4413      	add	r3, r2
 8000760:	4a04      	ldr	r2, [pc, #16]	; (8000774 <HAL_IncTick+0x24>)
 8000762:	6013      	str	r3, [r2, #0]
}
 8000764:	bf00      	nop
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	20000008 	.word	0x20000008
 8000774:	20001978 	.word	0x20001978

08000778 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  return uwTick;
 800077c:	4b03      	ldr	r3, [pc, #12]	; (800078c <HAL_GetTick+0x14>)
 800077e:	681b      	ldr	r3, [r3, #0]
}
 8000780:	4618      	mov	r0, r3
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	20001978 	.word	0x20001978

08000790 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000790:	b480      	push	{r7}
 8000792:	b085      	sub	sp, #20
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	f003 0307 	and.w	r3, r3, #7
 800079e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007a0:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <__NVIC_SetPriorityGrouping+0x44>)
 80007a2:	68db      	ldr	r3, [r3, #12]
 80007a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007a6:	68ba      	ldr	r2, [r7, #8]
 80007a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007ac:	4013      	ands	r3, r2
 80007ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007c2:	4a04      	ldr	r2, [pc, #16]	; (80007d4 <__NVIC_SetPriorityGrouping+0x44>)
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	60d3      	str	r3, [r2, #12]
}
 80007c8:	bf00      	nop
 80007ca:	3714      	adds	r7, #20
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr
 80007d4:	e000ed00 	.word	0xe000ed00

080007d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007dc:	4b04      	ldr	r3, [pc, #16]	; (80007f0 <__NVIC_GetPriorityGrouping+0x18>)
 80007de:	68db      	ldr	r3, [r3, #12]
 80007e0:	0a1b      	lsrs	r3, r3, #8
 80007e2:	f003 0307 	and.w	r3, r3, #7
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr
 80007f0:	e000ed00 	.word	0xe000ed00

080007f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	4603      	mov	r3, r0
 80007fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000802:	2b00      	cmp	r3, #0
 8000804:	db0b      	blt.n	800081e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	f003 021f 	and.w	r2, r3, #31
 800080c:	4907      	ldr	r1, [pc, #28]	; (800082c <__NVIC_EnableIRQ+0x38>)
 800080e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000812:	095b      	lsrs	r3, r3, #5
 8000814:	2001      	movs	r0, #1
 8000816:	fa00 f202 	lsl.w	r2, r0, r2
 800081a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800081e:	bf00      	nop
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	e000e100 	.word	0xe000e100

08000830 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	4603      	mov	r3, r0
 8000838:	6039      	str	r1, [r7, #0]
 800083a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800083c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000840:	2b00      	cmp	r3, #0
 8000842:	db0a      	blt.n	800085a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	b2da      	uxtb	r2, r3
 8000848:	490c      	ldr	r1, [pc, #48]	; (800087c <__NVIC_SetPriority+0x4c>)
 800084a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800084e:	0112      	lsls	r2, r2, #4
 8000850:	b2d2      	uxtb	r2, r2
 8000852:	440b      	add	r3, r1
 8000854:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000858:	e00a      	b.n	8000870 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	b2da      	uxtb	r2, r3
 800085e:	4908      	ldr	r1, [pc, #32]	; (8000880 <__NVIC_SetPriority+0x50>)
 8000860:	79fb      	ldrb	r3, [r7, #7]
 8000862:	f003 030f 	and.w	r3, r3, #15
 8000866:	3b04      	subs	r3, #4
 8000868:	0112      	lsls	r2, r2, #4
 800086a:	b2d2      	uxtb	r2, r2
 800086c:	440b      	add	r3, r1
 800086e:	761a      	strb	r2, [r3, #24]
}
 8000870:	bf00      	nop
 8000872:	370c      	adds	r7, #12
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr
 800087c:	e000e100 	.word	0xe000e100
 8000880:	e000ed00 	.word	0xe000ed00

08000884 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000884:	b480      	push	{r7}
 8000886:	b089      	sub	sp, #36	; 0x24
 8000888:	af00      	add	r7, sp, #0
 800088a:	60f8      	str	r0, [r7, #12]
 800088c:	60b9      	str	r1, [r7, #8]
 800088e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	f003 0307 	and.w	r3, r3, #7
 8000896:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000898:	69fb      	ldr	r3, [r7, #28]
 800089a:	f1c3 0307 	rsb	r3, r3, #7
 800089e:	2b04      	cmp	r3, #4
 80008a0:	bf28      	it	cs
 80008a2:	2304      	movcs	r3, #4
 80008a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008a6:	69fb      	ldr	r3, [r7, #28]
 80008a8:	3304      	adds	r3, #4
 80008aa:	2b06      	cmp	r3, #6
 80008ac:	d902      	bls.n	80008b4 <NVIC_EncodePriority+0x30>
 80008ae:	69fb      	ldr	r3, [r7, #28]
 80008b0:	3b03      	subs	r3, #3
 80008b2:	e000      	b.n	80008b6 <NVIC_EncodePriority+0x32>
 80008b4:	2300      	movs	r3, #0
 80008b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008b8:	f04f 32ff 	mov.w	r2, #4294967295
 80008bc:	69bb      	ldr	r3, [r7, #24]
 80008be:	fa02 f303 	lsl.w	r3, r2, r3
 80008c2:	43da      	mvns	r2, r3
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	401a      	ands	r2, r3
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008cc:	f04f 31ff 	mov.w	r1, #4294967295
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	fa01 f303 	lsl.w	r3, r1, r3
 80008d6:	43d9      	mvns	r1, r3
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008dc:	4313      	orrs	r3, r2
         );
}
 80008de:	4618      	mov	r0, r3
 80008e0:	3724      	adds	r7, #36	; 0x24
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
	...

080008ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	3b01      	subs	r3, #1
 80008f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008fc:	d301      	bcc.n	8000902 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008fe:	2301      	movs	r3, #1
 8000900:	e00f      	b.n	8000922 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000902:	4a0a      	ldr	r2, [pc, #40]	; (800092c <SysTick_Config+0x40>)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	3b01      	subs	r3, #1
 8000908:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800090a:	210f      	movs	r1, #15
 800090c:	f04f 30ff 	mov.w	r0, #4294967295
 8000910:	f7ff ff8e 	bl	8000830 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000914:	4b05      	ldr	r3, [pc, #20]	; (800092c <SysTick_Config+0x40>)
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800091a:	4b04      	ldr	r3, [pc, #16]	; (800092c <SysTick_Config+0x40>)
 800091c:	2207      	movs	r2, #7
 800091e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000920:	2300      	movs	r3, #0
}
 8000922:	4618      	mov	r0, r3
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	e000e010 	.word	0xe000e010

08000930 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000938:	6878      	ldr	r0, [r7, #4]
 800093a:	f7ff ff29 	bl	8000790 <__NVIC_SetPriorityGrouping>
}
 800093e:	bf00      	nop
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}

08000946 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000946:	b580      	push	{r7, lr}
 8000948:	b086      	sub	sp, #24
 800094a:	af00      	add	r7, sp, #0
 800094c:	4603      	mov	r3, r0
 800094e:	60b9      	str	r1, [r7, #8]
 8000950:	607a      	str	r2, [r7, #4]
 8000952:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000954:	2300      	movs	r3, #0
 8000956:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000958:	f7ff ff3e 	bl	80007d8 <__NVIC_GetPriorityGrouping>
 800095c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800095e:	687a      	ldr	r2, [r7, #4]
 8000960:	68b9      	ldr	r1, [r7, #8]
 8000962:	6978      	ldr	r0, [r7, #20]
 8000964:	f7ff ff8e 	bl	8000884 <NVIC_EncodePriority>
 8000968:	4602      	mov	r2, r0
 800096a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800096e:	4611      	mov	r1, r2
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff ff5d 	bl	8000830 <__NVIC_SetPriority>
}
 8000976:	bf00      	nop
 8000978:	3718      	adds	r7, #24
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}

0800097e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800097e:	b580      	push	{r7, lr}
 8000980:	b082      	sub	sp, #8
 8000982:	af00      	add	r7, sp, #0
 8000984:	4603      	mov	r3, r0
 8000986:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff ff31 	bl	80007f4 <__NVIC_EnableIRQ>
}
 8000992:	bf00      	nop
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}

0800099a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800099a:	b580      	push	{r7, lr}
 800099c:	b082      	sub	sp, #8
 800099e:	af00      	add	r7, sp, #0
 80009a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009a2:	6878      	ldr	r0, [r7, #4]
 80009a4:	f7ff ffa2 	bl	80008ec <SysTick_Config>
 80009a8:	4603      	mov	r3, r0
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
	...

080009b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b087      	sub	sp, #28
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009be:	2300      	movs	r3, #0
 80009c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009c2:	e154      	b.n	8000c6e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	2101      	movs	r1, #1
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	fa01 f303 	lsl.w	r3, r1, r3
 80009d0:	4013      	ands	r3, r2
 80009d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	f000 8146 	beq.w	8000c68 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d00b      	beq.n	80009fc <HAL_GPIO_Init+0x48>
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	2b02      	cmp	r3, #2
 80009ea:	d007      	beq.n	80009fc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009f0:	2b11      	cmp	r3, #17
 80009f2:	d003      	beq.n	80009fc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	2b12      	cmp	r3, #18
 80009fa:	d130      	bne.n	8000a5e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	689b      	ldr	r3, [r3, #8]
 8000a00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	005b      	lsls	r3, r3, #1
 8000a06:	2203      	movs	r2, #3
 8000a08:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0c:	43db      	mvns	r3, r3
 8000a0e:	693a      	ldr	r2, [r7, #16]
 8000a10:	4013      	ands	r3, r2
 8000a12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	68da      	ldr	r2, [r3, #12]
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	005b      	lsls	r3, r3, #1
 8000a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a20:	693a      	ldr	r2, [r7, #16]
 8000a22:	4313      	orrs	r3, r2
 8000a24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	693a      	ldr	r2, [r7, #16]
 8000a2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a32:	2201      	movs	r2, #1
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3a:	43db      	mvns	r3, r3
 8000a3c:	693a      	ldr	r2, [r7, #16]
 8000a3e:	4013      	ands	r3, r2
 8000a40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	091b      	lsrs	r3, r3, #4
 8000a48:	f003 0201 	and.w	r2, r3, #1
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a52:	693a      	ldr	r2, [r7, #16]
 8000a54:	4313      	orrs	r3, r2
 8000a56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	693a      	ldr	r2, [r7, #16]
 8000a5c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	68db      	ldr	r3, [r3, #12]
 8000a62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	005b      	lsls	r3, r3, #1
 8000a68:	2203      	movs	r2, #3
 8000a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6e:	43db      	mvns	r3, r3
 8000a70:	693a      	ldr	r2, [r7, #16]
 8000a72:	4013      	ands	r3, r2
 8000a74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	689a      	ldr	r2, [r3, #8]
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	005b      	lsls	r3, r3, #1
 8000a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a82:	693a      	ldr	r2, [r7, #16]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	693a      	ldr	r2, [r7, #16]
 8000a8c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	2b02      	cmp	r3, #2
 8000a94:	d003      	beq.n	8000a9e <HAL_GPIO_Init+0xea>
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	685b      	ldr	r3, [r3, #4]
 8000a9a:	2b12      	cmp	r3, #18
 8000a9c:	d123      	bne.n	8000ae6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	08da      	lsrs	r2, r3, #3
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	3208      	adds	r2, #8
 8000aa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000aaa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	f003 0307 	and.w	r3, r3, #7
 8000ab2:	009b      	lsls	r3, r3, #2
 8000ab4:	220f      	movs	r2, #15
 8000ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aba:	43db      	mvns	r3, r3
 8000abc:	693a      	ldr	r2, [r7, #16]
 8000abe:	4013      	ands	r3, r2
 8000ac0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	691a      	ldr	r2, [r3, #16]
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	f003 0307 	and.w	r3, r3, #7
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	08da      	lsrs	r2, r3, #3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	3208      	adds	r2, #8
 8000ae0:	6939      	ldr	r1, [r7, #16]
 8000ae2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	2203      	movs	r2, #3
 8000af2:	fa02 f303 	lsl.w	r3, r2, r3
 8000af6:	43db      	mvns	r3, r3
 8000af8:	693a      	ldr	r2, [r7, #16]
 8000afa:	4013      	ands	r3, r2
 8000afc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	f003 0203 	and.w	r2, r3, #3
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	005b      	lsls	r3, r3, #1
 8000b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0e:	693a      	ldr	r2, [r7, #16]
 8000b10:	4313      	orrs	r3, r2
 8000b12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	f000 80a0 	beq.w	8000c68 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b28:	4b58      	ldr	r3, [pc, #352]	; (8000c8c <HAL_GPIO_Init+0x2d8>)
 8000b2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b2c:	4a57      	ldr	r2, [pc, #348]	; (8000c8c <HAL_GPIO_Init+0x2d8>)
 8000b2e:	f043 0301 	orr.w	r3, r3, #1
 8000b32:	6613      	str	r3, [r2, #96]	; 0x60
 8000b34:	4b55      	ldr	r3, [pc, #340]	; (8000c8c <HAL_GPIO_Init+0x2d8>)
 8000b36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b38:	f003 0301 	and.w	r3, r3, #1
 8000b3c:	60bb      	str	r3, [r7, #8]
 8000b3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b40:	4a53      	ldr	r2, [pc, #332]	; (8000c90 <HAL_GPIO_Init+0x2dc>)
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	089b      	lsrs	r3, r3, #2
 8000b46:	3302      	adds	r3, #2
 8000b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	f003 0303 	and.w	r3, r3, #3
 8000b54:	009b      	lsls	r3, r3, #2
 8000b56:	220f      	movs	r2, #15
 8000b58:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5c:	43db      	mvns	r3, r3
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	4013      	ands	r3, r2
 8000b62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b6a:	d019      	beq.n	8000ba0 <HAL_GPIO_Init+0x1ec>
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4a49      	ldr	r2, [pc, #292]	; (8000c94 <HAL_GPIO_Init+0x2e0>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d013      	beq.n	8000b9c <HAL_GPIO_Init+0x1e8>
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	4a48      	ldr	r2, [pc, #288]	; (8000c98 <HAL_GPIO_Init+0x2e4>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d00d      	beq.n	8000b98 <HAL_GPIO_Init+0x1e4>
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	4a47      	ldr	r2, [pc, #284]	; (8000c9c <HAL_GPIO_Init+0x2e8>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d007      	beq.n	8000b94 <HAL_GPIO_Init+0x1e0>
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	4a46      	ldr	r2, [pc, #280]	; (8000ca0 <HAL_GPIO_Init+0x2ec>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d101      	bne.n	8000b90 <HAL_GPIO_Init+0x1dc>
 8000b8c:	2304      	movs	r3, #4
 8000b8e:	e008      	b.n	8000ba2 <HAL_GPIO_Init+0x1ee>
 8000b90:	2307      	movs	r3, #7
 8000b92:	e006      	b.n	8000ba2 <HAL_GPIO_Init+0x1ee>
 8000b94:	2303      	movs	r3, #3
 8000b96:	e004      	b.n	8000ba2 <HAL_GPIO_Init+0x1ee>
 8000b98:	2302      	movs	r3, #2
 8000b9a:	e002      	b.n	8000ba2 <HAL_GPIO_Init+0x1ee>
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	e000      	b.n	8000ba2 <HAL_GPIO_Init+0x1ee>
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	697a      	ldr	r2, [r7, #20]
 8000ba4:	f002 0203 	and.w	r2, r2, #3
 8000ba8:	0092      	lsls	r2, r2, #2
 8000baa:	4093      	lsls	r3, r2
 8000bac:	693a      	ldr	r2, [r7, #16]
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000bb2:	4937      	ldr	r1, [pc, #220]	; (8000c90 <HAL_GPIO_Init+0x2dc>)
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	089b      	lsrs	r3, r3, #2
 8000bb8:	3302      	adds	r3, #2
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000bc0:	4b38      	ldr	r3, [pc, #224]	; (8000ca4 <HAL_GPIO_Init+0x2f0>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	43db      	mvns	r3, r3
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	4013      	ands	r3, r2
 8000bce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d003      	beq.n	8000be4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000bdc:	693a      	ldr	r2, [r7, #16]
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	4313      	orrs	r3, r2
 8000be2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000be4:	4a2f      	ldr	r2, [pc, #188]	; (8000ca4 <HAL_GPIO_Init+0x2f0>)
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000bea:	4b2e      	ldr	r3, [pc, #184]	; (8000ca4 <HAL_GPIO_Init+0x2f0>)
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	43db      	mvns	r3, r3
 8000bf4:	693a      	ldr	r2, [r7, #16]
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d003      	beq.n	8000c0e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000c0e:	4a25      	ldr	r2, [pc, #148]	; (8000ca4 <HAL_GPIO_Init+0x2f0>)
 8000c10:	693b      	ldr	r3, [r7, #16]
 8000c12:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c14:	4b23      	ldr	r3, [pc, #140]	; (8000ca4 <HAL_GPIO_Init+0x2f0>)
 8000c16:	689b      	ldr	r3, [r3, #8]
 8000c18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	43db      	mvns	r3, r3
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	4013      	ands	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d003      	beq.n	8000c38 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000c30:	693a      	ldr	r2, [r7, #16]
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000c38:	4a1a      	ldr	r2, [pc, #104]	; (8000ca4 <HAL_GPIO_Init+0x2f0>)
 8000c3a:	693b      	ldr	r3, [r7, #16]
 8000c3c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000c3e:	4b19      	ldr	r3, [pc, #100]	; (8000ca4 <HAL_GPIO_Init+0x2f0>)
 8000c40:	68db      	ldr	r3, [r3, #12]
 8000c42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	43db      	mvns	r3, r3
 8000c48:	693a      	ldr	r2, [r7, #16]
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d003      	beq.n	8000c62 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000c62:	4a10      	ldr	r2, [pc, #64]	; (8000ca4 <HAL_GPIO_Init+0x2f0>)
 8000c64:	693b      	ldr	r3, [r7, #16]
 8000c66:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	fa22 f303 	lsr.w	r3, r2, r3
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	f47f aea3 	bne.w	80009c4 <HAL_GPIO_Init+0x10>
  }
}
 8000c7e:	bf00      	nop
 8000c80:	bf00      	nop
 8000c82:	371c      	adds	r7, #28
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	40021000 	.word	0x40021000
 8000c90:	40010000 	.word	0x40010000
 8000c94:	48000400 	.word	0x48000400
 8000c98:	48000800 	.word	0x48000800
 8000c9c:	48000c00 	.word	0x48000c00
 8000ca0:	48001000 	.word	0x48001000
 8000ca4:	40010400 	.word	0x40010400

08000ca8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	460b      	mov	r3, r1
 8000cb2:	807b      	strh	r3, [r7, #2]
 8000cb4:	4613      	mov	r3, r2
 8000cb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000cb8:	787b      	ldrb	r3, [r7, #1]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d003      	beq.n	8000cc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000cbe:	887a      	ldrh	r2, [r7, #2]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000cc4:	e002      	b.n	8000ccc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000cc6:	887a      	ldrh	r2, [r7, #2]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ccc:	bf00      	nop
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000ce2:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ce4:	695a      	ldr	r2, [r3, #20]
 8000ce6:	88fb      	ldrh	r3, [r7, #6]
 8000ce8:	4013      	ands	r3, r2
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d006      	beq.n	8000cfc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000cee:	4a05      	ldr	r2, [pc, #20]	; (8000d04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000cf0:	88fb      	ldrh	r3, [r7, #6]
 8000cf2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000cf4:	88fb      	ldrh	r3, [r7, #6]
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff fafe 	bl	80002f8 <HAL_GPIO_EXTI_Callback>
  }
}
 8000cfc:	bf00      	nop
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40010400 	.word	0x40010400

08000d08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d101      	bne.n	8000d1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000d16:	2301      	movs	r3, #1
 8000d18:	e081      	b.n	8000e1e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d106      	bne.n	8000d34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2200      	movs	r2, #0
 8000d2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f7ff fb2e 	bl	8000390 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2224      	movs	r2, #36	; 0x24
 8000d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f022 0201 	bic.w	r2, r2, #1
 8000d4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	685a      	ldr	r2, [r3, #4]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000d58:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	689a      	ldr	r2, [r3, #8]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000d68:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	68db      	ldr	r3, [r3, #12]
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d107      	bne.n	8000d82 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	689a      	ldr	r2, [r3, #8]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	e006      	b.n	8000d90 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	689a      	ldr	r2, [r3, #8]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000d8e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	2b02      	cmp	r3, #2
 8000d96:	d104      	bne.n	8000da2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000da0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	687a      	ldr	r2, [r7, #4]
 8000daa:	6812      	ldr	r2, [r2, #0]
 8000dac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000db0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000db4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	68da      	ldr	r2, [r3, #12]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000dc4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	691a      	ldr	r2, [r3, #16]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	695b      	ldr	r3, [r3, #20]
 8000dce:	ea42 0103 	orr.w	r1, r2, r3
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	699b      	ldr	r3, [r3, #24]
 8000dd6:	021a      	lsls	r2, r3, #8
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	430a      	orrs	r2, r1
 8000dde:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	69d9      	ldr	r1, [r3, #28]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6a1a      	ldr	r2, [r3, #32]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	430a      	orrs	r2, r1
 8000dee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f042 0201 	orr.w	r2, r2, #1
 8000dfe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2200      	movs	r2, #0
 8000e04:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2220      	movs	r2, #32
 8000e0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2200      	movs	r2, #0
 8000e12:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2200      	movs	r2, #0
 8000e18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000e1c:	2300      	movs	r3, #0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
	...

08000e28 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b088      	sub	sp, #32
 8000e2c:	af02      	add	r7, sp, #8
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	607a      	str	r2, [r7, #4]
 8000e32:	461a      	mov	r2, r3
 8000e34:	460b      	mov	r3, r1
 8000e36:	817b      	strh	r3, [r7, #10]
 8000e38:	4613      	mov	r3, r2
 8000e3a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	2b20      	cmp	r3, #32
 8000e46:	f040 80da 	bne.w	8000ffe <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d101      	bne.n	8000e58 <HAL_I2C_Master_Transmit+0x30>
 8000e54:	2302      	movs	r3, #2
 8000e56:	e0d3      	b.n	8001000 <HAL_I2C_Master_Transmit+0x1d8>
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000e60:	f7ff fc8a 	bl	8000778 <HAL_GetTick>
 8000e64:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	9300      	str	r3, [sp, #0]
 8000e6a:	2319      	movs	r3, #25
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e72:	68f8      	ldr	r0, [r7, #12]
 8000e74:	f000 fb54 	bl	8001520 <I2C_WaitOnFlagUntilTimeout>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e0be      	b.n	8001000 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	2221      	movs	r2, #33	; 0x21
 8000e86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	2210      	movs	r2, #16
 8000e8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	2200      	movs	r2, #0
 8000e96:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	893a      	ldrh	r2, [r7, #8]
 8000ea2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	2bff      	cmp	r3, #255	; 0xff
 8000eb2:	d90e      	bls.n	8000ed2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	22ff      	movs	r2, #255	; 0xff
 8000eb8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ebe:	b2da      	uxtb	r2, r3
 8000ec0:	8979      	ldrh	r1, [r7, #10]
 8000ec2:	4b51      	ldr	r3, [pc, #324]	; (8001008 <HAL_I2C_Master_Transmit+0x1e0>)
 8000ec4:	9300      	str	r3, [sp, #0]
 8000ec6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000eca:	68f8      	ldr	r0, [r7, #12]
 8000ecc:	f000 fcb6 	bl	800183c <I2C_TransferConfig>
 8000ed0:	e06c      	b.n	8000fac <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ed6:	b29a      	uxth	r2, r3
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ee0:	b2da      	uxtb	r2, r3
 8000ee2:	8979      	ldrh	r1, [r7, #10]
 8000ee4:	4b48      	ldr	r3, [pc, #288]	; (8001008 <HAL_I2C_Master_Transmit+0x1e0>)
 8000ee6:	9300      	str	r3, [sp, #0]
 8000ee8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000eec:	68f8      	ldr	r0, [r7, #12]
 8000eee:	f000 fca5 	bl	800183c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8000ef2:	e05b      	b.n	8000fac <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000ef4:	697a      	ldr	r2, [r7, #20]
 8000ef6:	6a39      	ldr	r1, [r7, #32]
 8000ef8:	68f8      	ldr	r0, [r7, #12]
 8000efa:	f000 fb51 	bl	80015a0 <I2C_WaitOnTXISFlagUntilTimeout>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8000f04:	2301      	movs	r3, #1
 8000f06:	e07b      	b.n	8001000 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f0c:	781a      	ldrb	r2, [r3, #0]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f18:	1c5a      	adds	r2, r3, #1
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	3b01      	subs	r3, #1
 8000f26:	b29a      	uxth	r2, r3
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f30:	3b01      	subs	r3, #1
 8000f32:	b29a      	uxth	r2, r3
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f3c:	b29b      	uxth	r3, r3
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d034      	beq.n	8000fac <HAL_I2C_Master_Transmit+0x184>
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d130      	bne.n	8000fac <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	9300      	str	r3, [sp, #0]
 8000f4e:	6a3b      	ldr	r3, [r7, #32]
 8000f50:	2200      	movs	r2, #0
 8000f52:	2180      	movs	r1, #128	; 0x80
 8000f54:	68f8      	ldr	r0, [r7, #12]
 8000f56:	f000 fae3 	bl	8001520 <I2C_WaitOnFlagUntilTimeout>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8000f60:	2301      	movs	r3, #1
 8000f62:	e04d      	b.n	8001000 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f68:	b29b      	uxth	r3, r3
 8000f6a:	2bff      	cmp	r3, #255	; 0xff
 8000f6c:	d90e      	bls.n	8000f8c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	22ff      	movs	r2, #255	; 0xff
 8000f72:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f78:	b2da      	uxtb	r2, r3
 8000f7a:	8979      	ldrh	r1, [r7, #10]
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	9300      	str	r3, [sp, #0]
 8000f80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f84:	68f8      	ldr	r0, [r7, #12]
 8000f86:	f000 fc59 	bl	800183c <I2C_TransferConfig>
 8000f8a:	e00f      	b.n	8000fac <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f90:	b29a      	uxth	r2, r3
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f9a:	b2da      	uxtb	r2, r3
 8000f9c:	8979      	ldrh	r1, [r7, #10]
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	9300      	str	r3, [sp, #0]
 8000fa2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000fa6:	68f8      	ldr	r0, [r7, #12]
 8000fa8:	f000 fc48 	bl	800183c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fb0:	b29b      	uxth	r3, r3
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d19e      	bne.n	8000ef4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000fb6:	697a      	ldr	r2, [r7, #20]
 8000fb8:	6a39      	ldr	r1, [r7, #32]
 8000fba:	68f8      	ldr	r0, [r7, #12]
 8000fbc:	f000 fb30 	bl	8001620 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e01a      	b.n	8001000 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2220      	movs	r2, #32
 8000fd0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	6859      	ldr	r1, [r3, #4]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	4b0b      	ldr	r3, [pc, #44]	; (800100c <HAL_I2C_Master_Transmit+0x1e4>)
 8000fde:	400b      	ands	r3, r1
 8000fe0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	2220      	movs	r2, #32
 8000fe6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	2200      	movs	r2, #0
 8000fee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	e000      	b.n	8001000 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8000ffe:	2302      	movs	r3, #2
  }
}
 8001000:	4618      	mov	r0, r3
 8001002:	3718      	adds	r7, #24
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	80002000 	.word	0x80002000
 800100c:	fe00e800 	.word	0xfe00e800

08001010 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b088      	sub	sp, #32
 8001014:	af02      	add	r7, sp, #8
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	607a      	str	r2, [r7, #4]
 800101a:	461a      	mov	r2, r3
 800101c:	460b      	mov	r3, r1
 800101e:	817b      	strh	r3, [r7, #10]
 8001020:	4613      	mov	r3, r2
 8001022:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800102a:	b2db      	uxtb	r3, r3
 800102c:	2b20      	cmp	r3, #32
 800102e:	f040 80db 	bne.w	80011e8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001038:	2b01      	cmp	r3, #1
 800103a:	d101      	bne.n	8001040 <HAL_I2C_Master_Receive+0x30>
 800103c:	2302      	movs	r3, #2
 800103e:	e0d4      	b.n	80011ea <HAL_I2C_Master_Receive+0x1da>
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	2201      	movs	r2, #1
 8001044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001048:	f7ff fb96 	bl	8000778 <HAL_GetTick>
 800104c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	9300      	str	r3, [sp, #0]
 8001052:	2319      	movs	r3, #25
 8001054:	2201      	movs	r2, #1
 8001056:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800105a:	68f8      	ldr	r0, [r7, #12]
 800105c:	f000 fa60 	bl	8001520 <I2C_WaitOnFlagUntilTimeout>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e0bf      	b.n	80011ea <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	2222      	movs	r2, #34	; 0x22
 800106e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	2210      	movs	r2, #16
 8001076:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	2200      	movs	r2, #0
 800107e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	893a      	ldrh	r2, [r7, #8]
 800108a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	2200      	movs	r2, #0
 8001090:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001096:	b29b      	uxth	r3, r3
 8001098:	2bff      	cmp	r3, #255	; 0xff
 800109a:	d90e      	bls.n	80010ba <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	22ff      	movs	r2, #255	; 0xff
 80010a0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010a6:	b2da      	uxtb	r2, r3
 80010a8:	8979      	ldrh	r1, [r7, #10]
 80010aa:	4b52      	ldr	r3, [pc, #328]	; (80011f4 <HAL_I2C_Master_Receive+0x1e4>)
 80010ac:	9300      	str	r3, [sp, #0]
 80010ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010b2:	68f8      	ldr	r0, [r7, #12]
 80010b4:	f000 fbc2 	bl	800183c <I2C_TransferConfig>
 80010b8:	e06d      	b.n	8001196 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010be:	b29a      	uxth	r2, r3
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010c8:	b2da      	uxtb	r2, r3
 80010ca:	8979      	ldrh	r1, [r7, #10]
 80010cc:	4b49      	ldr	r3, [pc, #292]	; (80011f4 <HAL_I2C_Master_Receive+0x1e4>)
 80010ce:	9300      	str	r3, [sp, #0]
 80010d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010d4:	68f8      	ldr	r0, [r7, #12]
 80010d6:	f000 fbb1 	bl	800183c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80010da:	e05c      	b.n	8001196 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80010dc:	697a      	ldr	r2, [r7, #20]
 80010de:	6a39      	ldr	r1, [r7, #32]
 80010e0:	68f8      	ldr	r0, [r7, #12]
 80010e2:	f000 fad9 	bl	8001698 <I2C_WaitOnRXNEFlagUntilTimeout>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80010ec:	2301      	movs	r3, #1
 80010ee:	e07c      	b.n	80011ea <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010fa:	b2d2      	uxtb	r2, r2
 80010fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001102:	1c5a      	adds	r2, r3, #1
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800110c:	3b01      	subs	r3, #1
 800110e:	b29a      	uxth	r2, r3
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001118:	b29b      	uxth	r3, r3
 800111a:	3b01      	subs	r3, #1
 800111c:	b29a      	uxth	r2, r3
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001126:	b29b      	uxth	r3, r3
 8001128:	2b00      	cmp	r3, #0
 800112a:	d034      	beq.n	8001196 <HAL_I2C_Master_Receive+0x186>
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001130:	2b00      	cmp	r3, #0
 8001132:	d130      	bne.n	8001196 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	9300      	str	r3, [sp, #0]
 8001138:	6a3b      	ldr	r3, [r7, #32]
 800113a:	2200      	movs	r2, #0
 800113c:	2180      	movs	r1, #128	; 0x80
 800113e:	68f8      	ldr	r0, [r7, #12]
 8001140:	f000 f9ee 	bl	8001520 <I2C_WaitOnFlagUntilTimeout>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e04d      	b.n	80011ea <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001152:	b29b      	uxth	r3, r3
 8001154:	2bff      	cmp	r3, #255	; 0xff
 8001156:	d90e      	bls.n	8001176 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	22ff      	movs	r2, #255	; 0xff
 800115c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001162:	b2da      	uxtb	r2, r3
 8001164:	8979      	ldrh	r1, [r7, #10]
 8001166:	2300      	movs	r3, #0
 8001168:	9300      	str	r3, [sp, #0]
 800116a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800116e:	68f8      	ldr	r0, [r7, #12]
 8001170:	f000 fb64 	bl	800183c <I2C_TransferConfig>
 8001174:	e00f      	b.n	8001196 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800117a:	b29a      	uxth	r2, r3
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001184:	b2da      	uxtb	r2, r3
 8001186:	8979      	ldrh	r1, [r7, #10]
 8001188:	2300      	movs	r3, #0
 800118a:	9300      	str	r3, [sp, #0]
 800118c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001190:	68f8      	ldr	r0, [r7, #12]
 8001192:	f000 fb53 	bl	800183c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800119a:	b29b      	uxth	r3, r3
 800119c:	2b00      	cmp	r3, #0
 800119e:	d19d      	bne.n	80010dc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011a0:	697a      	ldr	r2, [r7, #20]
 80011a2:	6a39      	ldr	r1, [r7, #32]
 80011a4:	68f8      	ldr	r0, [r7, #12]
 80011a6:	f000 fa3b 	bl	8001620 <I2C_WaitOnSTOPFlagUntilTimeout>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
 80011b2:	e01a      	b.n	80011ea <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2220      	movs	r2, #32
 80011ba:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	6859      	ldr	r1, [r3, #4]
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <HAL_I2C_Master_Receive+0x1e8>)
 80011c8:	400b      	ands	r3, r1
 80011ca:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	2220      	movs	r2, #32
 80011d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	2200      	movs	r2, #0
 80011d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	2200      	movs	r2, #0
 80011e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80011e4:	2300      	movs	r3, #0
 80011e6:	e000      	b.n	80011ea <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80011e8:	2302      	movs	r3, #2
  }
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3718      	adds	r7, #24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	80002400 	.word	0x80002400
 80011f8:	fe00e800 	.word	0xfe00e800

080011fc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b088      	sub	sp, #32
 8001200:	af02      	add	r7, sp, #8
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	4608      	mov	r0, r1
 8001206:	4611      	mov	r1, r2
 8001208:	461a      	mov	r2, r3
 800120a:	4603      	mov	r3, r0
 800120c:	817b      	strh	r3, [r7, #10]
 800120e:	460b      	mov	r3, r1
 8001210:	813b      	strh	r3, [r7, #8]
 8001212:	4613      	mov	r3, r2
 8001214:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800121c:	b2db      	uxtb	r3, r3
 800121e:	2b20      	cmp	r3, #32
 8001220:	f040 80fd 	bne.w	800141e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001224:	6a3b      	ldr	r3, [r7, #32]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d002      	beq.n	8001230 <HAL_I2C_Mem_Read+0x34>
 800122a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800122c:	2b00      	cmp	r3, #0
 800122e:	d105      	bne.n	800123c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001236:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001238:	2301      	movs	r3, #1
 800123a:	e0f1      	b.n	8001420 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001242:	2b01      	cmp	r3, #1
 8001244:	d101      	bne.n	800124a <HAL_I2C_Mem_Read+0x4e>
 8001246:	2302      	movs	r3, #2
 8001248:	e0ea      	b.n	8001420 <HAL_I2C_Mem_Read+0x224>
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	2201      	movs	r2, #1
 800124e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001252:	f7ff fa91 	bl	8000778 <HAL_GetTick>
 8001256:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	9300      	str	r3, [sp, #0]
 800125c:	2319      	movs	r3, #25
 800125e:	2201      	movs	r2, #1
 8001260:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001264:	68f8      	ldr	r0, [r7, #12]
 8001266:	f000 f95b 	bl	8001520 <I2C_WaitOnFlagUntilTimeout>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	e0d5      	b.n	8001420 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	2222      	movs	r2, #34	; 0x22
 8001278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	2240      	movs	r2, #64	; 0x40
 8001280:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	2200      	movs	r2, #0
 8001288:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	6a3a      	ldr	r2, [r7, #32]
 800128e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001294:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	2200      	movs	r2, #0
 800129a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800129c:	88f8      	ldrh	r0, [r7, #6]
 800129e:	893a      	ldrh	r2, [r7, #8]
 80012a0:	8979      	ldrh	r1, [r7, #10]
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	9301      	str	r3, [sp, #4]
 80012a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	4603      	mov	r3, r0
 80012ac:	68f8      	ldr	r0, [r7, #12]
 80012ae:	f000 f8bf 	bl	8001430 <I2C_RequestMemoryRead>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d005      	beq.n	80012c4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	2200      	movs	r2, #0
 80012bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	e0ad      	b.n	8001420 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	2bff      	cmp	r3, #255	; 0xff
 80012cc:	d90e      	bls.n	80012ec <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	22ff      	movs	r2, #255	; 0xff
 80012d2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	8979      	ldrh	r1, [r7, #10]
 80012dc:	4b52      	ldr	r3, [pc, #328]	; (8001428 <HAL_I2C_Mem_Read+0x22c>)
 80012de:	9300      	str	r3, [sp, #0]
 80012e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012e4:	68f8      	ldr	r0, [r7, #12]
 80012e6:	f000 faa9 	bl	800183c <I2C_TransferConfig>
 80012ea:	e00f      	b.n	800130c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012f0:	b29a      	uxth	r2, r3
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	8979      	ldrh	r1, [r7, #10]
 80012fe:	4b4a      	ldr	r3, [pc, #296]	; (8001428 <HAL_I2C_Mem_Read+0x22c>)
 8001300:	9300      	str	r3, [sp, #0]
 8001302:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001306:	68f8      	ldr	r0, [r7, #12]
 8001308:	f000 fa98 	bl	800183c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	9300      	str	r3, [sp, #0]
 8001310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001312:	2200      	movs	r2, #0
 8001314:	2104      	movs	r1, #4
 8001316:	68f8      	ldr	r0, [r7, #12]
 8001318:	f000 f902 	bl	8001520 <I2C_WaitOnFlagUntilTimeout>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e07c      	b.n	8001420 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001330:	b2d2      	uxtb	r2, r2
 8001332:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001338:	1c5a      	adds	r2, r3, #1
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001342:	3b01      	subs	r3, #1
 8001344:	b29a      	uxth	r2, r3
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800134e:	b29b      	uxth	r3, r3
 8001350:	3b01      	subs	r3, #1
 8001352:	b29a      	uxth	r2, r3
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800135c:	b29b      	uxth	r3, r3
 800135e:	2b00      	cmp	r3, #0
 8001360:	d034      	beq.n	80013cc <HAL_I2C_Mem_Read+0x1d0>
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001366:	2b00      	cmp	r3, #0
 8001368:	d130      	bne.n	80013cc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	9300      	str	r3, [sp, #0]
 800136e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001370:	2200      	movs	r2, #0
 8001372:	2180      	movs	r1, #128	; 0x80
 8001374:	68f8      	ldr	r0, [r7, #12]
 8001376:	f000 f8d3 	bl	8001520 <I2C_WaitOnFlagUntilTimeout>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e04d      	b.n	8001420 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001388:	b29b      	uxth	r3, r3
 800138a:	2bff      	cmp	r3, #255	; 0xff
 800138c:	d90e      	bls.n	80013ac <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	22ff      	movs	r2, #255	; 0xff
 8001392:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001398:	b2da      	uxtb	r2, r3
 800139a:	8979      	ldrh	r1, [r7, #10]
 800139c:	2300      	movs	r3, #0
 800139e:	9300      	str	r3, [sp, #0]
 80013a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013a4:	68f8      	ldr	r0, [r7, #12]
 80013a6:	f000 fa49 	bl	800183c <I2C_TransferConfig>
 80013aa:	e00f      	b.n	80013cc <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013b0:	b29a      	uxth	r2, r3
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013ba:	b2da      	uxtb	r2, r3
 80013bc:	8979      	ldrh	r1, [r7, #10]
 80013be:	2300      	movs	r3, #0
 80013c0:	9300      	str	r3, [sp, #0]
 80013c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013c6:	68f8      	ldr	r0, [r7, #12]
 80013c8:	f000 fa38 	bl	800183c <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d19a      	bne.n	800130c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013d6:	697a      	ldr	r2, [r7, #20]
 80013d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80013da:	68f8      	ldr	r0, [r7, #12]
 80013dc:	f000 f920 	bl	8001620 <I2C_WaitOnSTOPFlagUntilTimeout>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e01a      	b.n	8001420 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2220      	movs	r2, #32
 80013f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	6859      	ldr	r1, [r3, #4]
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	4b0b      	ldr	r3, [pc, #44]	; (800142c <HAL_I2C_Mem_Read+0x230>)
 80013fe:	400b      	ands	r3, r1
 8001400:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	2220      	movs	r2, #32
 8001406:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	2200      	movs	r2, #0
 800140e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	2200      	movs	r2, #0
 8001416:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800141a:	2300      	movs	r3, #0
 800141c:	e000      	b.n	8001420 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800141e:	2302      	movs	r3, #2
  }
}
 8001420:	4618      	mov	r0, r3
 8001422:	3718      	adds	r7, #24
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	80002400 	.word	0x80002400
 800142c:	fe00e800 	.word	0xfe00e800

08001430 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af02      	add	r7, sp, #8
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	4608      	mov	r0, r1
 800143a:	4611      	mov	r1, r2
 800143c:	461a      	mov	r2, r3
 800143e:	4603      	mov	r3, r0
 8001440:	817b      	strh	r3, [r7, #10]
 8001442:	460b      	mov	r3, r1
 8001444:	813b      	strh	r3, [r7, #8]
 8001446:	4613      	mov	r3, r2
 8001448:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800144a:	88fb      	ldrh	r3, [r7, #6]
 800144c:	b2da      	uxtb	r2, r3
 800144e:	8979      	ldrh	r1, [r7, #10]
 8001450:	4b20      	ldr	r3, [pc, #128]	; (80014d4 <I2C_RequestMemoryRead+0xa4>)
 8001452:	9300      	str	r3, [sp, #0]
 8001454:	2300      	movs	r3, #0
 8001456:	68f8      	ldr	r0, [r7, #12]
 8001458:	f000 f9f0 	bl	800183c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800145c:	69fa      	ldr	r2, [r7, #28]
 800145e:	69b9      	ldr	r1, [r7, #24]
 8001460:	68f8      	ldr	r0, [r7, #12]
 8001462:	f000 f89d 	bl	80015a0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e02c      	b.n	80014ca <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001470:	88fb      	ldrh	r3, [r7, #6]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d105      	bne.n	8001482 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001476:	893b      	ldrh	r3, [r7, #8]
 8001478:	b2da      	uxtb	r2, r3
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	629a      	str	r2, [r3, #40]	; 0x28
 8001480:	e015      	b.n	80014ae <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001482:	893b      	ldrh	r3, [r7, #8]
 8001484:	0a1b      	lsrs	r3, r3, #8
 8001486:	b29b      	uxth	r3, r3
 8001488:	b2da      	uxtb	r2, r3
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001490:	69fa      	ldr	r2, [r7, #28]
 8001492:	69b9      	ldr	r1, [r7, #24]
 8001494:	68f8      	ldr	r0, [r7, #12]
 8001496:	f000 f883 	bl	80015a0 <I2C_WaitOnTXISFlagUntilTimeout>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e012      	b.n	80014ca <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80014a4:	893b      	ldrh	r3, [r7, #8]
 80014a6:	b2da      	uxtb	r2, r3
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	9300      	str	r3, [sp, #0]
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	2200      	movs	r2, #0
 80014b6:	2140      	movs	r1, #64	; 0x40
 80014b8:	68f8      	ldr	r0, [r7, #12]
 80014ba:	f000 f831 	bl	8001520 <I2C_WaitOnFlagUntilTimeout>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e000      	b.n	80014ca <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	80002000 	.word	0x80002000

080014d8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	699b      	ldr	r3, [r3, #24]
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d103      	bne.n	80014f6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2200      	movs	r2, #0
 80014f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	f003 0301 	and.w	r3, r3, #1
 8001500:	2b01      	cmp	r3, #1
 8001502:	d007      	beq.n	8001514 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	699a      	ldr	r2, [r3, #24]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f042 0201 	orr.w	r2, r2, #1
 8001512:	619a      	str	r2, [r3, #24]
  }
}
 8001514:	bf00      	nop
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	603b      	str	r3, [r7, #0]
 800152c:	4613      	mov	r3, r2
 800152e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001530:	e022      	b.n	8001578 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001538:	d01e      	beq.n	8001578 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800153a:	f7ff f91d 	bl	8000778 <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	429a      	cmp	r2, r3
 8001548:	d302      	bcc.n	8001550 <I2C_WaitOnFlagUntilTimeout+0x30>
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d113      	bne.n	8001578 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001554:	f043 0220 	orr.w	r2, r3, #32
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	2220      	movs	r2, #32
 8001560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	2200      	movs	r2, #0
 8001568:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	2200      	movs	r2, #0
 8001570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e00f      	b.n	8001598 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	699a      	ldr	r2, [r3, #24]
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	4013      	ands	r3, r2
 8001582:	68ba      	ldr	r2, [r7, #8]
 8001584:	429a      	cmp	r2, r3
 8001586:	bf0c      	ite	eq
 8001588:	2301      	moveq	r3, #1
 800158a:	2300      	movne	r3, #0
 800158c:	b2db      	uxtb	r3, r3
 800158e:	461a      	mov	r2, r3
 8001590:	79fb      	ldrb	r3, [r7, #7]
 8001592:	429a      	cmp	r2, r3
 8001594:	d0cd      	beq.n	8001532 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001596:	2300      	movs	r3, #0
}
 8001598:	4618      	mov	r0, r3
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80015ac:	e02c      	b.n	8001608 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	68b9      	ldr	r1, [r7, #8]
 80015b2:	68f8      	ldr	r0, [r7, #12]
 80015b4:	f000 f8dc 	bl	8001770 <I2C_IsAcknowledgeFailed>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e02a      	b.n	8001618 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015c8:	d01e      	beq.n	8001608 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015ca:	f7ff f8d5 	bl	8000778 <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	68ba      	ldr	r2, [r7, #8]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d302      	bcc.n	80015e0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d113      	bne.n	8001608 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e4:	f043 0220 	orr.w	r2, r3, #32
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	2220      	movs	r2, #32
 80015f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2200      	movs	r2, #0
 80015f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2200      	movs	r2, #0
 8001600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e007      	b.n	8001618 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	699b      	ldr	r3, [r3, #24]
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b02      	cmp	r3, #2
 8001614:	d1cb      	bne.n	80015ae <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001616:	2300      	movs	r3, #0
}
 8001618:	4618      	mov	r0, r3
 800161a:	3710      	adds	r7, #16
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800162c:	e028      	b.n	8001680 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	68b9      	ldr	r1, [r7, #8]
 8001632:	68f8      	ldr	r0, [r7, #12]
 8001634:	f000 f89c 	bl	8001770 <I2C_IsAcknowledgeFailed>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e026      	b.n	8001690 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001642:	f7ff f899 	bl	8000778 <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	68ba      	ldr	r2, [r7, #8]
 800164e:	429a      	cmp	r2, r3
 8001650:	d302      	bcc.n	8001658 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d113      	bne.n	8001680 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165c:	f043 0220 	orr.w	r2, r3, #32
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	2220      	movs	r2, #32
 8001668:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2200      	movs	r2, #0
 8001670:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2200      	movs	r2, #0
 8001678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e007      	b.n	8001690 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	699b      	ldr	r3, [r3, #24]
 8001686:	f003 0320 	and.w	r3, r3, #32
 800168a:	2b20      	cmp	r3, #32
 800168c:	d1cf      	bne.n	800162e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800168e:	2300      	movs	r3, #0
}
 8001690:	4618      	mov	r0, r3
 8001692:	3710      	adds	r7, #16
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80016a4:	e055      	b.n	8001752 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	68b9      	ldr	r1, [r7, #8]
 80016aa:	68f8      	ldr	r0, [r7, #12]
 80016ac:	f000 f860 	bl	8001770 <I2C_IsAcknowledgeFailed>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e053      	b.n	8001762 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	f003 0320 	and.w	r3, r3, #32
 80016c4:	2b20      	cmp	r3, #32
 80016c6:	d129      	bne.n	800171c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	699b      	ldr	r3, [r3, #24]
 80016ce:	f003 0304 	and.w	r3, r3, #4
 80016d2:	2b04      	cmp	r3, #4
 80016d4:	d105      	bne.n	80016e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80016de:	2300      	movs	r3, #0
 80016e0:	e03f      	b.n	8001762 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2220      	movs	r2, #32
 80016e8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	6859      	ldr	r1, [r3, #4]
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	4b1d      	ldr	r3, [pc, #116]	; (800176c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80016f6:	400b      	ands	r3, r1
 80016f8:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	2200      	movs	r2, #0
 80016fe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2220      	movs	r2, #32
 8001704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2200      	movs	r2, #0
 800170c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2200      	movs	r2, #0
 8001714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e022      	b.n	8001762 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800171c:	f7ff f82c 	bl	8000778 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	68ba      	ldr	r2, [r7, #8]
 8001728:	429a      	cmp	r2, r3
 800172a:	d302      	bcc.n	8001732 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d10f      	bne.n	8001752 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001736:	f043 0220 	orr.w	r2, r3, #32
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	2220      	movs	r2, #32
 8001742:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	2200      	movs	r2, #0
 800174a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e007      	b.n	8001762 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	f003 0304 	and.w	r3, r3, #4
 800175c:	2b04      	cmp	r3, #4
 800175e:	d1a2      	bne.n	80016a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	fe00e800 	.word	0xfe00e800

08001770 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	699b      	ldr	r3, [r3, #24]
 8001782:	f003 0310 	and.w	r3, r3, #16
 8001786:	2b10      	cmp	r3, #16
 8001788:	d151      	bne.n	800182e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800178a:	e022      	b.n	80017d2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001792:	d01e      	beq.n	80017d2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001794:	f7fe fff0 	bl	8000778 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	68ba      	ldr	r2, [r7, #8]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d302      	bcc.n	80017aa <I2C_IsAcknowledgeFailed+0x3a>
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d113      	bne.n	80017d2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ae:	f043 0220 	orr.w	r2, r3, #32
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	2220      	movs	r2, #32
 80017ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2200      	movs	r2, #0
 80017c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2200      	movs	r2, #0
 80017ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e02e      	b.n	8001830 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	f003 0320 	and.w	r3, r3, #32
 80017dc:	2b20      	cmp	r3, #32
 80017de:	d1d5      	bne.n	800178c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2210      	movs	r2, #16
 80017e6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2220      	movs	r2, #32
 80017ee:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80017f0:	68f8      	ldr	r0, [r7, #12]
 80017f2:	f7ff fe71 	bl	80014d8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	6859      	ldr	r1, [r3, #4]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	4b0d      	ldr	r3, [pc, #52]	; (8001838 <I2C_IsAcknowledgeFailed+0xc8>)
 8001802:	400b      	ands	r3, r1
 8001804:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180a:	f043 0204 	orr.w	r2, r3, #4
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	2220      	movs	r2, #32
 8001816:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2200      	movs	r2, #0
 800181e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2200      	movs	r2, #0
 8001826:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e000      	b.n	8001830 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800182e:	2300      	movs	r3, #0
}
 8001830:	4618      	mov	r0, r3
 8001832:	3710      	adds	r7, #16
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	fe00e800 	.word	0xfe00e800

0800183c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800183c:	b480      	push	{r7}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	607b      	str	r3, [r7, #4]
 8001846:	460b      	mov	r3, r1
 8001848:	817b      	strh	r3, [r7, #10]
 800184a:	4613      	mov	r3, r2
 800184c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	685a      	ldr	r2, [r3, #4]
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	0d5b      	lsrs	r3, r3, #21
 8001858:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800185c:	4b0d      	ldr	r3, [pc, #52]	; (8001894 <I2C_TransferConfig+0x58>)
 800185e:	430b      	orrs	r3, r1
 8001860:	43db      	mvns	r3, r3
 8001862:	ea02 0103 	and.w	r1, r2, r3
 8001866:	897b      	ldrh	r3, [r7, #10]
 8001868:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800186c:	7a7b      	ldrb	r3, [r7, #9]
 800186e:	041b      	lsls	r3, r3, #16
 8001870:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001874:	431a      	orrs	r2, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	431a      	orrs	r2, r3
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	431a      	orrs	r2, r3
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	430a      	orrs	r2, r1
 8001884:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001886:	bf00      	nop
 8001888:	3714      	adds	r7, #20
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	03ff63ff 	.word	0x03ff63ff

08001898 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	2b20      	cmp	r3, #32
 80018ac:	d138      	bne.n	8001920 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d101      	bne.n	80018bc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80018b8:	2302      	movs	r3, #2
 80018ba:	e032      	b.n	8001922 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2201      	movs	r2, #1
 80018c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2224      	movs	r2, #36	; 0x24
 80018c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f022 0201 	bic.w	r2, r2, #1
 80018da:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80018ea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	6819      	ldr	r1, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	683a      	ldr	r2, [r7, #0]
 80018f8:	430a      	orrs	r2, r1
 80018fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f042 0201 	orr.w	r2, r2, #1
 800190a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2220      	movs	r2, #32
 8001910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800191c:	2300      	movs	r3, #0
 800191e:	e000      	b.n	8001922 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001920:	2302      	movs	r3, #2
  }
}
 8001922:	4618      	mov	r0, r3
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr

0800192e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800192e:	b480      	push	{r7}
 8001930:	b085      	sub	sp, #20
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
 8001936:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800193e:	b2db      	uxtb	r3, r3
 8001940:	2b20      	cmp	r3, #32
 8001942:	d139      	bne.n	80019b8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800194a:	2b01      	cmp	r3, #1
 800194c:	d101      	bne.n	8001952 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800194e:	2302      	movs	r3, #2
 8001950:	e033      	b.n	80019ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2201      	movs	r2, #1
 8001956:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2224      	movs	r2, #36	; 0x24
 800195e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f022 0201 	bic.w	r2, r2, #1
 8001970:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001980:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	021b      	lsls	r3, r3, #8
 8001986:	68fa      	ldr	r2, [r7, #12]
 8001988:	4313      	orrs	r3, r2
 800198a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	68fa      	ldr	r2, [r7, #12]
 8001992:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f042 0201 	orr.w	r2, r2, #1
 80019a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2220      	movs	r2, #32
 80019a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80019b4:	2300      	movs	r3, #0
 80019b6:	e000      	b.n	80019ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80019b8:	2302      	movs	r3, #2
  }
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3714      	adds	r7, #20
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
	...

080019c8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80019cc:	4b04      	ldr	r3, [pc, #16]	; (80019e0 <HAL_PWREx_GetVoltageRange+0x18>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	40007000 	.word	0x40007000

080019e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019f2:	d130      	bne.n	8001a56 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80019f4:	4b23      	ldr	r3, [pc, #140]	; (8001a84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a00:	d038      	beq.n	8001a74 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a02:	4b20      	ldr	r3, [pc, #128]	; (8001a84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a0a:	4a1e      	ldr	r2, [pc, #120]	; (8001a84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a10:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a12:	4b1d      	ldr	r3, [pc, #116]	; (8001a88 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2232      	movs	r2, #50	; 0x32
 8001a18:	fb02 f303 	mul.w	r3, r2, r3
 8001a1c:	4a1b      	ldr	r2, [pc, #108]	; (8001a8c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a22:	0c9b      	lsrs	r3, r3, #18
 8001a24:	3301      	adds	r3, #1
 8001a26:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a28:	e002      	b.n	8001a30 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	3b01      	subs	r3, #1
 8001a2e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a30:	4b14      	ldr	r3, [pc, #80]	; (8001a84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a32:	695b      	ldr	r3, [r3, #20]
 8001a34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a3c:	d102      	bne.n	8001a44 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d1f2      	bne.n	8001a2a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a44:	4b0f      	ldr	r3, [pc, #60]	; (8001a84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a46:	695b      	ldr	r3, [r3, #20]
 8001a48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a50:	d110      	bne.n	8001a74 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e00f      	b.n	8001a76 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a56:	4b0b      	ldr	r3, [pc, #44]	; (8001a84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a62:	d007      	beq.n	8001a74 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a64:	4b07      	ldr	r3, [pc, #28]	; (8001a84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a6c:	4a05      	ldr	r2, [pc, #20]	; (8001a84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a72:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3714      	adds	r7, #20
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	40007000 	.word	0x40007000
 8001a88:	20000000 	.word	0x20000000
 8001a8c:	431bde83 	.word	0x431bde83

08001a90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b088      	sub	sp, #32
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d102      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	f000 bc11 	b.w	80022c6 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001aa4:	4ba0      	ldr	r3, [pc, #640]	; (8001d28 <HAL_RCC_OscConfig+0x298>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f003 030c 	and.w	r3, r3, #12
 8001aac:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001aae:	4b9e      	ldr	r3, [pc, #632]	; (8001d28 <HAL_RCC_OscConfig+0x298>)
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	f003 0303 	and.w	r3, r3, #3
 8001ab6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0310 	and.w	r3, r3, #16
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	f000 80e4 	beq.w	8001c8e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d007      	beq.n	8001adc <HAL_RCC_OscConfig+0x4c>
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	2b0c      	cmp	r3, #12
 8001ad0:	f040 808b 	bne.w	8001bea <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	f040 8087 	bne.w	8001bea <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001adc:	4b92      	ldr	r3, [pc, #584]	; (8001d28 <HAL_RCC_OscConfig+0x298>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0302 	and.w	r3, r3, #2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d005      	beq.n	8001af4 <HAL_RCC_OscConfig+0x64>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d101      	bne.n	8001af4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e3e8      	b.n	80022c6 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a1a      	ldr	r2, [r3, #32]
 8001af8:	4b8b      	ldr	r3, [pc, #556]	; (8001d28 <HAL_RCC_OscConfig+0x298>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0308 	and.w	r3, r3, #8
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d004      	beq.n	8001b0e <HAL_RCC_OscConfig+0x7e>
 8001b04:	4b88      	ldr	r3, [pc, #544]	; (8001d28 <HAL_RCC_OscConfig+0x298>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b0c:	e005      	b.n	8001b1a <HAL_RCC_OscConfig+0x8a>
 8001b0e:	4b86      	ldr	r3, [pc, #536]	; (8001d28 <HAL_RCC_OscConfig+0x298>)
 8001b10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b14:	091b      	lsrs	r3, r3, #4
 8001b16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d223      	bcs.n	8001b66 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a1b      	ldr	r3, [r3, #32]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f000 fd42 	bl	80025ac <RCC_SetFlashLatencyFromMSIRange>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e3c9      	b.n	80022c6 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b32:	4b7d      	ldr	r3, [pc, #500]	; (8001d28 <HAL_RCC_OscConfig+0x298>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a7c      	ldr	r2, [pc, #496]	; (8001d28 <HAL_RCC_OscConfig+0x298>)
 8001b38:	f043 0308 	orr.w	r3, r3, #8
 8001b3c:	6013      	str	r3, [r2, #0]
 8001b3e:	4b7a      	ldr	r3, [pc, #488]	; (8001d28 <HAL_RCC_OscConfig+0x298>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a1b      	ldr	r3, [r3, #32]
 8001b4a:	4977      	ldr	r1, [pc, #476]	; (8001d28 <HAL_RCC_OscConfig+0x298>)
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b50:	4b75      	ldr	r3, [pc, #468]	; (8001d28 <HAL_RCC_OscConfig+0x298>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	69db      	ldr	r3, [r3, #28]
 8001b5c:	021b      	lsls	r3, r3, #8
 8001b5e:	4972      	ldr	r1, [pc, #456]	; (8001d28 <HAL_RCC_OscConfig+0x298>)
 8001b60:	4313      	orrs	r3, r2
 8001b62:	604b      	str	r3, [r1, #4]
 8001b64:	e025      	b.n	8001bb2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b66:	4b70      	ldr	r3, [pc, #448]	; (8001d28 <HAL_RCC_OscConfig+0x298>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a6f      	ldr	r2, [pc, #444]	; (8001d28 <HAL_RCC_OscConfig+0x298>)
 8001b6c:	f043 0308 	orr.w	r3, r3, #8
 8001b70:	6013      	str	r3, [r2, #0]
 8001b72:	4b6d      	ldr	r3, [pc, #436]	; (8001d28 <HAL_RCC_OscConfig+0x298>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a1b      	ldr	r3, [r3, #32]
 8001b7e:	496a      	ldr	r1, [pc, #424]	; (8001d28 <HAL_RCC_OscConfig+0x298>)
 8001b80:	4313      	orrs	r3, r2
 8001b82:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b84:	4b68      	ldr	r3, [pc, #416]	; (8001d28 <HAL_RCC_OscConfig+0x298>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	69db      	ldr	r3, [r3, #28]
 8001b90:	021b      	lsls	r3, r3, #8
 8001b92:	4965      	ldr	r1, [pc, #404]	; (8001d28 <HAL_RCC_OscConfig+0x298>)
 8001b94:	4313      	orrs	r3, r2
 8001b96:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d109      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6a1b      	ldr	r3, [r3, #32]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f000 fd02 	bl	80025ac <RCC_SetFlashLatencyFromMSIRange>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e389      	b.n	80022c6 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bb2:	f000 fc6f 	bl	8002494 <HAL_RCC_GetSysClockFreq>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	4b5b      	ldr	r3, [pc, #364]	; (8001d28 <HAL_RCC_OscConfig+0x298>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	091b      	lsrs	r3, r3, #4
 8001bbe:	f003 030f 	and.w	r3, r3, #15
 8001bc2:	495a      	ldr	r1, [pc, #360]	; (8001d2c <HAL_RCC_OscConfig+0x29c>)
 8001bc4:	5ccb      	ldrb	r3, [r1, r3]
 8001bc6:	f003 031f 	and.w	r3, r3, #31
 8001bca:	fa22 f303 	lsr.w	r3, r2, r3
 8001bce:	4a58      	ldr	r2, [pc, #352]	; (8001d30 <HAL_RCC_OscConfig+0x2a0>)
 8001bd0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001bd2:	4b58      	ldr	r3, [pc, #352]	; (8001d34 <HAL_RCC_OscConfig+0x2a4>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7fe fd7e 	bl	80006d8 <HAL_InitTick>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001be0:	7bfb      	ldrb	r3, [r7, #15]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d052      	beq.n	8001c8c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001be6:	7bfb      	ldrb	r3, [r7, #15]
 8001be8:	e36d      	b.n	80022c6 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d032      	beq.n	8001c58 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001bf2:	4b4d      	ldr	r3, [pc, #308]	; (8001d28 <HAL_RCC_OscConfig+0x298>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a4c      	ldr	r2, [pc, #304]	; (8001d28 <HAL_RCC_OscConfig+0x298>)
 8001bf8:	f043 0301 	orr.w	r3, r3, #1
 8001bfc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001bfe:	f7fe fdbb 	bl	8000778 <HAL_GetTick>
 8001c02:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c04:	e008      	b.n	8001c18 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c06:	f7fe fdb7 	bl	8000778 <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e356      	b.n	80022c6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c18:	4b43      	ldr	r3, [pc, #268]	; (8001d28 <HAL_RCC_OscConfig+0x298>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d0f0      	beq.n	8001c06 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c24:	4b40      	ldr	r3, [pc, #256]	; (8001d28 <HAL_RCC_OscConfig+0x298>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a3f      	ldr	r2, [pc, #252]	; (8001d28 <HAL_RCC_OscConfig+0x298>)
 8001c2a:	f043 0308 	orr.w	r3, r3, #8
 8001c2e:	6013      	str	r3, [r2, #0]
 8001c30:	4b3d      	ldr	r3, [pc, #244]	; (8001d28 <HAL_RCC_OscConfig+0x298>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a1b      	ldr	r3, [r3, #32]
 8001c3c:	493a      	ldr	r1, [pc, #232]	; (8001d28 <HAL_RCC_OscConfig+0x298>)
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c42:	4b39      	ldr	r3, [pc, #228]	; (8001d28 <HAL_RCC_OscConfig+0x298>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	69db      	ldr	r3, [r3, #28]
 8001c4e:	021b      	lsls	r3, r3, #8
 8001c50:	4935      	ldr	r1, [pc, #212]	; (8001d28 <HAL_RCC_OscConfig+0x298>)
 8001c52:	4313      	orrs	r3, r2
 8001c54:	604b      	str	r3, [r1, #4]
 8001c56:	e01a      	b.n	8001c8e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c58:	4b33      	ldr	r3, [pc, #204]	; (8001d28 <HAL_RCC_OscConfig+0x298>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a32      	ldr	r2, [pc, #200]	; (8001d28 <HAL_RCC_OscConfig+0x298>)
 8001c5e:	f023 0301 	bic.w	r3, r3, #1
 8001c62:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c64:	f7fe fd88 	bl	8000778 <HAL_GetTick>
 8001c68:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c6c:	f7fe fd84 	bl	8000778 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e323      	b.n	80022c6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c7e:	4b2a      	ldr	r3, [pc, #168]	; (8001d28 <HAL_RCC_OscConfig+0x298>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d1f0      	bne.n	8001c6c <HAL_RCC_OscConfig+0x1dc>
 8001c8a:	e000      	b.n	8001c8e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c8c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d073      	beq.n	8001d82 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	2b08      	cmp	r3, #8
 8001c9e:	d005      	beq.n	8001cac <HAL_RCC_OscConfig+0x21c>
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	2b0c      	cmp	r3, #12
 8001ca4:	d10e      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	2b03      	cmp	r3, #3
 8001caa:	d10b      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cac:	4b1e      	ldr	r3, [pc, #120]	; (8001d28 <HAL_RCC_OscConfig+0x298>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d063      	beq.n	8001d80 <HAL_RCC_OscConfig+0x2f0>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d15f      	bne.n	8001d80 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e300      	b.n	80022c6 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ccc:	d106      	bne.n	8001cdc <HAL_RCC_OscConfig+0x24c>
 8001cce:	4b16      	ldr	r3, [pc, #88]	; (8001d28 <HAL_RCC_OscConfig+0x298>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a15      	ldr	r2, [pc, #84]	; (8001d28 <HAL_RCC_OscConfig+0x298>)
 8001cd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cd8:	6013      	str	r3, [r2, #0]
 8001cda:	e01d      	b.n	8001d18 <HAL_RCC_OscConfig+0x288>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ce4:	d10c      	bne.n	8001d00 <HAL_RCC_OscConfig+0x270>
 8001ce6:	4b10      	ldr	r3, [pc, #64]	; (8001d28 <HAL_RCC_OscConfig+0x298>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a0f      	ldr	r2, [pc, #60]	; (8001d28 <HAL_RCC_OscConfig+0x298>)
 8001cec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cf0:	6013      	str	r3, [r2, #0]
 8001cf2:	4b0d      	ldr	r3, [pc, #52]	; (8001d28 <HAL_RCC_OscConfig+0x298>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a0c      	ldr	r2, [pc, #48]	; (8001d28 <HAL_RCC_OscConfig+0x298>)
 8001cf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cfc:	6013      	str	r3, [r2, #0]
 8001cfe:	e00b      	b.n	8001d18 <HAL_RCC_OscConfig+0x288>
 8001d00:	4b09      	ldr	r3, [pc, #36]	; (8001d28 <HAL_RCC_OscConfig+0x298>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a08      	ldr	r2, [pc, #32]	; (8001d28 <HAL_RCC_OscConfig+0x298>)
 8001d06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d0a:	6013      	str	r3, [r2, #0]
 8001d0c:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <HAL_RCC_OscConfig+0x298>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a05      	ldr	r2, [pc, #20]	; (8001d28 <HAL_RCC_OscConfig+0x298>)
 8001d12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d01b      	beq.n	8001d58 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d20:	f7fe fd2a 	bl	8000778 <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d26:	e010      	b.n	8001d4a <HAL_RCC_OscConfig+0x2ba>
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	08005c2c 	.word	0x08005c2c
 8001d30:	20000000 	.word	0x20000000
 8001d34:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d38:	f7fe fd1e 	bl	8000778 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b64      	cmp	r3, #100	; 0x64
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e2bd      	b.n	80022c6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d4a:	4baf      	ldr	r3, [pc, #700]	; (8002008 <HAL_RCC_OscConfig+0x578>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d0f0      	beq.n	8001d38 <HAL_RCC_OscConfig+0x2a8>
 8001d56:	e014      	b.n	8001d82 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d58:	f7fe fd0e 	bl	8000778 <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d5e:	e008      	b.n	8001d72 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d60:	f7fe fd0a 	bl	8000778 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b64      	cmp	r3, #100	; 0x64
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e2a9      	b.n	80022c6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d72:	4ba5      	ldr	r3, [pc, #660]	; (8002008 <HAL_RCC_OscConfig+0x578>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d1f0      	bne.n	8001d60 <HAL_RCC_OscConfig+0x2d0>
 8001d7e:	e000      	b.n	8001d82 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d060      	beq.n	8001e50 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	2b04      	cmp	r3, #4
 8001d92:	d005      	beq.n	8001da0 <HAL_RCC_OscConfig+0x310>
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	2b0c      	cmp	r3, #12
 8001d98:	d119      	bne.n	8001dce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d116      	bne.n	8001dce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001da0:	4b99      	ldr	r3, [pc, #612]	; (8002008 <HAL_RCC_OscConfig+0x578>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d005      	beq.n	8001db8 <HAL_RCC_OscConfig+0x328>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d101      	bne.n	8001db8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e286      	b.n	80022c6 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db8:	4b93      	ldr	r3, [pc, #588]	; (8002008 <HAL_RCC_OscConfig+0x578>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	061b      	lsls	r3, r3, #24
 8001dc6:	4990      	ldr	r1, [pc, #576]	; (8002008 <HAL_RCC_OscConfig+0x578>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dcc:	e040      	b.n	8001e50 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d023      	beq.n	8001e1e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dd6:	4b8c      	ldr	r3, [pc, #560]	; (8002008 <HAL_RCC_OscConfig+0x578>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a8b      	ldr	r2, [pc, #556]	; (8002008 <HAL_RCC_OscConfig+0x578>)
 8001ddc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001de0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de2:	f7fe fcc9 	bl	8000778 <HAL_GetTick>
 8001de6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001de8:	e008      	b.n	8001dfc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dea:	f7fe fcc5 	bl	8000778 <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d901      	bls.n	8001dfc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e264      	b.n	80022c6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dfc:	4b82      	ldr	r3, [pc, #520]	; (8002008 <HAL_RCC_OscConfig+0x578>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d0f0      	beq.n	8001dea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e08:	4b7f      	ldr	r3, [pc, #508]	; (8002008 <HAL_RCC_OscConfig+0x578>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	691b      	ldr	r3, [r3, #16]
 8001e14:	061b      	lsls	r3, r3, #24
 8001e16:	497c      	ldr	r1, [pc, #496]	; (8002008 <HAL_RCC_OscConfig+0x578>)
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	604b      	str	r3, [r1, #4]
 8001e1c:	e018      	b.n	8001e50 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e1e:	4b7a      	ldr	r3, [pc, #488]	; (8002008 <HAL_RCC_OscConfig+0x578>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a79      	ldr	r2, [pc, #484]	; (8002008 <HAL_RCC_OscConfig+0x578>)
 8001e24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2a:	f7fe fca5 	bl	8000778 <HAL_GetTick>
 8001e2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e30:	e008      	b.n	8001e44 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e32:	f7fe fca1 	bl	8000778 <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d901      	bls.n	8001e44 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e240      	b.n	80022c6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e44:	4b70      	ldr	r3, [pc, #448]	; (8002008 <HAL_RCC_OscConfig+0x578>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d1f0      	bne.n	8001e32 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0308 	and.w	r3, r3, #8
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d03c      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	695b      	ldr	r3, [r3, #20]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d01c      	beq.n	8001e9e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e64:	4b68      	ldr	r3, [pc, #416]	; (8002008 <HAL_RCC_OscConfig+0x578>)
 8001e66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e6a:	4a67      	ldr	r2, [pc, #412]	; (8002008 <HAL_RCC_OscConfig+0x578>)
 8001e6c:	f043 0301 	orr.w	r3, r3, #1
 8001e70:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e74:	f7fe fc80 	bl	8000778 <HAL_GetTick>
 8001e78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e7c:	f7fe fc7c 	bl	8000778 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e21b      	b.n	80022c6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e8e:	4b5e      	ldr	r3, [pc, #376]	; (8002008 <HAL_RCC_OscConfig+0x578>)
 8001e90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e94:	f003 0302 	and.w	r3, r3, #2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d0ef      	beq.n	8001e7c <HAL_RCC_OscConfig+0x3ec>
 8001e9c:	e01b      	b.n	8001ed6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e9e:	4b5a      	ldr	r3, [pc, #360]	; (8002008 <HAL_RCC_OscConfig+0x578>)
 8001ea0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ea4:	4a58      	ldr	r2, [pc, #352]	; (8002008 <HAL_RCC_OscConfig+0x578>)
 8001ea6:	f023 0301 	bic.w	r3, r3, #1
 8001eaa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eae:	f7fe fc63 	bl	8000778 <HAL_GetTick>
 8001eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001eb4:	e008      	b.n	8001ec8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eb6:	f7fe fc5f 	bl	8000778 <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d901      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e1fe      	b.n	80022c6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ec8:	4b4f      	ldr	r3, [pc, #316]	; (8002008 <HAL_RCC_OscConfig+0x578>)
 8001eca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1ef      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0304 	and.w	r3, r3, #4
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f000 80a6 	beq.w	8002030 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ee8:	4b47      	ldr	r3, [pc, #284]	; (8002008 <HAL_RCC_OscConfig+0x578>)
 8001eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d10d      	bne.n	8001f10 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ef4:	4b44      	ldr	r3, [pc, #272]	; (8002008 <HAL_RCC_OscConfig+0x578>)
 8001ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef8:	4a43      	ldr	r2, [pc, #268]	; (8002008 <HAL_RCC_OscConfig+0x578>)
 8001efa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001efe:	6593      	str	r3, [r2, #88]	; 0x58
 8001f00:	4b41      	ldr	r3, [pc, #260]	; (8002008 <HAL_RCC_OscConfig+0x578>)
 8001f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f08:	60bb      	str	r3, [r7, #8]
 8001f0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f10:	4b3e      	ldr	r3, [pc, #248]	; (800200c <HAL_RCC_OscConfig+0x57c>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d118      	bne.n	8001f4e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f1c:	4b3b      	ldr	r3, [pc, #236]	; (800200c <HAL_RCC_OscConfig+0x57c>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a3a      	ldr	r2, [pc, #232]	; (800200c <HAL_RCC_OscConfig+0x57c>)
 8001f22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f26:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f28:	f7fe fc26 	bl	8000778 <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f30:	f7fe fc22 	bl	8000778 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e1c1      	b.n	80022c6 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f42:	4b32      	ldr	r3, [pc, #200]	; (800200c <HAL_RCC_OscConfig+0x57c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d0f0      	beq.n	8001f30 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d108      	bne.n	8001f68 <HAL_RCC_OscConfig+0x4d8>
 8001f56:	4b2c      	ldr	r3, [pc, #176]	; (8002008 <HAL_RCC_OscConfig+0x578>)
 8001f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f5c:	4a2a      	ldr	r2, [pc, #168]	; (8002008 <HAL_RCC_OscConfig+0x578>)
 8001f5e:	f043 0301 	orr.w	r3, r3, #1
 8001f62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f66:	e024      	b.n	8001fb2 <HAL_RCC_OscConfig+0x522>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	2b05      	cmp	r3, #5
 8001f6e:	d110      	bne.n	8001f92 <HAL_RCC_OscConfig+0x502>
 8001f70:	4b25      	ldr	r3, [pc, #148]	; (8002008 <HAL_RCC_OscConfig+0x578>)
 8001f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f76:	4a24      	ldr	r2, [pc, #144]	; (8002008 <HAL_RCC_OscConfig+0x578>)
 8001f78:	f043 0304 	orr.w	r3, r3, #4
 8001f7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f80:	4b21      	ldr	r3, [pc, #132]	; (8002008 <HAL_RCC_OscConfig+0x578>)
 8001f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f86:	4a20      	ldr	r2, [pc, #128]	; (8002008 <HAL_RCC_OscConfig+0x578>)
 8001f88:	f043 0301 	orr.w	r3, r3, #1
 8001f8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f90:	e00f      	b.n	8001fb2 <HAL_RCC_OscConfig+0x522>
 8001f92:	4b1d      	ldr	r3, [pc, #116]	; (8002008 <HAL_RCC_OscConfig+0x578>)
 8001f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f98:	4a1b      	ldr	r2, [pc, #108]	; (8002008 <HAL_RCC_OscConfig+0x578>)
 8001f9a:	f023 0301 	bic.w	r3, r3, #1
 8001f9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fa2:	4b19      	ldr	r3, [pc, #100]	; (8002008 <HAL_RCC_OscConfig+0x578>)
 8001fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fa8:	4a17      	ldr	r2, [pc, #92]	; (8002008 <HAL_RCC_OscConfig+0x578>)
 8001faa:	f023 0304 	bic.w	r3, r3, #4
 8001fae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d016      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fba:	f7fe fbdd 	bl	8000778 <HAL_GetTick>
 8001fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fc0:	e00a      	b.n	8001fd8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fc2:	f7fe fbd9 	bl	8000778 <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e176      	b.n	80022c6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fd8:	4b0b      	ldr	r3, [pc, #44]	; (8002008 <HAL_RCC_OscConfig+0x578>)
 8001fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d0ed      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x532>
 8001fe6:	e01a      	b.n	800201e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fe8:	f7fe fbc6 	bl	8000778 <HAL_GetTick>
 8001fec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fee:	e00f      	b.n	8002010 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ff0:	f7fe fbc2 	bl	8000778 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d906      	bls.n	8002010 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e15f      	b.n	80022c6 <HAL_RCC_OscConfig+0x836>
 8002006:	bf00      	nop
 8002008:	40021000 	.word	0x40021000
 800200c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002010:	4baa      	ldr	r3, [pc, #680]	; (80022bc <HAL_RCC_OscConfig+0x82c>)
 8002012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1e8      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800201e:	7ffb      	ldrb	r3, [r7, #31]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d105      	bne.n	8002030 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002024:	4ba5      	ldr	r3, [pc, #660]	; (80022bc <HAL_RCC_OscConfig+0x82c>)
 8002026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002028:	4aa4      	ldr	r2, [pc, #656]	; (80022bc <HAL_RCC_OscConfig+0x82c>)
 800202a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800202e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0320 	and.w	r3, r3, #32
 8002038:	2b00      	cmp	r3, #0
 800203a:	d03c      	beq.n	80020b6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002040:	2b00      	cmp	r3, #0
 8002042:	d01c      	beq.n	800207e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002044:	4b9d      	ldr	r3, [pc, #628]	; (80022bc <HAL_RCC_OscConfig+0x82c>)
 8002046:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800204a:	4a9c      	ldr	r2, [pc, #624]	; (80022bc <HAL_RCC_OscConfig+0x82c>)
 800204c:	f043 0301 	orr.w	r3, r3, #1
 8002050:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002054:	f7fe fb90 	bl	8000778 <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800205c:	f7fe fb8c 	bl	8000778 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e12b      	b.n	80022c6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800206e:	4b93      	ldr	r3, [pc, #588]	; (80022bc <HAL_RCC_OscConfig+0x82c>)
 8002070:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d0ef      	beq.n	800205c <HAL_RCC_OscConfig+0x5cc>
 800207c:	e01b      	b.n	80020b6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800207e:	4b8f      	ldr	r3, [pc, #572]	; (80022bc <HAL_RCC_OscConfig+0x82c>)
 8002080:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002084:	4a8d      	ldr	r2, [pc, #564]	; (80022bc <HAL_RCC_OscConfig+0x82c>)
 8002086:	f023 0301 	bic.w	r3, r3, #1
 800208a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800208e:	f7fe fb73 	bl	8000778 <HAL_GetTick>
 8002092:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002094:	e008      	b.n	80020a8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002096:	f7fe fb6f 	bl	8000778 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e10e      	b.n	80022c6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80020a8:	4b84      	ldr	r3, [pc, #528]	; (80022bc <HAL_RCC_OscConfig+0x82c>)
 80020aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1ef      	bne.n	8002096 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f000 8102 	beq.w	80022c4 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	f040 80c5 	bne.w	8002254 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80020ca:	4b7c      	ldr	r3, [pc, #496]	; (80022bc <HAL_RCC_OscConfig+0x82c>)
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	f003 0203 	and.w	r2, r3, #3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020da:	429a      	cmp	r2, r3
 80020dc:	d12c      	bne.n	8002138 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e8:	3b01      	subs	r3, #1
 80020ea:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d123      	bne.n	8002138 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020fa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d11b      	bne.n	8002138 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800210a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800210c:	429a      	cmp	r2, r3
 800210e:	d113      	bne.n	8002138 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800211a:	085b      	lsrs	r3, r3, #1
 800211c:	3b01      	subs	r3, #1
 800211e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002120:	429a      	cmp	r2, r3
 8002122:	d109      	bne.n	8002138 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	085b      	lsrs	r3, r3, #1
 8002130:	3b01      	subs	r3, #1
 8002132:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002134:	429a      	cmp	r2, r3
 8002136:	d067      	beq.n	8002208 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	2b0c      	cmp	r3, #12
 800213c:	d062      	beq.n	8002204 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800213e:	4b5f      	ldr	r3, [pc, #380]	; (80022bc <HAL_RCC_OscConfig+0x82c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e0bb      	b.n	80022c6 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800214e:	4b5b      	ldr	r3, [pc, #364]	; (80022bc <HAL_RCC_OscConfig+0x82c>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a5a      	ldr	r2, [pc, #360]	; (80022bc <HAL_RCC_OscConfig+0x82c>)
 8002154:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002158:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800215a:	f7fe fb0d 	bl	8000778 <HAL_GetTick>
 800215e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002160:	e008      	b.n	8002174 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002162:	f7fe fb09 	bl	8000778 <HAL_GetTick>
 8002166:	4602      	mov	r2, r0
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	2b02      	cmp	r3, #2
 800216e:	d901      	bls.n	8002174 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e0a8      	b.n	80022c6 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002174:	4b51      	ldr	r3, [pc, #324]	; (80022bc <HAL_RCC_OscConfig+0x82c>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d1f0      	bne.n	8002162 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002180:	4b4e      	ldr	r3, [pc, #312]	; (80022bc <HAL_RCC_OscConfig+0x82c>)
 8002182:	68da      	ldr	r2, [r3, #12]
 8002184:	4b4e      	ldr	r3, [pc, #312]	; (80022c0 <HAL_RCC_OscConfig+0x830>)
 8002186:	4013      	ands	r3, r2
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002190:	3a01      	subs	r2, #1
 8002192:	0112      	lsls	r2, r2, #4
 8002194:	4311      	orrs	r1, r2
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800219a:	0212      	lsls	r2, r2, #8
 800219c:	4311      	orrs	r1, r2
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80021a2:	0852      	lsrs	r2, r2, #1
 80021a4:	3a01      	subs	r2, #1
 80021a6:	0552      	lsls	r2, r2, #21
 80021a8:	4311      	orrs	r1, r2
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80021ae:	0852      	lsrs	r2, r2, #1
 80021b0:	3a01      	subs	r2, #1
 80021b2:	0652      	lsls	r2, r2, #25
 80021b4:	4311      	orrs	r1, r2
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80021ba:	06d2      	lsls	r2, r2, #27
 80021bc:	430a      	orrs	r2, r1
 80021be:	493f      	ldr	r1, [pc, #252]	; (80022bc <HAL_RCC_OscConfig+0x82c>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80021c4:	4b3d      	ldr	r3, [pc, #244]	; (80022bc <HAL_RCC_OscConfig+0x82c>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a3c      	ldr	r2, [pc, #240]	; (80022bc <HAL_RCC_OscConfig+0x82c>)
 80021ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021ce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021d0:	4b3a      	ldr	r3, [pc, #232]	; (80022bc <HAL_RCC_OscConfig+0x82c>)
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	4a39      	ldr	r2, [pc, #228]	; (80022bc <HAL_RCC_OscConfig+0x82c>)
 80021d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021da:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021dc:	f7fe facc 	bl	8000778 <HAL_GetTick>
 80021e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e4:	f7fe fac8 	bl	8000778 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e067      	b.n	80022c6 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021f6:	4b31      	ldr	r3, [pc, #196]	; (80022bc <HAL_RCC_OscConfig+0x82c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d0f0      	beq.n	80021e4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002202:	e05f      	b.n	80022c4 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e05e      	b.n	80022c6 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002208:	4b2c      	ldr	r3, [pc, #176]	; (80022bc <HAL_RCC_OscConfig+0x82c>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d157      	bne.n	80022c4 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002214:	4b29      	ldr	r3, [pc, #164]	; (80022bc <HAL_RCC_OscConfig+0x82c>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a28      	ldr	r2, [pc, #160]	; (80022bc <HAL_RCC_OscConfig+0x82c>)
 800221a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800221e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002220:	4b26      	ldr	r3, [pc, #152]	; (80022bc <HAL_RCC_OscConfig+0x82c>)
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	4a25      	ldr	r2, [pc, #148]	; (80022bc <HAL_RCC_OscConfig+0x82c>)
 8002226:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800222a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800222c:	f7fe faa4 	bl	8000778 <HAL_GetTick>
 8002230:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002232:	e008      	b.n	8002246 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002234:	f7fe faa0 	bl	8000778 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b02      	cmp	r3, #2
 8002240:	d901      	bls.n	8002246 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e03f      	b.n	80022c6 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002246:	4b1d      	ldr	r3, [pc, #116]	; (80022bc <HAL_RCC_OscConfig+0x82c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d0f0      	beq.n	8002234 <HAL_RCC_OscConfig+0x7a4>
 8002252:	e037      	b.n	80022c4 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	2b0c      	cmp	r3, #12
 8002258:	d02d      	beq.n	80022b6 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800225a:	4b18      	ldr	r3, [pc, #96]	; (80022bc <HAL_RCC_OscConfig+0x82c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a17      	ldr	r2, [pc, #92]	; (80022bc <HAL_RCC_OscConfig+0x82c>)
 8002260:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002264:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002266:	4b15      	ldr	r3, [pc, #84]	; (80022bc <HAL_RCC_OscConfig+0x82c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d105      	bne.n	800227e <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002272:	4b12      	ldr	r3, [pc, #72]	; (80022bc <HAL_RCC_OscConfig+0x82c>)
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	4a11      	ldr	r2, [pc, #68]	; (80022bc <HAL_RCC_OscConfig+0x82c>)
 8002278:	f023 0303 	bic.w	r3, r3, #3
 800227c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800227e:	4b0f      	ldr	r3, [pc, #60]	; (80022bc <HAL_RCC_OscConfig+0x82c>)
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	4a0e      	ldr	r2, [pc, #56]	; (80022bc <HAL_RCC_OscConfig+0x82c>)
 8002284:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002288:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800228c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800228e:	f7fe fa73 	bl	8000778 <HAL_GetTick>
 8002292:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002294:	e008      	b.n	80022a8 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002296:	f7fe fa6f 	bl	8000778 <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e00e      	b.n	80022c6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022a8:	4b04      	ldr	r3, [pc, #16]	; (80022bc <HAL_RCC_OscConfig+0x82c>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d1f0      	bne.n	8002296 <HAL_RCC_OscConfig+0x806>
 80022b4:	e006      	b.n	80022c4 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e005      	b.n	80022c6 <HAL_RCC_OscConfig+0x836>
 80022ba:	bf00      	nop
 80022bc:	40021000 	.word	0x40021000
 80022c0:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3720      	adds	r7, #32
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop

080022d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d101      	bne.n	80022e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e0c8      	b.n	8002476 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022e4:	4b66      	ldr	r3, [pc, #408]	; (8002480 <HAL_RCC_ClockConfig+0x1b0>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0307 	and.w	r3, r3, #7
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d910      	bls.n	8002314 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022f2:	4b63      	ldr	r3, [pc, #396]	; (8002480 <HAL_RCC_ClockConfig+0x1b0>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f023 0207 	bic.w	r2, r3, #7
 80022fa:	4961      	ldr	r1, [pc, #388]	; (8002480 <HAL_RCC_ClockConfig+0x1b0>)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	4313      	orrs	r3, r2
 8002300:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002302:	4b5f      	ldr	r3, [pc, #380]	; (8002480 <HAL_RCC_ClockConfig+0x1b0>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0307 	and.w	r3, r3, #7
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	429a      	cmp	r2, r3
 800230e:	d001      	beq.n	8002314 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e0b0      	b.n	8002476 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0301 	and.w	r3, r3, #1
 800231c:	2b00      	cmp	r3, #0
 800231e:	d04c      	beq.n	80023ba <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	2b03      	cmp	r3, #3
 8002326:	d107      	bne.n	8002338 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002328:	4b56      	ldr	r3, [pc, #344]	; (8002484 <HAL_RCC_ClockConfig+0x1b4>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d121      	bne.n	8002378 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e09e      	b.n	8002476 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	2b02      	cmp	r3, #2
 800233e:	d107      	bne.n	8002350 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002340:	4b50      	ldr	r3, [pc, #320]	; (8002484 <HAL_RCC_ClockConfig+0x1b4>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d115      	bne.n	8002378 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e092      	b.n	8002476 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d107      	bne.n	8002368 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002358:	4b4a      	ldr	r3, [pc, #296]	; (8002484 <HAL_RCC_ClockConfig+0x1b4>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0302 	and.w	r3, r3, #2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d109      	bne.n	8002378 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e086      	b.n	8002476 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002368:	4b46      	ldr	r3, [pc, #280]	; (8002484 <HAL_RCC_ClockConfig+0x1b4>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002370:	2b00      	cmp	r3, #0
 8002372:	d101      	bne.n	8002378 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e07e      	b.n	8002476 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002378:	4b42      	ldr	r3, [pc, #264]	; (8002484 <HAL_RCC_ClockConfig+0x1b4>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f023 0203 	bic.w	r2, r3, #3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	493f      	ldr	r1, [pc, #252]	; (8002484 <HAL_RCC_ClockConfig+0x1b4>)
 8002386:	4313      	orrs	r3, r2
 8002388:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800238a:	f7fe f9f5 	bl	8000778 <HAL_GetTick>
 800238e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002390:	e00a      	b.n	80023a8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002392:	f7fe f9f1 	bl	8000778 <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	f241 3288 	movw	r2, #5000	; 0x1388
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d901      	bls.n	80023a8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e066      	b.n	8002476 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023a8:	4b36      	ldr	r3, [pc, #216]	; (8002484 <HAL_RCC_ClockConfig+0x1b4>)
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f003 020c 	and.w	r2, r3, #12
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d1eb      	bne.n	8002392 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d008      	beq.n	80023d8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023c6:	4b2f      	ldr	r3, [pc, #188]	; (8002484 <HAL_RCC_ClockConfig+0x1b4>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	492c      	ldr	r1, [pc, #176]	; (8002484 <HAL_RCC_ClockConfig+0x1b4>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023d8:	4b29      	ldr	r3, [pc, #164]	; (8002480 <HAL_RCC_ClockConfig+0x1b0>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0307 	and.w	r3, r3, #7
 80023e0:	683a      	ldr	r2, [r7, #0]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d210      	bcs.n	8002408 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023e6:	4b26      	ldr	r3, [pc, #152]	; (8002480 <HAL_RCC_ClockConfig+0x1b0>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f023 0207 	bic.w	r2, r3, #7
 80023ee:	4924      	ldr	r1, [pc, #144]	; (8002480 <HAL_RCC_ClockConfig+0x1b0>)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023f6:	4b22      	ldr	r3, [pc, #136]	; (8002480 <HAL_RCC_ClockConfig+0x1b0>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0307 	and.w	r3, r3, #7
 80023fe:	683a      	ldr	r2, [r7, #0]
 8002400:	429a      	cmp	r2, r3
 8002402:	d001      	beq.n	8002408 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e036      	b.n	8002476 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0304 	and.w	r3, r3, #4
 8002410:	2b00      	cmp	r3, #0
 8002412:	d008      	beq.n	8002426 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002414:	4b1b      	ldr	r3, [pc, #108]	; (8002484 <HAL_RCC_ClockConfig+0x1b4>)
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	4918      	ldr	r1, [pc, #96]	; (8002484 <HAL_RCC_ClockConfig+0x1b4>)
 8002422:	4313      	orrs	r3, r2
 8002424:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0308 	and.w	r3, r3, #8
 800242e:	2b00      	cmp	r3, #0
 8002430:	d009      	beq.n	8002446 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002432:	4b14      	ldr	r3, [pc, #80]	; (8002484 <HAL_RCC_ClockConfig+0x1b4>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	4910      	ldr	r1, [pc, #64]	; (8002484 <HAL_RCC_ClockConfig+0x1b4>)
 8002442:	4313      	orrs	r3, r2
 8002444:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002446:	f000 f825 	bl	8002494 <HAL_RCC_GetSysClockFreq>
 800244a:	4602      	mov	r2, r0
 800244c:	4b0d      	ldr	r3, [pc, #52]	; (8002484 <HAL_RCC_ClockConfig+0x1b4>)
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	091b      	lsrs	r3, r3, #4
 8002452:	f003 030f 	and.w	r3, r3, #15
 8002456:	490c      	ldr	r1, [pc, #48]	; (8002488 <HAL_RCC_ClockConfig+0x1b8>)
 8002458:	5ccb      	ldrb	r3, [r1, r3]
 800245a:	f003 031f 	and.w	r3, r3, #31
 800245e:	fa22 f303 	lsr.w	r3, r2, r3
 8002462:	4a0a      	ldr	r2, [pc, #40]	; (800248c <HAL_RCC_ClockConfig+0x1bc>)
 8002464:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002466:	4b0a      	ldr	r3, [pc, #40]	; (8002490 <HAL_RCC_ClockConfig+0x1c0>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	f7fe f934 	bl	80006d8 <HAL_InitTick>
 8002470:	4603      	mov	r3, r0
 8002472:	72fb      	strb	r3, [r7, #11]

  return status;
 8002474:	7afb      	ldrb	r3, [r7, #11]
}
 8002476:	4618      	mov	r0, r3
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	40022000 	.word	0x40022000
 8002484:	40021000 	.word	0x40021000
 8002488:	08005c2c 	.word	0x08005c2c
 800248c:	20000000 	.word	0x20000000
 8002490:	20000004 	.word	0x20000004

08002494 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002494:	b480      	push	{r7}
 8002496:	b089      	sub	sp, #36	; 0x24
 8002498:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800249a:	2300      	movs	r3, #0
 800249c:	61fb      	str	r3, [r7, #28]
 800249e:	2300      	movs	r3, #0
 80024a0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024a2:	4b3e      	ldr	r3, [pc, #248]	; (800259c <HAL_RCC_GetSysClockFreq+0x108>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f003 030c 	and.w	r3, r3, #12
 80024aa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024ac:	4b3b      	ldr	r3, [pc, #236]	; (800259c <HAL_RCC_GetSysClockFreq+0x108>)
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	f003 0303 	and.w	r3, r3, #3
 80024b4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d005      	beq.n	80024c8 <HAL_RCC_GetSysClockFreq+0x34>
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	2b0c      	cmp	r3, #12
 80024c0:	d121      	bne.n	8002506 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d11e      	bne.n	8002506 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80024c8:	4b34      	ldr	r3, [pc, #208]	; (800259c <HAL_RCC_GetSysClockFreq+0x108>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0308 	and.w	r3, r3, #8
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d107      	bne.n	80024e4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80024d4:	4b31      	ldr	r3, [pc, #196]	; (800259c <HAL_RCC_GetSysClockFreq+0x108>)
 80024d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024da:	0a1b      	lsrs	r3, r3, #8
 80024dc:	f003 030f 	and.w	r3, r3, #15
 80024e0:	61fb      	str	r3, [r7, #28]
 80024e2:	e005      	b.n	80024f0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80024e4:	4b2d      	ldr	r3, [pc, #180]	; (800259c <HAL_RCC_GetSysClockFreq+0x108>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	091b      	lsrs	r3, r3, #4
 80024ea:	f003 030f 	and.w	r3, r3, #15
 80024ee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80024f0:	4a2b      	ldr	r2, [pc, #172]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x10c>)
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024f8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d10d      	bne.n	800251c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002504:	e00a      	b.n	800251c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	2b04      	cmp	r3, #4
 800250a:	d102      	bne.n	8002512 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800250c:	4b25      	ldr	r3, [pc, #148]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800250e:	61bb      	str	r3, [r7, #24]
 8002510:	e004      	b.n	800251c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	2b08      	cmp	r3, #8
 8002516:	d101      	bne.n	800251c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002518:	4b23      	ldr	r3, [pc, #140]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x114>)
 800251a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	2b0c      	cmp	r3, #12
 8002520:	d134      	bne.n	800258c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002522:	4b1e      	ldr	r3, [pc, #120]	; (800259c <HAL_RCC_GetSysClockFreq+0x108>)
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	f003 0303 	and.w	r3, r3, #3
 800252a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	2b02      	cmp	r3, #2
 8002530:	d003      	beq.n	800253a <HAL_RCC_GetSysClockFreq+0xa6>
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	2b03      	cmp	r3, #3
 8002536:	d003      	beq.n	8002540 <HAL_RCC_GetSysClockFreq+0xac>
 8002538:	e005      	b.n	8002546 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800253a:	4b1a      	ldr	r3, [pc, #104]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800253c:	617b      	str	r3, [r7, #20]
      break;
 800253e:	e005      	b.n	800254c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002540:	4b19      	ldr	r3, [pc, #100]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002542:	617b      	str	r3, [r7, #20]
      break;
 8002544:	e002      	b.n	800254c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	617b      	str	r3, [r7, #20]
      break;
 800254a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800254c:	4b13      	ldr	r3, [pc, #76]	; (800259c <HAL_RCC_GetSysClockFreq+0x108>)
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	091b      	lsrs	r3, r3, #4
 8002552:	f003 0307 	and.w	r3, r3, #7
 8002556:	3301      	adds	r3, #1
 8002558:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800255a:	4b10      	ldr	r3, [pc, #64]	; (800259c <HAL_RCC_GetSysClockFreq+0x108>)
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	0a1b      	lsrs	r3, r3, #8
 8002560:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002564:	697a      	ldr	r2, [r7, #20]
 8002566:	fb02 f203 	mul.w	r2, r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002570:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002572:	4b0a      	ldr	r3, [pc, #40]	; (800259c <HAL_RCC_GetSysClockFreq+0x108>)
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	0e5b      	lsrs	r3, r3, #25
 8002578:	f003 0303 	and.w	r3, r3, #3
 800257c:	3301      	adds	r3, #1
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002582:	697a      	ldr	r2, [r7, #20]
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	fbb2 f3f3 	udiv	r3, r2, r3
 800258a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800258c:	69bb      	ldr	r3, [r7, #24]
}
 800258e:	4618      	mov	r0, r3
 8002590:	3724      	adds	r7, #36	; 0x24
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	40021000 	.word	0x40021000
 80025a0:	08005c3c 	.word	0x08005c3c
 80025a4:	00f42400 	.word	0x00f42400
 80025a8:	01312d00 	.word	0x01312d00

080025ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80025b4:	2300      	movs	r3, #0
 80025b6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80025b8:	4b2a      	ldr	r3, [pc, #168]	; (8002664 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d003      	beq.n	80025cc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80025c4:	f7ff fa00 	bl	80019c8 <HAL_PWREx_GetVoltageRange>
 80025c8:	6178      	str	r0, [r7, #20]
 80025ca:	e014      	b.n	80025f6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80025cc:	4b25      	ldr	r3, [pc, #148]	; (8002664 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d0:	4a24      	ldr	r2, [pc, #144]	; (8002664 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025d6:	6593      	str	r3, [r2, #88]	; 0x58
 80025d8:	4b22      	ldr	r3, [pc, #136]	; (8002664 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e0:	60fb      	str	r3, [r7, #12]
 80025e2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80025e4:	f7ff f9f0 	bl	80019c8 <HAL_PWREx_GetVoltageRange>
 80025e8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80025ea:	4b1e      	ldr	r3, [pc, #120]	; (8002664 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ee:	4a1d      	ldr	r2, [pc, #116]	; (8002664 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025f4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025fc:	d10b      	bne.n	8002616 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2b80      	cmp	r3, #128	; 0x80
 8002602:	d919      	bls.n	8002638 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2ba0      	cmp	r3, #160	; 0xa0
 8002608:	d902      	bls.n	8002610 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800260a:	2302      	movs	r3, #2
 800260c:	613b      	str	r3, [r7, #16]
 800260e:	e013      	b.n	8002638 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002610:	2301      	movs	r3, #1
 8002612:	613b      	str	r3, [r7, #16]
 8002614:	e010      	b.n	8002638 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2b80      	cmp	r3, #128	; 0x80
 800261a:	d902      	bls.n	8002622 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800261c:	2303      	movs	r3, #3
 800261e:	613b      	str	r3, [r7, #16]
 8002620:	e00a      	b.n	8002638 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2b80      	cmp	r3, #128	; 0x80
 8002626:	d102      	bne.n	800262e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002628:	2302      	movs	r3, #2
 800262a:	613b      	str	r3, [r7, #16]
 800262c:	e004      	b.n	8002638 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2b70      	cmp	r3, #112	; 0x70
 8002632:	d101      	bne.n	8002638 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002634:	2301      	movs	r3, #1
 8002636:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002638:	4b0b      	ldr	r3, [pc, #44]	; (8002668 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f023 0207 	bic.w	r2, r3, #7
 8002640:	4909      	ldr	r1, [pc, #36]	; (8002668 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	4313      	orrs	r3, r2
 8002646:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002648:	4b07      	ldr	r3, [pc, #28]	; (8002668 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0307 	and.w	r3, r3, #7
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	429a      	cmp	r2, r3
 8002654:	d001      	beq.n	800265a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e000      	b.n	800265c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800265a:	2300      	movs	r3, #0
}
 800265c:	4618      	mov	r0, r3
 800265e:	3718      	adds	r7, #24
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	40021000 	.word	0x40021000
 8002668:	40022000 	.word	0x40022000

0800266c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002674:	2300      	movs	r3, #0
 8002676:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002678:	2300      	movs	r3, #0
 800267a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002684:	2b00      	cmp	r3, #0
 8002686:	d031      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800268c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002690:	d01a      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002692:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002696:	d814      	bhi.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002698:	2b00      	cmp	r3, #0
 800269a:	d009      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800269c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80026a0:	d10f      	bne.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80026a2:	4b5d      	ldr	r3, [pc, #372]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	4a5c      	ldr	r2, [pc, #368]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ac:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026ae:	e00c      	b.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	3304      	adds	r3, #4
 80026b4:	2100      	movs	r1, #0
 80026b6:	4618      	mov	r0, r3
 80026b8:	f000 fa12 	bl	8002ae0 <RCCEx_PLLSAI1_Config>
 80026bc:	4603      	mov	r3, r0
 80026be:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026c0:	e003      	b.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	74fb      	strb	r3, [r7, #19]
      break;
 80026c6:	e000      	b.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80026c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026ca:	7cfb      	ldrb	r3, [r7, #19]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d10b      	bne.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026d0:	4b51      	ldr	r3, [pc, #324]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026de:	494e      	ldr	r1, [pc, #312]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80026e6:	e001      	b.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026e8:	7cfb      	ldrb	r3, [r7, #19]
 80026ea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f000 809e 	beq.w	8002836 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026fa:	2300      	movs	r3, #0
 80026fc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80026fe:	4b46      	ldr	r3, [pc, #280]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800270a:	2301      	movs	r3, #1
 800270c:	e000      	b.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800270e:	2300      	movs	r3, #0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d00d      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002714:	4b40      	ldr	r3, [pc, #256]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002718:	4a3f      	ldr	r2, [pc, #252]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800271a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800271e:	6593      	str	r3, [r2, #88]	; 0x58
 8002720:	4b3d      	ldr	r3, [pc, #244]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002724:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002728:	60bb      	str	r3, [r7, #8]
 800272a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800272c:	2301      	movs	r3, #1
 800272e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002730:	4b3a      	ldr	r3, [pc, #232]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a39      	ldr	r2, [pc, #228]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002736:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800273a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800273c:	f7fe f81c 	bl	8000778 <HAL_GetTick>
 8002740:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002742:	e009      	b.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002744:	f7fe f818 	bl	8000778 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b02      	cmp	r3, #2
 8002750:	d902      	bls.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	74fb      	strb	r3, [r7, #19]
        break;
 8002756:	e005      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002758:	4b30      	ldr	r3, [pc, #192]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002760:	2b00      	cmp	r3, #0
 8002762:	d0ef      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002764:	7cfb      	ldrb	r3, [r7, #19]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d15a      	bne.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800276a:	4b2b      	ldr	r3, [pc, #172]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800276c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002770:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002774:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d01e      	beq.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002780:	697a      	ldr	r2, [r7, #20]
 8002782:	429a      	cmp	r2, r3
 8002784:	d019      	beq.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002786:	4b24      	ldr	r3, [pc, #144]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800278c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002790:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002792:	4b21      	ldr	r3, [pc, #132]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002798:	4a1f      	ldr	r2, [pc, #124]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800279a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800279e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027a2:	4b1d      	ldr	r3, [pc, #116]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027a8:	4a1b      	ldr	r2, [pc, #108]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80027b2:	4a19      	ldr	r2, [pc, #100]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	f003 0301 	and.w	r3, r3, #1
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d016      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c4:	f7fd ffd8 	bl	8000778 <HAL_GetTick>
 80027c8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027ca:	e00b      	b.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027cc:	f7fd ffd4 	bl	8000778 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027da:	4293      	cmp	r3, r2
 80027dc:	d902      	bls.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	74fb      	strb	r3, [r7, #19]
            break;
 80027e2:	e006      	b.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027e4:	4b0c      	ldr	r3, [pc, #48]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d0ec      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80027f2:	7cfb      	ldrb	r3, [r7, #19]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d10b      	bne.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027f8:	4b07      	ldr	r3, [pc, #28]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002806:	4904      	ldr	r1, [pc, #16]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002808:	4313      	orrs	r3, r2
 800280a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800280e:	e009      	b.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002810:	7cfb      	ldrb	r3, [r7, #19]
 8002812:	74bb      	strb	r3, [r7, #18]
 8002814:	e006      	b.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002816:	bf00      	nop
 8002818:	40021000 	.word	0x40021000
 800281c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002820:	7cfb      	ldrb	r3, [r7, #19]
 8002822:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002824:	7c7b      	ldrb	r3, [r7, #17]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d105      	bne.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800282a:	4bac      	ldr	r3, [pc, #688]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800282c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800282e:	4aab      	ldr	r2, [pc, #684]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002830:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002834:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00a      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002842:	4ba6      	ldr	r3, [pc, #664]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002848:	f023 0203 	bic.w	r2, r3, #3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a1b      	ldr	r3, [r3, #32]
 8002850:	49a2      	ldr	r1, [pc, #648]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002852:	4313      	orrs	r3, r2
 8002854:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d00a      	beq.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002864:	4b9d      	ldr	r3, [pc, #628]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800286a:	f023 020c 	bic.w	r2, r3, #12
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002872:	499a      	ldr	r1, [pc, #616]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002874:	4313      	orrs	r3, r2
 8002876:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0304 	and.w	r3, r3, #4
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00a      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002886:	4b95      	ldr	r3, [pc, #596]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800288c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002894:	4991      	ldr	r1, [pc, #580]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002896:	4313      	orrs	r3, r2
 8002898:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0308 	and.w	r3, r3, #8
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d00a      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80028a8:	4b8c      	ldr	r3, [pc, #560]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80028aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b6:	4989      	ldr	r1, [pc, #548]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0320 	and.w	r3, r3, #32
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00a      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028ca:	4b84      	ldr	r3, [pc, #528]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80028cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d8:	4980      	ldr	r1, [pc, #512]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d00a      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028ec:	4b7b      	ldr	r3, [pc, #492]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80028ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f2:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fa:	4978      	ldr	r1, [pc, #480]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800290a:	2b00      	cmp	r3, #0
 800290c:	d00a      	beq.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800290e:	4b73      	ldr	r3, [pc, #460]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002914:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800291c:	496f      	ldr	r1, [pc, #444]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800291e:	4313      	orrs	r3, r2
 8002920:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800292c:	2b00      	cmp	r3, #0
 800292e:	d00a      	beq.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002930:	4b6a      	ldr	r3, [pc, #424]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002936:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800293e:	4967      	ldr	r1, [pc, #412]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002940:	4313      	orrs	r3, r2
 8002942:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800294e:	2b00      	cmp	r3, #0
 8002950:	d00a      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002952:	4b62      	ldr	r3, [pc, #392]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002958:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002960:	495e      	ldr	r1, [pc, #376]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002962:	4313      	orrs	r3, r2
 8002964:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002970:	2b00      	cmp	r3, #0
 8002972:	d00a      	beq.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002974:	4b59      	ldr	r3, [pc, #356]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800297a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002982:	4956      	ldr	r1, [pc, #344]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002984:	4313      	orrs	r3, r2
 8002986:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00a      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002996:	4b51      	ldr	r3, [pc, #324]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002998:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800299c:	f023 0203 	bic.w	r2, r3, #3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a4:	494d      	ldr	r1, [pc, #308]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d028      	beq.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80029b8:	4b48      	ldr	r3, [pc, #288]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80029ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029c6:	4945      	ldr	r1, [pc, #276]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029d6:	d106      	bne.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029d8:	4b40      	ldr	r3, [pc, #256]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	4a3f      	ldr	r2, [pc, #252]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80029de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029e2:	60d3      	str	r3, [r2, #12]
 80029e4:	e011      	b.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029ee:	d10c      	bne.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	3304      	adds	r3, #4
 80029f4:	2101      	movs	r1, #1
 80029f6:	4618      	mov	r0, r3
 80029f8:	f000 f872 	bl	8002ae0 <RCCEx_PLLSAI1_Config>
 80029fc:	4603      	mov	r3, r0
 80029fe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a00:	7cfb      	ldrb	r3, [r7, #19]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* set overall return value */
        status = ret;
 8002a06:	7cfb      	ldrb	r3, [r7, #19]
 8002a08:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d028      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a16:	4b31      	ldr	r3, [pc, #196]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a1c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a24:	492d      	ldr	r1, [pc, #180]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a34:	d106      	bne.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a36:	4b29      	ldr	r3, [pc, #164]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	4a28      	ldr	r2, [pc, #160]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002a3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a40:	60d3      	str	r3, [r2, #12]
 8002a42:	e011      	b.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a48:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a4c:	d10c      	bne.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	3304      	adds	r3, #4
 8002a52:	2101      	movs	r1, #1
 8002a54:	4618      	mov	r0, r3
 8002a56:	f000 f843 	bl	8002ae0 <RCCEx_PLLSAI1_Config>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a5e:	7cfb      	ldrb	r3, [r7, #19]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d001      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8002a64:	7cfb      	ldrb	r3, [r7, #19]
 8002a66:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d01c      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a74:	4b19      	ldr	r3, [pc, #100]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a7a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a82:	4916      	ldr	r1, [pc, #88]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a92:	d10c      	bne.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	3304      	adds	r3, #4
 8002a98:	2102      	movs	r1, #2
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f000 f820 	bl	8002ae0 <RCCEx_PLLSAI1_Config>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002aa4:	7cfb      	ldrb	r3, [r7, #19]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x442>
      {
        /* set overall return value */
        status = ret;
 8002aaa:	7cfb      	ldrb	r3, [r7, #19]
 8002aac:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00a      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x464>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002aba:	4b08      	ldr	r3, [pc, #32]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac8:	4904      	ldr	r1, [pc, #16]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002ad0:	7cbb      	ldrb	r3, [r7, #18]
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3718      	adds	r7, #24
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	40021000 	.word	0x40021000

08002ae0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002aea:	2300      	movs	r3, #0
 8002aec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002aee:	4b74      	ldr	r3, [pc, #464]	; (8002cc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	f003 0303 	and.w	r3, r3, #3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d018      	beq.n	8002b2c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002afa:	4b71      	ldr	r3, [pc, #452]	; (8002cc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	f003 0203 	and.w	r2, r3, #3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d10d      	bne.n	8002b26 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
       ||
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d009      	beq.n	8002b26 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002b12:	4b6b      	ldr	r3, [pc, #428]	; (8002cc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	091b      	lsrs	r3, r3, #4
 8002b18:	f003 0307 	and.w	r3, r3, #7
 8002b1c:	1c5a      	adds	r2, r3, #1
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
       ||
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d047      	beq.n	8002bb6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	73fb      	strb	r3, [r7, #15]
 8002b2a:	e044      	b.n	8002bb6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2b03      	cmp	r3, #3
 8002b32:	d018      	beq.n	8002b66 <RCCEx_PLLSAI1_Config+0x86>
 8002b34:	2b03      	cmp	r3, #3
 8002b36:	d825      	bhi.n	8002b84 <RCCEx_PLLSAI1_Config+0xa4>
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d002      	beq.n	8002b42 <RCCEx_PLLSAI1_Config+0x62>
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d009      	beq.n	8002b54 <RCCEx_PLLSAI1_Config+0x74>
 8002b40:	e020      	b.n	8002b84 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b42:	4b5f      	ldr	r3, [pc, #380]	; (8002cc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d11d      	bne.n	8002b8a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b52:	e01a      	b.n	8002b8a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b54:	4b5a      	ldr	r3, [pc, #360]	; (8002cc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d116      	bne.n	8002b8e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b64:	e013      	b.n	8002b8e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b66:	4b56      	ldr	r3, [pc, #344]	; (8002cc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d10f      	bne.n	8002b92 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b72:	4b53      	ldr	r3, [pc, #332]	; (8002cc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d109      	bne.n	8002b92 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b82:	e006      	b.n	8002b92 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	73fb      	strb	r3, [r7, #15]
      break;
 8002b88:	e004      	b.n	8002b94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b8a:	bf00      	nop
 8002b8c:	e002      	b.n	8002b94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b8e:	bf00      	nop
 8002b90:	e000      	b.n	8002b94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b92:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b94:	7bfb      	ldrb	r3, [r7, #15]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d10d      	bne.n	8002bb6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b9a:	4b49      	ldr	r3, [pc, #292]	; (8002cc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6819      	ldr	r1, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	3b01      	subs	r3, #1
 8002bac:	011b      	lsls	r3, r3, #4
 8002bae:	430b      	orrs	r3, r1
 8002bb0:	4943      	ldr	r1, [pc, #268]	; (8002cc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002bb6:	7bfb      	ldrb	r3, [r7, #15]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d17c      	bne.n	8002cb6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002bbc:	4b40      	ldr	r3, [pc, #256]	; (8002cc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a3f      	ldr	r2, [pc, #252]	; (8002cc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bc2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002bc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bc8:	f7fd fdd6 	bl	8000778 <HAL_GetTick>
 8002bcc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002bce:	e009      	b.n	8002be4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002bd0:	f7fd fdd2 	bl	8000778 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d902      	bls.n	8002be4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	73fb      	strb	r3, [r7, #15]
        break;
 8002be2:	e005      	b.n	8002bf0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002be4:	4b36      	ldr	r3, [pc, #216]	; (8002cc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d1ef      	bne.n	8002bd0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002bf0:	7bfb      	ldrb	r3, [r7, #15]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d15f      	bne.n	8002cb6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d110      	bne.n	8002c1e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bfc:	4b30      	ldr	r3, [pc, #192]	; (8002cc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002c04:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	6892      	ldr	r2, [r2, #8]
 8002c0c:	0211      	lsls	r1, r2, #8
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	68d2      	ldr	r2, [r2, #12]
 8002c12:	06d2      	lsls	r2, r2, #27
 8002c14:	430a      	orrs	r2, r1
 8002c16:	492a      	ldr	r1, [pc, #168]	; (8002cc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	610b      	str	r3, [r1, #16]
 8002c1c:	e027      	b.n	8002c6e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d112      	bne.n	8002c4a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c24:	4b26      	ldr	r3, [pc, #152]	; (8002cc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002c2c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	6892      	ldr	r2, [r2, #8]
 8002c34:	0211      	lsls	r1, r2, #8
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	6912      	ldr	r2, [r2, #16]
 8002c3a:	0852      	lsrs	r2, r2, #1
 8002c3c:	3a01      	subs	r2, #1
 8002c3e:	0552      	lsls	r2, r2, #21
 8002c40:	430a      	orrs	r2, r1
 8002c42:	491f      	ldr	r1, [pc, #124]	; (8002cc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	610b      	str	r3, [r1, #16]
 8002c48:	e011      	b.n	8002c6e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c4a:	4b1d      	ldr	r3, [pc, #116]	; (8002cc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002c52:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	6892      	ldr	r2, [r2, #8]
 8002c5a:	0211      	lsls	r1, r2, #8
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	6952      	ldr	r2, [r2, #20]
 8002c60:	0852      	lsrs	r2, r2, #1
 8002c62:	3a01      	subs	r2, #1
 8002c64:	0652      	lsls	r2, r2, #25
 8002c66:	430a      	orrs	r2, r1
 8002c68:	4915      	ldr	r1, [pc, #84]	; (8002cc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002c6e:	4b14      	ldr	r3, [pc, #80]	; (8002cc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a13      	ldr	r2, [pc, #76]	; (8002cc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c74:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c78:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c7a:	f7fd fd7d 	bl	8000778 <HAL_GetTick>
 8002c7e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c80:	e009      	b.n	8002c96 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c82:	f7fd fd79 	bl	8000778 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d902      	bls.n	8002c96 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	73fb      	strb	r3, [r7, #15]
          break;
 8002c94:	e005      	b.n	8002ca2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c96:	4b0a      	ldr	r3, [pc, #40]	; (8002cc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d0ef      	beq.n	8002c82 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002ca2:	7bfb      	ldrb	r3, [r7, #15]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d106      	bne.n	8002cb6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002ca8:	4b05      	ldr	r3, [pc, #20]	; (8002cc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002caa:	691a      	ldr	r2, [r3, #16]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	4903      	ldr	r1, [pc, #12]	; (8002cc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3710      	adds	r7, #16
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	40021000 	.word	0x40021000

08002cc4 <__NVIC_SetPriority>:
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	4603      	mov	r3, r0
 8002ccc:	6039      	str	r1, [r7, #0]
 8002cce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	db0a      	blt.n	8002cee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	b2da      	uxtb	r2, r3
 8002cdc:	490c      	ldr	r1, [pc, #48]	; (8002d10 <__NVIC_SetPriority+0x4c>)
 8002cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce2:	0112      	lsls	r2, r2, #4
 8002ce4:	b2d2      	uxtb	r2, r2
 8002ce6:	440b      	add	r3, r1
 8002ce8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002cec:	e00a      	b.n	8002d04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	b2da      	uxtb	r2, r3
 8002cf2:	4908      	ldr	r1, [pc, #32]	; (8002d14 <__NVIC_SetPriority+0x50>)
 8002cf4:	79fb      	ldrb	r3, [r7, #7]
 8002cf6:	f003 030f 	and.w	r3, r3, #15
 8002cfa:	3b04      	subs	r3, #4
 8002cfc:	0112      	lsls	r2, r2, #4
 8002cfe:	b2d2      	uxtb	r2, r2
 8002d00:	440b      	add	r3, r1
 8002d02:	761a      	strb	r2, [r3, #24]
}
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr
 8002d10:	e000e100 	.word	0xe000e100
 8002d14:	e000ed00 	.word	0xe000ed00

08002d18 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002d1c:	2100      	movs	r1, #0
 8002d1e:	f06f 0004 	mvn.w	r0, #4
 8002d22:	f7ff ffcf 	bl	8002cc4 <__NVIC_SetPriority>
#endif
}
 8002d26:	bf00      	nop
 8002d28:	bd80      	pop	{r7, pc}
	...

08002d2c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d32:	f3ef 8305 	mrs	r3, IPSR
 8002d36:	603b      	str	r3, [r7, #0]
  return(result);
 8002d38:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d003      	beq.n	8002d46 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002d3e:	f06f 0305 	mvn.w	r3, #5
 8002d42:	607b      	str	r3, [r7, #4]
 8002d44:	e00c      	b.n	8002d60 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002d46:	4b0a      	ldr	r3, [pc, #40]	; (8002d70 <osKernelInitialize+0x44>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d105      	bne.n	8002d5a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002d4e:	4b08      	ldr	r3, [pc, #32]	; (8002d70 <osKernelInitialize+0x44>)
 8002d50:	2201      	movs	r2, #1
 8002d52:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002d54:	2300      	movs	r3, #0
 8002d56:	607b      	str	r3, [r7, #4]
 8002d58:	e002      	b.n	8002d60 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d5e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002d60:	687b      	ldr	r3, [r7, #4]
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	2000002c 	.word	0x2000002c

08002d74 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d7a:	f3ef 8305 	mrs	r3, IPSR
 8002d7e:	603b      	str	r3, [r7, #0]
  return(result);
 8002d80:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d003      	beq.n	8002d8e <osKernelStart+0x1a>
    stat = osErrorISR;
 8002d86:	f06f 0305 	mvn.w	r3, #5
 8002d8a:	607b      	str	r3, [r7, #4]
 8002d8c:	e010      	b.n	8002db0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002d8e:	4b0b      	ldr	r3, [pc, #44]	; (8002dbc <osKernelStart+0x48>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d109      	bne.n	8002daa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002d96:	f7ff ffbf 	bl	8002d18 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002d9a:	4b08      	ldr	r3, [pc, #32]	; (8002dbc <osKernelStart+0x48>)
 8002d9c:	2202      	movs	r2, #2
 8002d9e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002da0:	f001 f866 	bl	8003e70 <vTaskStartScheduler>
      stat = osOK;
 8002da4:	2300      	movs	r3, #0
 8002da6:	607b      	str	r3, [r7, #4]
 8002da8:	e002      	b.n	8002db0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002daa:	f04f 33ff 	mov.w	r3, #4294967295
 8002dae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002db0:	687b      	ldr	r3, [r7, #4]
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	2000002c 	.word	0x2000002c

08002dc0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b08e      	sub	sp, #56	; 0x38
 8002dc4:	af04      	add	r7, sp, #16
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002dd0:	f3ef 8305 	mrs	r3, IPSR
 8002dd4:	617b      	str	r3, [r7, #20]
  return(result);
 8002dd6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d17e      	bne.n	8002eda <osThreadNew+0x11a>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d07b      	beq.n	8002eda <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002de2:	2380      	movs	r3, #128	; 0x80
 8002de4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002de6:	2318      	movs	r3, #24
 8002de8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002dea:	2300      	movs	r3, #0
 8002dec:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002dee:	f04f 33ff 	mov.w	r3, #4294967295
 8002df2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d045      	beq.n	8002e86 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d002      	beq.n	8002e08 <osThreadNew+0x48>
        name = attr->name;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	699b      	ldr	r3, [r3, #24]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d002      	beq.n	8002e16 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d008      	beq.n	8002e2e <osThreadNew+0x6e>
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	2b38      	cmp	r3, #56	; 0x38
 8002e20:	d805      	bhi.n	8002e2e <osThreadNew+0x6e>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <osThreadNew+0x72>
        return (NULL);
 8002e2e:	2300      	movs	r3, #0
 8002e30:	e054      	b.n	8002edc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d003      	beq.n	8002e42 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	089b      	lsrs	r3, r3, #2
 8002e40:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00e      	beq.n	8002e68 <osThreadNew+0xa8>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	2b5b      	cmp	r3, #91	; 0x5b
 8002e50:	d90a      	bls.n	8002e68 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d006      	beq.n	8002e68 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d002      	beq.n	8002e68 <osThreadNew+0xa8>
        mem = 1;
 8002e62:	2301      	movs	r3, #1
 8002e64:	61bb      	str	r3, [r7, #24]
 8002e66:	e010      	b.n	8002e8a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d10c      	bne.n	8002e8a <osThreadNew+0xca>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d108      	bne.n	8002e8a <osThreadNew+0xca>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	691b      	ldr	r3, [r3, #16]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d104      	bne.n	8002e8a <osThreadNew+0xca>
          mem = 0;
 8002e80:	2300      	movs	r3, #0
 8002e82:	61bb      	str	r3, [r7, #24]
 8002e84:	e001      	b.n	8002e8a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002e86:	2300      	movs	r3, #0
 8002e88:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d110      	bne.n	8002eb2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002e98:	9202      	str	r2, [sp, #8]
 8002e9a:	9301      	str	r3, [sp, #4]
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	9300      	str	r3, [sp, #0]
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	6a3a      	ldr	r2, [r7, #32]
 8002ea4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ea6:	68f8      	ldr	r0, [r7, #12]
 8002ea8:	f000 fe0c 	bl	8003ac4 <xTaskCreateStatic>
 8002eac:	4603      	mov	r3, r0
 8002eae:	613b      	str	r3, [r7, #16]
 8002eb0:	e013      	b.n	8002eda <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d110      	bne.n	8002eda <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002eb8:	6a3b      	ldr	r3, [r7, #32]
 8002eba:	b29a      	uxth	r2, r3
 8002ebc:	f107 0310 	add.w	r3, r7, #16
 8002ec0:	9301      	str	r3, [sp, #4]
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	9300      	str	r3, [sp, #0]
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002eca:	68f8      	ldr	r0, [r7, #12]
 8002ecc:	f000 fe57 	bl	8003b7e <xTaskCreate>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d001      	beq.n	8002eda <osThreadNew+0x11a>
            hTask = NULL;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002eda:	693b      	ldr	r3, [r7, #16]
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3728      	adds	r7, #40	; 0x28
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002eec:	f3ef 8305 	mrs	r3, IPSR
 8002ef0:	60bb      	str	r3, [r7, #8]
  return(result);
 8002ef2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d003      	beq.n	8002f00 <osDelay+0x1c>
    stat = osErrorISR;
 8002ef8:	f06f 0305 	mvn.w	r3, #5
 8002efc:	60fb      	str	r3, [r7, #12]
 8002efe:	e007      	b.n	8002f10 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002f00:	2300      	movs	r3, #0
 8002f02:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d002      	beq.n	8002f10 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 ff7c 	bl	8003e08 <vTaskDelay>
    }
  }

  return (stat);
 8002f10:	68fb      	ldr	r3, [r7, #12]
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3710      	adds	r7, #16
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
	...

08002f1c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002f1c:	b480      	push	{r7}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	4a07      	ldr	r2, [pc, #28]	; (8002f48 <vApplicationGetIdleTaskMemory+0x2c>)
 8002f2c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	4a06      	ldr	r2, [pc, #24]	; (8002f4c <vApplicationGetIdleTaskMemory+0x30>)
 8002f32:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2280      	movs	r2, #128	; 0x80
 8002f38:	601a      	str	r2, [r3, #0]
}
 8002f3a:	bf00      	nop
 8002f3c:	3714      	adds	r7, #20
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	20000030 	.word	0x20000030
 8002f4c:	2000008c 	.word	0x2000008c

08002f50 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002f50:	b480      	push	{r7}
 8002f52:	b085      	sub	sp, #20
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	4a07      	ldr	r2, [pc, #28]	; (8002f7c <vApplicationGetTimerTaskMemory+0x2c>)
 8002f60:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	4a06      	ldr	r2, [pc, #24]	; (8002f80 <vApplicationGetTimerTaskMemory+0x30>)
 8002f66:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f6e:	601a      	str	r2, [r3, #0]
}
 8002f70:	bf00      	nop
 8002f72:	3714      	adds	r7, #20
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr
 8002f7c:	2000028c 	.word	0x2000028c
 8002f80:	200002e8 	.word	0x200002e8

08002f84 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f103 0208 	add.w	r2, r3, #8
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f04f 32ff 	mov.w	r2, #4294967295
 8002f9c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f103 0208 	add.w	r2, r3, #8
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f103 0208 	add.w	r2, r3, #8
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002fb8:	bf00      	nop
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002fd2:	bf00      	nop
 8002fd4:	370c      	adds	r7, #12
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr

08002fde <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002fde:	b480      	push	{r7}
 8002fe0:	b085      	sub	sp, #20
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
 8002fe6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	689a      	ldr	r2, [r3, #8]
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	683a      	ldr	r2, [r7, #0]
 8003002:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	683a      	ldr	r2, [r7, #0]
 8003008:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	1c5a      	adds	r2, r3, #1
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	601a      	str	r2, [r3, #0]
}
 800301a:	bf00      	nop
 800301c:	3714      	adds	r7, #20
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr

08003026 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003026:	b480      	push	{r7}
 8003028:	b085      	sub	sp, #20
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
 800302e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800303c:	d103      	bne.n	8003046 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	60fb      	str	r3, [r7, #12]
 8003044:	e00c      	b.n	8003060 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	3308      	adds	r3, #8
 800304a:	60fb      	str	r3, [r7, #12]
 800304c:	e002      	b.n	8003054 <vListInsert+0x2e>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	60fb      	str	r3, [r7, #12]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68ba      	ldr	r2, [r7, #8]
 800305c:	429a      	cmp	r2, r3
 800305e:	d2f6      	bcs.n	800304e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	685a      	ldr	r2, [r3, #4]
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	683a      	ldr	r2, [r7, #0]
 800306e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	683a      	ldr	r2, [r7, #0]
 800307a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	1c5a      	adds	r2, r3, #1
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	601a      	str	r2, [r3, #0]
}
 800308c:	bf00      	nop
 800308e:	3714      	adds	r7, #20
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003098:	b480      	push	{r7}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	6892      	ldr	r2, [r2, #8]
 80030ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	6852      	ldr	r2, [r2, #4]
 80030b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d103      	bne.n	80030cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	689a      	ldr	r2, [r3, #8]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	1e5a      	subs	r2, r3, #1
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3714      	adds	r7, #20
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d10a      	bne.n	8003116 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003104:	f383 8811 	msr	BASEPRI, r3
 8003108:	f3bf 8f6f 	isb	sy
 800310c:	f3bf 8f4f 	dsb	sy
 8003110:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003112:	bf00      	nop
 8003114:	e7fe      	b.n	8003114 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003116:	f002 f84d 	bl	80051b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003122:	68f9      	ldr	r1, [r7, #12]
 8003124:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003126:	fb01 f303 	mul.w	r3, r1, r3
 800312a:	441a      	add	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003146:	3b01      	subs	r3, #1
 8003148:	68f9      	ldr	r1, [r7, #12]
 800314a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800314c:	fb01 f303 	mul.w	r3, r1, r3
 8003150:	441a      	add	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	22ff      	movs	r2, #255	; 0xff
 800315a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	22ff      	movs	r2, #255	; 0xff
 8003162:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d114      	bne.n	8003196 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d01a      	beq.n	80031aa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	3310      	adds	r3, #16
 8003178:	4618      	mov	r0, r3
 800317a:	f001 f903 	bl	8004384 <xTaskRemoveFromEventList>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d012      	beq.n	80031aa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003184:	4b0c      	ldr	r3, [pc, #48]	; (80031b8 <xQueueGenericReset+0xcc>)
 8003186:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800318a:	601a      	str	r2, [r3, #0]
 800318c:	f3bf 8f4f 	dsb	sy
 8003190:	f3bf 8f6f 	isb	sy
 8003194:	e009      	b.n	80031aa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	3310      	adds	r3, #16
 800319a:	4618      	mov	r0, r3
 800319c:	f7ff fef2 	bl	8002f84 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	3324      	adds	r3, #36	; 0x24
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7ff feed 	bl	8002f84 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80031aa:	f002 f833 	bl	8005214 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80031ae:	2301      	movs	r3, #1
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3710      	adds	r7, #16
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	e000ed04 	.word	0xe000ed04

080031bc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b08e      	sub	sp, #56	; 0x38
 80031c0:	af02      	add	r7, sp, #8
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
 80031c8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d10a      	bne.n	80031e6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80031d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d4:	f383 8811 	msr	BASEPRI, r3
 80031d8:	f3bf 8f6f 	isb	sy
 80031dc:	f3bf 8f4f 	dsb	sy
 80031e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80031e2:	bf00      	nop
 80031e4:	e7fe      	b.n	80031e4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d10a      	bne.n	8003202 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80031ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f0:	f383 8811 	msr	BASEPRI, r3
 80031f4:	f3bf 8f6f 	isb	sy
 80031f8:	f3bf 8f4f 	dsb	sy
 80031fc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80031fe:	bf00      	nop
 8003200:	e7fe      	b.n	8003200 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d002      	beq.n	800320e <xQueueGenericCreateStatic+0x52>
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d001      	beq.n	8003212 <xQueueGenericCreateStatic+0x56>
 800320e:	2301      	movs	r3, #1
 8003210:	e000      	b.n	8003214 <xQueueGenericCreateStatic+0x58>
 8003212:	2300      	movs	r3, #0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d10a      	bne.n	800322e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800321c:	f383 8811 	msr	BASEPRI, r3
 8003220:	f3bf 8f6f 	isb	sy
 8003224:	f3bf 8f4f 	dsb	sy
 8003228:	623b      	str	r3, [r7, #32]
}
 800322a:	bf00      	nop
 800322c:	e7fe      	b.n	800322c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d102      	bne.n	800323a <xQueueGenericCreateStatic+0x7e>
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d101      	bne.n	800323e <xQueueGenericCreateStatic+0x82>
 800323a:	2301      	movs	r3, #1
 800323c:	e000      	b.n	8003240 <xQueueGenericCreateStatic+0x84>
 800323e:	2300      	movs	r3, #0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d10a      	bne.n	800325a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003248:	f383 8811 	msr	BASEPRI, r3
 800324c:	f3bf 8f6f 	isb	sy
 8003250:	f3bf 8f4f 	dsb	sy
 8003254:	61fb      	str	r3, [r7, #28]
}
 8003256:	bf00      	nop
 8003258:	e7fe      	b.n	8003258 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800325a:	2350      	movs	r3, #80	; 0x50
 800325c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	2b50      	cmp	r3, #80	; 0x50
 8003262:	d00a      	beq.n	800327a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003268:	f383 8811 	msr	BASEPRI, r3
 800326c:	f3bf 8f6f 	isb	sy
 8003270:	f3bf 8f4f 	dsb	sy
 8003274:	61bb      	str	r3, [r7, #24]
}
 8003276:	bf00      	nop
 8003278:	e7fe      	b.n	8003278 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800327a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00d      	beq.n	80032a2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003288:	2201      	movs	r2, #1
 800328a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800328e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003294:	9300      	str	r3, [sp, #0]
 8003296:	4613      	mov	r3, r2
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	68b9      	ldr	r1, [r7, #8]
 800329c:	68f8      	ldr	r0, [r7, #12]
 800329e:	f000 f805 	bl	80032ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80032a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3730      	adds	r7, #48	; 0x30
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	607a      	str	r2, [r7, #4]
 80032b8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d103      	bne.n	80032c8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	69ba      	ldr	r2, [r7, #24]
 80032c4:	601a      	str	r2, [r3, #0]
 80032c6:	e002      	b.n	80032ce <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	68ba      	ldr	r2, [r7, #8]
 80032d8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80032da:	2101      	movs	r1, #1
 80032dc:	69b8      	ldr	r0, [r7, #24]
 80032de:	f7ff ff05 	bl	80030ec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	78fa      	ldrb	r2, [r7, #3]
 80032e6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80032ea:	bf00      	nop
 80032ec:	3710      	adds	r7, #16
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
	...

080032f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b08e      	sub	sp, #56	; 0x38
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]
 8003300:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003302:	2300      	movs	r3, #0
 8003304:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800330a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800330c:	2b00      	cmp	r3, #0
 800330e:	d10a      	bne.n	8003326 <xQueueGenericSend+0x32>
	__asm volatile
 8003310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003314:	f383 8811 	msr	BASEPRI, r3
 8003318:	f3bf 8f6f 	isb	sy
 800331c:	f3bf 8f4f 	dsb	sy
 8003320:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003322:	bf00      	nop
 8003324:	e7fe      	b.n	8003324 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d103      	bne.n	8003334 <xQueueGenericSend+0x40>
 800332c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800332e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003330:	2b00      	cmp	r3, #0
 8003332:	d101      	bne.n	8003338 <xQueueGenericSend+0x44>
 8003334:	2301      	movs	r3, #1
 8003336:	e000      	b.n	800333a <xQueueGenericSend+0x46>
 8003338:	2300      	movs	r3, #0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d10a      	bne.n	8003354 <xQueueGenericSend+0x60>
	__asm volatile
 800333e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003342:	f383 8811 	msr	BASEPRI, r3
 8003346:	f3bf 8f6f 	isb	sy
 800334a:	f3bf 8f4f 	dsb	sy
 800334e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003350:	bf00      	nop
 8003352:	e7fe      	b.n	8003352 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	2b02      	cmp	r3, #2
 8003358:	d103      	bne.n	8003362 <xQueueGenericSend+0x6e>
 800335a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800335c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800335e:	2b01      	cmp	r3, #1
 8003360:	d101      	bne.n	8003366 <xQueueGenericSend+0x72>
 8003362:	2301      	movs	r3, #1
 8003364:	e000      	b.n	8003368 <xQueueGenericSend+0x74>
 8003366:	2300      	movs	r3, #0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d10a      	bne.n	8003382 <xQueueGenericSend+0x8e>
	__asm volatile
 800336c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003370:	f383 8811 	msr	BASEPRI, r3
 8003374:	f3bf 8f6f 	isb	sy
 8003378:	f3bf 8f4f 	dsb	sy
 800337c:	623b      	str	r3, [r7, #32]
}
 800337e:	bf00      	nop
 8003380:	e7fe      	b.n	8003380 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003382:	f001 f9bd 	bl	8004700 <xTaskGetSchedulerState>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d102      	bne.n	8003392 <xQueueGenericSend+0x9e>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d101      	bne.n	8003396 <xQueueGenericSend+0xa2>
 8003392:	2301      	movs	r3, #1
 8003394:	e000      	b.n	8003398 <xQueueGenericSend+0xa4>
 8003396:	2300      	movs	r3, #0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d10a      	bne.n	80033b2 <xQueueGenericSend+0xbe>
	__asm volatile
 800339c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a0:	f383 8811 	msr	BASEPRI, r3
 80033a4:	f3bf 8f6f 	isb	sy
 80033a8:	f3bf 8f4f 	dsb	sy
 80033ac:	61fb      	str	r3, [r7, #28]
}
 80033ae:	bf00      	nop
 80033b0:	e7fe      	b.n	80033b0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80033b2:	f001 feff 	bl	80051b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80033b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033be:	429a      	cmp	r2, r3
 80033c0:	d302      	bcc.n	80033c8 <xQueueGenericSend+0xd4>
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d129      	bne.n	800341c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80033c8:	683a      	ldr	r2, [r7, #0]
 80033ca:	68b9      	ldr	r1, [r7, #8]
 80033cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80033ce:	f000 fa0b 	bl	80037e8 <prvCopyDataToQueue>
 80033d2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80033d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d010      	beq.n	80033fe <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80033dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033de:	3324      	adds	r3, #36	; 0x24
 80033e0:	4618      	mov	r0, r3
 80033e2:	f000 ffcf 	bl	8004384 <xTaskRemoveFromEventList>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d013      	beq.n	8003414 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80033ec:	4b3f      	ldr	r3, [pc, #252]	; (80034ec <xQueueGenericSend+0x1f8>)
 80033ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033f2:	601a      	str	r2, [r3, #0]
 80033f4:	f3bf 8f4f 	dsb	sy
 80033f8:	f3bf 8f6f 	isb	sy
 80033fc:	e00a      	b.n	8003414 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80033fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003400:	2b00      	cmp	r3, #0
 8003402:	d007      	beq.n	8003414 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003404:	4b39      	ldr	r3, [pc, #228]	; (80034ec <xQueueGenericSend+0x1f8>)
 8003406:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800340a:	601a      	str	r2, [r3, #0]
 800340c:	f3bf 8f4f 	dsb	sy
 8003410:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003414:	f001 fefe 	bl	8005214 <vPortExitCritical>
				return pdPASS;
 8003418:	2301      	movs	r3, #1
 800341a:	e063      	b.n	80034e4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d103      	bne.n	800342a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003422:	f001 fef7 	bl	8005214 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003426:	2300      	movs	r3, #0
 8003428:	e05c      	b.n	80034e4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800342a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800342c:	2b00      	cmp	r3, #0
 800342e:	d106      	bne.n	800343e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003430:	f107 0314 	add.w	r3, r7, #20
 8003434:	4618      	mov	r0, r3
 8003436:	f001 f809 	bl	800444c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800343a:	2301      	movs	r3, #1
 800343c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800343e:	f001 fee9 	bl	8005214 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003442:	f000 fd7b 	bl	8003f3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003446:	f001 feb5 	bl	80051b4 <vPortEnterCritical>
 800344a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800344c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003450:	b25b      	sxtb	r3, r3
 8003452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003456:	d103      	bne.n	8003460 <xQueueGenericSend+0x16c>
 8003458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800345a:	2200      	movs	r2, #0
 800345c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003462:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003466:	b25b      	sxtb	r3, r3
 8003468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800346c:	d103      	bne.n	8003476 <xQueueGenericSend+0x182>
 800346e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003470:	2200      	movs	r2, #0
 8003472:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003476:	f001 fecd 	bl	8005214 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800347a:	1d3a      	adds	r2, r7, #4
 800347c:	f107 0314 	add.w	r3, r7, #20
 8003480:	4611      	mov	r1, r2
 8003482:	4618      	mov	r0, r3
 8003484:	f000 fff8 	bl	8004478 <xTaskCheckForTimeOut>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d124      	bne.n	80034d8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800348e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003490:	f000 faa2 	bl	80039d8 <prvIsQueueFull>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d018      	beq.n	80034cc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800349a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800349c:	3310      	adds	r3, #16
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	4611      	mov	r1, r2
 80034a2:	4618      	mov	r0, r3
 80034a4:	f000 ff1e 	bl	80042e4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80034a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034aa:	f000 fa2d 	bl	8003908 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80034ae:	f000 fd53 	bl	8003f58 <xTaskResumeAll>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f47f af7c 	bne.w	80033b2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80034ba:	4b0c      	ldr	r3, [pc, #48]	; (80034ec <xQueueGenericSend+0x1f8>)
 80034bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034c0:	601a      	str	r2, [r3, #0]
 80034c2:	f3bf 8f4f 	dsb	sy
 80034c6:	f3bf 8f6f 	isb	sy
 80034ca:	e772      	b.n	80033b2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80034cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034ce:	f000 fa1b 	bl	8003908 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80034d2:	f000 fd41 	bl	8003f58 <xTaskResumeAll>
 80034d6:	e76c      	b.n	80033b2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80034d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034da:	f000 fa15 	bl	8003908 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80034de:	f000 fd3b 	bl	8003f58 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80034e2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3738      	adds	r7, #56	; 0x38
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	e000ed04 	.word	0xe000ed04

080034f0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b090      	sub	sp, #64	; 0x40
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
 80034fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003504:	2b00      	cmp	r3, #0
 8003506:	d10a      	bne.n	800351e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800350c:	f383 8811 	msr	BASEPRI, r3
 8003510:	f3bf 8f6f 	isb	sy
 8003514:	f3bf 8f4f 	dsb	sy
 8003518:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800351a:	bf00      	nop
 800351c:	e7fe      	b.n	800351c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d103      	bne.n	800352c <xQueueGenericSendFromISR+0x3c>
 8003524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003528:	2b00      	cmp	r3, #0
 800352a:	d101      	bne.n	8003530 <xQueueGenericSendFromISR+0x40>
 800352c:	2301      	movs	r3, #1
 800352e:	e000      	b.n	8003532 <xQueueGenericSendFromISR+0x42>
 8003530:	2300      	movs	r3, #0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d10a      	bne.n	800354c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800353a:	f383 8811 	msr	BASEPRI, r3
 800353e:	f3bf 8f6f 	isb	sy
 8003542:	f3bf 8f4f 	dsb	sy
 8003546:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003548:	bf00      	nop
 800354a:	e7fe      	b.n	800354a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	2b02      	cmp	r3, #2
 8003550:	d103      	bne.n	800355a <xQueueGenericSendFromISR+0x6a>
 8003552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003556:	2b01      	cmp	r3, #1
 8003558:	d101      	bne.n	800355e <xQueueGenericSendFromISR+0x6e>
 800355a:	2301      	movs	r3, #1
 800355c:	e000      	b.n	8003560 <xQueueGenericSendFromISR+0x70>
 800355e:	2300      	movs	r3, #0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d10a      	bne.n	800357a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003568:	f383 8811 	msr	BASEPRI, r3
 800356c:	f3bf 8f6f 	isb	sy
 8003570:	f3bf 8f4f 	dsb	sy
 8003574:	623b      	str	r3, [r7, #32]
}
 8003576:	bf00      	nop
 8003578:	e7fe      	b.n	8003578 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800357a:	f001 fefd 	bl	8005378 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800357e:	f3ef 8211 	mrs	r2, BASEPRI
 8003582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003586:	f383 8811 	msr	BASEPRI, r3
 800358a:	f3bf 8f6f 	isb	sy
 800358e:	f3bf 8f4f 	dsb	sy
 8003592:	61fa      	str	r2, [r7, #28]
 8003594:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003596:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003598:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800359a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800359c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800359e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d302      	bcc.n	80035ac <xQueueGenericSendFromISR+0xbc>
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d12f      	bne.n	800360c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80035ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80035b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ba:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80035bc:	683a      	ldr	r2, [r7, #0]
 80035be:	68b9      	ldr	r1, [r7, #8]
 80035c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80035c2:	f000 f911 	bl	80037e8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80035c6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80035ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ce:	d112      	bne.n	80035f6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80035d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d016      	beq.n	8003606 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80035d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035da:	3324      	adds	r3, #36	; 0x24
 80035dc:	4618      	mov	r0, r3
 80035de:	f000 fed1 	bl	8004384 <xTaskRemoveFromEventList>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00e      	beq.n	8003606 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00b      	beq.n	8003606 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2201      	movs	r2, #1
 80035f2:	601a      	str	r2, [r3, #0]
 80035f4:	e007      	b.n	8003606 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80035f6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80035fa:	3301      	adds	r3, #1
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	b25a      	sxtb	r2, r3
 8003600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003602:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003606:	2301      	movs	r3, #1
 8003608:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800360a:	e001      	b.n	8003610 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800360c:	2300      	movs	r3, #0
 800360e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003612:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800361a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800361c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800361e:	4618      	mov	r0, r3
 8003620:	3740      	adds	r7, #64	; 0x40
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
	...

08003628 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b08c      	sub	sp, #48	; 0x30
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003634:	2300      	movs	r3, #0
 8003636:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800363c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800363e:	2b00      	cmp	r3, #0
 8003640:	d10a      	bne.n	8003658 <xQueueReceive+0x30>
	__asm volatile
 8003642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003646:	f383 8811 	msr	BASEPRI, r3
 800364a:	f3bf 8f6f 	isb	sy
 800364e:	f3bf 8f4f 	dsb	sy
 8003652:	623b      	str	r3, [r7, #32]
}
 8003654:	bf00      	nop
 8003656:	e7fe      	b.n	8003656 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d103      	bne.n	8003666 <xQueueReceive+0x3e>
 800365e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <xQueueReceive+0x42>
 8003666:	2301      	movs	r3, #1
 8003668:	e000      	b.n	800366c <xQueueReceive+0x44>
 800366a:	2300      	movs	r3, #0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d10a      	bne.n	8003686 <xQueueReceive+0x5e>
	__asm volatile
 8003670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003674:	f383 8811 	msr	BASEPRI, r3
 8003678:	f3bf 8f6f 	isb	sy
 800367c:	f3bf 8f4f 	dsb	sy
 8003680:	61fb      	str	r3, [r7, #28]
}
 8003682:	bf00      	nop
 8003684:	e7fe      	b.n	8003684 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003686:	f001 f83b 	bl	8004700 <xTaskGetSchedulerState>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d102      	bne.n	8003696 <xQueueReceive+0x6e>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <xQueueReceive+0x72>
 8003696:	2301      	movs	r3, #1
 8003698:	e000      	b.n	800369c <xQueueReceive+0x74>
 800369a:	2300      	movs	r3, #0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d10a      	bne.n	80036b6 <xQueueReceive+0x8e>
	__asm volatile
 80036a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a4:	f383 8811 	msr	BASEPRI, r3
 80036a8:	f3bf 8f6f 	isb	sy
 80036ac:	f3bf 8f4f 	dsb	sy
 80036b0:	61bb      	str	r3, [r7, #24]
}
 80036b2:	bf00      	nop
 80036b4:	e7fe      	b.n	80036b4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80036b6:	f001 fd7d 	bl	80051b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80036ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036be:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80036c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d01f      	beq.n	8003706 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80036c6:	68b9      	ldr	r1, [r7, #8]
 80036c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80036ca:	f000 f8f7 	bl	80038bc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80036ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d0:	1e5a      	subs	r2, r3, #1
 80036d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00f      	beq.n	80036fe <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e0:	3310      	adds	r3, #16
 80036e2:	4618      	mov	r0, r3
 80036e4:	f000 fe4e 	bl	8004384 <xTaskRemoveFromEventList>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d007      	beq.n	80036fe <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80036ee:	4b3d      	ldr	r3, [pc, #244]	; (80037e4 <xQueueReceive+0x1bc>)
 80036f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036f4:	601a      	str	r2, [r3, #0]
 80036f6:	f3bf 8f4f 	dsb	sy
 80036fa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80036fe:	f001 fd89 	bl	8005214 <vPortExitCritical>
				return pdPASS;
 8003702:	2301      	movs	r3, #1
 8003704:	e069      	b.n	80037da <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d103      	bne.n	8003714 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800370c:	f001 fd82 	bl	8005214 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003710:	2300      	movs	r3, #0
 8003712:	e062      	b.n	80037da <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003716:	2b00      	cmp	r3, #0
 8003718:	d106      	bne.n	8003728 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800371a:	f107 0310 	add.w	r3, r7, #16
 800371e:	4618      	mov	r0, r3
 8003720:	f000 fe94 	bl	800444c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003724:	2301      	movs	r3, #1
 8003726:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003728:	f001 fd74 	bl	8005214 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800372c:	f000 fc06 	bl	8003f3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003730:	f001 fd40 	bl	80051b4 <vPortEnterCritical>
 8003734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003736:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800373a:	b25b      	sxtb	r3, r3
 800373c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003740:	d103      	bne.n	800374a <xQueueReceive+0x122>
 8003742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003744:	2200      	movs	r2, #0
 8003746:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800374a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800374c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003750:	b25b      	sxtb	r3, r3
 8003752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003756:	d103      	bne.n	8003760 <xQueueReceive+0x138>
 8003758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800375a:	2200      	movs	r2, #0
 800375c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003760:	f001 fd58 	bl	8005214 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003764:	1d3a      	adds	r2, r7, #4
 8003766:	f107 0310 	add.w	r3, r7, #16
 800376a:	4611      	mov	r1, r2
 800376c:	4618      	mov	r0, r3
 800376e:	f000 fe83 	bl	8004478 <xTaskCheckForTimeOut>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d123      	bne.n	80037c0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003778:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800377a:	f000 f917 	bl	80039ac <prvIsQueueEmpty>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d017      	beq.n	80037b4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003786:	3324      	adds	r3, #36	; 0x24
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	4611      	mov	r1, r2
 800378c:	4618      	mov	r0, r3
 800378e:	f000 fda9 	bl	80042e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003792:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003794:	f000 f8b8 	bl	8003908 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003798:	f000 fbde 	bl	8003f58 <xTaskResumeAll>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d189      	bne.n	80036b6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80037a2:	4b10      	ldr	r3, [pc, #64]	; (80037e4 <xQueueReceive+0x1bc>)
 80037a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037a8:	601a      	str	r2, [r3, #0]
 80037aa:	f3bf 8f4f 	dsb	sy
 80037ae:	f3bf 8f6f 	isb	sy
 80037b2:	e780      	b.n	80036b6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80037b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037b6:	f000 f8a7 	bl	8003908 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80037ba:	f000 fbcd 	bl	8003f58 <xTaskResumeAll>
 80037be:	e77a      	b.n	80036b6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80037c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037c2:	f000 f8a1 	bl	8003908 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80037c6:	f000 fbc7 	bl	8003f58 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80037ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037cc:	f000 f8ee 	bl	80039ac <prvIsQueueEmpty>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	f43f af6f 	beq.w	80036b6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80037d8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3730      	adds	r7, #48	; 0x30
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	e000ed04 	.word	0xe000ed04

080037e8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b086      	sub	sp, #24
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80037f4:	2300      	movs	r3, #0
 80037f6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037fc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003802:	2b00      	cmp	r3, #0
 8003804:	d10d      	bne.n	8003822 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d14d      	bne.n	80038aa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	4618      	mov	r0, r3
 8003814:	f000 ff92 	bl	800473c <xTaskPriorityDisinherit>
 8003818:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	609a      	str	r2, [r3, #8]
 8003820:	e043      	b.n	80038aa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d119      	bne.n	800385c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6858      	ldr	r0, [r3, #4]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003830:	461a      	mov	r2, r3
 8003832:	68b9      	ldr	r1, [r7, #8]
 8003834:	f002 f9ae 	bl	8005b94 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	685a      	ldr	r2, [r3, #4]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003840:	441a      	add	r2, r3
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	685a      	ldr	r2, [r3, #4]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	429a      	cmp	r2, r3
 8003850:	d32b      	bcc.n	80038aa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	605a      	str	r2, [r3, #4]
 800385a:	e026      	b.n	80038aa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	68d8      	ldr	r0, [r3, #12]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003864:	461a      	mov	r2, r3
 8003866:	68b9      	ldr	r1, [r7, #8]
 8003868:	f002 f994 	bl	8005b94 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	68da      	ldr	r2, [r3, #12]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003874:	425b      	negs	r3, r3
 8003876:	441a      	add	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	68da      	ldr	r2, [r3, #12]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	429a      	cmp	r2, r3
 8003886:	d207      	bcs.n	8003898 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	689a      	ldr	r2, [r3, #8]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003890:	425b      	negs	r3, r3
 8003892:	441a      	add	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2b02      	cmp	r3, #2
 800389c:	d105      	bne.n	80038aa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d002      	beq.n	80038aa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	3b01      	subs	r3, #1
 80038a8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	1c5a      	adds	r2, r3, #1
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80038b2:	697b      	ldr	r3, [r7, #20]
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3718      	adds	r7, #24
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d018      	beq.n	8003900 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	68da      	ldr	r2, [r3, #12]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d6:	441a      	add	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	68da      	ldr	r2, [r3, #12]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d303      	bcc.n	80038f0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	68d9      	ldr	r1, [r3, #12]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f8:	461a      	mov	r2, r3
 80038fa:	6838      	ldr	r0, [r7, #0]
 80038fc:	f002 f94a 	bl	8005b94 <memcpy>
	}
}
 8003900:	bf00      	nop
 8003902:	3708      	adds	r7, #8
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003910:	f001 fc50 	bl	80051b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800391a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800391c:	e011      	b.n	8003942 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003922:	2b00      	cmp	r3, #0
 8003924:	d012      	beq.n	800394c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	3324      	adds	r3, #36	; 0x24
 800392a:	4618      	mov	r0, r3
 800392c:	f000 fd2a 	bl	8004384 <xTaskRemoveFromEventList>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d001      	beq.n	800393a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003936:	f000 fe01 	bl	800453c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800393a:	7bfb      	ldrb	r3, [r7, #15]
 800393c:	3b01      	subs	r3, #1
 800393e:	b2db      	uxtb	r3, r3
 8003940:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003942:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003946:	2b00      	cmp	r3, #0
 8003948:	dce9      	bgt.n	800391e <prvUnlockQueue+0x16>
 800394a:	e000      	b.n	800394e <prvUnlockQueue+0x46>
					break;
 800394c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	22ff      	movs	r2, #255	; 0xff
 8003952:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003956:	f001 fc5d 	bl	8005214 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800395a:	f001 fc2b 	bl	80051b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003964:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003966:	e011      	b.n	800398c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d012      	beq.n	8003996 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	3310      	adds	r3, #16
 8003974:	4618      	mov	r0, r3
 8003976:	f000 fd05 	bl	8004384 <xTaskRemoveFromEventList>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d001      	beq.n	8003984 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003980:	f000 fddc 	bl	800453c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003984:	7bbb      	ldrb	r3, [r7, #14]
 8003986:	3b01      	subs	r3, #1
 8003988:	b2db      	uxtb	r3, r3
 800398a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800398c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003990:	2b00      	cmp	r3, #0
 8003992:	dce9      	bgt.n	8003968 <prvUnlockQueue+0x60>
 8003994:	e000      	b.n	8003998 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003996:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	22ff      	movs	r2, #255	; 0xff
 800399c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80039a0:	f001 fc38 	bl	8005214 <vPortExitCritical>
}
 80039a4:	bf00      	nop
 80039a6:	3710      	adds	r7, #16
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80039b4:	f001 fbfe 	bl	80051b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d102      	bne.n	80039c6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80039c0:	2301      	movs	r3, #1
 80039c2:	60fb      	str	r3, [r7, #12]
 80039c4:	e001      	b.n	80039ca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80039c6:	2300      	movs	r3, #0
 80039c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80039ca:	f001 fc23 	bl	8005214 <vPortExitCritical>

	return xReturn;
 80039ce:	68fb      	ldr	r3, [r7, #12]
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3710      	adds	r7, #16
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80039e0:	f001 fbe8 	bl	80051b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d102      	bne.n	80039f6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80039f0:	2301      	movs	r3, #1
 80039f2:	60fb      	str	r3, [r7, #12]
 80039f4:	e001      	b.n	80039fa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80039f6:	2300      	movs	r3, #0
 80039f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80039fa:	f001 fc0b 	bl	8005214 <vPortExitCritical>

	return xReturn;
 80039fe:	68fb      	ldr	r3, [r7, #12]
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3710      	adds	r7, #16
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003a08:	b480      	push	{r7}
 8003a0a:	b085      	sub	sp, #20
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003a12:	2300      	movs	r3, #0
 8003a14:	60fb      	str	r3, [r7, #12]
 8003a16:	e014      	b.n	8003a42 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003a18:	4a0f      	ldr	r2, [pc, #60]	; (8003a58 <vQueueAddToRegistry+0x50>)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d10b      	bne.n	8003a3c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003a24:	490c      	ldr	r1, [pc, #48]	; (8003a58 <vQueueAddToRegistry+0x50>)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	683a      	ldr	r2, [r7, #0]
 8003a2a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003a2e:	4a0a      	ldr	r2, [pc, #40]	; (8003a58 <vQueueAddToRegistry+0x50>)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	00db      	lsls	r3, r3, #3
 8003a34:	4413      	add	r3, r2
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003a3a:	e006      	b.n	8003a4a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	3301      	adds	r3, #1
 8003a40:	60fb      	str	r3, [r7, #12]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2b07      	cmp	r3, #7
 8003a46:	d9e7      	bls.n	8003a18 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003a48:	bf00      	nop
 8003a4a:	bf00      	nop
 8003a4c:	3714      	adds	r7, #20
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	2000197c 	.word	0x2000197c

08003a5c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b086      	sub	sp, #24
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003a6c:	f001 fba2 	bl	80051b4 <vPortEnterCritical>
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a76:	b25b      	sxtb	r3, r3
 8003a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a7c:	d103      	bne.n	8003a86 <vQueueWaitForMessageRestricted+0x2a>
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a8c:	b25b      	sxtb	r3, r3
 8003a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a92:	d103      	bne.n	8003a9c <vQueueWaitForMessageRestricted+0x40>
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a9c:	f001 fbba 	bl	8005214 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d106      	bne.n	8003ab6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	3324      	adds	r3, #36	; 0x24
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	68b9      	ldr	r1, [r7, #8]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f000 fc3b 	bl	800432c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003ab6:	6978      	ldr	r0, [r7, #20]
 8003ab8:	f7ff ff26 	bl	8003908 <prvUnlockQueue>
	}
 8003abc:	bf00      	nop
 8003abe:	3718      	adds	r7, #24
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b08e      	sub	sp, #56	; 0x38
 8003ac8:	af04      	add	r7, sp, #16
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	607a      	str	r2, [r7, #4]
 8003ad0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d10a      	bne.n	8003aee <xTaskCreateStatic+0x2a>
	__asm volatile
 8003ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003adc:	f383 8811 	msr	BASEPRI, r3
 8003ae0:	f3bf 8f6f 	isb	sy
 8003ae4:	f3bf 8f4f 	dsb	sy
 8003ae8:	623b      	str	r3, [r7, #32]
}
 8003aea:	bf00      	nop
 8003aec:	e7fe      	b.n	8003aec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d10a      	bne.n	8003b0a <xTaskCreateStatic+0x46>
	__asm volatile
 8003af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af8:	f383 8811 	msr	BASEPRI, r3
 8003afc:	f3bf 8f6f 	isb	sy
 8003b00:	f3bf 8f4f 	dsb	sy
 8003b04:	61fb      	str	r3, [r7, #28]
}
 8003b06:	bf00      	nop
 8003b08:	e7fe      	b.n	8003b08 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003b0a:	235c      	movs	r3, #92	; 0x5c
 8003b0c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	2b5c      	cmp	r3, #92	; 0x5c
 8003b12:	d00a      	beq.n	8003b2a <xTaskCreateStatic+0x66>
	__asm volatile
 8003b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b18:	f383 8811 	msr	BASEPRI, r3
 8003b1c:	f3bf 8f6f 	isb	sy
 8003b20:	f3bf 8f4f 	dsb	sy
 8003b24:	61bb      	str	r3, [r7, #24]
}
 8003b26:	bf00      	nop
 8003b28:	e7fe      	b.n	8003b28 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003b2a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d01e      	beq.n	8003b70 <xTaskCreateStatic+0xac>
 8003b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d01b      	beq.n	8003b70 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b3a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b40:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b44:	2202      	movs	r2, #2
 8003b46:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	9303      	str	r3, [sp, #12]
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b50:	9302      	str	r3, [sp, #8]
 8003b52:	f107 0314 	add.w	r3, r7, #20
 8003b56:	9301      	str	r3, [sp, #4]
 8003b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5a:	9300      	str	r3, [sp, #0]
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	68b9      	ldr	r1, [r7, #8]
 8003b62:	68f8      	ldr	r0, [r7, #12]
 8003b64:	f000 f850 	bl	8003c08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b6a:	f000 f8dd 	bl	8003d28 <prvAddNewTaskToReadyList>
 8003b6e:	e001      	b.n	8003b74 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003b70:	2300      	movs	r3, #0
 8003b72:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003b74:	697b      	ldr	r3, [r7, #20]
	}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3728      	adds	r7, #40	; 0x28
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	b08c      	sub	sp, #48	; 0x30
 8003b82:	af04      	add	r7, sp, #16
 8003b84:	60f8      	str	r0, [r7, #12]
 8003b86:	60b9      	str	r1, [r7, #8]
 8003b88:	603b      	str	r3, [r7, #0]
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003b8e:	88fb      	ldrh	r3, [r7, #6]
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	4618      	mov	r0, r3
 8003b94:	f001 fc30 	bl	80053f8 <pvPortMalloc>
 8003b98:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d00e      	beq.n	8003bbe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003ba0:	205c      	movs	r0, #92	; 0x5c
 8003ba2:	f001 fc29 	bl	80053f8 <pvPortMalloc>
 8003ba6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d003      	beq.n	8003bb6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	697a      	ldr	r2, [r7, #20]
 8003bb2:	631a      	str	r2, [r3, #48]	; 0x30
 8003bb4:	e005      	b.n	8003bc2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003bb6:	6978      	ldr	r0, [r7, #20]
 8003bb8:	f001 fcea 	bl	8005590 <vPortFree>
 8003bbc:	e001      	b.n	8003bc2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d017      	beq.n	8003bf8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003bd0:	88fa      	ldrh	r2, [r7, #6]
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	9303      	str	r3, [sp, #12]
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	9302      	str	r3, [sp, #8]
 8003bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bdc:	9301      	str	r3, [sp, #4]
 8003bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be0:	9300      	str	r3, [sp, #0]
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	68b9      	ldr	r1, [r7, #8]
 8003be6:	68f8      	ldr	r0, [r7, #12]
 8003be8:	f000 f80e 	bl	8003c08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003bec:	69f8      	ldr	r0, [r7, #28]
 8003bee:	f000 f89b 	bl	8003d28 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	61bb      	str	r3, [r7, #24]
 8003bf6:	e002      	b.n	8003bfe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8003bfc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003bfe:	69bb      	ldr	r3, [r7, #24]
	}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3720      	adds	r7, #32
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b088      	sub	sp, #32
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	607a      	str	r2, [r7, #4]
 8003c14:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c18:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	461a      	mov	r2, r3
 8003c20:	21a5      	movs	r1, #165	; 0xa5
 8003c22:	f001 ffc5 	bl	8005bb0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003c30:	3b01      	subs	r3, #1
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	4413      	add	r3, r2
 8003c36:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	f023 0307 	bic.w	r3, r3, #7
 8003c3e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	f003 0307 	and.w	r3, r3, #7
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00a      	beq.n	8003c60 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c4e:	f383 8811 	msr	BASEPRI, r3
 8003c52:	f3bf 8f6f 	isb	sy
 8003c56:	f3bf 8f4f 	dsb	sy
 8003c5a:	617b      	str	r3, [r7, #20]
}
 8003c5c:	bf00      	nop
 8003c5e:	e7fe      	b.n	8003c5e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d01f      	beq.n	8003ca6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c66:	2300      	movs	r3, #0
 8003c68:	61fb      	str	r3, [r7, #28]
 8003c6a:	e012      	b.n	8003c92 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003c6c:	68ba      	ldr	r2, [r7, #8]
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	4413      	add	r3, r2
 8003c72:	7819      	ldrb	r1, [r3, #0]
 8003c74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	4413      	add	r3, r2
 8003c7a:	3334      	adds	r3, #52	; 0x34
 8003c7c:	460a      	mov	r2, r1
 8003c7e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003c80:	68ba      	ldr	r2, [r7, #8]
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	4413      	add	r3, r2
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d006      	beq.n	8003c9a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	3301      	adds	r3, #1
 8003c90:	61fb      	str	r3, [r7, #28]
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	2b0f      	cmp	r3, #15
 8003c96:	d9e9      	bls.n	8003c6c <prvInitialiseNewTask+0x64>
 8003c98:	e000      	b.n	8003c9c <prvInitialiseNewTask+0x94>
			{
				break;
 8003c9a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ca4:	e003      	b.n	8003cae <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb0:	2b37      	cmp	r3, #55	; 0x37
 8003cb2:	d901      	bls.n	8003cb8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003cb4:	2337      	movs	r3, #55	; 0x37
 8003cb6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cbc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cc2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ccc:	3304      	adds	r3, #4
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7ff f978 	bl	8002fc4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd6:	3318      	adds	r3, #24
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f7ff f973 	bl	8002fc4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ce2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cf2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003d02:	683a      	ldr	r2, [r7, #0]
 8003d04:	68f9      	ldr	r1, [r7, #12]
 8003d06:	69b8      	ldr	r0, [r7, #24]
 8003d08:	f001 f928 	bl	8004f5c <pxPortInitialiseStack>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d10:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d002      	beq.n	8003d1e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d1c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d1e:	bf00      	nop
 8003d20:	3720      	adds	r7, #32
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
	...

08003d28 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003d30:	f001 fa40 	bl	80051b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003d34:	4b2d      	ldr	r3, [pc, #180]	; (8003dec <prvAddNewTaskToReadyList+0xc4>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	3301      	adds	r3, #1
 8003d3a:	4a2c      	ldr	r2, [pc, #176]	; (8003dec <prvAddNewTaskToReadyList+0xc4>)
 8003d3c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003d3e:	4b2c      	ldr	r3, [pc, #176]	; (8003df0 <prvAddNewTaskToReadyList+0xc8>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d109      	bne.n	8003d5a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003d46:	4a2a      	ldr	r2, [pc, #168]	; (8003df0 <prvAddNewTaskToReadyList+0xc8>)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003d4c:	4b27      	ldr	r3, [pc, #156]	; (8003dec <prvAddNewTaskToReadyList+0xc4>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d110      	bne.n	8003d76 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003d54:	f000 fc16 	bl	8004584 <prvInitialiseTaskLists>
 8003d58:	e00d      	b.n	8003d76 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003d5a:	4b26      	ldr	r3, [pc, #152]	; (8003df4 <prvAddNewTaskToReadyList+0xcc>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d109      	bne.n	8003d76 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003d62:	4b23      	ldr	r3, [pc, #140]	; (8003df0 <prvAddNewTaskToReadyList+0xc8>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d802      	bhi.n	8003d76 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003d70:	4a1f      	ldr	r2, [pc, #124]	; (8003df0 <prvAddNewTaskToReadyList+0xc8>)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003d76:	4b20      	ldr	r3, [pc, #128]	; (8003df8 <prvAddNewTaskToReadyList+0xd0>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	4a1e      	ldr	r2, [pc, #120]	; (8003df8 <prvAddNewTaskToReadyList+0xd0>)
 8003d7e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003d80:	4b1d      	ldr	r3, [pc, #116]	; (8003df8 <prvAddNewTaskToReadyList+0xd0>)
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d8c:	4b1b      	ldr	r3, [pc, #108]	; (8003dfc <prvAddNewTaskToReadyList+0xd4>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d903      	bls.n	8003d9c <prvAddNewTaskToReadyList+0x74>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d98:	4a18      	ldr	r2, [pc, #96]	; (8003dfc <prvAddNewTaskToReadyList+0xd4>)
 8003d9a:	6013      	str	r3, [r2, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003da0:	4613      	mov	r3, r2
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	4413      	add	r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	4a15      	ldr	r2, [pc, #84]	; (8003e00 <prvAddNewTaskToReadyList+0xd8>)
 8003daa:	441a      	add	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	3304      	adds	r3, #4
 8003db0:	4619      	mov	r1, r3
 8003db2:	4610      	mov	r0, r2
 8003db4:	f7ff f913 	bl	8002fde <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003db8:	f001 fa2c 	bl	8005214 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003dbc:	4b0d      	ldr	r3, [pc, #52]	; (8003df4 <prvAddNewTaskToReadyList+0xcc>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00e      	beq.n	8003de2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003dc4:	4b0a      	ldr	r3, [pc, #40]	; (8003df0 <prvAddNewTaskToReadyList+0xc8>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d207      	bcs.n	8003de2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003dd2:	4b0c      	ldr	r3, [pc, #48]	; (8003e04 <prvAddNewTaskToReadyList+0xdc>)
 8003dd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dd8:	601a      	str	r2, [r3, #0]
 8003dda:	f3bf 8f4f 	dsb	sy
 8003dde:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003de2:	bf00      	nop
 8003de4:	3708      	adds	r7, #8
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	20000bbc 	.word	0x20000bbc
 8003df0:	200006e8 	.word	0x200006e8
 8003df4:	20000bc8 	.word	0x20000bc8
 8003df8:	20000bd8 	.word	0x20000bd8
 8003dfc:	20000bc4 	.word	0x20000bc4
 8003e00:	200006ec 	.word	0x200006ec
 8003e04:	e000ed04 	.word	0xe000ed04

08003e08 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003e10:	2300      	movs	r3, #0
 8003e12:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d017      	beq.n	8003e4a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003e1a:	4b13      	ldr	r3, [pc, #76]	; (8003e68 <vTaskDelay+0x60>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00a      	beq.n	8003e38 <vTaskDelay+0x30>
	__asm volatile
 8003e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e26:	f383 8811 	msr	BASEPRI, r3
 8003e2a:	f3bf 8f6f 	isb	sy
 8003e2e:	f3bf 8f4f 	dsb	sy
 8003e32:	60bb      	str	r3, [r7, #8]
}
 8003e34:	bf00      	nop
 8003e36:	e7fe      	b.n	8003e36 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003e38:	f000 f880 	bl	8003f3c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003e3c:	2100      	movs	r1, #0
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 fcea 	bl	8004818 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003e44:	f000 f888 	bl	8003f58 <xTaskResumeAll>
 8003e48:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d107      	bne.n	8003e60 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003e50:	4b06      	ldr	r3, [pc, #24]	; (8003e6c <vTaskDelay+0x64>)
 8003e52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e56:	601a      	str	r2, [r3, #0]
 8003e58:	f3bf 8f4f 	dsb	sy
 8003e5c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003e60:	bf00      	nop
 8003e62:	3710      	adds	r7, #16
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	20000be4 	.word	0x20000be4
 8003e6c:	e000ed04 	.word	0xe000ed04

08003e70 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b08a      	sub	sp, #40	; 0x28
 8003e74:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003e76:	2300      	movs	r3, #0
 8003e78:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003e7e:	463a      	mov	r2, r7
 8003e80:	1d39      	adds	r1, r7, #4
 8003e82:	f107 0308 	add.w	r3, r7, #8
 8003e86:	4618      	mov	r0, r3
 8003e88:	f7ff f848 	bl	8002f1c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003e8c:	6839      	ldr	r1, [r7, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	68ba      	ldr	r2, [r7, #8]
 8003e92:	9202      	str	r2, [sp, #8]
 8003e94:	9301      	str	r3, [sp, #4]
 8003e96:	2300      	movs	r3, #0
 8003e98:	9300      	str	r3, [sp, #0]
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	460a      	mov	r2, r1
 8003e9e:	4921      	ldr	r1, [pc, #132]	; (8003f24 <vTaskStartScheduler+0xb4>)
 8003ea0:	4821      	ldr	r0, [pc, #132]	; (8003f28 <vTaskStartScheduler+0xb8>)
 8003ea2:	f7ff fe0f 	bl	8003ac4 <xTaskCreateStatic>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	4a20      	ldr	r2, [pc, #128]	; (8003f2c <vTaskStartScheduler+0xbc>)
 8003eaa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003eac:	4b1f      	ldr	r3, [pc, #124]	; (8003f2c <vTaskStartScheduler+0xbc>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d002      	beq.n	8003eba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	617b      	str	r3, [r7, #20]
 8003eb8:	e001      	b.n	8003ebe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d102      	bne.n	8003eca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003ec4:	f000 fcfc 	bl	80048c0 <xTimerCreateTimerTask>
 8003ec8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d116      	bne.n	8003efe <vTaskStartScheduler+0x8e>
	__asm volatile
 8003ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed4:	f383 8811 	msr	BASEPRI, r3
 8003ed8:	f3bf 8f6f 	isb	sy
 8003edc:	f3bf 8f4f 	dsb	sy
 8003ee0:	613b      	str	r3, [r7, #16]
}
 8003ee2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003ee4:	4b12      	ldr	r3, [pc, #72]	; (8003f30 <vTaskStartScheduler+0xc0>)
 8003ee6:	f04f 32ff 	mov.w	r2, #4294967295
 8003eea:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003eec:	4b11      	ldr	r3, [pc, #68]	; (8003f34 <vTaskStartScheduler+0xc4>)
 8003eee:	2201      	movs	r2, #1
 8003ef0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003ef2:	4b11      	ldr	r3, [pc, #68]	; (8003f38 <vTaskStartScheduler+0xc8>)
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003ef8:	f001 f8ba 	bl	8005070 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003efc:	e00e      	b.n	8003f1c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f04:	d10a      	bne.n	8003f1c <vTaskStartScheduler+0xac>
	__asm volatile
 8003f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f0a:	f383 8811 	msr	BASEPRI, r3
 8003f0e:	f3bf 8f6f 	isb	sy
 8003f12:	f3bf 8f4f 	dsb	sy
 8003f16:	60fb      	str	r3, [r7, #12]
}
 8003f18:	bf00      	nop
 8003f1a:	e7fe      	b.n	8003f1a <vTaskStartScheduler+0xaa>
}
 8003f1c:	bf00      	nop
 8003f1e:	3718      	adds	r7, #24
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	08005be4 	.word	0x08005be4
 8003f28:	08004555 	.word	0x08004555
 8003f2c:	20000be0 	.word	0x20000be0
 8003f30:	20000bdc 	.word	0x20000bdc
 8003f34:	20000bc8 	.word	0x20000bc8
 8003f38:	20000bc0 	.word	0x20000bc0

08003f3c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003f40:	4b04      	ldr	r3, [pc, #16]	; (8003f54 <vTaskSuspendAll+0x18>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	3301      	adds	r3, #1
 8003f46:	4a03      	ldr	r2, [pc, #12]	; (8003f54 <vTaskSuspendAll+0x18>)
 8003f48:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003f4a:	bf00      	nop
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr
 8003f54:	20000be4 	.word	0x20000be4

08003f58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003f62:	2300      	movs	r3, #0
 8003f64:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003f66:	4b42      	ldr	r3, [pc, #264]	; (8004070 <xTaskResumeAll+0x118>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d10a      	bne.n	8003f84 <xTaskResumeAll+0x2c>
	__asm volatile
 8003f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f72:	f383 8811 	msr	BASEPRI, r3
 8003f76:	f3bf 8f6f 	isb	sy
 8003f7a:	f3bf 8f4f 	dsb	sy
 8003f7e:	603b      	str	r3, [r7, #0]
}
 8003f80:	bf00      	nop
 8003f82:	e7fe      	b.n	8003f82 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003f84:	f001 f916 	bl	80051b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003f88:	4b39      	ldr	r3, [pc, #228]	; (8004070 <xTaskResumeAll+0x118>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	3b01      	subs	r3, #1
 8003f8e:	4a38      	ldr	r2, [pc, #224]	; (8004070 <xTaskResumeAll+0x118>)
 8003f90:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f92:	4b37      	ldr	r3, [pc, #220]	; (8004070 <xTaskResumeAll+0x118>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d162      	bne.n	8004060 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003f9a:	4b36      	ldr	r3, [pc, #216]	; (8004074 <xTaskResumeAll+0x11c>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d05e      	beq.n	8004060 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003fa2:	e02f      	b.n	8004004 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fa4:	4b34      	ldr	r3, [pc, #208]	; (8004078 <xTaskResumeAll+0x120>)
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	3318      	adds	r3, #24
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7ff f871 	bl	8003098 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	3304      	adds	r3, #4
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f7ff f86c 	bl	8003098 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fc4:	4b2d      	ldr	r3, [pc, #180]	; (800407c <xTaskResumeAll+0x124>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d903      	bls.n	8003fd4 <xTaskResumeAll+0x7c>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd0:	4a2a      	ldr	r2, [pc, #168]	; (800407c <xTaskResumeAll+0x124>)
 8003fd2:	6013      	str	r3, [r2, #0]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fd8:	4613      	mov	r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	4413      	add	r3, r2
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	4a27      	ldr	r2, [pc, #156]	; (8004080 <xTaskResumeAll+0x128>)
 8003fe2:	441a      	add	r2, r3
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	3304      	adds	r3, #4
 8003fe8:	4619      	mov	r1, r3
 8003fea:	4610      	mov	r0, r2
 8003fec:	f7fe fff7 	bl	8002fde <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ff4:	4b23      	ldr	r3, [pc, #140]	; (8004084 <xTaskResumeAll+0x12c>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d302      	bcc.n	8004004 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003ffe:	4b22      	ldr	r3, [pc, #136]	; (8004088 <xTaskResumeAll+0x130>)
 8004000:	2201      	movs	r2, #1
 8004002:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004004:	4b1c      	ldr	r3, [pc, #112]	; (8004078 <xTaskResumeAll+0x120>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1cb      	bne.n	8003fa4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d001      	beq.n	8004016 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004012:	f000 fb55 	bl	80046c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004016:	4b1d      	ldr	r3, [pc, #116]	; (800408c <xTaskResumeAll+0x134>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d010      	beq.n	8004044 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004022:	f000 f847 	bl	80040b4 <xTaskIncrementTick>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d002      	beq.n	8004032 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800402c:	4b16      	ldr	r3, [pc, #88]	; (8004088 <xTaskResumeAll+0x130>)
 800402e:	2201      	movs	r2, #1
 8004030:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	3b01      	subs	r3, #1
 8004036:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1f1      	bne.n	8004022 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800403e:	4b13      	ldr	r3, [pc, #76]	; (800408c <xTaskResumeAll+0x134>)
 8004040:	2200      	movs	r2, #0
 8004042:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004044:	4b10      	ldr	r3, [pc, #64]	; (8004088 <xTaskResumeAll+0x130>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d009      	beq.n	8004060 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800404c:	2301      	movs	r3, #1
 800404e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004050:	4b0f      	ldr	r3, [pc, #60]	; (8004090 <xTaskResumeAll+0x138>)
 8004052:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004056:	601a      	str	r2, [r3, #0]
 8004058:	f3bf 8f4f 	dsb	sy
 800405c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004060:	f001 f8d8 	bl	8005214 <vPortExitCritical>

	return xAlreadyYielded;
 8004064:	68bb      	ldr	r3, [r7, #8]
}
 8004066:	4618      	mov	r0, r3
 8004068:	3710      	adds	r7, #16
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	20000be4 	.word	0x20000be4
 8004074:	20000bbc 	.word	0x20000bbc
 8004078:	20000b7c 	.word	0x20000b7c
 800407c:	20000bc4 	.word	0x20000bc4
 8004080:	200006ec 	.word	0x200006ec
 8004084:	200006e8 	.word	0x200006e8
 8004088:	20000bd0 	.word	0x20000bd0
 800408c:	20000bcc 	.word	0x20000bcc
 8004090:	e000ed04 	.word	0xe000ed04

08004094 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800409a:	4b05      	ldr	r3, [pc, #20]	; (80040b0 <xTaskGetTickCount+0x1c>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80040a0:	687b      	ldr	r3, [r7, #4]
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	370c      	adds	r7, #12
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	20000bc0 	.word	0x20000bc0

080040b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b086      	sub	sp, #24
 80040b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80040ba:	2300      	movs	r3, #0
 80040bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040be:	4b4f      	ldr	r3, [pc, #316]	; (80041fc <xTaskIncrementTick+0x148>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	f040 808f 	bne.w	80041e6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80040c8:	4b4d      	ldr	r3, [pc, #308]	; (8004200 <xTaskIncrementTick+0x14c>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	3301      	adds	r3, #1
 80040ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80040d0:	4a4b      	ldr	r2, [pc, #300]	; (8004200 <xTaskIncrementTick+0x14c>)
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d120      	bne.n	800411e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80040dc:	4b49      	ldr	r3, [pc, #292]	; (8004204 <xTaskIncrementTick+0x150>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d00a      	beq.n	80040fc <xTaskIncrementTick+0x48>
	__asm volatile
 80040e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ea:	f383 8811 	msr	BASEPRI, r3
 80040ee:	f3bf 8f6f 	isb	sy
 80040f2:	f3bf 8f4f 	dsb	sy
 80040f6:	603b      	str	r3, [r7, #0]
}
 80040f8:	bf00      	nop
 80040fa:	e7fe      	b.n	80040fa <xTaskIncrementTick+0x46>
 80040fc:	4b41      	ldr	r3, [pc, #260]	; (8004204 <xTaskIncrementTick+0x150>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	60fb      	str	r3, [r7, #12]
 8004102:	4b41      	ldr	r3, [pc, #260]	; (8004208 <xTaskIncrementTick+0x154>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a3f      	ldr	r2, [pc, #252]	; (8004204 <xTaskIncrementTick+0x150>)
 8004108:	6013      	str	r3, [r2, #0]
 800410a:	4a3f      	ldr	r2, [pc, #252]	; (8004208 <xTaskIncrementTick+0x154>)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6013      	str	r3, [r2, #0]
 8004110:	4b3e      	ldr	r3, [pc, #248]	; (800420c <xTaskIncrementTick+0x158>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	3301      	adds	r3, #1
 8004116:	4a3d      	ldr	r2, [pc, #244]	; (800420c <xTaskIncrementTick+0x158>)
 8004118:	6013      	str	r3, [r2, #0]
 800411a:	f000 fad1 	bl	80046c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800411e:	4b3c      	ldr	r3, [pc, #240]	; (8004210 <xTaskIncrementTick+0x15c>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	429a      	cmp	r2, r3
 8004126:	d349      	bcc.n	80041bc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004128:	4b36      	ldr	r3, [pc, #216]	; (8004204 <xTaskIncrementTick+0x150>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d104      	bne.n	800413c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004132:	4b37      	ldr	r3, [pc, #220]	; (8004210 <xTaskIncrementTick+0x15c>)
 8004134:	f04f 32ff 	mov.w	r2, #4294967295
 8004138:	601a      	str	r2, [r3, #0]
					break;
 800413a:	e03f      	b.n	80041bc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800413c:	4b31      	ldr	r3, [pc, #196]	; (8004204 <xTaskIncrementTick+0x150>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800414c:	693a      	ldr	r2, [r7, #16]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	429a      	cmp	r2, r3
 8004152:	d203      	bcs.n	800415c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004154:	4a2e      	ldr	r2, [pc, #184]	; (8004210 <xTaskIncrementTick+0x15c>)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800415a:	e02f      	b.n	80041bc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	3304      	adds	r3, #4
 8004160:	4618      	mov	r0, r3
 8004162:	f7fe ff99 	bl	8003098 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800416a:	2b00      	cmp	r3, #0
 800416c:	d004      	beq.n	8004178 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	3318      	adds	r3, #24
 8004172:	4618      	mov	r0, r3
 8004174:	f7fe ff90 	bl	8003098 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800417c:	4b25      	ldr	r3, [pc, #148]	; (8004214 <xTaskIncrementTick+0x160>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	429a      	cmp	r2, r3
 8004182:	d903      	bls.n	800418c <xTaskIncrementTick+0xd8>
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004188:	4a22      	ldr	r2, [pc, #136]	; (8004214 <xTaskIncrementTick+0x160>)
 800418a:	6013      	str	r3, [r2, #0]
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004190:	4613      	mov	r3, r2
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	4413      	add	r3, r2
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	4a1f      	ldr	r2, [pc, #124]	; (8004218 <xTaskIncrementTick+0x164>)
 800419a:	441a      	add	r2, r3
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	3304      	adds	r3, #4
 80041a0:	4619      	mov	r1, r3
 80041a2:	4610      	mov	r0, r2
 80041a4:	f7fe ff1b 	bl	8002fde <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041ac:	4b1b      	ldr	r3, [pc, #108]	; (800421c <xTaskIncrementTick+0x168>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d3b8      	bcc.n	8004128 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80041b6:	2301      	movs	r3, #1
 80041b8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041ba:	e7b5      	b.n	8004128 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80041bc:	4b17      	ldr	r3, [pc, #92]	; (800421c <xTaskIncrementTick+0x168>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041c2:	4915      	ldr	r1, [pc, #84]	; (8004218 <xTaskIncrementTick+0x164>)
 80041c4:	4613      	mov	r3, r2
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	4413      	add	r3, r2
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	440b      	add	r3, r1
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d901      	bls.n	80041d8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80041d4:	2301      	movs	r3, #1
 80041d6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80041d8:	4b11      	ldr	r3, [pc, #68]	; (8004220 <xTaskIncrementTick+0x16c>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d007      	beq.n	80041f0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80041e0:	2301      	movs	r3, #1
 80041e2:	617b      	str	r3, [r7, #20]
 80041e4:	e004      	b.n	80041f0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80041e6:	4b0f      	ldr	r3, [pc, #60]	; (8004224 <xTaskIncrementTick+0x170>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	3301      	adds	r3, #1
 80041ec:	4a0d      	ldr	r2, [pc, #52]	; (8004224 <xTaskIncrementTick+0x170>)
 80041ee:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80041f0:	697b      	ldr	r3, [r7, #20]
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3718      	adds	r7, #24
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	20000be4 	.word	0x20000be4
 8004200:	20000bc0 	.word	0x20000bc0
 8004204:	20000b74 	.word	0x20000b74
 8004208:	20000b78 	.word	0x20000b78
 800420c:	20000bd4 	.word	0x20000bd4
 8004210:	20000bdc 	.word	0x20000bdc
 8004214:	20000bc4 	.word	0x20000bc4
 8004218:	200006ec 	.word	0x200006ec
 800421c:	200006e8 	.word	0x200006e8
 8004220:	20000bd0 	.word	0x20000bd0
 8004224:	20000bcc 	.word	0x20000bcc

08004228 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004228:	b480      	push	{r7}
 800422a:	b085      	sub	sp, #20
 800422c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800422e:	4b28      	ldr	r3, [pc, #160]	; (80042d0 <vTaskSwitchContext+0xa8>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d003      	beq.n	800423e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004236:	4b27      	ldr	r3, [pc, #156]	; (80042d4 <vTaskSwitchContext+0xac>)
 8004238:	2201      	movs	r2, #1
 800423a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800423c:	e041      	b.n	80042c2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800423e:	4b25      	ldr	r3, [pc, #148]	; (80042d4 <vTaskSwitchContext+0xac>)
 8004240:	2200      	movs	r2, #0
 8004242:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004244:	4b24      	ldr	r3, [pc, #144]	; (80042d8 <vTaskSwitchContext+0xb0>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	60fb      	str	r3, [r7, #12]
 800424a:	e010      	b.n	800426e <vTaskSwitchContext+0x46>
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d10a      	bne.n	8004268 <vTaskSwitchContext+0x40>
	__asm volatile
 8004252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004256:	f383 8811 	msr	BASEPRI, r3
 800425a:	f3bf 8f6f 	isb	sy
 800425e:	f3bf 8f4f 	dsb	sy
 8004262:	607b      	str	r3, [r7, #4]
}
 8004264:	bf00      	nop
 8004266:	e7fe      	b.n	8004266 <vTaskSwitchContext+0x3e>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	3b01      	subs	r3, #1
 800426c:	60fb      	str	r3, [r7, #12]
 800426e:	491b      	ldr	r1, [pc, #108]	; (80042dc <vTaskSwitchContext+0xb4>)
 8004270:	68fa      	ldr	r2, [r7, #12]
 8004272:	4613      	mov	r3, r2
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	4413      	add	r3, r2
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	440b      	add	r3, r1
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d0e4      	beq.n	800424c <vTaskSwitchContext+0x24>
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	4613      	mov	r3, r2
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	4413      	add	r3, r2
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	4a13      	ldr	r2, [pc, #76]	; (80042dc <vTaskSwitchContext+0xb4>)
 800428e:	4413      	add	r3, r2
 8004290:	60bb      	str	r3, [r7, #8]
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	685a      	ldr	r2, [r3, #4]
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	605a      	str	r2, [r3, #4]
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	685a      	ldr	r2, [r3, #4]
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	3308      	adds	r3, #8
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d104      	bne.n	80042b2 <vTaskSwitchContext+0x8a>
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	685a      	ldr	r2, [r3, #4]
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	605a      	str	r2, [r3, #4]
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	4a09      	ldr	r2, [pc, #36]	; (80042e0 <vTaskSwitchContext+0xb8>)
 80042ba:	6013      	str	r3, [r2, #0]
 80042bc:	4a06      	ldr	r2, [pc, #24]	; (80042d8 <vTaskSwitchContext+0xb0>)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6013      	str	r3, [r2, #0]
}
 80042c2:	bf00      	nop
 80042c4:	3714      	adds	r7, #20
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	20000be4 	.word	0x20000be4
 80042d4:	20000bd0 	.word	0x20000bd0
 80042d8:	20000bc4 	.word	0x20000bc4
 80042dc:	200006ec 	.word	0x200006ec
 80042e0:	200006e8 	.word	0x200006e8

080042e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d10a      	bne.n	800430a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80042f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f8:	f383 8811 	msr	BASEPRI, r3
 80042fc:	f3bf 8f6f 	isb	sy
 8004300:	f3bf 8f4f 	dsb	sy
 8004304:	60fb      	str	r3, [r7, #12]
}
 8004306:	bf00      	nop
 8004308:	e7fe      	b.n	8004308 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800430a:	4b07      	ldr	r3, [pc, #28]	; (8004328 <vTaskPlaceOnEventList+0x44>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	3318      	adds	r3, #24
 8004310:	4619      	mov	r1, r3
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f7fe fe87 	bl	8003026 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004318:	2101      	movs	r1, #1
 800431a:	6838      	ldr	r0, [r7, #0]
 800431c:	f000 fa7c 	bl	8004818 <prvAddCurrentTaskToDelayedList>
}
 8004320:	bf00      	nop
 8004322:	3710      	adds	r7, #16
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}
 8004328:	200006e8 	.word	0x200006e8

0800432c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800432c:	b580      	push	{r7, lr}
 800432e:	b086      	sub	sp, #24
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d10a      	bne.n	8004354 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800433e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004342:	f383 8811 	msr	BASEPRI, r3
 8004346:	f3bf 8f6f 	isb	sy
 800434a:	f3bf 8f4f 	dsb	sy
 800434e:	617b      	str	r3, [r7, #20]
}
 8004350:	bf00      	nop
 8004352:	e7fe      	b.n	8004352 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004354:	4b0a      	ldr	r3, [pc, #40]	; (8004380 <vTaskPlaceOnEventListRestricted+0x54>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	3318      	adds	r3, #24
 800435a:	4619      	mov	r1, r3
 800435c:	68f8      	ldr	r0, [r7, #12]
 800435e:	f7fe fe3e 	bl	8002fde <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d002      	beq.n	800436e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004368:	f04f 33ff 	mov.w	r3, #4294967295
 800436c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800436e:	6879      	ldr	r1, [r7, #4]
 8004370:	68b8      	ldr	r0, [r7, #8]
 8004372:	f000 fa51 	bl	8004818 <prvAddCurrentTaskToDelayedList>
	}
 8004376:	bf00      	nop
 8004378:	3718      	adds	r7, #24
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	200006e8 	.word	0x200006e8

08004384 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b086      	sub	sp, #24
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d10a      	bne.n	80043b0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800439a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800439e:	f383 8811 	msr	BASEPRI, r3
 80043a2:	f3bf 8f6f 	isb	sy
 80043a6:	f3bf 8f4f 	dsb	sy
 80043aa:	60fb      	str	r3, [r7, #12]
}
 80043ac:	bf00      	nop
 80043ae:	e7fe      	b.n	80043ae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	3318      	adds	r3, #24
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7fe fe6f 	bl	8003098 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043ba:	4b1e      	ldr	r3, [pc, #120]	; (8004434 <xTaskRemoveFromEventList+0xb0>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d11d      	bne.n	80043fe <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	3304      	adds	r3, #4
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7fe fe66 	bl	8003098 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043d0:	4b19      	ldr	r3, [pc, #100]	; (8004438 <xTaskRemoveFromEventList+0xb4>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d903      	bls.n	80043e0 <xTaskRemoveFromEventList+0x5c>
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043dc:	4a16      	ldr	r2, [pc, #88]	; (8004438 <xTaskRemoveFromEventList+0xb4>)
 80043de:	6013      	str	r3, [r2, #0]
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043e4:	4613      	mov	r3, r2
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	4413      	add	r3, r2
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	4a13      	ldr	r2, [pc, #76]	; (800443c <xTaskRemoveFromEventList+0xb8>)
 80043ee:	441a      	add	r2, r3
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	3304      	adds	r3, #4
 80043f4:	4619      	mov	r1, r3
 80043f6:	4610      	mov	r0, r2
 80043f8:	f7fe fdf1 	bl	8002fde <vListInsertEnd>
 80043fc:	e005      	b.n	800440a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	3318      	adds	r3, #24
 8004402:	4619      	mov	r1, r3
 8004404:	480e      	ldr	r0, [pc, #56]	; (8004440 <xTaskRemoveFromEventList+0xbc>)
 8004406:	f7fe fdea 	bl	8002fde <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800440e:	4b0d      	ldr	r3, [pc, #52]	; (8004444 <xTaskRemoveFromEventList+0xc0>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004414:	429a      	cmp	r2, r3
 8004416:	d905      	bls.n	8004424 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004418:	2301      	movs	r3, #1
 800441a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800441c:	4b0a      	ldr	r3, [pc, #40]	; (8004448 <xTaskRemoveFromEventList+0xc4>)
 800441e:	2201      	movs	r2, #1
 8004420:	601a      	str	r2, [r3, #0]
 8004422:	e001      	b.n	8004428 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004424:	2300      	movs	r3, #0
 8004426:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004428:	697b      	ldr	r3, [r7, #20]
}
 800442a:	4618      	mov	r0, r3
 800442c:	3718      	adds	r7, #24
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	20000be4 	.word	0x20000be4
 8004438:	20000bc4 	.word	0x20000bc4
 800443c:	200006ec 	.word	0x200006ec
 8004440:	20000b7c 	.word	0x20000b7c
 8004444:	200006e8 	.word	0x200006e8
 8004448:	20000bd0 	.word	0x20000bd0

0800444c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004454:	4b06      	ldr	r3, [pc, #24]	; (8004470 <vTaskInternalSetTimeOutState+0x24>)
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800445c:	4b05      	ldr	r3, [pc, #20]	; (8004474 <vTaskInternalSetTimeOutState+0x28>)
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	605a      	str	r2, [r3, #4]
}
 8004464:	bf00      	nop
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr
 8004470:	20000bd4 	.word	0x20000bd4
 8004474:	20000bc0 	.word	0x20000bc0

08004478 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b088      	sub	sp, #32
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d10a      	bne.n	800449e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800448c:	f383 8811 	msr	BASEPRI, r3
 8004490:	f3bf 8f6f 	isb	sy
 8004494:	f3bf 8f4f 	dsb	sy
 8004498:	613b      	str	r3, [r7, #16]
}
 800449a:	bf00      	nop
 800449c:	e7fe      	b.n	800449c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d10a      	bne.n	80044ba <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80044a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a8:	f383 8811 	msr	BASEPRI, r3
 80044ac:	f3bf 8f6f 	isb	sy
 80044b0:	f3bf 8f4f 	dsb	sy
 80044b4:	60fb      	str	r3, [r7, #12]
}
 80044b6:	bf00      	nop
 80044b8:	e7fe      	b.n	80044b8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80044ba:	f000 fe7b 	bl	80051b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80044be:	4b1d      	ldr	r3, [pc, #116]	; (8004534 <xTaskCheckForTimeOut+0xbc>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	69ba      	ldr	r2, [r7, #24]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d6:	d102      	bne.n	80044de <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80044d8:	2300      	movs	r3, #0
 80044da:	61fb      	str	r3, [r7, #28]
 80044dc:	e023      	b.n	8004526 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	4b15      	ldr	r3, [pc, #84]	; (8004538 <xTaskCheckForTimeOut+0xc0>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d007      	beq.n	80044fa <xTaskCheckForTimeOut+0x82>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	69ba      	ldr	r2, [r7, #24]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d302      	bcc.n	80044fa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80044f4:	2301      	movs	r3, #1
 80044f6:	61fb      	str	r3, [r7, #28]
 80044f8:	e015      	b.n	8004526 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	697a      	ldr	r2, [r7, #20]
 8004500:	429a      	cmp	r2, r3
 8004502:	d20b      	bcs.n	800451c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	1ad2      	subs	r2, r2, r3
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f7ff ff9b 	bl	800444c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004516:	2300      	movs	r3, #0
 8004518:	61fb      	str	r3, [r7, #28]
 800451a:	e004      	b.n	8004526 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	2200      	movs	r2, #0
 8004520:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004522:	2301      	movs	r3, #1
 8004524:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004526:	f000 fe75 	bl	8005214 <vPortExitCritical>

	return xReturn;
 800452a:	69fb      	ldr	r3, [r7, #28]
}
 800452c:	4618      	mov	r0, r3
 800452e:	3720      	adds	r7, #32
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}
 8004534:	20000bc0 	.word	0x20000bc0
 8004538:	20000bd4 	.word	0x20000bd4

0800453c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800453c:	b480      	push	{r7}
 800453e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004540:	4b03      	ldr	r3, [pc, #12]	; (8004550 <vTaskMissedYield+0x14>)
 8004542:	2201      	movs	r2, #1
 8004544:	601a      	str	r2, [r3, #0]
}
 8004546:	bf00      	nop
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr
 8004550:	20000bd0 	.word	0x20000bd0

08004554 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800455c:	f000 f852 	bl	8004604 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004560:	4b06      	ldr	r3, [pc, #24]	; (800457c <prvIdleTask+0x28>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d9f9      	bls.n	800455c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004568:	4b05      	ldr	r3, [pc, #20]	; (8004580 <prvIdleTask+0x2c>)
 800456a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800456e:	601a      	str	r2, [r3, #0]
 8004570:	f3bf 8f4f 	dsb	sy
 8004574:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004578:	e7f0      	b.n	800455c <prvIdleTask+0x8>
 800457a:	bf00      	nop
 800457c:	200006ec 	.word	0x200006ec
 8004580:	e000ed04 	.word	0xe000ed04

08004584 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800458a:	2300      	movs	r3, #0
 800458c:	607b      	str	r3, [r7, #4]
 800458e:	e00c      	b.n	80045aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	4613      	mov	r3, r2
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	4413      	add	r3, r2
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	4a12      	ldr	r2, [pc, #72]	; (80045e4 <prvInitialiseTaskLists+0x60>)
 800459c:	4413      	add	r3, r2
 800459e:	4618      	mov	r0, r3
 80045a0:	f7fe fcf0 	bl	8002f84 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	3301      	adds	r3, #1
 80045a8:	607b      	str	r3, [r7, #4]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2b37      	cmp	r3, #55	; 0x37
 80045ae:	d9ef      	bls.n	8004590 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80045b0:	480d      	ldr	r0, [pc, #52]	; (80045e8 <prvInitialiseTaskLists+0x64>)
 80045b2:	f7fe fce7 	bl	8002f84 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80045b6:	480d      	ldr	r0, [pc, #52]	; (80045ec <prvInitialiseTaskLists+0x68>)
 80045b8:	f7fe fce4 	bl	8002f84 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80045bc:	480c      	ldr	r0, [pc, #48]	; (80045f0 <prvInitialiseTaskLists+0x6c>)
 80045be:	f7fe fce1 	bl	8002f84 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80045c2:	480c      	ldr	r0, [pc, #48]	; (80045f4 <prvInitialiseTaskLists+0x70>)
 80045c4:	f7fe fcde 	bl	8002f84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80045c8:	480b      	ldr	r0, [pc, #44]	; (80045f8 <prvInitialiseTaskLists+0x74>)
 80045ca:	f7fe fcdb 	bl	8002f84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80045ce:	4b0b      	ldr	r3, [pc, #44]	; (80045fc <prvInitialiseTaskLists+0x78>)
 80045d0:	4a05      	ldr	r2, [pc, #20]	; (80045e8 <prvInitialiseTaskLists+0x64>)
 80045d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80045d4:	4b0a      	ldr	r3, [pc, #40]	; (8004600 <prvInitialiseTaskLists+0x7c>)
 80045d6:	4a05      	ldr	r2, [pc, #20]	; (80045ec <prvInitialiseTaskLists+0x68>)
 80045d8:	601a      	str	r2, [r3, #0]
}
 80045da:	bf00      	nop
 80045dc:	3708      	adds	r7, #8
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	200006ec 	.word	0x200006ec
 80045e8:	20000b4c 	.word	0x20000b4c
 80045ec:	20000b60 	.word	0x20000b60
 80045f0:	20000b7c 	.word	0x20000b7c
 80045f4:	20000b90 	.word	0x20000b90
 80045f8:	20000ba8 	.word	0x20000ba8
 80045fc:	20000b74 	.word	0x20000b74
 8004600:	20000b78 	.word	0x20000b78

08004604 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800460a:	e019      	b.n	8004640 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800460c:	f000 fdd2 	bl	80051b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004610:	4b10      	ldr	r3, [pc, #64]	; (8004654 <prvCheckTasksWaitingTermination+0x50>)
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	3304      	adds	r3, #4
 800461c:	4618      	mov	r0, r3
 800461e:	f7fe fd3b 	bl	8003098 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004622:	4b0d      	ldr	r3, [pc, #52]	; (8004658 <prvCheckTasksWaitingTermination+0x54>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	3b01      	subs	r3, #1
 8004628:	4a0b      	ldr	r2, [pc, #44]	; (8004658 <prvCheckTasksWaitingTermination+0x54>)
 800462a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800462c:	4b0b      	ldr	r3, [pc, #44]	; (800465c <prvCheckTasksWaitingTermination+0x58>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	3b01      	subs	r3, #1
 8004632:	4a0a      	ldr	r2, [pc, #40]	; (800465c <prvCheckTasksWaitingTermination+0x58>)
 8004634:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004636:	f000 fded 	bl	8005214 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 f810 	bl	8004660 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004640:	4b06      	ldr	r3, [pc, #24]	; (800465c <prvCheckTasksWaitingTermination+0x58>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d1e1      	bne.n	800460c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004648:	bf00      	nop
 800464a:	bf00      	nop
 800464c:	3708      	adds	r7, #8
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	20000b90 	.word	0x20000b90
 8004658:	20000bbc 	.word	0x20000bbc
 800465c:	20000ba4 	.word	0x20000ba4

08004660 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800466e:	2b00      	cmp	r3, #0
 8004670:	d108      	bne.n	8004684 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004676:	4618      	mov	r0, r3
 8004678:	f000 ff8a 	bl	8005590 <vPortFree>
				vPortFree( pxTCB );
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f000 ff87 	bl	8005590 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004682:	e018      	b.n	80046b6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800468a:	2b01      	cmp	r3, #1
 800468c:	d103      	bne.n	8004696 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 ff7e 	bl	8005590 <vPortFree>
	}
 8004694:	e00f      	b.n	80046b6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800469c:	2b02      	cmp	r3, #2
 800469e:	d00a      	beq.n	80046b6 <prvDeleteTCB+0x56>
	__asm volatile
 80046a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a4:	f383 8811 	msr	BASEPRI, r3
 80046a8:	f3bf 8f6f 	isb	sy
 80046ac:	f3bf 8f4f 	dsb	sy
 80046b0:	60fb      	str	r3, [r7, #12]
}
 80046b2:	bf00      	nop
 80046b4:	e7fe      	b.n	80046b4 <prvDeleteTCB+0x54>
	}
 80046b6:	bf00      	nop
 80046b8:	3710      	adds	r7, #16
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
	...

080046c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046c6:	4b0c      	ldr	r3, [pc, #48]	; (80046f8 <prvResetNextTaskUnblockTime+0x38>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d104      	bne.n	80046da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80046d0:	4b0a      	ldr	r3, [pc, #40]	; (80046fc <prvResetNextTaskUnblockTime+0x3c>)
 80046d2:	f04f 32ff 	mov.w	r2, #4294967295
 80046d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80046d8:	e008      	b.n	80046ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046da:	4b07      	ldr	r3, [pc, #28]	; (80046f8 <prvResetNextTaskUnblockTime+0x38>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	4a04      	ldr	r2, [pc, #16]	; (80046fc <prvResetNextTaskUnblockTime+0x3c>)
 80046ea:	6013      	str	r3, [r2, #0]
}
 80046ec:	bf00      	nop
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr
 80046f8:	20000b74 	.word	0x20000b74
 80046fc:	20000bdc 	.word	0x20000bdc

08004700 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004706:	4b0b      	ldr	r3, [pc, #44]	; (8004734 <xTaskGetSchedulerState+0x34>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d102      	bne.n	8004714 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800470e:	2301      	movs	r3, #1
 8004710:	607b      	str	r3, [r7, #4]
 8004712:	e008      	b.n	8004726 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004714:	4b08      	ldr	r3, [pc, #32]	; (8004738 <xTaskGetSchedulerState+0x38>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d102      	bne.n	8004722 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800471c:	2302      	movs	r3, #2
 800471e:	607b      	str	r3, [r7, #4]
 8004720:	e001      	b.n	8004726 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004722:	2300      	movs	r3, #0
 8004724:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004726:	687b      	ldr	r3, [r7, #4]
	}
 8004728:	4618      	mov	r0, r3
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr
 8004734:	20000bc8 	.word	0x20000bc8
 8004738:	20000be4 	.word	0x20000be4

0800473c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800473c:	b580      	push	{r7, lr}
 800473e:	b086      	sub	sp, #24
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004748:	2300      	movs	r3, #0
 800474a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d056      	beq.n	8004800 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004752:	4b2e      	ldr	r3, [pc, #184]	; (800480c <xTaskPriorityDisinherit+0xd0>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	693a      	ldr	r2, [r7, #16]
 8004758:	429a      	cmp	r2, r3
 800475a:	d00a      	beq.n	8004772 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800475c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004760:	f383 8811 	msr	BASEPRI, r3
 8004764:	f3bf 8f6f 	isb	sy
 8004768:	f3bf 8f4f 	dsb	sy
 800476c:	60fb      	str	r3, [r7, #12]
}
 800476e:	bf00      	nop
 8004770:	e7fe      	b.n	8004770 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004776:	2b00      	cmp	r3, #0
 8004778:	d10a      	bne.n	8004790 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800477a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800477e:	f383 8811 	msr	BASEPRI, r3
 8004782:	f3bf 8f6f 	isb	sy
 8004786:	f3bf 8f4f 	dsb	sy
 800478a:	60bb      	str	r3, [r7, #8]
}
 800478c:	bf00      	nop
 800478e:	e7fe      	b.n	800478e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004794:	1e5a      	subs	r2, r3, #1
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d02c      	beq.n	8004800 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d128      	bne.n	8004800 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	3304      	adds	r3, #4
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7fe fc70 	bl	8003098 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047d0:	4b0f      	ldr	r3, [pc, #60]	; (8004810 <xTaskPriorityDisinherit+0xd4>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d903      	bls.n	80047e0 <xTaskPriorityDisinherit+0xa4>
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047dc:	4a0c      	ldr	r2, [pc, #48]	; (8004810 <xTaskPriorityDisinherit+0xd4>)
 80047de:	6013      	str	r3, [r2, #0]
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047e4:	4613      	mov	r3, r2
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	4413      	add	r3, r2
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	4a09      	ldr	r2, [pc, #36]	; (8004814 <xTaskPriorityDisinherit+0xd8>)
 80047ee:	441a      	add	r2, r3
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	3304      	adds	r3, #4
 80047f4:	4619      	mov	r1, r3
 80047f6:	4610      	mov	r0, r2
 80047f8:	f7fe fbf1 	bl	8002fde <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80047fc:	2301      	movs	r3, #1
 80047fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004800:	697b      	ldr	r3, [r7, #20]
	}
 8004802:	4618      	mov	r0, r3
 8004804:	3718      	adds	r7, #24
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	200006e8 	.word	0x200006e8
 8004810:	20000bc4 	.word	0x20000bc4
 8004814:	200006ec 	.word	0x200006ec

08004818 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004822:	4b21      	ldr	r3, [pc, #132]	; (80048a8 <prvAddCurrentTaskToDelayedList+0x90>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004828:	4b20      	ldr	r3, [pc, #128]	; (80048ac <prvAddCurrentTaskToDelayedList+0x94>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	3304      	adds	r3, #4
 800482e:	4618      	mov	r0, r3
 8004830:	f7fe fc32 	bl	8003098 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800483a:	d10a      	bne.n	8004852 <prvAddCurrentTaskToDelayedList+0x3a>
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d007      	beq.n	8004852 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004842:	4b1a      	ldr	r3, [pc, #104]	; (80048ac <prvAddCurrentTaskToDelayedList+0x94>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	3304      	adds	r3, #4
 8004848:	4619      	mov	r1, r3
 800484a:	4819      	ldr	r0, [pc, #100]	; (80048b0 <prvAddCurrentTaskToDelayedList+0x98>)
 800484c:	f7fe fbc7 	bl	8002fde <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004850:	e026      	b.n	80048a0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004852:	68fa      	ldr	r2, [r7, #12]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4413      	add	r3, r2
 8004858:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800485a:	4b14      	ldr	r3, [pc, #80]	; (80048ac <prvAddCurrentTaskToDelayedList+0x94>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68ba      	ldr	r2, [r7, #8]
 8004860:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004862:	68ba      	ldr	r2, [r7, #8]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	429a      	cmp	r2, r3
 8004868:	d209      	bcs.n	800487e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800486a:	4b12      	ldr	r3, [pc, #72]	; (80048b4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	4b0f      	ldr	r3, [pc, #60]	; (80048ac <prvAddCurrentTaskToDelayedList+0x94>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	3304      	adds	r3, #4
 8004874:	4619      	mov	r1, r3
 8004876:	4610      	mov	r0, r2
 8004878:	f7fe fbd5 	bl	8003026 <vListInsert>
}
 800487c:	e010      	b.n	80048a0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800487e:	4b0e      	ldr	r3, [pc, #56]	; (80048b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	4b0a      	ldr	r3, [pc, #40]	; (80048ac <prvAddCurrentTaskToDelayedList+0x94>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	3304      	adds	r3, #4
 8004888:	4619      	mov	r1, r3
 800488a:	4610      	mov	r0, r2
 800488c:	f7fe fbcb 	bl	8003026 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004890:	4b0a      	ldr	r3, [pc, #40]	; (80048bc <prvAddCurrentTaskToDelayedList+0xa4>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68ba      	ldr	r2, [r7, #8]
 8004896:	429a      	cmp	r2, r3
 8004898:	d202      	bcs.n	80048a0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800489a:	4a08      	ldr	r2, [pc, #32]	; (80048bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	6013      	str	r3, [r2, #0]
}
 80048a0:	bf00      	nop
 80048a2:	3710      	adds	r7, #16
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	20000bc0 	.word	0x20000bc0
 80048ac:	200006e8 	.word	0x200006e8
 80048b0:	20000ba8 	.word	0x20000ba8
 80048b4:	20000b78 	.word	0x20000b78
 80048b8:	20000b74 	.word	0x20000b74
 80048bc:	20000bdc 	.word	0x20000bdc

080048c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b08a      	sub	sp, #40	; 0x28
 80048c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80048c6:	2300      	movs	r3, #0
 80048c8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80048ca:	f000 fb07 	bl	8004edc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80048ce:	4b1c      	ldr	r3, [pc, #112]	; (8004940 <xTimerCreateTimerTask+0x80>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d021      	beq.n	800491a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80048d6:	2300      	movs	r3, #0
 80048d8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80048da:	2300      	movs	r3, #0
 80048dc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80048de:	1d3a      	adds	r2, r7, #4
 80048e0:	f107 0108 	add.w	r1, r7, #8
 80048e4:	f107 030c 	add.w	r3, r7, #12
 80048e8:	4618      	mov	r0, r3
 80048ea:	f7fe fb31 	bl	8002f50 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80048ee:	6879      	ldr	r1, [r7, #4]
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	9202      	str	r2, [sp, #8]
 80048f6:	9301      	str	r3, [sp, #4]
 80048f8:	2302      	movs	r3, #2
 80048fa:	9300      	str	r3, [sp, #0]
 80048fc:	2300      	movs	r3, #0
 80048fe:	460a      	mov	r2, r1
 8004900:	4910      	ldr	r1, [pc, #64]	; (8004944 <xTimerCreateTimerTask+0x84>)
 8004902:	4811      	ldr	r0, [pc, #68]	; (8004948 <xTimerCreateTimerTask+0x88>)
 8004904:	f7ff f8de 	bl	8003ac4 <xTaskCreateStatic>
 8004908:	4603      	mov	r3, r0
 800490a:	4a10      	ldr	r2, [pc, #64]	; (800494c <xTimerCreateTimerTask+0x8c>)
 800490c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800490e:	4b0f      	ldr	r3, [pc, #60]	; (800494c <xTimerCreateTimerTask+0x8c>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d001      	beq.n	800491a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004916:	2301      	movs	r3, #1
 8004918:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d10a      	bne.n	8004936 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004924:	f383 8811 	msr	BASEPRI, r3
 8004928:	f3bf 8f6f 	isb	sy
 800492c:	f3bf 8f4f 	dsb	sy
 8004930:	613b      	str	r3, [r7, #16]
}
 8004932:	bf00      	nop
 8004934:	e7fe      	b.n	8004934 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004936:	697b      	ldr	r3, [r7, #20]
}
 8004938:	4618      	mov	r0, r3
 800493a:	3718      	adds	r7, #24
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}
 8004940:	20000c18 	.word	0x20000c18
 8004944:	08005bec 	.word	0x08005bec
 8004948:	08004a85 	.word	0x08004a85
 800494c:	20000c1c 	.word	0x20000c1c

08004950 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b08a      	sub	sp, #40	; 0x28
 8004954:	af00      	add	r7, sp, #0
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	607a      	str	r2, [r7, #4]
 800495c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800495e:	2300      	movs	r3, #0
 8004960:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d10a      	bne.n	800497e <xTimerGenericCommand+0x2e>
	__asm volatile
 8004968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800496c:	f383 8811 	msr	BASEPRI, r3
 8004970:	f3bf 8f6f 	isb	sy
 8004974:	f3bf 8f4f 	dsb	sy
 8004978:	623b      	str	r3, [r7, #32]
}
 800497a:	bf00      	nop
 800497c:	e7fe      	b.n	800497c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800497e:	4b1a      	ldr	r3, [pc, #104]	; (80049e8 <xTimerGenericCommand+0x98>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d02a      	beq.n	80049dc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	2b05      	cmp	r3, #5
 8004996:	dc18      	bgt.n	80049ca <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004998:	f7ff feb2 	bl	8004700 <xTaskGetSchedulerState>
 800499c:	4603      	mov	r3, r0
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d109      	bne.n	80049b6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80049a2:	4b11      	ldr	r3, [pc, #68]	; (80049e8 <xTimerGenericCommand+0x98>)
 80049a4:	6818      	ldr	r0, [r3, #0]
 80049a6:	f107 0110 	add.w	r1, r7, #16
 80049aa:	2300      	movs	r3, #0
 80049ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049ae:	f7fe fca1 	bl	80032f4 <xQueueGenericSend>
 80049b2:	6278      	str	r0, [r7, #36]	; 0x24
 80049b4:	e012      	b.n	80049dc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80049b6:	4b0c      	ldr	r3, [pc, #48]	; (80049e8 <xTimerGenericCommand+0x98>)
 80049b8:	6818      	ldr	r0, [r3, #0]
 80049ba:	f107 0110 	add.w	r1, r7, #16
 80049be:	2300      	movs	r3, #0
 80049c0:	2200      	movs	r2, #0
 80049c2:	f7fe fc97 	bl	80032f4 <xQueueGenericSend>
 80049c6:	6278      	str	r0, [r7, #36]	; 0x24
 80049c8:	e008      	b.n	80049dc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80049ca:	4b07      	ldr	r3, [pc, #28]	; (80049e8 <xTimerGenericCommand+0x98>)
 80049cc:	6818      	ldr	r0, [r3, #0]
 80049ce:	f107 0110 	add.w	r1, r7, #16
 80049d2:	2300      	movs	r3, #0
 80049d4:	683a      	ldr	r2, [r7, #0]
 80049d6:	f7fe fd8b 	bl	80034f0 <xQueueGenericSendFromISR>
 80049da:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80049dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3728      	adds	r7, #40	; 0x28
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	20000c18 	.word	0x20000c18

080049ec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b088      	sub	sp, #32
 80049f0:	af02      	add	r7, sp, #8
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049f6:	4b22      	ldr	r3, [pc, #136]	; (8004a80 <prvProcessExpiredTimer+0x94>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	3304      	adds	r3, #4
 8004a04:	4618      	mov	r0, r3
 8004a06:	f7fe fb47 	bl	8003098 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a10:	f003 0304 	and.w	r3, r3, #4
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d022      	beq.n	8004a5e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	699a      	ldr	r2, [r3, #24]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	18d1      	adds	r1, r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	683a      	ldr	r2, [r7, #0]
 8004a24:	6978      	ldr	r0, [r7, #20]
 8004a26:	f000 f8d1 	bl	8004bcc <prvInsertTimerInActiveList>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d01f      	beq.n	8004a70 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004a30:	2300      	movs	r3, #0
 8004a32:	9300      	str	r3, [sp, #0]
 8004a34:	2300      	movs	r3, #0
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	2100      	movs	r1, #0
 8004a3a:	6978      	ldr	r0, [r7, #20]
 8004a3c:	f7ff ff88 	bl	8004950 <xTimerGenericCommand>
 8004a40:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d113      	bne.n	8004a70 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a4c:	f383 8811 	msr	BASEPRI, r3
 8004a50:	f3bf 8f6f 	isb	sy
 8004a54:	f3bf 8f4f 	dsb	sy
 8004a58:	60fb      	str	r3, [r7, #12]
}
 8004a5a:	bf00      	nop
 8004a5c:	e7fe      	b.n	8004a5c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a64:	f023 0301 	bic.w	r3, r3, #1
 8004a68:	b2da      	uxtb	r2, r3
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	6a1b      	ldr	r3, [r3, #32]
 8004a74:	6978      	ldr	r0, [r7, #20]
 8004a76:	4798      	blx	r3
}
 8004a78:	bf00      	nop
 8004a7a:	3718      	adds	r7, #24
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	20000c10 	.word	0x20000c10

08004a84 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004a8c:	f107 0308 	add.w	r3, r7, #8
 8004a90:	4618      	mov	r0, r3
 8004a92:	f000 f857 	bl	8004b44 <prvGetNextExpireTime>
 8004a96:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	68f8      	ldr	r0, [r7, #12]
 8004a9e:	f000 f803 	bl	8004aa8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004aa2:	f000 f8d5 	bl	8004c50 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004aa6:	e7f1      	b.n	8004a8c <prvTimerTask+0x8>

08004aa8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004ab2:	f7ff fa43 	bl	8003f3c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004ab6:	f107 0308 	add.w	r3, r7, #8
 8004aba:	4618      	mov	r0, r3
 8004abc:	f000 f866 	bl	8004b8c <prvSampleTimeNow>
 8004ac0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d130      	bne.n	8004b2a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d10a      	bne.n	8004ae4 <prvProcessTimerOrBlockTask+0x3c>
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d806      	bhi.n	8004ae4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004ad6:	f7ff fa3f 	bl	8003f58 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004ada:	68f9      	ldr	r1, [r7, #12]
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f7ff ff85 	bl	80049ec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004ae2:	e024      	b.n	8004b2e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d008      	beq.n	8004afc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004aea:	4b13      	ldr	r3, [pc, #76]	; (8004b38 <prvProcessTimerOrBlockTask+0x90>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d101      	bne.n	8004af8 <prvProcessTimerOrBlockTask+0x50>
 8004af4:	2301      	movs	r3, #1
 8004af6:	e000      	b.n	8004afa <prvProcessTimerOrBlockTask+0x52>
 8004af8:	2300      	movs	r3, #0
 8004afa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004afc:	4b0f      	ldr	r3, [pc, #60]	; (8004b3c <prvProcessTimerOrBlockTask+0x94>)
 8004afe:	6818      	ldr	r0, [r3, #0]
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	683a      	ldr	r2, [r7, #0]
 8004b08:	4619      	mov	r1, r3
 8004b0a:	f7fe ffa7 	bl	8003a5c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004b0e:	f7ff fa23 	bl	8003f58 <xTaskResumeAll>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d10a      	bne.n	8004b2e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004b18:	4b09      	ldr	r3, [pc, #36]	; (8004b40 <prvProcessTimerOrBlockTask+0x98>)
 8004b1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b1e:	601a      	str	r2, [r3, #0]
 8004b20:	f3bf 8f4f 	dsb	sy
 8004b24:	f3bf 8f6f 	isb	sy
}
 8004b28:	e001      	b.n	8004b2e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004b2a:	f7ff fa15 	bl	8003f58 <xTaskResumeAll>
}
 8004b2e:	bf00      	nop
 8004b30:	3710      	adds	r7, #16
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	20000c14 	.word	0x20000c14
 8004b3c:	20000c18 	.word	0x20000c18
 8004b40:	e000ed04 	.word	0xe000ed04

08004b44 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004b4c:	4b0e      	ldr	r3, [pc, #56]	; (8004b88 <prvGetNextExpireTime+0x44>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d101      	bne.n	8004b5a <prvGetNextExpireTime+0x16>
 8004b56:	2201      	movs	r2, #1
 8004b58:	e000      	b.n	8004b5c <prvGetNextExpireTime+0x18>
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d105      	bne.n	8004b74 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004b68:	4b07      	ldr	r3, [pc, #28]	; (8004b88 <prvGetNextExpireTime+0x44>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	60fb      	str	r3, [r7, #12]
 8004b72:	e001      	b.n	8004b78 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004b74:	2300      	movs	r3, #0
 8004b76:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004b78:	68fb      	ldr	r3, [r7, #12]
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3714      	adds	r7, #20
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
 8004b86:	bf00      	nop
 8004b88:	20000c10 	.word	0x20000c10

08004b8c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004b94:	f7ff fa7e 	bl	8004094 <xTaskGetTickCount>
 8004b98:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004b9a:	4b0b      	ldr	r3, [pc, #44]	; (8004bc8 <prvSampleTimeNow+0x3c>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68fa      	ldr	r2, [r7, #12]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d205      	bcs.n	8004bb0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004ba4:	f000 f936 	bl	8004e14 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	601a      	str	r2, [r3, #0]
 8004bae:	e002      	b.n	8004bb6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004bb6:	4a04      	ldr	r2, [pc, #16]	; (8004bc8 <prvSampleTimeNow+0x3c>)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3710      	adds	r7, #16
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	20000c20 	.word	0x20000c20

08004bcc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b086      	sub	sp, #24
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	607a      	str	r2, [r7, #4]
 8004bd8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	68ba      	ldr	r2, [r7, #8]
 8004be2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	68fa      	ldr	r2, [r7, #12]
 8004be8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004bea:	68ba      	ldr	r2, [r7, #8]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d812      	bhi.n	8004c18 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	1ad2      	subs	r2, r2, r3
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	699b      	ldr	r3, [r3, #24]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d302      	bcc.n	8004c06 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004c00:	2301      	movs	r3, #1
 8004c02:	617b      	str	r3, [r7, #20]
 8004c04:	e01b      	b.n	8004c3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004c06:	4b10      	ldr	r3, [pc, #64]	; (8004c48 <prvInsertTimerInActiveList+0x7c>)
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	3304      	adds	r3, #4
 8004c0e:	4619      	mov	r1, r3
 8004c10:	4610      	mov	r0, r2
 8004c12:	f7fe fa08 	bl	8003026 <vListInsert>
 8004c16:	e012      	b.n	8004c3e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d206      	bcs.n	8004c2e <prvInsertTimerInActiveList+0x62>
 8004c20:	68ba      	ldr	r2, [r7, #8]
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d302      	bcc.n	8004c2e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	617b      	str	r3, [r7, #20]
 8004c2c:	e007      	b.n	8004c3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004c2e:	4b07      	ldr	r3, [pc, #28]	; (8004c4c <prvInsertTimerInActiveList+0x80>)
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	3304      	adds	r3, #4
 8004c36:	4619      	mov	r1, r3
 8004c38:	4610      	mov	r0, r2
 8004c3a:	f7fe f9f4 	bl	8003026 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004c3e:	697b      	ldr	r3, [r7, #20]
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3718      	adds	r7, #24
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	20000c14 	.word	0x20000c14
 8004c4c:	20000c10 	.word	0x20000c10

08004c50 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b08e      	sub	sp, #56	; 0x38
 8004c54:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004c56:	e0ca      	b.n	8004dee <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	da18      	bge.n	8004c90 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004c5e:	1d3b      	adds	r3, r7, #4
 8004c60:	3304      	adds	r3, #4
 8004c62:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d10a      	bne.n	8004c80 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c6e:	f383 8811 	msr	BASEPRI, r3
 8004c72:	f3bf 8f6f 	isb	sy
 8004c76:	f3bf 8f4f 	dsb	sy
 8004c7a:	61fb      	str	r3, [r7, #28]
}
 8004c7c:	bf00      	nop
 8004c7e:	e7fe      	b.n	8004c7e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c86:	6850      	ldr	r0, [r2, #4]
 8004c88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c8a:	6892      	ldr	r2, [r2, #8]
 8004c8c:	4611      	mov	r1, r2
 8004c8e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	f2c0 80aa 	blt.w	8004dec <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c9e:	695b      	ldr	r3, [r3, #20]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d004      	beq.n	8004cae <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca6:	3304      	adds	r3, #4
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f7fe f9f5 	bl	8003098 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004cae:	463b      	mov	r3, r7
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f7ff ff6b 	bl	8004b8c <prvSampleTimeNow>
 8004cb6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2b09      	cmp	r3, #9
 8004cbc:	f200 8097 	bhi.w	8004dee <prvProcessReceivedCommands+0x19e>
 8004cc0:	a201      	add	r2, pc, #4	; (adr r2, 8004cc8 <prvProcessReceivedCommands+0x78>)
 8004cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc6:	bf00      	nop
 8004cc8:	08004cf1 	.word	0x08004cf1
 8004ccc:	08004cf1 	.word	0x08004cf1
 8004cd0:	08004cf1 	.word	0x08004cf1
 8004cd4:	08004d65 	.word	0x08004d65
 8004cd8:	08004d79 	.word	0x08004d79
 8004cdc:	08004dc3 	.word	0x08004dc3
 8004ce0:	08004cf1 	.word	0x08004cf1
 8004ce4:	08004cf1 	.word	0x08004cf1
 8004ce8:	08004d65 	.word	0x08004d65
 8004cec:	08004d79 	.word	0x08004d79
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004cf6:	f043 0301 	orr.w	r3, r3, #1
 8004cfa:	b2da      	uxtb	r2, r3
 8004cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cfe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004d02:	68ba      	ldr	r2, [r7, #8]
 8004d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d06:	699b      	ldr	r3, [r3, #24]
 8004d08:	18d1      	adds	r1, r2, r3
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d10:	f7ff ff5c 	bl	8004bcc <prvInsertTimerInActiveList>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d069      	beq.n	8004dee <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d1c:	6a1b      	ldr	r3, [r3, #32]
 8004d1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d20:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d28:	f003 0304 	and.w	r3, r3, #4
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d05e      	beq.n	8004dee <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004d30:	68ba      	ldr	r2, [r7, #8]
 8004d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d34:	699b      	ldr	r3, [r3, #24]
 8004d36:	441a      	add	r2, r3
 8004d38:	2300      	movs	r3, #0
 8004d3a:	9300      	str	r3, [sp, #0]
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	2100      	movs	r1, #0
 8004d40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d42:	f7ff fe05 	bl	8004950 <xTimerGenericCommand>
 8004d46:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004d48:	6a3b      	ldr	r3, [r7, #32]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d14f      	bne.n	8004dee <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d52:	f383 8811 	msr	BASEPRI, r3
 8004d56:	f3bf 8f6f 	isb	sy
 8004d5a:	f3bf 8f4f 	dsb	sy
 8004d5e:	61bb      	str	r3, [r7, #24]
}
 8004d60:	bf00      	nop
 8004d62:	e7fe      	b.n	8004d62 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d6a:	f023 0301 	bic.w	r3, r3, #1
 8004d6e:	b2da      	uxtb	r2, r3
 8004d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004d76:	e03a      	b.n	8004dee <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d7e:	f043 0301 	orr.w	r3, r3, #1
 8004d82:	b2da      	uxtb	r2, r3
 8004d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004d8a:	68ba      	ldr	r2, [r7, #8]
 8004d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d8e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d92:	699b      	ldr	r3, [r3, #24]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d10a      	bne.n	8004dae <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d9c:	f383 8811 	msr	BASEPRI, r3
 8004da0:	f3bf 8f6f 	isb	sy
 8004da4:	f3bf 8f4f 	dsb	sy
 8004da8:	617b      	str	r3, [r7, #20]
}
 8004daa:	bf00      	nop
 8004dac:	e7fe      	b.n	8004dac <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db0:	699a      	ldr	r2, [r3, #24]
 8004db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db4:	18d1      	adds	r1, r2, r3
 8004db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dbc:	f7ff ff06 	bl	8004bcc <prvInsertTimerInActiveList>
					break;
 8004dc0:	e015      	b.n	8004dee <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004dc8:	f003 0302 	and.w	r3, r3, #2
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d103      	bne.n	8004dd8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004dd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dd2:	f000 fbdd 	bl	8005590 <vPortFree>
 8004dd6:	e00a      	b.n	8004dee <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004dde:	f023 0301 	bic.w	r3, r3, #1
 8004de2:	b2da      	uxtb	r2, r3
 8004de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004dea:	e000      	b.n	8004dee <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004dec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004dee:	4b08      	ldr	r3, [pc, #32]	; (8004e10 <prvProcessReceivedCommands+0x1c0>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	1d39      	adds	r1, r7, #4
 8004df4:	2200      	movs	r2, #0
 8004df6:	4618      	mov	r0, r3
 8004df8:	f7fe fc16 	bl	8003628 <xQueueReceive>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	f47f af2a 	bne.w	8004c58 <prvProcessReceivedCommands+0x8>
	}
}
 8004e04:	bf00      	nop
 8004e06:	bf00      	nop
 8004e08:	3730      	adds	r7, #48	; 0x30
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	20000c18 	.word	0x20000c18

08004e14 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b088      	sub	sp, #32
 8004e18:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e1a:	e048      	b.n	8004eae <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e1c:	4b2d      	ldr	r3, [pc, #180]	; (8004ed4 <prvSwitchTimerLists+0xc0>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e26:	4b2b      	ldr	r3, [pc, #172]	; (8004ed4 <prvSwitchTimerLists+0xc0>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	3304      	adds	r3, #4
 8004e34:	4618      	mov	r0, r3
 8004e36:	f7fe f92f 	bl	8003098 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6a1b      	ldr	r3, [r3, #32]
 8004e3e:	68f8      	ldr	r0, [r7, #12]
 8004e40:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e48:	f003 0304 	and.w	r3, r3, #4
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d02e      	beq.n	8004eae <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	699b      	ldr	r3, [r3, #24]
 8004e54:	693a      	ldr	r2, [r7, #16]
 8004e56:	4413      	add	r3, r2
 8004e58:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004e5a:	68ba      	ldr	r2, [r7, #8]
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d90e      	bls.n	8004e80 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	68ba      	ldr	r2, [r7, #8]
 8004e66:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	68fa      	ldr	r2, [r7, #12]
 8004e6c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004e6e:	4b19      	ldr	r3, [pc, #100]	; (8004ed4 <prvSwitchTimerLists+0xc0>)
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	3304      	adds	r3, #4
 8004e76:	4619      	mov	r1, r3
 8004e78:	4610      	mov	r0, r2
 8004e7a:	f7fe f8d4 	bl	8003026 <vListInsert>
 8004e7e:	e016      	b.n	8004eae <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004e80:	2300      	movs	r3, #0
 8004e82:	9300      	str	r3, [sp, #0]
 8004e84:	2300      	movs	r3, #0
 8004e86:	693a      	ldr	r2, [r7, #16]
 8004e88:	2100      	movs	r1, #0
 8004e8a:	68f8      	ldr	r0, [r7, #12]
 8004e8c:	f7ff fd60 	bl	8004950 <xTimerGenericCommand>
 8004e90:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d10a      	bne.n	8004eae <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e9c:	f383 8811 	msr	BASEPRI, r3
 8004ea0:	f3bf 8f6f 	isb	sy
 8004ea4:	f3bf 8f4f 	dsb	sy
 8004ea8:	603b      	str	r3, [r7, #0]
}
 8004eaa:	bf00      	nop
 8004eac:	e7fe      	b.n	8004eac <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004eae:	4b09      	ldr	r3, [pc, #36]	; (8004ed4 <prvSwitchTimerLists+0xc0>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d1b1      	bne.n	8004e1c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004eb8:	4b06      	ldr	r3, [pc, #24]	; (8004ed4 <prvSwitchTimerLists+0xc0>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004ebe:	4b06      	ldr	r3, [pc, #24]	; (8004ed8 <prvSwitchTimerLists+0xc4>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a04      	ldr	r2, [pc, #16]	; (8004ed4 <prvSwitchTimerLists+0xc0>)
 8004ec4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004ec6:	4a04      	ldr	r2, [pc, #16]	; (8004ed8 <prvSwitchTimerLists+0xc4>)
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	6013      	str	r3, [r2, #0]
}
 8004ecc:	bf00      	nop
 8004ece:	3718      	adds	r7, #24
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	20000c10 	.word	0x20000c10
 8004ed8:	20000c14 	.word	0x20000c14

08004edc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b082      	sub	sp, #8
 8004ee0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004ee2:	f000 f967 	bl	80051b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004ee6:	4b15      	ldr	r3, [pc, #84]	; (8004f3c <prvCheckForValidListAndQueue+0x60>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d120      	bne.n	8004f30 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004eee:	4814      	ldr	r0, [pc, #80]	; (8004f40 <prvCheckForValidListAndQueue+0x64>)
 8004ef0:	f7fe f848 	bl	8002f84 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004ef4:	4813      	ldr	r0, [pc, #76]	; (8004f44 <prvCheckForValidListAndQueue+0x68>)
 8004ef6:	f7fe f845 	bl	8002f84 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004efa:	4b13      	ldr	r3, [pc, #76]	; (8004f48 <prvCheckForValidListAndQueue+0x6c>)
 8004efc:	4a10      	ldr	r2, [pc, #64]	; (8004f40 <prvCheckForValidListAndQueue+0x64>)
 8004efe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004f00:	4b12      	ldr	r3, [pc, #72]	; (8004f4c <prvCheckForValidListAndQueue+0x70>)
 8004f02:	4a10      	ldr	r2, [pc, #64]	; (8004f44 <prvCheckForValidListAndQueue+0x68>)
 8004f04:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004f06:	2300      	movs	r3, #0
 8004f08:	9300      	str	r3, [sp, #0]
 8004f0a:	4b11      	ldr	r3, [pc, #68]	; (8004f50 <prvCheckForValidListAndQueue+0x74>)
 8004f0c:	4a11      	ldr	r2, [pc, #68]	; (8004f54 <prvCheckForValidListAndQueue+0x78>)
 8004f0e:	2110      	movs	r1, #16
 8004f10:	200a      	movs	r0, #10
 8004f12:	f7fe f953 	bl	80031bc <xQueueGenericCreateStatic>
 8004f16:	4603      	mov	r3, r0
 8004f18:	4a08      	ldr	r2, [pc, #32]	; (8004f3c <prvCheckForValidListAndQueue+0x60>)
 8004f1a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004f1c:	4b07      	ldr	r3, [pc, #28]	; (8004f3c <prvCheckForValidListAndQueue+0x60>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d005      	beq.n	8004f30 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004f24:	4b05      	ldr	r3, [pc, #20]	; (8004f3c <prvCheckForValidListAndQueue+0x60>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	490b      	ldr	r1, [pc, #44]	; (8004f58 <prvCheckForValidListAndQueue+0x7c>)
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f7fe fd6c 	bl	8003a08 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004f30:	f000 f970 	bl	8005214 <vPortExitCritical>
}
 8004f34:	bf00      	nop
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	20000c18 	.word	0x20000c18
 8004f40:	20000be8 	.word	0x20000be8
 8004f44:	20000bfc 	.word	0x20000bfc
 8004f48:	20000c10 	.word	0x20000c10
 8004f4c:	20000c14 	.word	0x20000c14
 8004f50:	20000cc4 	.word	0x20000cc4
 8004f54:	20000c24 	.word	0x20000c24
 8004f58:	08005bf4 	.word	0x08005bf4

08004f5c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b085      	sub	sp, #20
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	3b04      	subs	r3, #4
 8004f6c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004f74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	3b04      	subs	r3, #4
 8004f7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	f023 0201 	bic.w	r2, r3, #1
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	3b04      	subs	r3, #4
 8004f8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004f8c:	4a0c      	ldr	r2, [pc, #48]	; (8004fc0 <pxPortInitialiseStack+0x64>)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	3b14      	subs	r3, #20
 8004f96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	3b04      	subs	r3, #4
 8004fa2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f06f 0202 	mvn.w	r2, #2
 8004faa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	3b20      	subs	r3, #32
 8004fb0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3714      	adds	r7, #20
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr
 8004fc0:	08004fc5 	.word	0x08004fc5

08004fc4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004fce:	4b12      	ldr	r3, [pc, #72]	; (8005018 <prvTaskExitError+0x54>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fd6:	d00a      	beq.n	8004fee <prvTaskExitError+0x2a>
	__asm volatile
 8004fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fdc:	f383 8811 	msr	BASEPRI, r3
 8004fe0:	f3bf 8f6f 	isb	sy
 8004fe4:	f3bf 8f4f 	dsb	sy
 8004fe8:	60fb      	str	r3, [r7, #12]
}
 8004fea:	bf00      	nop
 8004fec:	e7fe      	b.n	8004fec <prvTaskExitError+0x28>
	__asm volatile
 8004fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff2:	f383 8811 	msr	BASEPRI, r3
 8004ff6:	f3bf 8f6f 	isb	sy
 8004ffa:	f3bf 8f4f 	dsb	sy
 8004ffe:	60bb      	str	r3, [r7, #8]
}
 8005000:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005002:	bf00      	nop
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d0fc      	beq.n	8005004 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800500a:	bf00      	nop
 800500c:	bf00      	nop
 800500e:	3714      	adds	r7, #20
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr
 8005018:	2000000c 	.word	0x2000000c
 800501c:	00000000 	.word	0x00000000

08005020 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005020:	4b07      	ldr	r3, [pc, #28]	; (8005040 <pxCurrentTCBConst2>)
 8005022:	6819      	ldr	r1, [r3, #0]
 8005024:	6808      	ldr	r0, [r1, #0]
 8005026:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800502a:	f380 8809 	msr	PSP, r0
 800502e:	f3bf 8f6f 	isb	sy
 8005032:	f04f 0000 	mov.w	r0, #0
 8005036:	f380 8811 	msr	BASEPRI, r0
 800503a:	4770      	bx	lr
 800503c:	f3af 8000 	nop.w

08005040 <pxCurrentTCBConst2>:
 8005040:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005044:	bf00      	nop
 8005046:	bf00      	nop

08005048 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005048:	4808      	ldr	r0, [pc, #32]	; (800506c <prvPortStartFirstTask+0x24>)
 800504a:	6800      	ldr	r0, [r0, #0]
 800504c:	6800      	ldr	r0, [r0, #0]
 800504e:	f380 8808 	msr	MSP, r0
 8005052:	f04f 0000 	mov.w	r0, #0
 8005056:	f380 8814 	msr	CONTROL, r0
 800505a:	b662      	cpsie	i
 800505c:	b661      	cpsie	f
 800505e:	f3bf 8f4f 	dsb	sy
 8005062:	f3bf 8f6f 	isb	sy
 8005066:	df00      	svc	0
 8005068:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800506a:	bf00      	nop
 800506c:	e000ed08 	.word	0xe000ed08

08005070 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b086      	sub	sp, #24
 8005074:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005076:	4b46      	ldr	r3, [pc, #280]	; (8005190 <xPortStartScheduler+0x120>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a46      	ldr	r2, [pc, #280]	; (8005194 <xPortStartScheduler+0x124>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d10a      	bne.n	8005096 <xPortStartScheduler+0x26>
	__asm volatile
 8005080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005084:	f383 8811 	msr	BASEPRI, r3
 8005088:	f3bf 8f6f 	isb	sy
 800508c:	f3bf 8f4f 	dsb	sy
 8005090:	613b      	str	r3, [r7, #16]
}
 8005092:	bf00      	nop
 8005094:	e7fe      	b.n	8005094 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005096:	4b3e      	ldr	r3, [pc, #248]	; (8005190 <xPortStartScheduler+0x120>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a3f      	ldr	r2, [pc, #252]	; (8005198 <xPortStartScheduler+0x128>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d10a      	bne.n	80050b6 <xPortStartScheduler+0x46>
	__asm volatile
 80050a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a4:	f383 8811 	msr	BASEPRI, r3
 80050a8:	f3bf 8f6f 	isb	sy
 80050ac:	f3bf 8f4f 	dsb	sy
 80050b0:	60fb      	str	r3, [r7, #12]
}
 80050b2:	bf00      	nop
 80050b4:	e7fe      	b.n	80050b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80050b6:	4b39      	ldr	r3, [pc, #228]	; (800519c <xPortStartScheduler+0x12c>)
 80050b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	22ff      	movs	r2, #255	; 0xff
 80050c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80050d0:	78fb      	ldrb	r3, [r7, #3]
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80050d8:	b2da      	uxtb	r2, r3
 80050da:	4b31      	ldr	r3, [pc, #196]	; (80051a0 <xPortStartScheduler+0x130>)
 80050dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80050de:	4b31      	ldr	r3, [pc, #196]	; (80051a4 <xPortStartScheduler+0x134>)
 80050e0:	2207      	movs	r2, #7
 80050e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80050e4:	e009      	b.n	80050fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80050e6:	4b2f      	ldr	r3, [pc, #188]	; (80051a4 <xPortStartScheduler+0x134>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	3b01      	subs	r3, #1
 80050ec:	4a2d      	ldr	r2, [pc, #180]	; (80051a4 <xPortStartScheduler+0x134>)
 80050ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80050f0:	78fb      	ldrb	r3, [r7, #3]
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	005b      	lsls	r3, r3, #1
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80050fa:	78fb      	ldrb	r3, [r7, #3]
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005102:	2b80      	cmp	r3, #128	; 0x80
 8005104:	d0ef      	beq.n	80050e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005106:	4b27      	ldr	r3, [pc, #156]	; (80051a4 <xPortStartScheduler+0x134>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f1c3 0307 	rsb	r3, r3, #7
 800510e:	2b04      	cmp	r3, #4
 8005110:	d00a      	beq.n	8005128 <xPortStartScheduler+0xb8>
	__asm volatile
 8005112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005116:	f383 8811 	msr	BASEPRI, r3
 800511a:	f3bf 8f6f 	isb	sy
 800511e:	f3bf 8f4f 	dsb	sy
 8005122:	60bb      	str	r3, [r7, #8]
}
 8005124:	bf00      	nop
 8005126:	e7fe      	b.n	8005126 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005128:	4b1e      	ldr	r3, [pc, #120]	; (80051a4 <xPortStartScheduler+0x134>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	021b      	lsls	r3, r3, #8
 800512e:	4a1d      	ldr	r2, [pc, #116]	; (80051a4 <xPortStartScheduler+0x134>)
 8005130:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005132:	4b1c      	ldr	r3, [pc, #112]	; (80051a4 <xPortStartScheduler+0x134>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800513a:	4a1a      	ldr	r2, [pc, #104]	; (80051a4 <xPortStartScheduler+0x134>)
 800513c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	b2da      	uxtb	r2, r3
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005146:	4b18      	ldr	r3, [pc, #96]	; (80051a8 <xPortStartScheduler+0x138>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a17      	ldr	r2, [pc, #92]	; (80051a8 <xPortStartScheduler+0x138>)
 800514c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005150:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005152:	4b15      	ldr	r3, [pc, #84]	; (80051a8 <xPortStartScheduler+0x138>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a14      	ldr	r2, [pc, #80]	; (80051a8 <xPortStartScheduler+0x138>)
 8005158:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800515c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800515e:	f000 f8dd 	bl	800531c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005162:	4b12      	ldr	r3, [pc, #72]	; (80051ac <xPortStartScheduler+0x13c>)
 8005164:	2200      	movs	r2, #0
 8005166:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005168:	f000 f8fc 	bl	8005364 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800516c:	4b10      	ldr	r3, [pc, #64]	; (80051b0 <xPortStartScheduler+0x140>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a0f      	ldr	r2, [pc, #60]	; (80051b0 <xPortStartScheduler+0x140>)
 8005172:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005176:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005178:	f7ff ff66 	bl	8005048 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800517c:	f7ff f854 	bl	8004228 <vTaskSwitchContext>
	prvTaskExitError();
 8005180:	f7ff ff20 	bl	8004fc4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3718      	adds	r7, #24
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	e000ed00 	.word	0xe000ed00
 8005194:	410fc271 	.word	0x410fc271
 8005198:	410fc270 	.word	0x410fc270
 800519c:	e000e400 	.word	0xe000e400
 80051a0:	20000d14 	.word	0x20000d14
 80051a4:	20000d18 	.word	0x20000d18
 80051a8:	e000ed20 	.word	0xe000ed20
 80051ac:	2000000c 	.word	0x2000000c
 80051b0:	e000ef34 	.word	0xe000ef34

080051b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
	__asm volatile
 80051ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051be:	f383 8811 	msr	BASEPRI, r3
 80051c2:	f3bf 8f6f 	isb	sy
 80051c6:	f3bf 8f4f 	dsb	sy
 80051ca:	607b      	str	r3, [r7, #4]
}
 80051cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80051ce:	4b0f      	ldr	r3, [pc, #60]	; (800520c <vPortEnterCritical+0x58>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	3301      	adds	r3, #1
 80051d4:	4a0d      	ldr	r2, [pc, #52]	; (800520c <vPortEnterCritical+0x58>)
 80051d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80051d8:	4b0c      	ldr	r3, [pc, #48]	; (800520c <vPortEnterCritical+0x58>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d10f      	bne.n	8005200 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80051e0:	4b0b      	ldr	r3, [pc, #44]	; (8005210 <vPortEnterCritical+0x5c>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00a      	beq.n	8005200 <vPortEnterCritical+0x4c>
	__asm volatile
 80051ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ee:	f383 8811 	msr	BASEPRI, r3
 80051f2:	f3bf 8f6f 	isb	sy
 80051f6:	f3bf 8f4f 	dsb	sy
 80051fa:	603b      	str	r3, [r7, #0]
}
 80051fc:	bf00      	nop
 80051fe:	e7fe      	b.n	80051fe <vPortEnterCritical+0x4a>
	}
}
 8005200:	bf00      	nop
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr
 800520c:	2000000c 	.word	0x2000000c
 8005210:	e000ed04 	.word	0xe000ed04

08005214 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005214:	b480      	push	{r7}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800521a:	4b12      	ldr	r3, [pc, #72]	; (8005264 <vPortExitCritical+0x50>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d10a      	bne.n	8005238 <vPortExitCritical+0x24>
	__asm volatile
 8005222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005226:	f383 8811 	msr	BASEPRI, r3
 800522a:	f3bf 8f6f 	isb	sy
 800522e:	f3bf 8f4f 	dsb	sy
 8005232:	607b      	str	r3, [r7, #4]
}
 8005234:	bf00      	nop
 8005236:	e7fe      	b.n	8005236 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005238:	4b0a      	ldr	r3, [pc, #40]	; (8005264 <vPortExitCritical+0x50>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	3b01      	subs	r3, #1
 800523e:	4a09      	ldr	r2, [pc, #36]	; (8005264 <vPortExitCritical+0x50>)
 8005240:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005242:	4b08      	ldr	r3, [pc, #32]	; (8005264 <vPortExitCritical+0x50>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d105      	bne.n	8005256 <vPortExitCritical+0x42>
 800524a:	2300      	movs	r3, #0
 800524c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	f383 8811 	msr	BASEPRI, r3
}
 8005254:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005256:	bf00      	nop
 8005258:	370c      	adds	r7, #12
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop
 8005264:	2000000c 	.word	0x2000000c
	...

08005270 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005270:	f3ef 8009 	mrs	r0, PSP
 8005274:	f3bf 8f6f 	isb	sy
 8005278:	4b15      	ldr	r3, [pc, #84]	; (80052d0 <pxCurrentTCBConst>)
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	f01e 0f10 	tst.w	lr, #16
 8005280:	bf08      	it	eq
 8005282:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005286:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800528a:	6010      	str	r0, [r2, #0]
 800528c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005290:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005294:	f380 8811 	msr	BASEPRI, r0
 8005298:	f3bf 8f4f 	dsb	sy
 800529c:	f3bf 8f6f 	isb	sy
 80052a0:	f7fe ffc2 	bl	8004228 <vTaskSwitchContext>
 80052a4:	f04f 0000 	mov.w	r0, #0
 80052a8:	f380 8811 	msr	BASEPRI, r0
 80052ac:	bc09      	pop	{r0, r3}
 80052ae:	6819      	ldr	r1, [r3, #0]
 80052b0:	6808      	ldr	r0, [r1, #0]
 80052b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052b6:	f01e 0f10 	tst.w	lr, #16
 80052ba:	bf08      	it	eq
 80052bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80052c0:	f380 8809 	msr	PSP, r0
 80052c4:	f3bf 8f6f 	isb	sy
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop
 80052cc:	f3af 8000 	nop.w

080052d0 <pxCurrentTCBConst>:
 80052d0:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80052d4:	bf00      	nop
 80052d6:	bf00      	nop

080052d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b082      	sub	sp, #8
 80052dc:	af00      	add	r7, sp, #0
	__asm volatile
 80052de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e2:	f383 8811 	msr	BASEPRI, r3
 80052e6:	f3bf 8f6f 	isb	sy
 80052ea:	f3bf 8f4f 	dsb	sy
 80052ee:	607b      	str	r3, [r7, #4]
}
 80052f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80052f2:	f7fe fedf 	bl	80040b4 <xTaskIncrementTick>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d003      	beq.n	8005304 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80052fc:	4b06      	ldr	r3, [pc, #24]	; (8005318 <xPortSysTickHandler+0x40>)
 80052fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005302:	601a      	str	r2, [r3, #0]
 8005304:	2300      	movs	r3, #0
 8005306:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	f383 8811 	msr	BASEPRI, r3
}
 800530e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005310:	bf00      	nop
 8005312:	3708      	adds	r7, #8
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}
 8005318:	e000ed04 	.word	0xe000ed04

0800531c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800531c:	b480      	push	{r7}
 800531e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005320:	4b0b      	ldr	r3, [pc, #44]	; (8005350 <vPortSetupTimerInterrupt+0x34>)
 8005322:	2200      	movs	r2, #0
 8005324:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005326:	4b0b      	ldr	r3, [pc, #44]	; (8005354 <vPortSetupTimerInterrupt+0x38>)
 8005328:	2200      	movs	r2, #0
 800532a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800532c:	4b0a      	ldr	r3, [pc, #40]	; (8005358 <vPortSetupTimerInterrupt+0x3c>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a0a      	ldr	r2, [pc, #40]	; (800535c <vPortSetupTimerInterrupt+0x40>)
 8005332:	fba2 2303 	umull	r2, r3, r2, r3
 8005336:	099b      	lsrs	r3, r3, #6
 8005338:	4a09      	ldr	r2, [pc, #36]	; (8005360 <vPortSetupTimerInterrupt+0x44>)
 800533a:	3b01      	subs	r3, #1
 800533c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800533e:	4b04      	ldr	r3, [pc, #16]	; (8005350 <vPortSetupTimerInterrupt+0x34>)
 8005340:	2207      	movs	r2, #7
 8005342:	601a      	str	r2, [r3, #0]
}
 8005344:	bf00      	nop
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	e000e010 	.word	0xe000e010
 8005354:	e000e018 	.word	0xe000e018
 8005358:	20000000 	.word	0x20000000
 800535c:	10624dd3 	.word	0x10624dd3
 8005360:	e000e014 	.word	0xe000e014

08005364 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005364:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005374 <vPortEnableVFP+0x10>
 8005368:	6801      	ldr	r1, [r0, #0]
 800536a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800536e:	6001      	str	r1, [r0, #0]
 8005370:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005372:	bf00      	nop
 8005374:	e000ed88 	.word	0xe000ed88

08005378 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005378:	b480      	push	{r7}
 800537a:	b085      	sub	sp, #20
 800537c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800537e:	f3ef 8305 	mrs	r3, IPSR
 8005382:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2b0f      	cmp	r3, #15
 8005388:	d914      	bls.n	80053b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800538a:	4a17      	ldr	r2, [pc, #92]	; (80053e8 <vPortValidateInterruptPriority+0x70>)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	4413      	add	r3, r2
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005394:	4b15      	ldr	r3, [pc, #84]	; (80053ec <vPortValidateInterruptPriority+0x74>)
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	7afa      	ldrb	r2, [r7, #11]
 800539a:	429a      	cmp	r2, r3
 800539c:	d20a      	bcs.n	80053b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800539e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a2:	f383 8811 	msr	BASEPRI, r3
 80053a6:	f3bf 8f6f 	isb	sy
 80053aa:	f3bf 8f4f 	dsb	sy
 80053ae:	607b      	str	r3, [r7, #4]
}
 80053b0:	bf00      	nop
 80053b2:	e7fe      	b.n	80053b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80053b4:	4b0e      	ldr	r3, [pc, #56]	; (80053f0 <vPortValidateInterruptPriority+0x78>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80053bc:	4b0d      	ldr	r3, [pc, #52]	; (80053f4 <vPortValidateInterruptPriority+0x7c>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d90a      	bls.n	80053da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80053c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c8:	f383 8811 	msr	BASEPRI, r3
 80053cc:	f3bf 8f6f 	isb	sy
 80053d0:	f3bf 8f4f 	dsb	sy
 80053d4:	603b      	str	r3, [r7, #0]
}
 80053d6:	bf00      	nop
 80053d8:	e7fe      	b.n	80053d8 <vPortValidateInterruptPriority+0x60>
	}
 80053da:	bf00      	nop
 80053dc:	3714      	adds	r7, #20
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr
 80053e6:	bf00      	nop
 80053e8:	e000e3f0 	.word	0xe000e3f0
 80053ec:	20000d14 	.word	0x20000d14
 80053f0:	e000ed0c 	.word	0xe000ed0c
 80053f4:	20000d18 	.word	0x20000d18

080053f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b08a      	sub	sp, #40	; 0x28
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005400:	2300      	movs	r3, #0
 8005402:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005404:	f7fe fd9a 	bl	8003f3c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005408:	4b5b      	ldr	r3, [pc, #364]	; (8005578 <pvPortMalloc+0x180>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d101      	bne.n	8005414 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005410:	f000 f920 	bl	8005654 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005414:	4b59      	ldr	r3, [pc, #356]	; (800557c <pvPortMalloc+0x184>)
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4013      	ands	r3, r2
 800541c:	2b00      	cmp	r3, #0
 800541e:	f040 8093 	bne.w	8005548 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d01d      	beq.n	8005464 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005428:	2208      	movs	r2, #8
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4413      	add	r3, r2
 800542e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f003 0307 	and.w	r3, r3, #7
 8005436:	2b00      	cmp	r3, #0
 8005438:	d014      	beq.n	8005464 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f023 0307 	bic.w	r3, r3, #7
 8005440:	3308      	adds	r3, #8
 8005442:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f003 0307 	and.w	r3, r3, #7
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00a      	beq.n	8005464 <pvPortMalloc+0x6c>
	__asm volatile
 800544e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005452:	f383 8811 	msr	BASEPRI, r3
 8005456:	f3bf 8f6f 	isb	sy
 800545a:	f3bf 8f4f 	dsb	sy
 800545e:	617b      	str	r3, [r7, #20]
}
 8005460:	bf00      	nop
 8005462:	e7fe      	b.n	8005462 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d06e      	beq.n	8005548 <pvPortMalloc+0x150>
 800546a:	4b45      	ldr	r3, [pc, #276]	; (8005580 <pvPortMalloc+0x188>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	429a      	cmp	r2, r3
 8005472:	d869      	bhi.n	8005548 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005474:	4b43      	ldr	r3, [pc, #268]	; (8005584 <pvPortMalloc+0x18c>)
 8005476:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005478:	4b42      	ldr	r3, [pc, #264]	; (8005584 <pvPortMalloc+0x18c>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800547e:	e004      	b.n	800548a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005482:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800548a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	429a      	cmp	r2, r3
 8005492:	d903      	bls.n	800549c <pvPortMalloc+0xa4>
 8005494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d1f1      	bne.n	8005480 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800549c:	4b36      	ldr	r3, [pc, #216]	; (8005578 <pvPortMalloc+0x180>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d050      	beq.n	8005548 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80054a6:	6a3b      	ldr	r3, [r7, #32]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2208      	movs	r2, #8
 80054ac:	4413      	add	r3, r2
 80054ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80054b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	6a3b      	ldr	r3, [r7, #32]
 80054b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80054b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ba:	685a      	ldr	r2, [r3, #4]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	1ad2      	subs	r2, r2, r3
 80054c0:	2308      	movs	r3, #8
 80054c2:	005b      	lsls	r3, r3, #1
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d91f      	bls.n	8005508 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80054c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4413      	add	r3, r2
 80054ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	f003 0307 	and.w	r3, r3, #7
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00a      	beq.n	80054f0 <pvPortMalloc+0xf8>
	__asm volatile
 80054da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054de:	f383 8811 	msr	BASEPRI, r3
 80054e2:	f3bf 8f6f 	isb	sy
 80054e6:	f3bf 8f4f 	dsb	sy
 80054ea:	613b      	str	r3, [r7, #16]
}
 80054ec:	bf00      	nop
 80054ee:	e7fe      	b.n	80054ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80054f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f2:	685a      	ldr	r2, [r3, #4]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	1ad2      	subs	r2, r2, r3
 80054f8:	69bb      	ldr	r3, [r7, #24]
 80054fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80054fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005502:	69b8      	ldr	r0, [r7, #24]
 8005504:	f000 f908 	bl	8005718 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005508:	4b1d      	ldr	r3, [pc, #116]	; (8005580 <pvPortMalloc+0x188>)
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	4a1b      	ldr	r2, [pc, #108]	; (8005580 <pvPortMalloc+0x188>)
 8005514:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005516:	4b1a      	ldr	r3, [pc, #104]	; (8005580 <pvPortMalloc+0x188>)
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	4b1b      	ldr	r3, [pc, #108]	; (8005588 <pvPortMalloc+0x190>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	429a      	cmp	r2, r3
 8005520:	d203      	bcs.n	800552a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005522:	4b17      	ldr	r3, [pc, #92]	; (8005580 <pvPortMalloc+0x188>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a18      	ldr	r2, [pc, #96]	; (8005588 <pvPortMalloc+0x190>)
 8005528:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800552a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552c:	685a      	ldr	r2, [r3, #4]
 800552e:	4b13      	ldr	r3, [pc, #76]	; (800557c <pvPortMalloc+0x184>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	431a      	orrs	r2, r3
 8005534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005536:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553a:	2200      	movs	r2, #0
 800553c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800553e:	4b13      	ldr	r3, [pc, #76]	; (800558c <pvPortMalloc+0x194>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	3301      	adds	r3, #1
 8005544:	4a11      	ldr	r2, [pc, #68]	; (800558c <pvPortMalloc+0x194>)
 8005546:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005548:	f7fe fd06 	bl	8003f58 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	f003 0307 	and.w	r3, r3, #7
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00a      	beq.n	800556c <pvPortMalloc+0x174>
	__asm volatile
 8005556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800555a:	f383 8811 	msr	BASEPRI, r3
 800555e:	f3bf 8f6f 	isb	sy
 8005562:	f3bf 8f4f 	dsb	sy
 8005566:	60fb      	str	r3, [r7, #12]
}
 8005568:	bf00      	nop
 800556a:	e7fe      	b.n	800556a <pvPortMalloc+0x172>
	return pvReturn;
 800556c:	69fb      	ldr	r3, [r7, #28]
}
 800556e:	4618      	mov	r0, r3
 8005570:	3728      	adds	r7, #40	; 0x28
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	200018dc 	.word	0x200018dc
 800557c:	200018f0 	.word	0x200018f0
 8005580:	200018e0 	.word	0x200018e0
 8005584:	200018d4 	.word	0x200018d4
 8005588:	200018e4 	.word	0x200018e4
 800558c:	200018e8 	.word	0x200018e8

08005590 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b086      	sub	sp, #24
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d04d      	beq.n	800563e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80055a2:	2308      	movs	r3, #8
 80055a4:	425b      	negs	r3, r3
 80055a6:	697a      	ldr	r2, [r7, #20]
 80055a8:	4413      	add	r3, r2
 80055aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	685a      	ldr	r2, [r3, #4]
 80055b4:	4b24      	ldr	r3, [pc, #144]	; (8005648 <vPortFree+0xb8>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4013      	ands	r3, r2
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d10a      	bne.n	80055d4 <vPortFree+0x44>
	__asm volatile
 80055be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c2:	f383 8811 	msr	BASEPRI, r3
 80055c6:	f3bf 8f6f 	isb	sy
 80055ca:	f3bf 8f4f 	dsb	sy
 80055ce:	60fb      	str	r3, [r7, #12]
}
 80055d0:	bf00      	nop
 80055d2:	e7fe      	b.n	80055d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d00a      	beq.n	80055f2 <vPortFree+0x62>
	__asm volatile
 80055dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e0:	f383 8811 	msr	BASEPRI, r3
 80055e4:	f3bf 8f6f 	isb	sy
 80055e8:	f3bf 8f4f 	dsb	sy
 80055ec:	60bb      	str	r3, [r7, #8]
}
 80055ee:	bf00      	nop
 80055f0:	e7fe      	b.n	80055f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	685a      	ldr	r2, [r3, #4]
 80055f6:	4b14      	ldr	r3, [pc, #80]	; (8005648 <vPortFree+0xb8>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4013      	ands	r3, r2
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d01e      	beq.n	800563e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d11a      	bne.n	800563e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	685a      	ldr	r2, [r3, #4]
 800560c:	4b0e      	ldr	r3, [pc, #56]	; (8005648 <vPortFree+0xb8>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	43db      	mvns	r3, r3
 8005612:	401a      	ands	r2, r3
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005618:	f7fe fc90 	bl	8003f3c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	685a      	ldr	r2, [r3, #4]
 8005620:	4b0a      	ldr	r3, [pc, #40]	; (800564c <vPortFree+0xbc>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4413      	add	r3, r2
 8005626:	4a09      	ldr	r2, [pc, #36]	; (800564c <vPortFree+0xbc>)
 8005628:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800562a:	6938      	ldr	r0, [r7, #16]
 800562c:	f000 f874 	bl	8005718 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005630:	4b07      	ldr	r3, [pc, #28]	; (8005650 <vPortFree+0xc0>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	3301      	adds	r3, #1
 8005636:	4a06      	ldr	r2, [pc, #24]	; (8005650 <vPortFree+0xc0>)
 8005638:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800563a:	f7fe fc8d 	bl	8003f58 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800563e:	bf00      	nop
 8005640:	3718      	adds	r7, #24
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop
 8005648:	200018f0 	.word	0x200018f0
 800564c:	200018e0 	.word	0x200018e0
 8005650:	200018ec 	.word	0x200018ec

08005654 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005654:	b480      	push	{r7}
 8005656:	b085      	sub	sp, #20
 8005658:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800565a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800565e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005660:	4b27      	ldr	r3, [pc, #156]	; (8005700 <prvHeapInit+0xac>)
 8005662:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f003 0307 	and.w	r3, r3, #7
 800566a:	2b00      	cmp	r3, #0
 800566c:	d00c      	beq.n	8005688 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	3307      	adds	r3, #7
 8005672:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f023 0307 	bic.w	r3, r3, #7
 800567a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800567c:	68ba      	ldr	r2, [r7, #8]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	4a1f      	ldr	r2, [pc, #124]	; (8005700 <prvHeapInit+0xac>)
 8005684:	4413      	add	r3, r2
 8005686:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800568c:	4a1d      	ldr	r2, [pc, #116]	; (8005704 <prvHeapInit+0xb0>)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005692:	4b1c      	ldr	r3, [pc, #112]	; (8005704 <prvHeapInit+0xb0>)
 8005694:	2200      	movs	r2, #0
 8005696:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	68ba      	ldr	r2, [r7, #8]
 800569c:	4413      	add	r3, r2
 800569e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80056a0:	2208      	movs	r2, #8
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	1a9b      	subs	r3, r3, r2
 80056a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f023 0307 	bic.w	r3, r3, #7
 80056ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	4a15      	ldr	r2, [pc, #84]	; (8005708 <prvHeapInit+0xb4>)
 80056b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80056b6:	4b14      	ldr	r3, [pc, #80]	; (8005708 <prvHeapInit+0xb4>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	2200      	movs	r2, #0
 80056bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80056be:	4b12      	ldr	r3, [pc, #72]	; (8005708 <prvHeapInit+0xb4>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	2200      	movs	r2, #0
 80056c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	68fa      	ldr	r2, [r7, #12]
 80056ce:	1ad2      	subs	r2, r2, r3
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80056d4:	4b0c      	ldr	r3, [pc, #48]	; (8005708 <prvHeapInit+0xb4>)
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	4a0a      	ldr	r2, [pc, #40]	; (800570c <prvHeapInit+0xb8>)
 80056e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	4a09      	ldr	r2, [pc, #36]	; (8005710 <prvHeapInit+0xbc>)
 80056ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80056ec:	4b09      	ldr	r3, [pc, #36]	; (8005714 <prvHeapInit+0xc0>)
 80056ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80056f2:	601a      	str	r2, [r3, #0]
}
 80056f4:	bf00      	nop
 80056f6:	3714      	adds	r7, #20
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr
 8005700:	20000d1c 	.word	0x20000d1c
 8005704:	200018d4 	.word	0x200018d4
 8005708:	200018dc 	.word	0x200018dc
 800570c:	200018e4 	.word	0x200018e4
 8005710:	200018e0 	.word	0x200018e0
 8005714:	200018f0 	.word	0x200018f0

08005718 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005718:	b480      	push	{r7}
 800571a:	b085      	sub	sp, #20
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005720:	4b28      	ldr	r3, [pc, #160]	; (80057c4 <prvInsertBlockIntoFreeList+0xac>)
 8005722:	60fb      	str	r3, [r7, #12]
 8005724:	e002      	b.n	800572c <prvInsertBlockIntoFreeList+0x14>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	60fb      	str	r3, [r7, #12]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	429a      	cmp	r2, r3
 8005734:	d8f7      	bhi.n	8005726 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	68ba      	ldr	r2, [r7, #8]
 8005740:	4413      	add	r3, r2
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	429a      	cmp	r2, r3
 8005746:	d108      	bne.n	800575a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	685a      	ldr	r2, [r3, #4]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	441a      	add	r2, r3
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	68ba      	ldr	r2, [r7, #8]
 8005764:	441a      	add	r2, r3
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	429a      	cmp	r2, r3
 800576c:	d118      	bne.n	80057a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	4b15      	ldr	r3, [pc, #84]	; (80057c8 <prvInsertBlockIntoFreeList+0xb0>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	429a      	cmp	r2, r3
 8005778:	d00d      	beq.n	8005796 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	685a      	ldr	r2, [r3, #4]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	441a      	add	r2, r3
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	601a      	str	r2, [r3, #0]
 8005794:	e008      	b.n	80057a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005796:	4b0c      	ldr	r3, [pc, #48]	; (80057c8 <prvInsertBlockIntoFreeList+0xb0>)
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	601a      	str	r2, [r3, #0]
 800579e:	e003      	b.n	80057a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d002      	beq.n	80057b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80057b6:	bf00      	nop
 80057b8:	3714      	adds	r7, #20
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr
 80057c2:	bf00      	nop
 80057c4:	200018d4 	.word	0x200018d4
 80057c8:	200018dc 	.word	0x200018dc

080057cc <IIM42652_ReadRegister>:




HAL_StatusTypeDef IIM42652_ReadRegister( IIM42652 *dev, uint8_t reg, uint8_t *data )
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b088      	sub	sp, #32
 80057d0:	af04      	add	r7, sp, #16
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	460b      	mov	r3, r1
 80057d6:	607a      	str	r2, [r7, #4]
 80057d8:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Read( dev->i2cHandle, IIM42652_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6818      	ldr	r0, [r3, #0]
 80057de:	7afb      	ldrb	r3, [r7, #11]
 80057e0:	b29a      	uxth	r2, r3
 80057e2:	f04f 33ff 	mov.w	r3, #4294967295
 80057e6:	9302      	str	r3, [sp, #8]
 80057e8:	2301      	movs	r3, #1
 80057ea:	9301      	str	r3, [sp, #4]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	9300      	str	r3, [sp, #0]
 80057f0:	2301      	movs	r3, #1
 80057f2:	21d2      	movs	r1, #210	; 0xd2
 80057f4:	f7fb fd02 	bl	80011fc <HAL_I2C_Mem_Read>
 80057f8:	4603      	mov	r3, r0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3710      	adds	r7, #16
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}

08005802 <IIM42652_Init>:
	return HAL_I2C_Mem_Write( dev->i2cHandle, IIM42652_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
}


uint8_t IIM42652_Init( IIM42652 *dev, I2C_HandleTypeDef *i2cHandle )
{
 8005802:	b580      	push	{r7, lr}
 8005804:	b084      	sub	sp, #16
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
 800580a:	6039      	str	r1, [r7, #0]

	/* Initialise structure parameters */
	dev->i2cHandle = i2cHandle;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	683a      	ldr	r2, [r7, #0]
 8005810:	601a      	str	r2, [r3, #0]

	dev->acc[0] = 0.0f;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f04f 0200 	mov.w	r2, #0
 8005818:	605a      	str	r2, [r3, #4]
	dev->acc[1] = 0.0f;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f04f 0200 	mov.w	r2, #0
 8005820:	609a      	str	r2, [r3, #8]
	dev->acc[2] = 0.0f;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f04f 0200 	mov.w	r2, #0
 8005828:	60da      	str	r2, [r3, #12]

	dev->gyr[0] = 0.0f;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f04f 0200 	mov.w	r2, #0
 8005830:	611a      	str	r2, [r3, #16]
	dev->gyr[1] = 0.0f;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f04f 0200 	mov.w	r2, #0
 8005838:	615a      	str	r2, [r3, #20]
	dev->gyr[2] = 0.0f;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f04f 0200 	mov.w	r2, #0
 8005840:	619a      	str	r2, [r3, #24]

	dev->temp_c = 0.0f;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f04f 0200 	mov.w	r2, #0
 8005848:	61da      	str	r2, [r3, #28]

	/* I2C transaction errors */
	uint8_t errNum = 0;
 800584a:	2300      	movs	r3, #0
 800584c:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef status;

	/* Check for device ID */
	uint8_t regDataID;

	status = IIM42652_ReadRegister(dev, WHO_AM_I_ADD, &regDataID);
 800584e:	f107 030d 	add.w	r3, r7, #13
 8005852:	461a      	mov	r2, r3
 8005854:	2175      	movs	r1, #117	; 0x75
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f7ff ffb8 	bl	80057cc <IIM42652_ReadRegister>
 800585c:	4603      	mov	r3, r0
 800585e:	73bb      	strb	r3, [r7, #14]
	errNum += ( status != HAL_OK );
 8005860:	7bbb      	ldrb	r3, [r7, #14]
 8005862:	2b00      	cmp	r3, #0
 8005864:	bf14      	ite	ne
 8005866:	2301      	movne	r3, #1
 8005868:	2300      	moveq	r3, #0
 800586a:	b2db      	uxtb	r3, r3
 800586c:	461a      	mov	r2, r3
 800586e:	7bfb      	ldrb	r3, [r7, #15]
 8005870:	4413      	add	r3, r2
 8005872:	73fb      	strb	r3, [r7, #15]

	/* If ID not equal to IIM42652_I2C_ID, Init returns with an error code */
	if( regDataID != IIM42652_I2C_ID ) return HAL_ERROR;
 8005874:	7b7b      	ldrb	r3, [r7, #13]
 8005876:	2b6f      	cmp	r3, #111	; 0x6f
 8005878:	d001      	beq.n	800587e <IIM42652_Init+0x7c>
 800587a:	2301      	movs	r3, #1
 800587c:	e000      	b.n	8005880 <IIM42652_Init+0x7e>


	return 0;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	3710      	adds	r7, #16
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}

08005888 <MLX90393_SB>:
}


/* Start Burst command, zyxt determines which axis to measure */
uint8_t MLX90393_SB	( MLX90393 *dev, uint8_t zyxt )
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b086      	sub	sp, #24
 800588c:	af02      	add	r7, sp, #8
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	460b      	mov	r3, r1
 8005892:	70fb      	strb	r3, [r7, #3]
	uint8_t status;
	HAL_StatusTypeDef i2c_status = HAL_OK;
 8005894:	2300      	movs	r3, #0
 8005896:	73fb      	strb	r3, [r7, #15]

	/* Construct the SB command with axis from function parameters */
	uint8_t command = MLX90393_REG_SB | ( zyxt & 0x0F );
 8005898:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800589c:	f003 030f 	and.w	r3, r3, #15
 80058a0:	b25b      	sxtb	r3, r3
 80058a2:	f043 0310 	orr.w	r3, r3, #16
 80058a6:	b25b      	sxtb	r3, r3
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	737b      	strb	r3, [r7, #13]

	i2c_status = sendI2C( dev->i2cHandle, &status, &command, 1, 1 );
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6818      	ldr	r0, [r3, #0]
 80058b0:	f107 020d 	add.w	r2, r7, #13
 80058b4:	f107 010e 	add.w	r1, r7, #14
 80058b8:	2301      	movs	r3, #1
 80058ba:	9300      	str	r3, [sp, #0]
 80058bc:	2301      	movs	r3, #1
 80058be:	f000 f882 	bl	80059c6 <sendI2C>
 80058c2:	4603      	mov	r3, r0
 80058c4:	73fb      	strb	r3, [r7, #15]

	/* Checks the HAL status of i2c transaction */
	if(i2c_status != HAL_OK) return MLX90393_STATUS_ERROR;
 80058c6:	7bfb      	ldrb	r3, [r7, #15]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d001      	beq.n	80058d0 <MLX90393_SB+0x48>
 80058cc:	23ff      	movs	r3, #255	; 0xff
 80058ce:	e000      	b.n	80058d2 <MLX90393_SB+0x4a>
	else{
		return status;
 80058d0:	7bbb      	ldrb	r3, [r7, #14]
	}
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3710      	adds	r7, #16
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}

080058da <MLX90393_RM>:
 *
 * readData needs to be a pointer to an array of size RM_DATA_LENGHT
 *
 */
uint8_t MLX90393_RM	( MLX90393 *dev, uint8_t zyxt, uint8_t* readData )
{
 80058da:	b580      	push	{r7, lr}
 80058dc:	b088      	sub	sp, #32
 80058de:	af02      	add	r7, sp, #8
 80058e0:	60f8      	str	r0, [r7, #12]
 80058e2:	460b      	mov	r3, r1
 80058e4:	607a      	str	r2, [r7, #4]
 80058e6:	72fb      	strb	r3, [r7, #11]
	uint8_t status;
	HAL_StatusTypeDef i2c_status = HAL_OK;
 80058e8:	2300      	movs	r3, #0
 80058ea:	75fb      	strb	r3, [r7, #23]

	/* Construct the SB command with axis from function parameters */
	uint8_t command = MLX90393_REG_RM | ( zyxt & 0x0F );
 80058ec:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80058f0:	f003 030f 	and.w	r3, r3, #15
 80058f4:	b25b      	sxtb	r3, r3
 80058f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058fa:	b25b      	sxtb	r3, r3
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	757b      	strb	r3, [r7, #21]

	i2c_status = sendI2C( dev->i2cHandle, readData, &command, 1, RM_DATA_LENGHT );
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6818      	ldr	r0, [r3, #0]
 8005904:	f107 0215 	add.w	r2, r7, #21
 8005908:	2309      	movs	r3, #9
 800590a:	9300      	str	r3, [sp, #0]
 800590c:	2301      	movs	r3, #1
 800590e:	6879      	ldr	r1, [r7, #4]
 8005910:	f000 f859 	bl	80059c6 <sendI2C>
 8005914:	4603      	mov	r3, r0
 8005916:	75fb      	strb	r3, [r7, #23]

	/* First byte in data buffer is status */
	status = readData[0];
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	75bb      	strb	r3, [r7, #22]

	/* Checks the HAL status of i2c transaction */
	if(i2c_status != HAL_OK) return MLX90393_STATUS_ERROR;
 800591e:	7dfb      	ldrb	r3, [r7, #23]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d001      	beq.n	8005928 <MLX90393_RM+0x4e>
 8005924:	23ff      	movs	r3, #255	; 0xff
 8005926:	e000      	b.n	800592a <MLX90393_RM+0x50>
	else{
		return status;
 8005928:	7dbb      	ldrb	r3, [r7, #22]
	}
}
 800592a:	4618      	mov	r0, r3
 800592c:	3718      	adds	r7, #24
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}

08005932 <MLX90393_WR>:
}


/* Write Register command, writes a word size register directly into volatile RAM */
uint8_t MLX90393_WR	( MLX90393 *dev, uint16_t *data, uint8_t regAddress )
{
 8005932:	b580      	push	{r7, lr}
 8005934:	b088      	sub	sp, #32
 8005936:	af02      	add	r7, sp, #8
 8005938:	60f8      	str	r0, [r7, #12]
 800593a:	60b9      	str	r1, [r7, #8]
 800593c:	4613      	mov	r3, r2
 800593e:	71fb      	strb	r3, [r7, #7]
	uint8_t status;
	uint8_t sendBuffer[4];
	HAL_StatusTypeDef i2c_status = HAL_OK;
 8005940:	2300      	movs	r3, #0
 8005942:	75fb      	strb	r3, [r7, #23]

	/* Constructs send buffer with Command + dataHI + dataLO + address */
	sendBuffer[0] = MLX90393_REG_WR;
 8005944:	2360      	movs	r3, #96	; 0x60
 8005946:	743b      	strb	r3, [r7, #16]
	sendBuffer[1] = (*data >> 8);
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	881b      	ldrh	r3, [r3, #0]
 800594c:	0a1b      	lsrs	r3, r3, #8
 800594e:	b29b      	uxth	r3, r3
 8005950:	b2db      	uxtb	r3, r3
 8005952:	747b      	strb	r3, [r7, #17]
	sendBuffer[2] = (*data & 0xFF);
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	881b      	ldrh	r3, [r3, #0]
 8005958:	b2db      	uxtb	r3, r3
 800595a:	74bb      	strb	r3, [r7, #18]
	sendBuffer[3] = regAddress;
 800595c:	79fb      	ldrb	r3, [r7, #7]
 800595e:	74fb      	strb	r3, [r7, #19]

	i2c_status = sendI2C( dev->i2cHandle, &status, sendBuffer, WR_DATA_LENGHT, 1 );
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6818      	ldr	r0, [r3, #0]
 8005964:	f107 0210 	add.w	r2, r7, #16
 8005968:	f107 0116 	add.w	r1, r7, #22
 800596c:	2301      	movs	r3, #1
 800596e:	9300      	str	r3, [sp, #0]
 8005970:	2304      	movs	r3, #4
 8005972:	f000 f828 	bl	80059c6 <sendI2C>
 8005976:	4603      	mov	r3, r0
 8005978:	75fb      	strb	r3, [r7, #23]

	/* Checks the HAL status of i2c transaction */
	if(i2c_status != HAL_OK) return MLX90393_STATUS_ERROR;
 800597a:	7dfb      	ldrb	r3, [r7, #23]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d001      	beq.n	8005984 <MLX90393_WR+0x52>
 8005980:	23ff      	movs	r3, #255	; 0xff
 8005982:	e000      	b.n	8005986 <MLX90393_WR+0x54>
	else{
		return status;
 8005984:	7dbb      	ldrb	r3, [r7, #22]
	}
}
 8005986:	4618      	mov	r0, r3
 8005988:	3718      	adds	r7, #24
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}

0800598e <MLX90393_RT>:


/* Reset command, is used to reset the device, if device is runnning it will reset to idle mode */
uint8_t MLX90393_RT	( MLX90393 *dev )
{
 800598e:	b580      	push	{r7, lr}
 8005990:	b086      	sub	sp, #24
 8005992:	af02      	add	r7, sp, #8
 8005994:	6078      	str	r0, [r7, #4]
	uint8_t status;
	HAL_StatusTypeDef i2c_status = HAL_OK;
 8005996:	2300      	movs	r3, #0
 8005998:	73fb      	strb	r3, [r7, #15]

	i2c_status = sendI2C( dev->i2cHandle, &status, (uint8_t*)MLX90393_REG_RT, 1, 1 );
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6818      	ldr	r0, [r3, #0]
 800599e:	f107 010e 	add.w	r1, r7, #14
 80059a2:	2301      	movs	r3, #1
 80059a4:	9300      	str	r3, [sp, #0]
 80059a6:	2301      	movs	r3, #1
 80059a8:	22f0      	movs	r2, #240	; 0xf0
 80059aa:	f000 f80c 	bl	80059c6 <sendI2C>
 80059ae:	4603      	mov	r3, r0
 80059b0:	73fb      	strb	r3, [r7, #15]

	/* Checks the HAL status of i2c transaction */
	if(i2c_status != HAL_OK) return MLX90393_STATUS_ERROR;
 80059b2:	7bfb      	ldrb	r3, [r7, #15]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d001      	beq.n	80059bc <MLX90393_RT+0x2e>
 80059b8:	23ff      	movs	r3, #255	; 0xff
 80059ba:	e000      	b.n	80059be <MLX90393_RT+0x30>
	else{
		return status;
 80059bc:	7bbb      	ldrb	r3, [r7, #14]
	}
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3710      	adds	r7, #16
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}

080059c6 <sendI2C>:
}


/* Function that communicates with MLX90393, first sending the command and waiting for the response */
HAL_StatusTypeDef sendI2C( I2C_HandleTypeDef *hi2c, uint8_t *receiveBuffer, uint8_t *sendBuffer, uint8_t sendMessageLength, uint8_t receiveMessageLength )
{
 80059c6:	b580      	push	{r7, lr}
 80059c8:	b088      	sub	sp, #32
 80059ca:	af02      	add	r7, sp, #8
 80059cc:	60f8      	str	r0, [r7, #12]
 80059ce:	60b9      	str	r1, [r7, #8]
 80059d0:	607a      	str	r2, [r7, #4]
 80059d2:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef i2c_status = HAL_OK;
 80059d4:	2300      	movs	r3, #0
 80059d6:	75fb      	strb	r3, [r7, #23]

	i2c_status |= HAL_I2C_Master_Transmit( hi2c, MLX90393_I2C_ADDRESS, sendBuffer, sendMessageLength, HAL_MAX_DELAY );
 80059d8:	78fb      	ldrb	r3, [r7, #3]
 80059da:	b29b      	uxth	r3, r3
 80059dc:	f04f 32ff 	mov.w	r2, #4294967295
 80059e0:	9200      	str	r2, [sp, #0]
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	211c      	movs	r1, #28
 80059e6:	68f8      	ldr	r0, [r7, #12]
 80059e8:	f7fb fa1e 	bl	8000e28 <HAL_I2C_Master_Transmit>
 80059ec:	4603      	mov	r3, r0
 80059ee:	461a      	mov	r2, r3
 80059f0:	7dfb      	ldrb	r3, [r7, #23]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	75fb      	strb	r3, [r7, #23]
	i2c_status |= HAL_I2C_Master_Receive ( hi2c, MLX90393_I2C_ADDRESS, receiveBuffer, receiveMessageLength, HAL_MAX_DELAY );
 80059f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	f04f 32ff 	mov.w	r2, #4294967295
 8005a00:	9200      	str	r2, [sp, #0]
 8005a02:	68ba      	ldr	r2, [r7, #8]
 8005a04:	211c      	movs	r1, #28
 8005a06:	68f8      	ldr	r0, [r7, #12]
 8005a08:	f7fb fb02 	bl	8001010 <HAL_I2C_Master_Receive>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	461a      	mov	r2, r3
 8005a10:	7dfb      	ldrb	r3, [r7, #23]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	75fb      	strb	r3, [r7, #23]

    return i2c_status;
 8005a16:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3718      	adds	r7, #24
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <MLX90393_Init>:


/* Initialization of sensor */
uint8_t MLX90393_Init ( MLX90393 *dev, I2C_HandleTypeDef *i2cHandle )
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b08a      	sub	sp, #40	; 0x28
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]
	/* Initialize structure parameters */
	dev->i2cHandle = i2cHandle;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	683a      	ldr	r2, [r7, #0]
 8005a2e:	601a      	str	r2, [r3, #0]

	dev->mag[0] = 0.0f;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f04f 0200 	mov.w	r2, #0
 8005a36:	605a      	str	r2, [r3, #4]
	dev->mag[1] = 0.0f;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f04f 0200 	mov.w	r2, #0
 8005a3e:	609a      	str	r2, [r3, #8]
	dev->mag[2] = 0.0f;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f04f 0200 	mov.w	r2, #0
 8005a46:	60da      	str	r2, [r3, #12]

	dev->temp_c = 0.0f;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f04f 0200 	mov.w	r2, #0
 8005a4e:	611a      	str	r2, [r3, #16]

	/* Performs a NOP command to get the status of the device, returns HAL status */
	uint8_t status = 0;
 8005a50:	2300      	movs	r3, #0
 8005a52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	status = MLX90393_RT( dev );
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f7ff ff99 	bl	800598e <MLX90393_RT>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if( status == MLX90393_STATUS_ERROR ) return HAL_ERROR;
 8005a62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a66:	2bff      	cmp	r3, #255	; 0xff
 8005a68:	d101      	bne.n	8005a6e <MLX90393_Init+0x4e>
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e067      	b.n	8005b3e <MLX90393_Init+0x11e>
		/* Configure registers,  */
		MLX90393_CONF_1 configWord1;
		MLX90393_CONF_2 configWord2;
		MLX90393_CONF_3 configWord3;

		configWord1.data = 0x0000;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	83bb      	strh	r3, [r7, #28]
		configWord2.data = 0x0000;
 8005a72:	2300      	movs	r3, #0
 8005a74:	833b      	strh	r3, [r7, #24]
		configWord3.data = 0x0000;
 8005a76:	2300      	movs	r3, #0
 8005a78:	82bb      	strh	r3, [r7, #20]

		configWord1.GAINSEL = 0x07;		/* Gain Select 7 */
 8005a7a:	7f3b      	ldrb	r3, [r7, #28]
 8005a7c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8005a80:	773b      	strb	r3, [r7, #28]

		configWord2.TRIGINT = 0x01;		/* Select pin as interrupt */
 8005a82:	7e7b      	ldrb	r3, [r7, #25]
 8005a84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a88:	767b      	strb	r3, [r7, #25]

		configWord3.RESX 	= 0x00; 	/* X resolution 0 */
 8005a8a:	7d3b      	ldrb	r3, [r7, #20]
 8005a8c:	f36f 1346 	bfc	r3, #5, #2
 8005a90:	753b      	strb	r3, [r7, #20]
		configWord3.RESY 	= 0x00; 	/* Y resolution 0 */
 8005a92:	8abb      	ldrh	r3, [r7, #20]
 8005a94:	f36f 13c8 	bfc	r3, #7, #2
 8005a98:	82bb      	strh	r3, [r7, #20]
		configWord3.RESZ 	= 0x00; 	/* Z resolution 0 */
 8005a9a:	7d7b      	ldrb	r3, [r7, #21]
 8005a9c:	f36f 0342 	bfc	r3, #1, #2
 8005aa0:	757b      	strb	r3, [r7, #21]
		configWord3.OSR 	= 0x03; 	/* OSR to 3 */
 8005aa2:	7d3b      	ldrb	r3, [r7, #20]
 8005aa4:	f043 0303 	orr.w	r3, r3, #3
 8005aa8:	753b      	strb	r3, [r7, #20]
		configWord3.DIGFIL 	= 0x07; 	/* Digital filter to 3 */
 8005aaa:	7d3b      	ldrb	r3, [r7, #20]
 8005aac:	f043 031c 	orr.w	r3, r3, #28
 8005ab0:	753b      	strb	r3, [r7, #20]


		/* Write registers and returns status */
		uint8_t status1 = MLX90393_WR ( dev, &configWord1.data, MLX90393_CONF1 );
 8005ab2:	f107 031c 	add.w	r3, r7, #28
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	4619      	mov	r1, r3
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f7ff ff39 	bl	8005932 <MLX90393_WR>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		uint8_t status2 = MLX90393_WR ( dev, &configWord2.data, MLX90393_CONF2 );
 8005ac6:	f107 0318 	add.w	r3, r7, #24
 8005aca:	2201      	movs	r2, #1
 8005acc:	4619      	mov	r1, r3
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f7ff ff2f 	bl	8005932 <MLX90393_WR>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		uint8_t status3 = MLX90393_WR ( dev, &configWord3.data, MLX90393_CONF3 );
 8005ada:	f107 0314 	add.w	r3, r7, #20
 8005ade:	2202      	movs	r2, #2
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f7ff ff25 	bl	8005932 <MLX90393_WR>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		uint8_t status4 = MLX90393_SB ( dev, MLX90393_AXIS_ALL );
 8005aee:	210e      	movs	r1, #14
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f7ff fec9 	bl	8005888 <MLX90393_SB>
 8005af6:	4603      	mov	r3, r0
 8005af8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23


		// sacar
		uint8_t data[RM_DATA_LENGHT] = {0,0,0,0,0,0,0,0,0};
 8005afc:	4a12      	ldr	r2, [pc, #72]	; (8005b48 <MLX90393_Init+0x128>)
 8005afe:	f107 0308 	add.w	r3, r7, #8
 8005b02:	ca07      	ldmia	r2, {r0, r1, r2}
 8005b04:	c303      	stmia	r3!, {r0, r1}
 8005b06:	701a      	strb	r2, [r3, #0]
		uint8_t status5 = MLX90393_RM( dev, MLX90393_AXIS_ALL, data );
 8005b08:	f107 0308 	add.w	r3, r7, #8
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	210e      	movs	r1, #14
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f7ff fee2 	bl	80058da <MLX90393_RM>
 8005b16:	4603      	mov	r3, r0
 8005b18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		// sacar

		status = status1 | status2 | status3 | status4;
 8005b1c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8005b20:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005b24:	4313      	orrs	r3, r2
 8005b26:	b2da      	uxtb	r2, r3
 8005b28:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	b2da      	uxtb	r2, r3
 8005b30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005b34:	4313      	orrs	r3, r2
 8005b36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		return status;
 8005b3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
	}

}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3728      	adds	r7, #40	; 0x28
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop
 8005b48:	08005bfc 	.word	0x08005bfc

08005b4c <__libc_init_array>:
 8005b4c:	b570      	push	{r4, r5, r6, lr}
 8005b4e:	4d0d      	ldr	r5, [pc, #52]	; (8005b84 <__libc_init_array+0x38>)
 8005b50:	4c0d      	ldr	r4, [pc, #52]	; (8005b88 <__libc_init_array+0x3c>)
 8005b52:	1b64      	subs	r4, r4, r5
 8005b54:	10a4      	asrs	r4, r4, #2
 8005b56:	2600      	movs	r6, #0
 8005b58:	42a6      	cmp	r6, r4
 8005b5a:	d109      	bne.n	8005b70 <__libc_init_array+0x24>
 8005b5c:	4d0b      	ldr	r5, [pc, #44]	; (8005b8c <__libc_init_array+0x40>)
 8005b5e:	4c0c      	ldr	r4, [pc, #48]	; (8005b90 <__libc_init_array+0x44>)
 8005b60:	f000 f82e 	bl	8005bc0 <_init>
 8005b64:	1b64      	subs	r4, r4, r5
 8005b66:	10a4      	asrs	r4, r4, #2
 8005b68:	2600      	movs	r6, #0
 8005b6a:	42a6      	cmp	r6, r4
 8005b6c:	d105      	bne.n	8005b7a <__libc_init_array+0x2e>
 8005b6e:	bd70      	pop	{r4, r5, r6, pc}
 8005b70:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b74:	4798      	blx	r3
 8005b76:	3601      	adds	r6, #1
 8005b78:	e7ee      	b.n	8005b58 <__libc_init_array+0xc>
 8005b7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b7e:	4798      	blx	r3
 8005b80:	3601      	adds	r6, #1
 8005b82:	e7f2      	b.n	8005b6a <__libc_init_array+0x1e>
 8005b84:	08005c6c 	.word	0x08005c6c
 8005b88:	08005c6c 	.word	0x08005c6c
 8005b8c:	08005c6c 	.word	0x08005c6c
 8005b90:	08005c70 	.word	0x08005c70

08005b94 <memcpy>:
 8005b94:	440a      	add	r2, r1
 8005b96:	4291      	cmp	r1, r2
 8005b98:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b9c:	d100      	bne.n	8005ba0 <memcpy+0xc>
 8005b9e:	4770      	bx	lr
 8005ba0:	b510      	push	{r4, lr}
 8005ba2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ba6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005baa:	4291      	cmp	r1, r2
 8005bac:	d1f9      	bne.n	8005ba2 <memcpy+0xe>
 8005bae:	bd10      	pop	{r4, pc}

08005bb0 <memset>:
 8005bb0:	4402      	add	r2, r0
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d100      	bne.n	8005bba <memset+0xa>
 8005bb8:	4770      	bx	lr
 8005bba:	f803 1b01 	strb.w	r1, [r3], #1
 8005bbe:	e7f9      	b.n	8005bb4 <memset+0x4>

08005bc0 <_init>:
 8005bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bc2:	bf00      	nop
 8005bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bc6:	bc08      	pop	{r3}
 8005bc8:	469e      	mov	lr, r3
 8005bca:	4770      	bx	lr

08005bcc <_fini>:
 8005bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bce:	bf00      	nop
 8005bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bd2:	bc08      	pop	{r3}
 8005bd4:	469e      	mov	lr, r3
 8005bd6:	4770      	bx	lr
