
STM32L451RCT_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068a0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08006a40  08006a40  00016a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ad8  08006ad8  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08006ad8  08006ad8  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006ad8  08006ad8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ad8  08006ad8  00016ad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006adc  08006adc  00016adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006ae0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019c4  20000010  08006af0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200019d4  08006af0  000219d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a0ab  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003725  00000000  00000000  0003a0eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001298  00000000  00000000  0003d810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001110  00000000  00000000  0003eaa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000232ed  00000000  00000000  0003fbb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001537a  00000000  00000000  00062ea5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d04a1  00000000  00000000  0007821f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001486c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b2c  00000000  00000000  00148714  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006a28 	.word	0x08006a28

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08006a28 	.word	0x08006a28

080001e0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80001e4:	4a04      	ldr	r2, [pc, #16]	; (80001f8 <MX_FREERTOS_Init+0x18>)
 80001e6:	2100      	movs	r1, #0
 80001e8:	4804      	ldr	r0, [pc, #16]	; (80001fc <MX_FREERTOS_Init+0x1c>)
 80001ea:	f002 fff5 	bl	80031d8 <osThreadNew>
 80001ee:	4603      	mov	r3, r0
 80001f0:	4a03      	ldr	r2, [pc, #12]	; (8000200 <MX_FREERTOS_Init+0x20>)
 80001f2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80001f4:	bf00      	nop
 80001f6:	bd80      	pop	{r7, pc}
 80001f8:	08006a74 	.word	0x08006a74
 80001fc:	08000205 	.word	0x08000205
 8000200:	20001904 	.word	0x20001904

08000204 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800020c:	2001      	movs	r0, #1
 800020e:	f003 f875 	bl	80032fc <osDelay>
 8000212:	e7fb      	b.n	800020c <StartDefaultTask+0x8>

08000214 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b08a      	sub	sp, #40	; 0x28
 8000218:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800021a:	f107 0314 	add.w	r3, r7, #20
 800021e:	2200      	movs	r2, #0
 8000220:	601a      	str	r2, [r3, #0]
 8000222:	605a      	str	r2, [r3, #4]
 8000224:	609a      	str	r2, [r3, #8]
 8000226:	60da      	str	r2, [r3, #12]
 8000228:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800022a:	4b34      	ldr	r3, [pc, #208]	; (80002fc <MX_GPIO_Init+0xe8>)
 800022c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800022e:	4a33      	ldr	r2, [pc, #204]	; (80002fc <MX_GPIO_Init+0xe8>)
 8000230:	f043 0304 	orr.w	r3, r3, #4
 8000234:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000236:	4b31      	ldr	r3, [pc, #196]	; (80002fc <MX_GPIO_Init+0xe8>)
 8000238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800023a:	f003 0304 	and.w	r3, r3, #4
 800023e:	613b      	str	r3, [r7, #16]
 8000240:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000242:	4b2e      	ldr	r3, [pc, #184]	; (80002fc <MX_GPIO_Init+0xe8>)
 8000244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000246:	4a2d      	ldr	r2, [pc, #180]	; (80002fc <MX_GPIO_Init+0xe8>)
 8000248:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800024c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800024e:	4b2b      	ldr	r3, [pc, #172]	; (80002fc <MX_GPIO_Init+0xe8>)
 8000250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000256:	60fb      	str	r3, [r7, #12]
 8000258:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800025a:	4b28      	ldr	r3, [pc, #160]	; (80002fc <MX_GPIO_Init+0xe8>)
 800025c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800025e:	4a27      	ldr	r2, [pc, #156]	; (80002fc <MX_GPIO_Init+0xe8>)
 8000260:	f043 0302 	orr.w	r3, r3, #2
 8000264:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000266:	4b25      	ldr	r3, [pc, #148]	; (80002fc <MX_GPIO_Init+0xe8>)
 8000268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800026a:	f003 0302 	and.w	r3, r3, #2
 800026e:	60bb      	str	r3, [r7, #8]
 8000270:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000272:	4b22      	ldr	r3, [pc, #136]	; (80002fc <MX_GPIO_Init+0xe8>)
 8000274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000276:	4a21      	ldr	r2, [pc, #132]	; (80002fc <MX_GPIO_Init+0xe8>)
 8000278:	f043 0301 	orr.w	r3, r3, #1
 800027c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800027e:	4b1f      	ldr	r3, [pc, #124]	; (80002fc <MX_GPIO_Init+0xe8>)
 8000280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000282:	f003 0301 	and.w	r3, r3, #1
 8000286:	607b      	str	r3, [r7, #4]
 8000288:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 800028a:	2200      	movs	r2, #0
 800028c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000290:	481b      	ldr	r0, [pc, #108]	; (8000300 <MX_GPIO_Init+0xec>)
 8000292:	f000 fdad 	bl	8000df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000296:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800029a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800029c:	2301      	movs	r3, #1
 800029e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002a0:	2300      	movs	r3, #0
 80002a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002a4:	2300      	movs	r3, #0
 80002a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002a8:	f107 0314 	add.w	r3, r7, #20
 80002ac:	4619      	mov	r1, r3
 80002ae:	4814      	ldr	r0, [pc, #80]	; (8000300 <MX_GPIO_Init+0xec>)
 80002b0:	f000 fc24 	bl	8000afc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT_MAG_Pin;
 80002b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80002b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80002ba:	4b12      	ldr	r3, [pc, #72]	; (8000304 <MX_GPIO_Init+0xf0>)
 80002bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002be:	2300      	movs	r3, #0
 80002c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_MAG_GPIO_Port, &GPIO_InitStruct);
 80002c2:	f107 0314 	add.w	r3, r7, #20
 80002c6:	4619      	mov	r1, r3
 80002c8:	480f      	ldr	r0, [pc, #60]	; (8000308 <MX_GPIO_Init+0xf4>)
 80002ca:	f000 fc17 	bl	8000afc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT_IMU_Pin;
 80002ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80002d4:	4b0b      	ldr	r3, [pc, #44]	; (8000304 <MX_GPIO_Init+0xf0>)
 80002d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002d8:	2300      	movs	r3, #0
 80002da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_IMU_GPIO_Port, &GPIO_InitStruct);
 80002dc:	f107 0314 	add.w	r3, r7, #20
 80002e0:	4619      	mov	r1, r3
 80002e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002e6:	f000 fc09 	bl	8000afc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80002ea:	2200      	movs	r2, #0
 80002ec:	2105      	movs	r1, #5
 80002ee:	2028      	movs	r0, #40	; 0x28
 80002f0:	f000 fbcd 	bl	8000a8e <HAL_NVIC_SetPriority>
  //HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

}
 80002f4:	bf00      	nop
 80002f6:	3728      	adds	r7, #40	; 0x28
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	40021000 	.word	0x40021000
 8000300:	48000800 	.word	0x48000800
 8000304:	10110000 	.word	0x10110000
 8000308:	48000400 	.word	0x48000400

0800030c <enableIRQ>:

/* USER CODE BEGIN 2 */


void enableIRQ( void )
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000310:	2028      	movs	r0, #40	; 0x28
 8000312:	f000 fbd8 	bl	8000ac6 <HAL_NVIC_EnableIRQ>
}
 8000316:	bf00      	nop
 8000318:	bd80      	pop	{r7, pc}

0800031a <HAL_GPIO_EXTI_Callback>:


/* Redefined _weak system callback */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800031a:	b580      	push	{r7, lr}
 800031c:	b082      	sub	sp, #8
 800031e:	af00      	add	r7, sp, #0
 8000320:	4603      	mov	r3, r0
 8000322:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == INT_MAG_Pin)
 8000324:	88fb      	ldrh	r3, [r7, #6]
 8000326:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800032a:	d101      	bne.n	8000330 <HAL_GPIO_EXTI_Callback+0x16>
	{
		// Execute callback here
		MLX90393_DRDYCallback();
 800032c:	f006 fb1a 	bl	8006964 <MLX90393_DRDYCallback>
	}


	if(GPIO_Pin == INT_IMU_Pin)
 8000330:	88fb      	ldrh	r3, [r7, #6]
 8000332:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000336:	d101      	bne.n	800033c <HAL_GPIO_EXTI_Callback+0x22>
	{
		// Execute callback here
		MLX90393_DRDYCallback();
 8000338:	f006 fb14 	bl	8006964 <MLX90393_DRDYCallback>
	}
}
 800033c:	bf00      	nop
 800033e:	3708      	adds	r7, #8
 8000340:	46bd      	mov	sp, r7
 8000342:	bd80      	pop	{r7, pc}

08000344 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000348:	4b1b      	ldr	r3, [pc, #108]	; (80003b8 <MX_I2C2_Init+0x74>)
 800034a:	4a1c      	ldr	r2, [pc, #112]	; (80003bc <MX_I2C2_Init+0x78>)
 800034c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 800034e:	4b1a      	ldr	r3, [pc, #104]	; (80003b8 <MX_I2C2_Init+0x74>)
 8000350:	4a1b      	ldr	r2, [pc, #108]	; (80003c0 <MX_I2C2_Init+0x7c>)
 8000352:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000354:	4b18      	ldr	r3, [pc, #96]	; (80003b8 <MX_I2C2_Init+0x74>)
 8000356:	2200      	movs	r2, #0
 8000358:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800035a:	4b17      	ldr	r3, [pc, #92]	; (80003b8 <MX_I2C2_Init+0x74>)
 800035c:	2201      	movs	r2, #1
 800035e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000360:	4b15      	ldr	r3, [pc, #84]	; (80003b8 <MX_I2C2_Init+0x74>)
 8000362:	2200      	movs	r2, #0
 8000364:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000366:	4b14      	ldr	r3, [pc, #80]	; (80003b8 <MX_I2C2_Init+0x74>)
 8000368:	2200      	movs	r2, #0
 800036a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800036c:	4b12      	ldr	r3, [pc, #72]	; (80003b8 <MX_I2C2_Init+0x74>)
 800036e:	2200      	movs	r2, #0
 8000370:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000372:	4b11      	ldr	r3, [pc, #68]	; (80003b8 <MX_I2C2_Init+0x74>)
 8000374:	2200      	movs	r2, #0
 8000376:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000378:	4b0f      	ldr	r3, [pc, #60]	; (80003b8 <MX_I2C2_Init+0x74>)
 800037a:	2200      	movs	r2, #0
 800037c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800037e:	480e      	ldr	r0, [pc, #56]	; (80003b8 <MX_I2C2_Init+0x74>)
 8000380:	f000 fd66 	bl	8000e50 <HAL_I2C_Init>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800038a:	f000 f954 	bl	8000636 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800038e:	2100      	movs	r1, #0
 8000390:	4809      	ldr	r0, [pc, #36]	; (80003b8 <MX_I2C2_Init+0x74>)
 8000392:	f001 fc8d 	bl	8001cb0 <HAL_I2CEx_ConfigAnalogFilter>
 8000396:	4603      	mov	r3, r0
 8000398:	2b00      	cmp	r3, #0
 800039a:	d001      	beq.n	80003a0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800039c:	f000 f94b 	bl	8000636 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80003a0:	2100      	movs	r1, #0
 80003a2:	4805      	ldr	r0, [pc, #20]	; (80003b8 <MX_I2C2_Init+0x74>)
 80003a4:	f001 fccf 	bl	8001d46 <HAL_I2CEx_ConfigDigitalFilter>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80003ae:	f000 f942 	bl	8000636 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80003b2:	bf00      	nop
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	20001908 	.word	0x20001908
 80003bc:	40005800 	.word	0x40005800
 80003c0:	10909cec 	.word	0x10909cec

080003c4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b0a2      	sub	sp, #136	; 0x88
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003cc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80003d0:	2200      	movs	r2, #0
 80003d2:	601a      	str	r2, [r3, #0]
 80003d4:	605a      	str	r2, [r3, #4]
 80003d6:	609a      	str	r2, [r3, #8]
 80003d8:	60da      	str	r2, [r3, #12]
 80003da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003dc:	f107 0310 	add.w	r3, r7, #16
 80003e0:	2264      	movs	r2, #100	; 0x64
 80003e2:	2100      	movs	r1, #0
 80003e4:	4618      	mov	r0, r3
 80003e6:	f006 fb17 	bl	8006a18 <memset>
  if(i2cHandle->Instance==I2C2)
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	4a20      	ldr	r2, [pc, #128]	; (8000470 <HAL_I2C_MspInit+0xac>)
 80003f0:	4293      	cmp	r3, r2
 80003f2:	d138      	bne.n	8000466 <HAL_I2C_MspInit+0xa2>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80003f4:	2380      	movs	r3, #128	; 0x80
 80003f6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80003f8:	2300      	movs	r3, #0
 80003fa:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003fc:	f107 0310 	add.w	r3, r7, #16
 8000400:	4618      	mov	r0, r3
 8000402:	f002 fb3f 	bl	8002a84 <HAL_RCCEx_PeriphCLKConfig>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800040c:	f000 f913 	bl	8000636 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000410:	4b18      	ldr	r3, [pc, #96]	; (8000474 <HAL_I2C_MspInit+0xb0>)
 8000412:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000414:	4a17      	ldr	r2, [pc, #92]	; (8000474 <HAL_I2C_MspInit+0xb0>)
 8000416:	f043 0302 	orr.w	r3, r3, #2
 800041a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800041c:	4b15      	ldr	r3, [pc, #84]	; (8000474 <HAL_I2C_MspInit+0xb0>)
 800041e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000420:	f003 0302 	and.w	r3, r3, #2
 8000424:	60fb      	str	r3, [r7, #12]
 8000426:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB13     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000428:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800042c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800042e:	2312      	movs	r3, #18
 8000430:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000432:	2300      	movs	r3, #0
 8000434:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000436:	2303      	movs	r3, #3
 8000438:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800043c:	2304      	movs	r3, #4
 800043e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000442:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000446:	4619      	mov	r1, r3
 8000448:	480b      	ldr	r0, [pc, #44]	; (8000478 <HAL_I2C_MspInit+0xb4>)
 800044a:	f000 fb57 	bl	8000afc <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800044e:	4b09      	ldr	r3, [pc, #36]	; (8000474 <HAL_I2C_MspInit+0xb0>)
 8000450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000452:	4a08      	ldr	r2, [pc, #32]	; (8000474 <HAL_I2C_MspInit+0xb0>)
 8000454:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000458:	6593      	str	r3, [r2, #88]	; 0x58
 800045a:	4b06      	ldr	r3, [pc, #24]	; (8000474 <HAL_I2C_MspInit+0xb0>)
 800045c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800045e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000462:	60bb      	str	r3, [r7, #8]
 8000464:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000466:	bf00      	nop
 8000468:	3788      	adds	r7, #136	; 0x88
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	40005800 	.word	0x40005800
 8000474:	40021000 	.word	0x40021000
 8000478:	48000400 	.word	0x48000400

0800047c <taskLED>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* Task for blinking LED  */
void taskLED ( void *pvParameters )
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]

	static uint32_t pin_state = 0;

	while(1)
	{
		vTaskDelay(150 / portTICK_PERIOD_MS);
 8000484:	2096      	movs	r0, #150	; 0x96
 8000486:	f004 f8b5 	bl	80045f4 <vTaskDelay>

		pin_state = !pin_state;
 800048a:	4b13      	ldr	r3, [pc, #76]	; (80004d8 <taskLED+0x5c>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	2b00      	cmp	r3, #0
 8000490:	bf0c      	ite	eq
 8000492:	2301      	moveq	r3, #1
 8000494:	2300      	movne	r3, #0
 8000496:	b2db      	uxtb	r3, r3
 8000498:	461a      	mov	r2, r3
 800049a:	4b0f      	ldr	r3, [pc, #60]	; (80004d8 <taskLED+0x5c>)
 800049c:	601a      	str	r2, [r3, #0]

		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, pin_state);
 800049e:	4b0e      	ldr	r3, [pc, #56]	; (80004d8 <taskLED+0x5c>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	b2db      	uxtb	r3, r3
 80004a4:	461a      	mov	r2, r3
 80004a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004aa:	480c      	ldr	r0, [pc, #48]	; (80004dc <taskLED+0x60>)
 80004ac:	f000 fca0 	bl	8000df0 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 80004b0:	2032      	movs	r0, #50	; 0x32
 80004b2:	f000 f9ed 	bl	8000890 <HAL_Delay>

		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, !pin_state);
 80004b6:	4b08      	ldr	r3, [pc, #32]	; (80004d8 <taskLED+0x5c>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	bf0c      	ite	eq
 80004be:	2301      	moveq	r3, #1
 80004c0:	2300      	movne	r3, #0
 80004c2:	b2db      	uxtb	r3, r3
 80004c4:	461a      	mov	r2, r3
 80004c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004ca:	4804      	ldr	r0, [pc, #16]	; (80004dc <taskLED+0x60>)
 80004cc:	f000 fc90 	bl	8000df0 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 80004d0:	2032      	movs	r0, #50	; 0x32
 80004d2:	f000 f9dd 	bl	8000890 <HAL_Delay>
		vTaskDelay(150 / portTICK_PERIOD_MS);
 80004d6:	e7d5      	b.n	8000484 <taskLED+0x8>
 80004d8:	20000034 	.word	0x20000034
 80004dc:	48000800 	.word	0x48000800

080004e0 <taskSensor>:
	}
}


void taskSensor ( void *pvParameters )
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b084      	sub	sp, #16
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
	uint16_t magX, magY, magZ;
	HAL_StatusTypeDef i2cStatus = HAL_OK;
 80004e8:	2300      	movs	r3, #0
 80004ea:	73fb      	strb	r3, [r7, #15]

	/* Initializes sensors */
	i2cStatus |= IIM42652_Init(&IMU, &hi2c2);
 80004ec:	490d      	ldr	r1, [pc, #52]	; (8000524 <taskSensor+0x44>)
 80004ee:	480e      	ldr	r0, [pc, #56]	; (8000528 <taskSensor+0x48>)
 80004f0:	f006 f812 	bl	8006518 <IIM42652_Init>
 80004f4:	4603      	mov	r3, r0
 80004f6:	461a      	mov	r2, r3
 80004f8:	7bfb      	ldrb	r3, [r7, #15]
 80004fa:	4313      	orrs	r3, r2
 80004fc:	73fb      	strb	r3, [r7, #15]
	i2cStatus |= MLX90393_Init(&MAG, &hi2c2);
 80004fe:	4909      	ldr	r1, [pc, #36]	; (8000524 <taskSensor+0x44>)
 8000500:	480a      	ldr	r0, [pc, #40]	; (800052c <taskSensor+0x4c>)
 8000502:	f006 f95f 	bl	80067c4 <MLX90393_Init>
 8000506:	4603      	mov	r3, r0
 8000508:	461a      	mov	r2, r3
 800050a:	7bfb      	ldrb	r3, [r7, #15]
 800050c:	4313      	orrs	r3, r2
 800050e:	73fb      	strb	r3, [r7, #15]
		/* Error */
	}

	while(1)
	{
		MLX90393_ReadMeasurementAxisAll( &MAG, &magX, &magY, &magZ );
 8000510:	f107 0308 	add.w	r3, r7, #8
 8000514:	f107 020a 	add.w	r2, r7, #10
 8000518:	f107 010c 	add.w	r1, r7, #12
 800051c:	4803      	ldr	r0, [pc, #12]	; (800052c <taskSensor+0x4c>)
 800051e:	f006 f9d9 	bl	80068d4 <MLX90393_ReadMeasurementAxisAll>
 8000522:	e7f5      	b.n	8000510 <taskSensor+0x30>
 8000524:	20001908 	.word	0x20001908
 8000528:	20001954 	.word	0x20001954
 800052c:	20001974 	.word	0x20001974

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000536:	f000 f936 	bl	80007a6 <HAL_Init>

  /* USER CODE BEGIN Init */

  /* Initialize tasks */
  BaseType_t xReturnLED  = xTaskCreate ( taskLED, "t_LED", 100, NULL, 2, &taskLED_Handler );
 800053a:	4b11      	ldr	r3, [pc, #68]	; (8000580 <main+0x50>)
 800053c:	9301      	str	r3, [sp, #4]
 800053e:	2302      	movs	r3, #2
 8000540:	9300      	str	r3, [sp, #0]
 8000542:	2300      	movs	r3, #0
 8000544:	2264      	movs	r2, #100	; 0x64
 8000546:	490f      	ldr	r1, [pc, #60]	; (8000584 <main+0x54>)
 8000548:	480f      	ldr	r0, [pc, #60]	; (8000588 <main+0x58>)
 800054a:	f003 ff0e 	bl	800436a <xTaskCreate>
 800054e:	6078      	str	r0, [r7, #4]
  BaseType_t xReturnSENS = xTaskCreate ( taskSensor, "t_SENS", 100, NULL, 3, &taskSensor_Handler );
 8000550:	4b0e      	ldr	r3, [pc, #56]	; (800058c <main+0x5c>)
 8000552:	9301      	str	r3, [sp, #4]
 8000554:	2303      	movs	r3, #3
 8000556:	9300      	str	r3, [sp, #0]
 8000558:	2300      	movs	r3, #0
 800055a:	2264      	movs	r2, #100	; 0x64
 800055c:	490c      	ldr	r1, [pc, #48]	; (8000590 <main+0x60>)
 800055e:	480d      	ldr	r0, [pc, #52]	; (8000594 <main+0x64>)
 8000560:	f003 ff03 	bl	800436a <xTaskCreate>
 8000564:	6038      	str	r0, [r7, #0]
  }

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000566:	f000 f817 	bl	8000598 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056a:	f7ff fe53 	bl	8000214 <MX_GPIO_Init>
  MX_I2C2_Init();
 800056e:	f7ff fee9 	bl	8000344 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000572:	f002 fde7 	bl	8003144 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000576:	f7ff fe33 	bl	80001e0 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800057a:	f002 fe07 	bl	800318c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800057e:	e7fe      	b.n	800057e <main+0x4e>
 8000580:	2000002c 	.word	0x2000002c
 8000584:	08006a4c 	.word	0x08006a4c
 8000588:	0800047d 	.word	0x0800047d
 800058c:	20000030 	.word	0x20000030
 8000590:	08006a54 	.word	0x08006a54
 8000594:	080004e1 	.word	0x080004e1

08000598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b096      	sub	sp, #88	; 0x58
 800059c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059e:	f107 0314 	add.w	r3, r7, #20
 80005a2:	2244      	movs	r2, #68	; 0x44
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f006 fa36 	bl	8006a18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ac:	463b      	mov	r3, r7
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
 80005b2:	605a      	str	r2, [r3, #4]
 80005b4:	609a      	str	r2, [r3, #8]
 80005b6:	60da      	str	r2, [r3, #12]
 80005b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005ba:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005be:	f001 fc1d 	bl	8001dfc <HAL_PWREx_ControlVoltageScaling>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005c8:	f000 f835 	bl	8000636 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005cc:	2301      	movs	r3, #1
 80005ce:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d6:	2302      	movs	r3, #2
 80005d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005da:	2303      	movs	r3, #3
 80005dc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 80005de:	2302      	movs	r3, #2
 80005e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80005e2:	2310      	movs	r3, #16
 80005e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005e6:	2307      	movs	r3, #7
 80005e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005ea:	2302      	movs	r3, #2
 80005ec:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005ee:	2302      	movs	r3, #2
 80005f0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f2:	f107 0314 	add.w	r3, r7, #20
 80005f6:	4618      	mov	r0, r3
 80005f8:	f001 fc56 	bl	8001ea8 <HAL_RCC_OscConfig>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000602:	f000 f818 	bl	8000636 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000606:	230f      	movs	r3, #15
 8000608:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060a:	2303      	movs	r3, #3
 800060c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060e:	2300      	movs	r3, #0
 8000610:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000612:	2300      	movs	r3, #0
 8000614:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000616:	2300      	movs	r3, #0
 8000618:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800061a:	463b      	mov	r3, r7
 800061c:	2104      	movs	r1, #4
 800061e:	4618      	mov	r0, r3
 8000620:	f002 f862 	bl	80026e8 <HAL_RCC_ClockConfig>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800062a:	f000 f804 	bl	8000636 <Error_Handler>
  }
}
 800062e:	bf00      	nop
 8000630:	3758      	adds	r7, #88	; 0x58
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}

08000636 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000636:	b480      	push	{r7}
 8000638:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800063a:	b672      	cpsid	i
}
 800063c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800063e:	e7fe      	b.n	800063e <Error_Handler+0x8>

08000640 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000646:	4b11      	ldr	r3, [pc, #68]	; (800068c <HAL_MspInit+0x4c>)
 8000648:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800064a:	4a10      	ldr	r2, [pc, #64]	; (800068c <HAL_MspInit+0x4c>)
 800064c:	f043 0301 	orr.w	r3, r3, #1
 8000650:	6613      	str	r3, [r2, #96]	; 0x60
 8000652:	4b0e      	ldr	r3, [pc, #56]	; (800068c <HAL_MspInit+0x4c>)
 8000654:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000656:	f003 0301 	and.w	r3, r3, #1
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800065e:	4b0b      	ldr	r3, [pc, #44]	; (800068c <HAL_MspInit+0x4c>)
 8000660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000662:	4a0a      	ldr	r2, [pc, #40]	; (800068c <HAL_MspInit+0x4c>)
 8000664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000668:	6593      	str	r3, [r2, #88]	; 0x58
 800066a:	4b08      	ldr	r3, [pc, #32]	; (800068c <HAL_MspInit+0x4c>)
 800066c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800066e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000672:	603b      	str	r3, [r7, #0]
 8000674:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000676:	2200      	movs	r2, #0
 8000678:	210f      	movs	r1, #15
 800067a:	f06f 0001 	mvn.w	r0, #1
 800067e:	f000 fa06 	bl	8000a8e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000682:	bf00      	nop
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40021000 	.word	0x40021000

08000690 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000694:	e7fe      	b.n	8000694 <NMI_Handler+0x4>

08000696 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000696:	b480      	push	{r7}
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800069a:	e7fe      	b.n	800069a <HardFault_Handler+0x4>

0800069c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006a0:	e7fe      	b.n	80006a0 <MemManage_Handler+0x4>

080006a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006a2:	b480      	push	{r7}
 80006a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006a6:	e7fe      	b.n	80006a6 <BusFault_Handler+0x4>

080006a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006ac:	e7fe      	b.n	80006ac <UsageFault_Handler+0x4>

080006ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006ae:	b480      	push	{r7}
 80006b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006b2:	bf00      	nop
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr

080006bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006c0:	f000 f8c6 	bl	8000850 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80006c4:	f004 fc12 	bl	8004eec <xTaskGetSchedulerState>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	d001      	beq.n	80006d2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80006ce:	f005 fafb 	bl	8005cc8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}

080006d6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80006d6:	b580      	push	{r7, lr}
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80006da:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80006de:	f000 fb9f 	bl	8000e20 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80006e2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80006e6:	f000 fb9b 	bl	8000e20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
	...

080006f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80006f4:	4b15      	ldr	r3, [pc, #84]	; (800074c <SystemInit+0x5c>)
 80006f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006fa:	4a14      	ldr	r2, [pc, #80]	; (800074c <SystemInit+0x5c>)
 80006fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000700:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000704:	4b12      	ldr	r3, [pc, #72]	; (8000750 <SystemInit+0x60>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a11      	ldr	r2, [pc, #68]	; (8000750 <SystemInit+0x60>)
 800070a:	f043 0301 	orr.w	r3, r3, #1
 800070e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000710:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <SystemInit+0x60>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <SystemInit+0x60>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4a0d      	ldr	r2, [pc, #52]	; (8000750 <SystemInit+0x60>)
 800071c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000720:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000724:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000726:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <SystemInit+0x60>)
 8000728:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800072c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800072e:	4b08      	ldr	r3, [pc, #32]	; (8000750 <SystemInit+0x60>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4a07      	ldr	r2, [pc, #28]	; (8000750 <SystemInit+0x60>)
 8000734:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000738:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800073a:	4b05      	ldr	r3, [pc, #20]	; (8000750 <SystemInit+0x60>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
}
 8000740:	bf00      	nop
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	e000ed00 	.word	0xe000ed00
 8000750:	40021000 	.word	0x40021000

08000754 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000754:	f8df d034 	ldr.w	sp, [pc, #52]	; 800078c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000758:	f7ff ffca 	bl	80006f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800075c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800075e:	e003      	b.n	8000768 <LoopCopyDataInit>

08000760 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000760:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000762:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000764:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000766:	3104      	adds	r1, #4

08000768 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000768:	480a      	ldr	r0, [pc, #40]	; (8000794 <LoopForever+0xa>)
	ldr	r3, =_edata
 800076a:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <LoopForever+0xe>)
	adds	r2, r0, r1
 800076c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800076e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000770:	d3f6      	bcc.n	8000760 <CopyDataInit>
	ldr	r2, =_sbss
 8000772:	4a0a      	ldr	r2, [pc, #40]	; (800079c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000774:	e002      	b.n	800077c <LoopFillZerobss>

08000776 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000776:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000778:	f842 3b04 	str.w	r3, [r2], #4

0800077c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800077c:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <LoopForever+0x16>)
	cmp	r2, r3
 800077e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000780:	d3f9      	bcc.n	8000776 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000782:	f006 f917 	bl	80069b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000786:	f7ff fed3 	bl	8000530 <main>

0800078a <LoopForever>:

LoopForever:
    b LoopForever
 800078a:	e7fe      	b.n	800078a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800078c:	20020000 	.word	0x20020000
	ldr	r3, =_sidata
 8000790:	08006ae0 	.word	0x08006ae0
	ldr	r0, =_sdata
 8000794:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000798:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 800079c:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 80007a0:	200019d4 	.word	0x200019d4

080007a4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007a4:	e7fe      	b.n	80007a4 <ADC1_IRQHandler>

080007a6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007a6:	b580      	push	{r7, lr}
 80007a8:	b082      	sub	sp, #8
 80007aa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007ac:	2300      	movs	r3, #0
 80007ae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007b0:	2003      	movs	r0, #3
 80007b2:	f000 f961 	bl	8000a78 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007b6:	200f      	movs	r0, #15
 80007b8:	f000 f80e 	bl	80007d8 <HAL_InitTick>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d002      	beq.n	80007c8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80007c2:	2301      	movs	r3, #1
 80007c4:	71fb      	strb	r3, [r7, #7]
 80007c6:	e001      	b.n	80007cc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80007c8:	f7ff ff3a 	bl	8000640 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007cc:	79fb      	ldrb	r3, [r7, #7]
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
	...

080007d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80007e0:	2300      	movs	r3, #0
 80007e2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80007e4:	4b17      	ldr	r3, [pc, #92]	; (8000844 <HAL_InitTick+0x6c>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d023      	beq.n	8000834 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80007ec:	4b16      	ldr	r3, [pc, #88]	; (8000848 <HAL_InitTick+0x70>)
 80007ee:	681a      	ldr	r2, [r3, #0]
 80007f0:	4b14      	ldr	r3, [pc, #80]	; (8000844 <HAL_InitTick+0x6c>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	4619      	mov	r1, r3
 80007f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80007fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000802:	4618      	mov	r0, r3
 8000804:	f000 f96d 	bl	8000ae2 <HAL_SYSTICK_Config>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d10f      	bne.n	800082e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	2b0f      	cmp	r3, #15
 8000812:	d809      	bhi.n	8000828 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000814:	2200      	movs	r2, #0
 8000816:	6879      	ldr	r1, [r7, #4]
 8000818:	f04f 30ff 	mov.w	r0, #4294967295
 800081c:	f000 f937 	bl	8000a8e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000820:	4a0a      	ldr	r2, [pc, #40]	; (800084c <HAL_InitTick+0x74>)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	6013      	str	r3, [r2, #0]
 8000826:	e007      	b.n	8000838 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000828:	2301      	movs	r3, #1
 800082a:	73fb      	strb	r3, [r7, #15]
 800082c:	e004      	b.n	8000838 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800082e:	2301      	movs	r3, #1
 8000830:	73fb      	strb	r3, [r7, #15]
 8000832:	e001      	b.n	8000838 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000834:	2301      	movs	r3, #1
 8000836:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000838:	7bfb      	ldrb	r3, [r7, #15]
}
 800083a:	4618      	mov	r0, r3
 800083c:	3710      	adds	r7, #16
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	20000008 	.word	0x20000008
 8000848:	20000000 	.word	0x20000000
 800084c:	20000004 	.word	0x20000004

08000850 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000854:	4b06      	ldr	r3, [pc, #24]	; (8000870 <HAL_IncTick+0x20>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	461a      	mov	r2, r3
 800085a:	4b06      	ldr	r3, [pc, #24]	; (8000874 <HAL_IncTick+0x24>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4413      	add	r3, r2
 8000860:	4a04      	ldr	r2, [pc, #16]	; (8000874 <HAL_IncTick+0x24>)
 8000862:	6013      	str	r3, [r2, #0]
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	20000008 	.word	0x20000008
 8000874:	20001988 	.word	0x20001988

08000878 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  return uwTick;
 800087c:	4b03      	ldr	r3, [pc, #12]	; (800088c <HAL_GetTick+0x14>)
 800087e:	681b      	ldr	r3, [r3, #0]
}
 8000880:	4618      	mov	r0, r3
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	20001988 	.word	0x20001988

08000890 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000898:	f7ff ffee 	bl	8000878 <HAL_GetTick>
 800089c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008a8:	d005      	beq.n	80008b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80008aa:	4b0a      	ldr	r3, [pc, #40]	; (80008d4 <HAL_Delay+0x44>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	461a      	mov	r2, r3
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	4413      	add	r3, r2
 80008b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008b6:	bf00      	nop
 80008b8:	f7ff ffde 	bl	8000878 <HAL_GetTick>
 80008bc:	4602      	mov	r2, r0
 80008be:	68bb      	ldr	r3, [r7, #8]
 80008c0:	1ad3      	subs	r3, r2, r3
 80008c2:	68fa      	ldr	r2, [r7, #12]
 80008c4:	429a      	cmp	r2, r3
 80008c6:	d8f7      	bhi.n	80008b8 <HAL_Delay+0x28>
  {
  }
}
 80008c8:	bf00      	nop
 80008ca:	bf00      	nop
 80008cc:	3710      	adds	r7, #16
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	20000008 	.word	0x20000008

080008d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008d8:	b480      	push	{r7}
 80008da:	b085      	sub	sp, #20
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	f003 0307 	and.w	r3, r3, #7
 80008e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008e8:	4b0c      	ldr	r3, [pc, #48]	; (800091c <__NVIC_SetPriorityGrouping+0x44>)
 80008ea:	68db      	ldr	r3, [r3, #12]
 80008ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008ee:	68ba      	ldr	r2, [r7, #8]
 80008f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008f4:	4013      	ands	r3, r2
 80008f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000900:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000904:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000908:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800090a:	4a04      	ldr	r2, [pc, #16]	; (800091c <__NVIC_SetPriorityGrouping+0x44>)
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	60d3      	str	r3, [r2, #12]
}
 8000910:	bf00      	nop
 8000912:	3714      	adds	r7, #20
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr
 800091c:	e000ed00 	.word	0xe000ed00

08000920 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000924:	4b04      	ldr	r3, [pc, #16]	; (8000938 <__NVIC_GetPriorityGrouping+0x18>)
 8000926:	68db      	ldr	r3, [r3, #12]
 8000928:	0a1b      	lsrs	r3, r3, #8
 800092a:	f003 0307 	and.w	r3, r3, #7
}
 800092e:	4618      	mov	r0, r3
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr
 8000938:	e000ed00 	.word	0xe000ed00

0800093c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094a:	2b00      	cmp	r3, #0
 800094c:	db0b      	blt.n	8000966 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	f003 021f 	and.w	r2, r3, #31
 8000954:	4907      	ldr	r1, [pc, #28]	; (8000974 <__NVIC_EnableIRQ+0x38>)
 8000956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095a:	095b      	lsrs	r3, r3, #5
 800095c:	2001      	movs	r0, #1
 800095e:	fa00 f202 	lsl.w	r2, r0, r2
 8000962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000966:	bf00      	nop
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	e000e100 	.word	0xe000e100

08000978 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	4603      	mov	r3, r0
 8000980:	6039      	str	r1, [r7, #0]
 8000982:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000988:	2b00      	cmp	r3, #0
 800098a:	db0a      	blt.n	80009a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	b2da      	uxtb	r2, r3
 8000990:	490c      	ldr	r1, [pc, #48]	; (80009c4 <__NVIC_SetPriority+0x4c>)
 8000992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000996:	0112      	lsls	r2, r2, #4
 8000998:	b2d2      	uxtb	r2, r2
 800099a:	440b      	add	r3, r1
 800099c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009a0:	e00a      	b.n	80009b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	b2da      	uxtb	r2, r3
 80009a6:	4908      	ldr	r1, [pc, #32]	; (80009c8 <__NVIC_SetPriority+0x50>)
 80009a8:	79fb      	ldrb	r3, [r7, #7]
 80009aa:	f003 030f 	and.w	r3, r3, #15
 80009ae:	3b04      	subs	r3, #4
 80009b0:	0112      	lsls	r2, r2, #4
 80009b2:	b2d2      	uxtb	r2, r2
 80009b4:	440b      	add	r3, r1
 80009b6:	761a      	strb	r2, [r3, #24]
}
 80009b8:	bf00      	nop
 80009ba:	370c      	adds	r7, #12
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr
 80009c4:	e000e100 	.word	0xe000e100
 80009c8:	e000ed00 	.word	0xe000ed00

080009cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b089      	sub	sp, #36	; 0x24
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	60f8      	str	r0, [r7, #12]
 80009d4:	60b9      	str	r1, [r7, #8]
 80009d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	f003 0307 	and.w	r3, r3, #7
 80009de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009e0:	69fb      	ldr	r3, [r7, #28]
 80009e2:	f1c3 0307 	rsb	r3, r3, #7
 80009e6:	2b04      	cmp	r3, #4
 80009e8:	bf28      	it	cs
 80009ea:	2304      	movcs	r3, #4
 80009ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ee:	69fb      	ldr	r3, [r7, #28]
 80009f0:	3304      	adds	r3, #4
 80009f2:	2b06      	cmp	r3, #6
 80009f4:	d902      	bls.n	80009fc <NVIC_EncodePriority+0x30>
 80009f6:	69fb      	ldr	r3, [r7, #28]
 80009f8:	3b03      	subs	r3, #3
 80009fa:	e000      	b.n	80009fe <NVIC_EncodePriority+0x32>
 80009fc:	2300      	movs	r3, #0
 80009fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a00:	f04f 32ff 	mov.w	r2, #4294967295
 8000a04:	69bb      	ldr	r3, [r7, #24]
 8000a06:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0a:	43da      	mvns	r2, r3
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	401a      	ands	r2, r3
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a14:	f04f 31ff 	mov.w	r1, #4294967295
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a1e:	43d9      	mvns	r1, r3
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a24:	4313      	orrs	r3, r2
         );
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3724      	adds	r7, #36	; 0x24
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
	...

08000a34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	3b01      	subs	r3, #1
 8000a40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a44:	d301      	bcc.n	8000a4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a46:	2301      	movs	r3, #1
 8000a48:	e00f      	b.n	8000a6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a4a:	4a0a      	ldr	r2, [pc, #40]	; (8000a74 <SysTick_Config+0x40>)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	3b01      	subs	r3, #1
 8000a50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a52:	210f      	movs	r1, #15
 8000a54:	f04f 30ff 	mov.w	r0, #4294967295
 8000a58:	f7ff ff8e 	bl	8000978 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a5c:	4b05      	ldr	r3, [pc, #20]	; (8000a74 <SysTick_Config+0x40>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a62:	4b04      	ldr	r3, [pc, #16]	; (8000a74 <SysTick_Config+0x40>)
 8000a64:	2207      	movs	r2, #7
 8000a66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a68:	2300      	movs	r3, #0
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	e000e010 	.word	0xe000e010

08000a78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f7ff ff29 	bl	80008d8 <__NVIC_SetPriorityGrouping>
}
 8000a86:	bf00      	nop
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b086      	sub	sp, #24
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	4603      	mov	r3, r0
 8000a96:	60b9      	str	r1, [r7, #8]
 8000a98:	607a      	str	r2, [r7, #4]
 8000a9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000aa0:	f7ff ff3e 	bl	8000920 <__NVIC_GetPriorityGrouping>
 8000aa4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aa6:	687a      	ldr	r2, [r7, #4]
 8000aa8:	68b9      	ldr	r1, [r7, #8]
 8000aaa:	6978      	ldr	r0, [r7, #20]
 8000aac:	f7ff ff8e 	bl	80009cc <NVIC_EncodePriority>
 8000ab0:	4602      	mov	r2, r0
 8000ab2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ab6:	4611      	mov	r1, r2
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff ff5d 	bl	8000978 <__NVIC_SetPriority>
}
 8000abe:	bf00      	nop
 8000ac0:	3718      	adds	r7, #24
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b082      	sub	sp, #8
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	4603      	mov	r3, r0
 8000ace:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff ff31 	bl	800093c <__NVIC_EnableIRQ>
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	b082      	sub	sp, #8
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aea:	6878      	ldr	r0, [r7, #4]
 8000aec:	f7ff ffa2 	bl	8000a34 <SysTick_Config>
 8000af0:	4603      	mov	r3, r0
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
	...

08000afc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b087      	sub	sp, #28
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b06:	2300      	movs	r3, #0
 8000b08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b0a:	e154      	b.n	8000db6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	2101      	movs	r1, #1
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	fa01 f303 	lsl.w	r3, r1, r3
 8000b18:	4013      	ands	r3, r2
 8000b1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	f000 8146 	beq.w	8000db0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d00b      	beq.n	8000b44 <HAL_GPIO_Init+0x48>
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	2b02      	cmp	r3, #2
 8000b32:	d007      	beq.n	8000b44 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b38:	2b11      	cmp	r3, #17
 8000b3a:	d003      	beq.n	8000b44 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	2b12      	cmp	r3, #18
 8000b42:	d130      	bne.n	8000ba6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	689b      	ldr	r3, [r3, #8]
 8000b48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	005b      	lsls	r3, r3, #1
 8000b4e:	2203      	movs	r2, #3
 8000b50:	fa02 f303 	lsl.w	r3, r2, r3
 8000b54:	43db      	mvns	r3, r3
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	4013      	ands	r3, r2
 8000b5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	68da      	ldr	r2, [r3, #12]
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	fa02 f303 	lsl.w	r3, r2, r3
 8000b68:	693a      	ldr	r2, [r7, #16]
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	693a      	ldr	r2, [r7, #16]
 8000b72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b82:	43db      	mvns	r3, r3
 8000b84:	693a      	ldr	r2, [r7, #16]
 8000b86:	4013      	ands	r3, r2
 8000b88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	091b      	lsrs	r3, r3, #4
 8000b90:	f003 0201 	and.w	r2, r3, #1
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	68db      	ldr	r3, [r3, #12]
 8000baa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	005b      	lsls	r3, r3, #1
 8000bb0:	2203      	movs	r2, #3
 8000bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb6:	43db      	mvns	r3, r3
 8000bb8:	693a      	ldr	r2, [r7, #16]
 8000bba:	4013      	ands	r3, r2
 8000bbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	689a      	ldr	r2, [r3, #8]
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	005b      	lsls	r3, r3, #1
 8000bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	2b02      	cmp	r3, #2
 8000bdc:	d003      	beq.n	8000be6 <HAL_GPIO_Init+0xea>
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	2b12      	cmp	r3, #18
 8000be4:	d123      	bne.n	8000c2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	08da      	lsrs	r2, r3, #3
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	3208      	adds	r2, #8
 8000bee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bf2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	f003 0307 	and.w	r3, r3, #7
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	220f      	movs	r2, #15
 8000bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000c02:	43db      	mvns	r3, r3
 8000c04:	693a      	ldr	r2, [r7, #16]
 8000c06:	4013      	ands	r3, r2
 8000c08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	691a      	ldr	r2, [r3, #16]
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	f003 0307 	and.w	r3, r3, #7
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	08da      	lsrs	r2, r3, #3
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	3208      	adds	r2, #8
 8000c28:	6939      	ldr	r1, [r7, #16]
 8000c2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	005b      	lsls	r3, r3, #1
 8000c38:	2203      	movs	r2, #3
 8000c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3e:	43db      	mvns	r3, r3
 8000c40:	693a      	ldr	r2, [r7, #16]
 8000c42:	4013      	ands	r3, r2
 8000c44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	f003 0203 	and.w	r2, r3, #3
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	f000 80a0 	beq.w	8000db0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c70:	4b58      	ldr	r3, [pc, #352]	; (8000dd4 <HAL_GPIO_Init+0x2d8>)
 8000c72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c74:	4a57      	ldr	r2, [pc, #348]	; (8000dd4 <HAL_GPIO_Init+0x2d8>)
 8000c76:	f043 0301 	orr.w	r3, r3, #1
 8000c7a:	6613      	str	r3, [r2, #96]	; 0x60
 8000c7c:	4b55      	ldr	r3, [pc, #340]	; (8000dd4 <HAL_GPIO_Init+0x2d8>)
 8000c7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c80:	f003 0301 	and.w	r3, r3, #1
 8000c84:	60bb      	str	r3, [r7, #8]
 8000c86:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c88:	4a53      	ldr	r2, [pc, #332]	; (8000dd8 <HAL_GPIO_Init+0x2dc>)
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	089b      	lsrs	r3, r3, #2
 8000c8e:	3302      	adds	r3, #2
 8000c90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c94:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	f003 0303 	and.w	r3, r3, #3
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	220f      	movs	r2, #15
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	43db      	mvns	r3, r3
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	4013      	ands	r3, r2
 8000caa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000cb2:	d019      	beq.n	8000ce8 <HAL_GPIO_Init+0x1ec>
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	4a49      	ldr	r2, [pc, #292]	; (8000ddc <HAL_GPIO_Init+0x2e0>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d013      	beq.n	8000ce4 <HAL_GPIO_Init+0x1e8>
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	4a48      	ldr	r2, [pc, #288]	; (8000de0 <HAL_GPIO_Init+0x2e4>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d00d      	beq.n	8000ce0 <HAL_GPIO_Init+0x1e4>
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	4a47      	ldr	r2, [pc, #284]	; (8000de4 <HAL_GPIO_Init+0x2e8>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d007      	beq.n	8000cdc <HAL_GPIO_Init+0x1e0>
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	4a46      	ldr	r2, [pc, #280]	; (8000de8 <HAL_GPIO_Init+0x2ec>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d101      	bne.n	8000cd8 <HAL_GPIO_Init+0x1dc>
 8000cd4:	2304      	movs	r3, #4
 8000cd6:	e008      	b.n	8000cea <HAL_GPIO_Init+0x1ee>
 8000cd8:	2307      	movs	r3, #7
 8000cda:	e006      	b.n	8000cea <HAL_GPIO_Init+0x1ee>
 8000cdc:	2303      	movs	r3, #3
 8000cde:	e004      	b.n	8000cea <HAL_GPIO_Init+0x1ee>
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	e002      	b.n	8000cea <HAL_GPIO_Init+0x1ee>
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	e000      	b.n	8000cea <HAL_GPIO_Init+0x1ee>
 8000ce8:	2300      	movs	r3, #0
 8000cea:	697a      	ldr	r2, [r7, #20]
 8000cec:	f002 0203 	and.w	r2, r2, #3
 8000cf0:	0092      	lsls	r2, r2, #2
 8000cf2:	4093      	lsls	r3, r2
 8000cf4:	693a      	ldr	r2, [r7, #16]
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000cfa:	4937      	ldr	r1, [pc, #220]	; (8000dd8 <HAL_GPIO_Init+0x2dc>)
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	089b      	lsrs	r3, r3, #2
 8000d00:	3302      	adds	r3, #2
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000d08:	4b38      	ldr	r3, [pc, #224]	; (8000dec <HAL_GPIO_Init+0x2f0>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	43db      	mvns	r3, r3
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	4013      	ands	r3, r2
 8000d16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d003      	beq.n	8000d2c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000d24:	693a      	ldr	r2, [r7, #16]
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000d2c:	4a2f      	ldr	r2, [pc, #188]	; (8000dec <HAL_GPIO_Init+0x2f0>)
 8000d2e:	693b      	ldr	r3, [r7, #16]
 8000d30:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000d32:	4b2e      	ldr	r3, [pc, #184]	; (8000dec <HAL_GPIO_Init+0x2f0>)
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	43db      	mvns	r3, r3
 8000d3c:	693a      	ldr	r2, [r7, #16]
 8000d3e:	4013      	ands	r3, r2
 8000d40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d003      	beq.n	8000d56 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	4313      	orrs	r3, r2
 8000d54:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000d56:	4a25      	ldr	r2, [pc, #148]	; (8000dec <HAL_GPIO_Init+0x2f0>)
 8000d58:	693b      	ldr	r3, [r7, #16]
 8000d5a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d5c:	4b23      	ldr	r3, [pc, #140]	; (8000dec <HAL_GPIO_Init+0x2f0>)
 8000d5e:	689b      	ldr	r3, [r3, #8]
 8000d60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	43db      	mvns	r3, r3
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	4013      	ands	r3, r2
 8000d6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d003      	beq.n	8000d80 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000d78:	693a      	ldr	r2, [r7, #16]
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000d80:	4a1a      	ldr	r2, [pc, #104]	; (8000dec <HAL_GPIO_Init+0x2f0>)
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000d86:	4b19      	ldr	r3, [pc, #100]	; (8000dec <HAL_GPIO_Init+0x2f0>)
 8000d88:	68db      	ldr	r3, [r3, #12]
 8000d8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	43db      	mvns	r3, r3
 8000d90:	693a      	ldr	r2, [r7, #16]
 8000d92:	4013      	ands	r3, r2
 8000d94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d003      	beq.n	8000daa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000daa:	4a10      	ldr	r2, [pc, #64]	; (8000dec <HAL_GPIO_Init+0x2f0>)
 8000dac:	693b      	ldr	r3, [r7, #16]
 8000dae:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	3301      	adds	r3, #1
 8000db4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	fa22 f303 	lsr.w	r3, r2, r3
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	f47f aea3 	bne.w	8000b0c <HAL_GPIO_Init+0x10>
  }
}
 8000dc6:	bf00      	nop
 8000dc8:	bf00      	nop
 8000dca:	371c      	adds	r7, #28
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	40021000 	.word	0x40021000
 8000dd8:	40010000 	.word	0x40010000
 8000ddc:	48000400 	.word	0x48000400
 8000de0:	48000800 	.word	0x48000800
 8000de4:	48000c00 	.word	0x48000c00
 8000de8:	48001000 	.word	0x48001000
 8000dec:	40010400 	.word	0x40010400

08000df0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	460b      	mov	r3, r1
 8000dfa:	807b      	strh	r3, [r7, #2]
 8000dfc:	4613      	mov	r3, r2
 8000dfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e00:	787b      	ldrb	r3, [r7, #1]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d003      	beq.n	8000e0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e06:	887a      	ldrh	r2, [r7, #2]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e0c:	e002      	b.n	8000e14 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e0e:	887a      	ldrh	r2, [r7, #2]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e14:	bf00      	nop
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000e2a:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e2c:	695a      	ldr	r2, [r3, #20]
 8000e2e:	88fb      	ldrh	r3, [r7, #6]
 8000e30:	4013      	ands	r3, r2
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d006      	beq.n	8000e44 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000e36:	4a05      	ldr	r2, [pc, #20]	; (8000e4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e38:	88fb      	ldrh	r3, [r7, #6]
 8000e3a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000e3c:	88fb      	ldrh	r3, [r7, #6]
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff fa6b 	bl	800031a <HAL_GPIO_EXTI_Callback>
  }
}
 8000e44:	bf00      	nop
 8000e46:	3708      	adds	r7, #8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40010400 	.word	0x40010400

08000e50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d101      	bne.n	8000e62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e081      	b.n	8000f66 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d106      	bne.n	8000e7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2200      	movs	r2, #0
 8000e72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f7ff faa4 	bl	80003c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2224      	movs	r2, #36	; 0x24
 8000e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f022 0201 	bic.w	r2, r2, #1
 8000e92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	685a      	ldr	r2, [r3, #4]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000ea0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	689a      	ldr	r2, [r3, #8]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000eb0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	68db      	ldr	r3, [r3, #12]
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d107      	bne.n	8000eca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	689a      	ldr	r2, [r3, #8]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	e006      	b.n	8000ed8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	689a      	ldr	r2, [r3, #8]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000ed6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	2b02      	cmp	r3, #2
 8000ede:	d104      	bne.n	8000eea <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ee8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	687a      	ldr	r2, [r7, #4]
 8000ef2:	6812      	ldr	r2, [r2, #0]
 8000ef4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ef8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000efc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	68da      	ldr	r2, [r3, #12]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f0c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	691a      	ldr	r2, [r3, #16]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	695b      	ldr	r3, [r3, #20]
 8000f16:	ea42 0103 	orr.w	r1, r2, r3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	699b      	ldr	r3, [r3, #24]
 8000f1e:	021a      	lsls	r2, r3, #8
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	430a      	orrs	r2, r1
 8000f26:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	69d9      	ldr	r1, [r3, #28]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6a1a      	ldr	r2, [r3, #32]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	430a      	orrs	r2, r1
 8000f36:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f042 0201 	orr.w	r2, r2, #1
 8000f46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2220      	movs	r2, #32
 8000f52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2200      	movs	r2, #0
 8000f5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
	...

08000f70 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b088      	sub	sp, #32
 8000f74:	af02      	add	r7, sp, #8
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	607a      	str	r2, [r7, #4]
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	817b      	strh	r3, [r7, #10]
 8000f80:	4613      	mov	r3, r2
 8000f82:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	2b20      	cmp	r3, #32
 8000f8e:	f040 80da 	bne.w	8001146 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d101      	bne.n	8000fa0 <HAL_I2C_Master_Transmit+0x30>
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	e0d3      	b.n	8001148 <HAL_I2C_Master_Transmit+0x1d8>
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000fa8:	f7ff fc66 	bl	8000878 <HAL_GetTick>
 8000fac:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	2319      	movs	r3, #25
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fba:	68f8      	ldr	r0, [r7, #12]
 8000fbc:	f000 fcbc 	bl	8001938 <I2C_WaitOnFlagUntilTimeout>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e0be      	b.n	8001148 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	2221      	movs	r2, #33	; 0x21
 8000fce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	2210      	movs	r2, #16
 8000fd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	893a      	ldrh	r2, [r7, #8]
 8000fea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	2bff      	cmp	r3, #255	; 0xff
 8000ffa:	d90e      	bls.n	800101a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	22ff      	movs	r2, #255	; 0xff
 8001000:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001006:	b2da      	uxtb	r2, r3
 8001008:	8979      	ldrh	r1, [r7, #10]
 800100a:	4b51      	ldr	r3, [pc, #324]	; (8001150 <HAL_I2C_Master_Transmit+0x1e0>)
 800100c:	9300      	str	r3, [sp, #0]
 800100e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001012:	68f8      	ldr	r0, [r7, #12]
 8001014:	f000 fe1e 	bl	8001c54 <I2C_TransferConfig>
 8001018:	e06c      	b.n	80010f4 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800101e:	b29a      	uxth	r2, r3
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001028:	b2da      	uxtb	r2, r3
 800102a:	8979      	ldrh	r1, [r7, #10]
 800102c:	4b48      	ldr	r3, [pc, #288]	; (8001150 <HAL_I2C_Master_Transmit+0x1e0>)
 800102e:	9300      	str	r3, [sp, #0]
 8001030:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001034:	68f8      	ldr	r0, [r7, #12]
 8001036:	f000 fe0d 	bl	8001c54 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800103a:	e05b      	b.n	80010f4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800103c:	697a      	ldr	r2, [r7, #20]
 800103e:	6a39      	ldr	r1, [r7, #32]
 8001040:	68f8      	ldr	r0, [r7, #12]
 8001042:	f000 fcb9 	bl	80019b8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800104c:	2301      	movs	r3, #1
 800104e:	e07b      	b.n	8001148 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001054:	781a      	ldrb	r2, [r3, #0]
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001060:	1c5a      	adds	r2, r3, #1
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800106a:	b29b      	uxth	r3, r3
 800106c:	3b01      	subs	r3, #1
 800106e:	b29a      	uxth	r2, r3
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001078:	3b01      	subs	r3, #1
 800107a:	b29a      	uxth	r2, r3
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001084:	b29b      	uxth	r3, r3
 8001086:	2b00      	cmp	r3, #0
 8001088:	d034      	beq.n	80010f4 <HAL_I2C_Master_Transmit+0x184>
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800108e:	2b00      	cmp	r3, #0
 8001090:	d130      	bne.n	80010f4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	9300      	str	r3, [sp, #0]
 8001096:	6a3b      	ldr	r3, [r7, #32]
 8001098:	2200      	movs	r2, #0
 800109a:	2180      	movs	r1, #128	; 0x80
 800109c:	68f8      	ldr	r0, [r7, #12]
 800109e:	f000 fc4b 	bl	8001938 <I2C_WaitOnFlagUntilTimeout>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	e04d      	b.n	8001148 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	2bff      	cmp	r3, #255	; 0xff
 80010b4:	d90e      	bls.n	80010d4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	22ff      	movs	r2, #255	; 0xff
 80010ba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	8979      	ldrh	r1, [r7, #10]
 80010c4:	2300      	movs	r3, #0
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010cc:	68f8      	ldr	r0, [r7, #12]
 80010ce:	f000 fdc1 	bl	8001c54 <I2C_TransferConfig>
 80010d2:	e00f      	b.n	80010f4 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010d8:	b29a      	uxth	r2, r3
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	8979      	ldrh	r1, [r7, #10]
 80010e6:	2300      	movs	r3, #0
 80010e8:	9300      	str	r3, [sp, #0]
 80010ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010ee:	68f8      	ldr	r0, [r7, #12]
 80010f0:	f000 fdb0 	bl	8001c54 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d19e      	bne.n	800103c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80010fe:	697a      	ldr	r2, [r7, #20]
 8001100:	6a39      	ldr	r1, [r7, #32]
 8001102:	68f8      	ldr	r0, [r7, #12]
 8001104:	f000 fc98 	bl	8001a38 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e01a      	b.n	8001148 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2220      	movs	r2, #32
 8001118:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	6859      	ldr	r1, [r3, #4]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	4b0b      	ldr	r3, [pc, #44]	; (8001154 <HAL_I2C_Master_Transmit+0x1e4>)
 8001126:	400b      	ands	r3, r1
 8001128:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	2220      	movs	r2, #32
 800112e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	2200      	movs	r2, #0
 8001136:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	2200      	movs	r2, #0
 800113e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001142:	2300      	movs	r3, #0
 8001144:	e000      	b.n	8001148 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001146:	2302      	movs	r3, #2
  }
}
 8001148:	4618      	mov	r0, r3
 800114a:	3718      	adds	r7, #24
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	80002000 	.word	0x80002000
 8001154:	fe00e800 	.word	0xfe00e800

08001158 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b088      	sub	sp, #32
 800115c:	af02      	add	r7, sp, #8
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	607a      	str	r2, [r7, #4]
 8001162:	461a      	mov	r2, r3
 8001164:	460b      	mov	r3, r1
 8001166:	817b      	strh	r3, [r7, #10]
 8001168:	4613      	mov	r3, r2
 800116a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001172:	b2db      	uxtb	r3, r3
 8001174:	2b20      	cmp	r3, #32
 8001176:	f040 80db 	bne.w	8001330 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001180:	2b01      	cmp	r3, #1
 8001182:	d101      	bne.n	8001188 <HAL_I2C_Master_Receive+0x30>
 8001184:	2302      	movs	r3, #2
 8001186:	e0d4      	b.n	8001332 <HAL_I2C_Master_Receive+0x1da>
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	2201      	movs	r2, #1
 800118c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001190:	f7ff fb72 	bl	8000878 <HAL_GetTick>
 8001194:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	2319      	movs	r3, #25
 800119c:	2201      	movs	r2, #1
 800119e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011a2:	68f8      	ldr	r0, [r7, #12]
 80011a4:	f000 fbc8 	bl	8001938 <I2C_WaitOnFlagUntilTimeout>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e0bf      	b.n	8001332 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	2222      	movs	r2, #34	; 0x22
 80011b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	2210      	movs	r2, #16
 80011be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	2200      	movs	r2, #0
 80011c6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	893a      	ldrh	r2, [r7, #8]
 80011d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	2200      	movs	r2, #0
 80011d8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011de:	b29b      	uxth	r3, r3
 80011e0:	2bff      	cmp	r3, #255	; 0xff
 80011e2:	d90e      	bls.n	8001202 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	22ff      	movs	r2, #255	; 0xff
 80011e8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011ee:	b2da      	uxtb	r2, r3
 80011f0:	8979      	ldrh	r1, [r7, #10]
 80011f2:	4b52      	ldr	r3, [pc, #328]	; (800133c <HAL_I2C_Master_Receive+0x1e4>)
 80011f4:	9300      	str	r3, [sp, #0]
 80011f6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011fa:	68f8      	ldr	r0, [r7, #12]
 80011fc:	f000 fd2a 	bl	8001c54 <I2C_TransferConfig>
 8001200:	e06d      	b.n	80012de <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001206:	b29a      	uxth	r2, r3
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001210:	b2da      	uxtb	r2, r3
 8001212:	8979      	ldrh	r1, [r7, #10]
 8001214:	4b49      	ldr	r3, [pc, #292]	; (800133c <HAL_I2C_Master_Receive+0x1e4>)
 8001216:	9300      	str	r3, [sp, #0]
 8001218:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800121c:	68f8      	ldr	r0, [r7, #12]
 800121e:	f000 fd19 	bl	8001c54 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001222:	e05c      	b.n	80012de <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001224:	697a      	ldr	r2, [r7, #20]
 8001226:	6a39      	ldr	r1, [r7, #32]
 8001228:	68f8      	ldr	r0, [r7, #12]
 800122a:	f000 fc41 	bl	8001ab0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	e07c      	b.n	8001332 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001242:	b2d2      	uxtb	r2, r2
 8001244:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800124a:	1c5a      	adds	r2, r3, #1
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001254:	3b01      	subs	r3, #1
 8001256:	b29a      	uxth	r2, r3
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001260:	b29b      	uxth	r3, r3
 8001262:	3b01      	subs	r3, #1
 8001264:	b29a      	uxth	r2, r3
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800126e:	b29b      	uxth	r3, r3
 8001270:	2b00      	cmp	r3, #0
 8001272:	d034      	beq.n	80012de <HAL_I2C_Master_Receive+0x186>
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001278:	2b00      	cmp	r3, #0
 800127a:	d130      	bne.n	80012de <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	9300      	str	r3, [sp, #0]
 8001280:	6a3b      	ldr	r3, [r7, #32]
 8001282:	2200      	movs	r2, #0
 8001284:	2180      	movs	r1, #128	; 0x80
 8001286:	68f8      	ldr	r0, [r7, #12]
 8001288:	f000 fb56 	bl	8001938 <I2C_WaitOnFlagUntilTimeout>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e04d      	b.n	8001332 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800129a:	b29b      	uxth	r3, r3
 800129c:	2bff      	cmp	r3, #255	; 0xff
 800129e:	d90e      	bls.n	80012be <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	22ff      	movs	r2, #255	; 0xff
 80012a4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012aa:	b2da      	uxtb	r2, r3
 80012ac:	8979      	ldrh	r1, [r7, #10]
 80012ae:	2300      	movs	r3, #0
 80012b0:	9300      	str	r3, [sp, #0]
 80012b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012b6:	68f8      	ldr	r0, [r7, #12]
 80012b8:	f000 fccc 	bl	8001c54 <I2C_TransferConfig>
 80012bc:	e00f      	b.n	80012de <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012c2:	b29a      	uxth	r2, r3
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012cc:	b2da      	uxtb	r2, r3
 80012ce:	8979      	ldrh	r1, [r7, #10]
 80012d0:	2300      	movs	r3, #0
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012d8:	68f8      	ldr	r0, [r7, #12]
 80012da:	f000 fcbb 	bl	8001c54 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d19d      	bne.n	8001224 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012e8:	697a      	ldr	r2, [r7, #20]
 80012ea:	6a39      	ldr	r1, [r7, #32]
 80012ec:	68f8      	ldr	r0, [r7, #12]
 80012ee:	f000 fba3 	bl	8001a38 <I2C_WaitOnSTOPFlagUntilTimeout>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e01a      	b.n	8001332 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2220      	movs	r2, #32
 8001302:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	6859      	ldr	r1, [r3, #4]
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <HAL_I2C_Master_Receive+0x1e8>)
 8001310:	400b      	ands	r3, r1
 8001312:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	2220      	movs	r2, #32
 8001318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	2200      	movs	r2, #0
 8001320:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	2200      	movs	r2, #0
 8001328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800132c:	2300      	movs	r3, #0
 800132e:	e000      	b.n	8001332 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001330:	2302      	movs	r3, #2
  }
}
 8001332:	4618      	mov	r0, r3
 8001334:	3718      	adds	r7, #24
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	80002400 	.word	0x80002400
 8001340:	fe00e800 	.word	0xfe00e800

08001344 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b088      	sub	sp, #32
 8001348:	af02      	add	r7, sp, #8
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	4608      	mov	r0, r1
 800134e:	4611      	mov	r1, r2
 8001350:	461a      	mov	r2, r3
 8001352:	4603      	mov	r3, r0
 8001354:	817b      	strh	r3, [r7, #10]
 8001356:	460b      	mov	r3, r1
 8001358:	813b      	strh	r3, [r7, #8]
 800135a:	4613      	mov	r3, r2
 800135c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2b20      	cmp	r3, #32
 8001368:	f040 80f9 	bne.w	800155e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800136c:	6a3b      	ldr	r3, [r7, #32]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d002      	beq.n	8001378 <HAL_I2C_Mem_Write+0x34>
 8001372:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001374:	2b00      	cmp	r3, #0
 8001376:	d105      	bne.n	8001384 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800137e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e0ed      	b.n	8001560 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800138a:	2b01      	cmp	r3, #1
 800138c:	d101      	bne.n	8001392 <HAL_I2C_Mem_Write+0x4e>
 800138e:	2302      	movs	r3, #2
 8001390:	e0e6      	b.n	8001560 <HAL_I2C_Mem_Write+0x21c>
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	2201      	movs	r2, #1
 8001396:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800139a:	f7ff fa6d 	bl	8000878 <HAL_GetTick>
 800139e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	9300      	str	r3, [sp, #0]
 80013a4:	2319      	movs	r3, #25
 80013a6:	2201      	movs	r2, #1
 80013a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013ac:	68f8      	ldr	r0, [r7, #12]
 80013ae:	f000 fac3 	bl	8001938 <I2C_WaitOnFlagUntilTimeout>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e0d1      	b.n	8001560 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	2221      	movs	r2, #33	; 0x21
 80013c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	2240      	movs	r2, #64	; 0x40
 80013c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	2200      	movs	r2, #0
 80013d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	6a3a      	ldr	r2, [r7, #32]
 80013d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80013dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	2200      	movs	r2, #0
 80013e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80013e4:	88f8      	ldrh	r0, [r7, #6]
 80013e6:	893a      	ldrh	r2, [r7, #8]
 80013e8:	8979      	ldrh	r1, [r7, #10]
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	9301      	str	r3, [sp, #4]
 80013ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013f0:	9300      	str	r3, [sp, #0]
 80013f2:	4603      	mov	r3, r0
 80013f4:	68f8      	ldr	r0, [r7, #12]
 80013f6:	f000 f9d3 	bl	80017a0 <I2C_RequestMemoryWrite>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d005      	beq.n	800140c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	2200      	movs	r2, #0
 8001404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e0a9      	b.n	8001560 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001410:	b29b      	uxth	r3, r3
 8001412:	2bff      	cmp	r3, #255	; 0xff
 8001414:	d90e      	bls.n	8001434 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	22ff      	movs	r2, #255	; 0xff
 800141a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001420:	b2da      	uxtb	r2, r3
 8001422:	8979      	ldrh	r1, [r7, #10]
 8001424:	2300      	movs	r3, #0
 8001426:	9300      	str	r3, [sp, #0]
 8001428:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800142c:	68f8      	ldr	r0, [r7, #12]
 800142e:	f000 fc11 	bl	8001c54 <I2C_TransferConfig>
 8001432:	e00f      	b.n	8001454 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001438:	b29a      	uxth	r2, r3
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001442:	b2da      	uxtb	r2, r3
 8001444:	8979      	ldrh	r1, [r7, #10]
 8001446:	2300      	movs	r3, #0
 8001448:	9300      	str	r3, [sp, #0]
 800144a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800144e:	68f8      	ldr	r0, [r7, #12]
 8001450:	f000 fc00 	bl	8001c54 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001454:	697a      	ldr	r2, [r7, #20]
 8001456:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001458:	68f8      	ldr	r0, [r7, #12]
 800145a:	f000 faad 	bl	80019b8 <I2C_WaitOnTXISFlagUntilTimeout>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e07b      	b.n	8001560 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800146c:	781a      	ldrb	r2, [r3, #0]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001478:	1c5a      	adds	r2, r3, #1
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001482:	b29b      	uxth	r3, r3
 8001484:	3b01      	subs	r3, #1
 8001486:	b29a      	uxth	r2, r3
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001490:	3b01      	subs	r3, #1
 8001492:	b29a      	uxth	r2, r3
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800149c:	b29b      	uxth	r3, r3
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d034      	beq.n	800150c <HAL_I2C_Mem_Write+0x1c8>
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d130      	bne.n	800150c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	9300      	str	r3, [sp, #0]
 80014ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014b0:	2200      	movs	r2, #0
 80014b2:	2180      	movs	r1, #128	; 0x80
 80014b4:	68f8      	ldr	r0, [r7, #12]
 80014b6:	f000 fa3f 	bl	8001938 <I2C_WaitOnFlagUntilTimeout>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e04d      	b.n	8001560 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	2bff      	cmp	r3, #255	; 0xff
 80014cc:	d90e      	bls.n	80014ec <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	22ff      	movs	r2, #255	; 0xff
 80014d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014d8:	b2da      	uxtb	r2, r3
 80014da:	8979      	ldrh	r1, [r7, #10]
 80014dc:	2300      	movs	r3, #0
 80014de:	9300      	str	r3, [sp, #0]
 80014e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014e4:	68f8      	ldr	r0, [r7, #12]
 80014e6:	f000 fbb5 	bl	8001c54 <I2C_TransferConfig>
 80014ea:	e00f      	b.n	800150c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014fa:	b2da      	uxtb	r2, r3
 80014fc:	8979      	ldrh	r1, [r7, #10]
 80014fe:	2300      	movs	r3, #0
 8001500:	9300      	str	r3, [sp, #0]
 8001502:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001506:	68f8      	ldr	r0, [r7, #12]
 8001508:	f000 fba4 	bl	8001c54 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001510:	b29b      	uxth	r3, r3
 8001512:	2b00      	cmp	r3, #0
 8001514:	d19e      	bne.n	8001454 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001516:	697a      	ldr	r2, [r7, #20]
 8001518:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800151a:	68f8      	ldr	r0, [r7, #12]
 800151c:	f000 fa8c 	bl	8001a38 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e01a      	b.n	8001560 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2220      	movs	r2, #32
 8001530:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	6859      	ldr	r1, [r3, #4]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	4b0a      	ldr	r3, [pc, #40]	; (8001568 <HAL_I2C_Mem_Write+0x224>)
 800153e:	400b      	ands	r3, r1
 8001540:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	2220      	movs	r2, #32
 8001546:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	2200      	movs	r2, #0
 800154e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2200      	movs	r2, #0
 8001556:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800155a:	2300      	movs	r3, #0
 800155c:	e000      	b.n	8001560 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800155e:	2302      	movs	r3, #2
  }
}
 8001560:	4618      	mov	r0, r3
 8001562:	3718      	adds	r7, #24
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	fe00e800 	.word	0xfe00e800

0800156c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b088      	sub	sp, #32
 8001570:	af02      	add	r7, sp, #8
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	4608      	mov	r0, r1
 8001576:	4611      	mov	r1, r2
 8001578:	461a      	mov	r2, r3
 800157a:	4603      	mov	r3, r0
 800157c:	817b      	strh	r3, [r7, #10]
 800157e:	460b      	mov	r3, r1
 8001580:	813b      	strh	r3, [r7, #8]
 8001582:	4613      	mov	r3, r2
 8001584:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800158c:	b2db      	uxtb	r3, r3
 800158e:	2b20      	cmp	r3, #32
 8001590:	f040 80fd 	bne.w	800178e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001594:	6a3b      	ldr	r3, [r7, #32]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d002      	beq.n	80015a0 <HAL_I2C_Mem_Read+0x34>
 800159a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800159c:	2b00      	cmp	r3, #0
 800159e:	d105      	bne.n	80015ac <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015a6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e0f1      	b.n	8001790 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d101      	bne.n	80015ba <HAL_I2C_Mem_Read+0x4e>
 80015b6:	2302      	movs	r3, #2
 80015b8:	e0ea      	b.n	8001790 <HAL_I2C_Mem_Read+0x224>
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2201      	movs	r2, #1
 80015be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80015c2:	f7ff f959 	bl	8000878 <HAL_GetTick>
 80015c6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	9300      	str	r3, [sp, #0]
 80015cc:	2319      	movs	r3, #25
 80015ce:	2201      	movs	r2, #1
 80015d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015d4:	68f8      	ldr	r0, [r7, #12]
 80015d6:	f000 f9af 	bl	8001938 <I2C_WaitOnFlagUntilTimeout>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e0d5      	b.n	8001790 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2222      	movs	r2, #34	; 0x22
 80015e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	2240      	movs	r2, #64	; 0x40
 80015f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2200      	movs	r2, #0
 80015f8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	6a3a      	ldr	r2, [r7, #32]
 80015fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001604:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	2200      	movs	r2, #0
 800160a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800160c:	88f8      	ldrh	r0, [r7, #6]
 800160e:	893a      	ldrh	r2, [r7, #8]
 8001610:	8979      	ldrh	r1, [r7, #10]
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	9301      	str	r3, [sp, #4]
 8001616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001618:	9300      	str	r3, [sp, #0]
 800161a:	4603      	mov	r3, r0
 800161c:	68f8      	ldr	r0, [r7, #12]
 800161e:	f000 f913 	bl	8001848 <I2C_RequestMemoryRead>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d005      	beq.n	8001634 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2200      	movs	r2, #0
 800162c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e0ad      	b.n	8001790 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001638:	b29b      	uxth	r3, r3
 800163a:	2bff      	cmp	r3, #255	; 0xff
 800163c:	d90e      	bls.n	800165c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	22ff      	movs	r2, #255	; 0xff
 8001642:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001648:	b2da      	uxtb	r2, r3
 800164a:	8979      	ldrh	r1, [r7, #10]
 800164c:	4b52      	ldr	r3, [pc, #328]	; (8001798 <HAL_I2C_Mem_Read+0x22c>)
 800164e:	9300      	str	r3, [sp, #0]
 8001650:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001654:	68f8      	ldr	r0, [r7, #12]
 8001656:	f000 fafd 	bl	8001c54 <I2C_TransferConfig>
 800165a:	e00f      	b.n	800167c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001660:	b29a      	uxth	r2, r3
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800166a:	b2da      	uxtb	r2, r3
 800166c:	8979      	ldrh	r1, [r7, #10]
 800166e:	4b4a      	ldr	r3, [pc, #296]	; (8001798 <HAL_I2C_Mem_Read+0x22c>)
 8001670:	9300      	str	r3, [sp, #0]
 8001672:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001676:	68f8      	ldr	r0, [r7, #12]
 8001678:	f000 faec 	bl	8001c54 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	9300      	str	r3, [sp, #0]
 8001680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001682:	2200      	movs	r2, #0
 8001684:	2104      	movs	r1, #4
 8001686:	68f8      	ldr	r0, [r7, #12]
 8001688:	f000 f956 	bl	8001938 <I2C_WaitOnFlagUntilTimeout>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e07c      	b.n	8001790 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a0:	b2d2      	uxtb	r2, r2
 80016a2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a8:	1c5a      	adds	r2, r3, #1
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016b2:	3b01      	subs	r3, #1
 80016b4:	b29a      	uxth	r2, r3
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016be:	b29b      	uxth	r3, r3
 80016c0:	3b01      	subs	r3, #1
 80016c2:	b29a      	uxth	r2, r3
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d034      	beq.n	800173c <HAL_I2C_Mem_Read+0x1d0>
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d130      	bne.n	800173c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016e0:	2200      	movs	r2, #0
 80016e2:	2180      	movs	r1, #128	; 0x80
 80016e4:	68f8      	ldr	r0, [r7, #12]
 80016e6:	f000 f927 	bl	8001938 <I2C_WaitOnFlagUntilTimeout>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e04d      	b.n	8001790 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	2bff      	cmp	r3, #255	; 0xff
 80016fc:	d90e      	bls.n	800171c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	22ff      	movs	r2, #255	; 0xff
 8001702:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001708:	b2da      	uxtb	r2, r3
 800170a:	8979      	ldrh	r1, [r7, #10]
 800170c:	2300      	movs	r3, #0
 800170e:	9300      	str	r3, [sp, #0]
 8001710:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001714:	68f8      	ldr	r0, [r7, #12]
 8001716:	f000 fa9d 	bl	8001c54 <I2C_TransferConfig>
 800171a:	e00f      	b.n	800173c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001720:	b29a      	uxth	r2, r3
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800172a:	b2da      	uxtb	r2, r3
 800172c:	8979      	ldrh	r1, [r7, #10]
 800172e:	2300      	movs	r3, #0
 8001730:	9300      	str	r3, [sp, #0]
 8001732:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001736:	68f8      	ldr	r0, [r7, #12]
 8001738:	f000 fa8c 	bl	8001c54 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001740:	b29b      	uxth	r3, r3
 8001742:	2b00      	cmp	r3, #0
 8001744:	d19a      	bne.n	800167c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001746:	697a      	ldr	r2, [r7, #20]
 8001748:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800174a:	68f8      	ldr	r0, [r7, #12]
 800174c:	f000 f974 	bl	8001a38 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e01a      	b.n	8001790 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2220      	movs	r2, #32
 8001760:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	6859      	ldr	r1, [r3, #4]
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	4b0b      	ldr	r3, [pc, #44]	; (800179c <HAL_I2C_Mem_Read+0x230>)
 800176e:	400b      	ands	r3, r1
 8001770:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	2220      	movs	r2, #32
 8001776:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2200      	movs	r2, #0
 800177e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	2200      	movs	r2, #0
 8001786:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800178a:	2300      	movs	r3, #0
 800178c:	e000      	b.n	8001790 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800178e:	2302      	movs	r3, #2
  }
}
 8001790:	4618      	mov	r0, r3
 8001792:	3718      	adds	r7, #24
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	80002400 	.word	0x80002400
 800179c:	fe00e800 	.word	0xfe00e800

080017a0 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af02      	add	r7, sp, #8
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	4608      	mov	r0, r1
 80017aa:	4611      	mov	r1, r2
 80017ac:	461a      	mov	r2, r3
 80017ae:	4603      	mov	r3, r0
 80017b0:	817b      	strh	r3, [r7, #10]
 80017b2:	460b      	mov	r3, r1
 80017b4:	813b      	strh	r3, [r7, #8]
 80017b6:	4613      	mov	r3, r2
 80017b8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80017ba:	88fb      	ldrh	r3, [r7, #6]
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	8979      	ldrh	r1, [r7, #10]
 80017c0:	4b20      	ldr	r3, [pc, #128]	; (8001844 <I2C_RequestMemoryWrite+0xa4>)
 80017c2:	9300      	str	r3, [sp, #0]
 80017c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017c8:	68f8      	ldr	r0, [r7, #12]
 80017ca:	f000 fa43 	bl	8001c54 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80017ce:	69fa      	ldr	r2, [r7, #28]
 80017d0:	69b9      	ldr	r1, [r7, #24]
 80017d2:	68f8      	ldr	r0, [r7, #12]
 80017d4:	f000 f8f0 	bl	80019b8 <I2C_WaitOnTXISFlagUntilTimeout>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e02c      	b.n	800183c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80017e2:	88fb      	ldrh	r3, [r7, #6]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d105      	bne.n	80017f4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80017e8:	893b      	ldrh	r3, [r7, #8]
 80017ea:	b2da      	uxtb	r2, r3
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	629a      	str	r2, [r3, #40]	; 0x28
 80017f2:	e015      	b.n	8001820 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80017f4:	893b      	ldrh	r3, [r7, #8]
 80017f6:	0a1b      	lsrs	r3, r3, #8
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	b2da      	uxtb	r2, r3
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001802:	69fa      	ldr	r2, [r7, #28]
 8001804:	69b9      	ldr	r1, [r7, #24]
 8001806:	68f8      	ldr	r0, [r7, #12]
 8001808:	f000 f8d6 	bl	80019b8 <I2C_WaitOnTXISFlagUntilTimeout>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e012      	b.n	800183c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001816:	893b      	ldrh	r3, [r7, #8]
 8001818:	b2da      	uxtb	r2, r3
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	9300      	str	r3, [sp, #0]
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	2200      	movs	r2, #0
 8001828:	2180      	movs	r1, #128	; 0x80
 800182a:	68f8      	ldr	r0, [r7, #12]
 800182c:	f000 f884 	bl	8001938 <I2C_WaitOnFlagUntilTimeout>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e000      	b.n	800183c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800183a:	2300      	movs	r3, #0
}
 800183c:	4618      	mov	r0, r3
 800183e:	3710      	adds	r7, #16
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	80002000 	.word	0x80002000

08001848 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af02      	add	r7, sp, #8
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	4608      	mov	r0, r1
 8001852:	4611      	mov	r1, r2
 8001854:	461a      	mov	r2, r3
 8001856:	4603      	mov	r3, r0
 8001858:	817b      	strh	r3, [r7, #10]
 800185a:	460b      	mov	r3, r1
 800185c:	813b      	strh	r3, [r7, #8]
 800185e:	4613      	mov	r3, r2
 8001860:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001862:	88fb      	ldrh	r3, [r7, #6]
 8001864:	b2da      	uxtb	r2, r3
 8001866:	8979      	ldrh	r1, [r7, #10]
 8001868:	4b20      	ldr	r3, [pc, #128]	; (80018ec <I2C_RequestMemoryRead+0xa4>)
 800186a:	9300      	str	r3, [sp, #0]
 800186c:	2300      	movs	r3, #0
 800186e:	68f8      	ldr	r0, [r7, #12]
 8001870:	f000 f9f0 	bl	8001c54 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001874:	69fa      	ldr	r2, [r7, #28]
 8001876:	69b9      	ldr	r1, [r7, #24]
 8001878:	68f8      	ldr	r0, [r7, #12]
 800187a:	f000 f89d 	bl	80019b8 <I2C_WaitOnTXISFlagUntilTimeout>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e02c      	b.n	80018e2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001888:	88fb      	ldrh	r3, [r7, #6]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d105      	bne.n	800189a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800188e:	893b      	ldrh	r3, [r7, #8]
 8001890:	b2da      	uxtb	r2, r3
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	629a      	str	r2, [r3, #40]	; 0x28
 8001898:	e015      	b.n	80018c6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800189a:	893b      	ldrh	r3, [r7, #8]
 800189c:	0a1b      	lsrs	r3, r3, #8
 800189e:	b29b      	uxth	r3, r3
 80018a0:	b2da      	uxtb	r2, r3
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018a8:	69fa      	ldr	r2, [r7, #28]
 80018aa:	69b9      	ldr	r1, [r7, #24]
 80018ac:	68f8      	ldr	r0, [r7, #12]
 80018ae:	f000 f883 	bl	80019b8 <I2C_WaitOnTXISFlagUntilTimeout>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e012      	b.n	80018e2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80018bc:	893b      	ldrh	r3, [r7, #8]
 80018be:	b2da      	uxtb	r2, r3
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	9300      	str	r3, [sp, #0]
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	2200      	movs	r2, #0
 80018ce:	2140      	movs	r1, #64	; 0x40
 80018d0:	68f8      	ldr	r0, [r7, #12]
 80018d2:	f000 f831 	bl	8001938 <I2C_WaitOnFlagUntilTimeout>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e000      	b.n	80018e2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	80002000 	.word	0x80002000

080018f0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	699b      	ldr	r3, [r3, #24]
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	2b02      	cmp	r3, #2
 8001904:	d103      	bne.n	800190e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2200      	movs	r2, #0
 800190c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	f003 0301 	and.w	r3, r3, #1
 8001918:	2b01      	cmp	r3, #1
 800191a:	d007      	beq.n	800192c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	699a      	ldr	r2, [r3, #24]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f042 0201 	orr.w	r2, r2, #1
 800192a:	619a      	str	r2, [r3, #24]
  }
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	603b      	str	r3, [r7, #0]
 8001944:	4613      	mov	r3, r2
 8001946:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001948:	e022      	b.n	8001990 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001950:	d01e      	beq.n	8001990 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001952:	f7fe ff91 	bl	8000878 <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	429a      	cmp	r2, r3
 8001960:	d302      	bcc.n	8001968 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d113      	bne.n	8001990 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196c:	f043 0220 	orr.w	r2, r3, #32
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2220      	movs	r2, #32
 8001978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2200      	movs	r2, #0
 8001980:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2200      	movs	r2, #0
 8001988:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e00f      	b.n	80019b0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	699a      	ldr	r2, [r3, #24]
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	4013      	ands	r3, r2
 800199a:	68ba      	ldr	r2, [r7, #8]
 800199c:	429a      	cmp	r2, r3
 800199e:	bf0c      	ite	eq
 80019a0:	2301      	moveq	r3, #1
 80019a2:	2300      	movne	r3, #0
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	461a      	mov	r2, r3
 80019a8:	79fb      	ldrb	r3, [r7, #7]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d0cd      	beq.n	800194a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80019ae:	2300      	movs	r3, #0
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3710      	adds	r7, #16
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80019c4:	e02c      	b.n	8001a20 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	68b9      	ldr	r1, [r7, #8]
 80019ca:	68f8      	ldr	r0, [r7, #12]
 80019cc:	f000 f8dc 	bl	8001b88 <I2C_IsAcknowledgeFailed>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e02a      	b.n	8001a30 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019e0:	d01e      	beq.n	8001a20 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019e2:	f7fe ff49 	bl	8000878 <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	68ba      	ldr	r2, [r7, #8]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d302      	bcc.n	80019f8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d113      	bne.n	8001a20 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fc:	f043 0220 	orr.w	r2, r3, #32
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2220      	movs	r2, #32
 8001a08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2200      	movs	r2, #0
 8001a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e007      	b.n	8001a30 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	699b      	ldr	r3, [r3, #24]
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d1cb      	bne.n	80019c6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001a2e:	2300      	movs	r3, #0
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3710      	adds	r7, #16
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a44:	e028      	b.n	8001a98 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	68b9      	ldr	r1, [r7, #8]
 8001a4a:	68f8      	ldr	r0, [r7, #12]
 8001a4c:	f000 f89c 	bl	8001b88 <I2C_IsAcknowledgeFailed>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e026      	b.n	8001aa8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a5a:	f7fe ff0d 	bl	8000878 <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	68ba      	ldr	r2, [r7, #8]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d302      	bcc.n	8001a70 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d113      	bne.n	8001a98 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a74:	f043 0220 	orr.w	r2, r3, #32
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2220      	movs	r2, #32
 8001a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2200      	movs	r2, #0
 8001a88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e007      	b.n	8001aa8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	699b      	ldr	r3, [r3, #24]
 8001a9e:	f003 0320 	and.w	r3, r3, #32
 8001aa2:	2b20      	cmp	r3, #32
 8001aa4:	d1cf      	bne.n	8001a46 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001aa6:	2300      	movs	r3, #0
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3710      	adds	r7, #16
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001abc:	e055      	b.n	8001b6a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	68b9      	ldr	r1, [r7, #8]
 8001ac2:	68f8      	ldr	r0, [r7, #12]
 8001ac4:	f000 f860 	bl	8001b88 <I2C_IsAcknowledgeFailed>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e053      	b.n	8001b7a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	f003 0320 	and.w	r3, r3, #32
 8001adc:	2b20      	cmp	r3, #32
 8001ade:	d129      	bne.n	8001b34 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	699b      	ldr	r3, [r3, #24]
 8001ae6:	f003 0304 	and.w	r3, r3, #4
 8001aea:	2b04      	cmp	r3, #4
 8001aec:	d105      	bne.n	8001afa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001af6:	2300      	movs	r3, #0
 8001af8:	e03f      	b.n	8001b7a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2220      	movs	r2, #32
 8001b00:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	6859      	ldr	r1, [r3, #4]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	4b1d      	ldr	r3, [pc, #116]	; (8001b84 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8001b0e:	400b      	ands	r3, r1
 8001b10:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2200      	movs	r2, #0
 8001b16:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2220      	movs	r2, #32
 8001b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2200      	movs	r2, #0
 8001b24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e022      	b.n	8001b7a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b34:	f7fe fea0 	bl	8000878 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	68ba      	ldr	r2, [r7, #8]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d302      	bcc.n	8001b4a <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d10f      	bne.n	8001b6a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4e:	f043 0220 	orr.w	r2, r3, #32
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2220      	movs	r2, #32
 8001b5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e007      	b.n	8001b7a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	f003 0304 	and.w	r3, r3, #4
 8001b74:	2b04      	cmp	r3, #4
 8001b76:	d1a2      	bne.n	8001abe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	fe00e800 	.word	0xfe00e800

08001b88 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	f003 0310 	and.w	r3, r3, #16
 8001b9e:	2b10      	cmp	r3, #16
 8001ba0:	d151      	bne.n	8001c46 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ba2:	e022      	b.n	8001bea <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001baa:	d01e      	beq.n	8001bea <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bac:	f7fe fe64 	bl	8000878 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	68ba      	ldr	r2, [r7, #8]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d302      	bcc.n	8001bc2 <I2C_IsAcknowledgeFailed+0x3a>
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d113      	bne.n	8001bea <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc6:	f043 0220 	orr.w	r2, r3, #32
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2220      	movs	r2, #32
 8001bd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2200      	movs	r2, #0
 8001be2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e02e      	b.n	8001c48 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	f003 0320 	and.w	r3, r3, #32
 8001bf4:	2b20      	cmp	r3, #32
 8001bf6:	d1d5      	bne.n	8001ba4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2210      	movs	r2, #16
 8001bfe:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2220      	movs	r2, #32
 8001c06:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001c08:	68f8      	ldr	r0, [r7, #12]
 8001c0a:	f7ff fe71 	bl	80018f0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	6859      	ldr	r1, [r3, #4]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	4b0d      	ldr	r3, [pc, #52]	; (8001c50 <I2C_IsAcknowledgeFailed+0xc8>)
 8001c1a:	400b      	ands	r3, r1
 8001c1c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c22:	f043 0204 	orr.w	r2, r3, #4
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2220      	movs	r2, #32
 8001c2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e000      	b.n	8001c48 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001c46:	2300      	movs	r3, #0
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3710      	adds	r7, #16
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	fe00e800 	.word	0xfe00e800

08001c54 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	607b      	str	r3, [r7, #4]
 8001c5e:	460b      	mov	r3, r1
 8001c60:	817b      	strh	r3, [r7, #10]
 8001c62:	4613      	mov	r3, r2
 8001c64:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	685a      	ldr	r2, [r3, #4]
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	0d5b      	lsrs	r3, r3, #21
 8001c70:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001c74:	4b0d      	ldr	r3, [pc, #52]	; (8001cac <I2C_TransferConfig+0x58>)
 8001c76:	430b      	orrs	r3, r1
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	ea02 0103 	and.w	r1, r2, r3
 8001c7e:	897b      	ldrh	r3, [r7, #10]
 8001c80:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c84:	7a7b      	ldrb	r3, [r7, #9]
 8001c86:	041b      	lsls	r3, r3, #16
 8001c88:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001c8c:	431a      	orrs	r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	431a      	orrs	r2, r3
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	431a      	orrs	r2, r3
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001c9e:	bf00      	nop
 8001ca0:	3714      	adds	r7, #20
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	03ff63ff 	.word	0x03ff63ff

08001cb0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b20      	cmp	r3, #32
 8001cc4:	d138      	bne.n	8001d38 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d101      	bne.n	8001cd4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	e032      	b.n	8001d3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2224      	movs	r2, #36	; 0x24
 8001ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f022 0201 	bic.w	r2, r2, #1
 8001cf2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d02:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	6819      	ldr	r1, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	683a      	ldr	r2, [r7, #0]
 8001d10:	430a      	orrs	r2, r1
 8001d12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f042 0201 	orr.w	r2, r2, #1
 8001d22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2220      	movs	r2, #32
 8001d28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d34:	2300      	movs	r3, #0
 8001d36:	e000      	b.n	8001d3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001d38:	2302      	movs	r3, #2
  }
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr

08001d46 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001d46:	b480      	push	{r7}
 8001d48:	b085      	sub	sp, #20
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
 8001d4e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	2b20      	cmp	r3, #32
 8001d5a:	d139      	bne.n	8001dd0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d101      	bne.n	8001d6a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001d66:	2302      	movs	r3, #2
 8001d68:	e033      	b.n	8001dd2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2224      	movs	r2, #36	; 0x24
 8001d76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f022 0201 	bic.w	r2, r2, #1
 8001d88:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d98:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	021b      	lsls	r3, r3, #8
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	68fa      	ldr	r2, [r7, #12]
 8001daa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f042 0201 	orr.w	r2, r2, #1
 8001dba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2220      	movs	r2, #32
 8001dc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	e000      	b.n	8001dd2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001dd0:	2302      	movs	r3, #2
  }
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3714      	adds	r7, #20
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
	...

08001de0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001de4:	4b04      	ldr	r3, [pc, #16]	; (8001df8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	40007000 	.word	0x40007000

08001dfc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e0a:	d130      	bne.n	8001e6e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e0c:	4b23      	ldr	r3, [pc, #140]	; (8001e9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e18:	d038      	beq.n	8001e8c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e1a:	4b20      	ldr	r3, [pc, #128]	; (8001e9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e22:	4a1e      	ldr	r2, [pc, #120]	; (8001e9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e28:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e2a:	4b1d      	ldr	r3, [pc, #116]	; (8001ea0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2232      	movs	r2, #50	; 0x32
 8001e30:	fb02 f303 	mul.w	r3, r2, r3
 8001e34:	4a1b      	ldr	r2, [pc, #108]	; (8001ea4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001e36:	fba2 2303 	umull	r2, r3, r2, r3
 8001e3a:	0c9b      	lsrs	r3, r3, #18
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e40:	e002      	b.n	8001e48 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	3b01      	subs	r3, #1
 8001e46:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e48:	4b14      	ldr	r3, [pc, #80]	; (8001e9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e4a:	695b      	ldr	r3, [r3, #20]
 8001e4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e54:	d102      	bne.n	8001e5c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d1f2      	bne.n	8001e42 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e5c:	4b0f      	ldr	r3, [pc, #60]	; (8001e9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e5e:	695b      	ldr	r3, [r3, #20]
 8001e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e68:	d110      	bne.n	8001e8c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e00f      	b.n	8001e8e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e6e:	4b0b      	ldr	r3, [pc, #44]	; (8001e9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e7a:	d007      	beq.n	8001e8c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e7c:	4b07      	ldr	r3, [pc, #28]	; (8001e9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e84:	4a05      	ldr	r2, [pc, #20]	; (8001e9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e8a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3714      	adds	r7, #20
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	40007000 	.word	0x40007000
 8001ea0:	20000000 	.word	0x20000000
 8001ea4:	431bde83 	.word	0x431bde83

08001ea8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b088      	sub	sp, #32
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d102      	bne.n	8001ebc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	f000 bc11 	b.w	80026de <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ebc:	4ba0      	ldr	r3, [pc, #640]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f003 030c 	and.w	r3, r3, #12
 8001ec4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ec6:	4b9e      	ldr	r3, [pc, #632]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	f003 0303 	and.w	r3, r3, #3
 8001ece:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0310 	and.w	r3, r3, #16
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	f000 80e4 	beq.w	80020a6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d007      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x4c>
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	2b0c      	cmp	r3, #12
 8001ee8:	f040 808b 	bne.w	8002002 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	f040 8087 	bne.w	8002002 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ef4:	4b92      	ldr	r3, [pc, #584]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d005      	beq.n	8001f0c <HAL_RCC_OscConfig+0x64>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d101      	bne.n	8001f0c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e3e8      	b.n	80026de <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a1a      	ldr	r2, [r3, #32]
 8001f10:	4b8b      	ldr	r3, [pc, #556]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0308 	and.w	r3, r3, #8
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d004      	beq.n	8001f26 <HAL_RCC_OscConfig+0x7e>
 8001f1c:	4b88      	ldr	r3, [pc, #544]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f24:	e005      	b.n	8001f32 <HAL_RCC_OscConfig+0x8a>
 8001f26:	4b86      	ldr	r3, [pc, #536]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 8001f28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f2c:	091b      	lsrs	r3, r3, #4
 8001f2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d223      	bcs.n	8001f7e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a1b      	ldr	r3, [r3, #32]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f000 fd42 	bl	80029c4 <RCC_SetFlashLatencyFromMSIRange>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e3c9      	b.n	80026de <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f4a:	4b7d      	ldr	r3, [pc, #500]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a7c      	ldr	r2, [pc, #496]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 8001f50:	f043 0308 	orr.w	r3, r3, #8
 8001f54:	6013      	str	r3, [r2, #0]
 8001f56:	4b7a      	ldr	r3, [pc, #488]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a1b      	ldr	r3, [r3, #32]
 8001f62:	4977      	ldr	r1, [pc, #476]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f68:	4b75      	ldr	r3, [pc, #468]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	69db      	ldr	r3, [r3, #28]
 8001f74:	021b      	lsls	r3, r3, #8
 8001f76:	4972      	ldr	r1, [pc, #456]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	604b      	str	r3, [r1, #4]
 8001f7c:	e025      	b.n	8001fca <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f7e:	4b70      	ldr	r3, [pc, #448]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a6f      	ldr	r2, [pc, #444]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 8001f84:	f043 0308 	orr.w	r3, r3, #8
 8001f88:	6013      	str	r3, [r2, #0]
 8001f8a:	4b6d      	ldr	r3, [pc, #436]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6a1b      	ldr	r3, [r3, #32]
 8001f96:	496a      	ldr	r1, [pc, #424]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f9c:	4b68      	ldr	r3, [pc, #416]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	69db      	ldr	r3, [r3, #28]
 8001fa8:	021b      	lsls	r3, r3, #8
 8001faa:	4965      	ldr	r1, [pc, #404]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 8001fac:	4313      	orrs	r3, r2
 8001fae:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d109      	bne.n	8001fca <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a1b      	ldr	r3, [r3, #32]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f000 fd02 	bl	80029c4 <RCC_SetFlashLatencyFromMSIRange>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e389      	b.n	80026de <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fca:	f000 fc6f 	bl	80028ac <HAL_RCC_GetSysClockFreq>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	4b5b      	ldr	r3, [pc, #364]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	091b      	lsrs	r3, r3, #4
 8001fd6:	f003 030f 	and.w	r3, r3, #15
 8001fda:	495a      	ldr	r1, [pc, #360]	; (8002144 <HAL_RCC_OscConfig+0x29c>)
 8001fdc:	5ccb      	ldrb	r3, [r1, r3]
 8001fde:	f003 031f 	and.w	r3, r3, #31
 8001fe2:	fa22 f303 	lsr.w	r3, r2, r3
 8001fe6:	4a58      	ldr	r2, [pc, #352]	; (8002148 <HAL_RCC_OscConfig+0x2a0>)
 8001fe8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001fea:	4b58      	ldr	r3, [pc, #352]	; (800214c <HAL_RCC_OscConfig+0x2a4>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7fe fbf2 	bl	80007d8 <HAL_InitTick>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001ff8:	7bfb      	ldrb	r3, [r7, #15]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d052      	beq.n	80020a4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001ffe:	7bfb      	ldrb	r3, [r7, #15]
 8002000:	e36d      	b.n	80026de <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d032      	beq.n	8002070 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800200a:	4b4d      	ldr	r3, [pc, #308]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a4c      	ldr	r2, [pc, #304]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 8002010:	f043 0301 	orr.w	r3, r3, #1
 8002014:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002016:	f7fe fc2f 	bl	8000878 <HAL_GetTick>
 800201a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800201c:	e008      	b.n	8002030 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800201e:	f7fe fc2b 	bl	8000878 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d901      	bls.n	8002030 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e356      	b.n	80026de <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002030:	4b43      	ldr	r3, [pc, #268]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0302 	and.w	r3, r3, #2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d0f0      	beq.n	800201e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800203c:	4b40      	ldr	r3, [pc, #256]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a3f      	ldr	r2, [pc, #252]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 8002042:	f043 0308 	orr.w	r3, r3, #8
 8002046:	6013      	str	r3, [r2, #0]
 8002048:	4b3d      	ldr	r3, [pc, #244]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a1b      	ldr	r3, [r3, #32]
 8002054:	493a      	ldr	r1, [pc, #232]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 8002056:	4313      	orrs	r3, r2
 8002058:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800205a:	4b39      	ldr	r3, [pc, #228]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	021b      	lsls	r3, r3, #8
 8002068:	4935      	ldr	r1, [pc, #212]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 800206a:	4313      	orrs	r3, r2
 800206c:	604b      	str	r3, [r1, #4]
 800206e:	e01a      	b.n	80020a6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002070:	4b33      	ldr	r3, [pc, #204]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a32      	ldr	r2, [pc, #200]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 8002076:	f023 0301 	bic.w	r3, r3, #1
 800207a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800207c:	f7fe fbfc 	bl	8000878 <HAL_GetTick>
 8002080:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002082:	e008      	b.n	8002096 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002084:	f7fe fbf8 	bl	8000878 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b02      	cmp	r3, #2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e323      	b.n	80026de <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002096:	4b2a      	ldr	r3, [pc, #168]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1f0      	bne.n	8002084 <HAL_RCC_OscConfig+0x1dc>
 80020a2:	e000      	b.n	80020a6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020a4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d073      	beq.n	800219a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	2b08      	cmp	r3, #8
 80020b6:	d005      	beq.n	80020c4 <HAL_RCC_OscConfig+0x21c>
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	2b0c      	cmp	r3, #12
 80020bc:	d10e      	bne.n	80020dc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	2b03      	cmp	r3, #3
 80020c2:	d10b      	bne.n	80020dc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020c4:	4b1e      	ldr	r3, [pc, #120]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d063      	beq.n	8002198 <HAL_RCC_OscConfig+0x2f0>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d15f      	bne.n	8002198 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e300      	b.n	80026de <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020e4:	d106      	bne.n	80020f4 <HAL_RCC_OscConfig+0x24c>
 80020e6:	4b16      	ldr	r3, [pc, #88]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a15      	ldr	r2, [pc, #84]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 80020ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020f0:	6013      	str	r3, [r2, #0]
 80020f2:	e01d      	b.n	8002130 <HAL_RCC_OscConfig+0x288>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020fc:	d10c      	bne.n	8002118 <HAL_RCC_OscConfig+0x270>
 80020fe:	4b10      	ldr	r3, [pc, #64]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a0f      	ldr	r2, [pc, #60]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 8002104:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002108:	6013      	str	r3, [r2, #0]
 800210a:	4b0d      	ldr	r3, [pc, #52]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a0c      	ldr	r2, [pc, #48]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 8002110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002114:	6013      	str	r3, [r2, #0]
 8002116:	e00b      	b.n	8002130 <HAL_RCC_OscConfig+0x288>
 8002118:	4b09      	ldr	r3, [pc, #36]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a08      	ldr	r2, [pc, #32]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 800211e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002122:	6013      	str	r3, [r2, #0]
 8002124:	4b06      	ldr	r3, [pc, #24]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a05      	ldr	r2, [pc, #20]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 800212a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800212e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d01b      	beq.n	8002170 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002138:	f7fe fb9e 	bl	8000878 <HAL_GetTick>
 800213c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800213e:	e010      	b.n	8002162 <HAL_RCC_OscConfig+0x2ba>
 8002140:	40021000 	.word	0x40021000
 8002144:	08006a98 	.word	0x08006a98
 8002148:	20000000 	.word	0x20000000
 800214c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002150:	f7fe fb92 	bl	8000878 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b64      	cmp	r3, #100	; 0x64
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e2bd      	b.n	80026de <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002162:	4baf      	ldr	r3, [pc, #700]	; (8002420 <HAL_RCC_OscConfig+0x578>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d0f0      	beq.n	8002150 <HAL_RCC_OscConfig+0x2a8>
 800216e:	e014      	b.n	800219a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002170:	f7fe fb82 	bl	8000878 <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002176:	e008      	b.n	800218a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002178:	f7fe fb7e 	bl	8000878 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b64      	cmp	r3, #100	; 0x64
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e2a9      	b.n	80026de <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800218a:	4ba5      	ldr	r3, [pc, #660]	; (8002420 <HAL_RCC_OscConfig+0x578>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1f0      	bne.n	8002178 <HAL_RCC_OscConfig+0x2d0>
 8002196:	e000      	b.n	800219a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002198:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d060      	beq.n	8002268 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	2b04      	cmp	r3, #4
 80021aa:	d005      	beq.n	80021b8 <HAL_RCC_OscConfig+0x310>
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	2b0c      	cmp	r3, #12
 80021b0:	d119      	bne.n	80021e6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d116      	bne.n	80021e6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021b8:	4b99      	ldr	r3, [pc, #612]	; (8002420 <HAL_RCC_OscConfig+0x578>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d005      	beq.n	80021d0 <HAL_RCC_OscConfig+0x328>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d101      	bne.n	80021d0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e286      	b.n	80026de <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021d0:	4b93      	ldr	r3, [pc, #588]	; (8002420 <HAL_RCC_OscConfig+0x578>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	691b      	ldr	r3, [r3, #16]
 80021dc:	061b      	lsls	r3, r3, #24
 80021de:	4990      	ldr	r1, [pc, #576]	; (8002420 <HAL_RCC_OscConfig+0x578>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021e4:	e040      	b.n	8002268 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d023      	beq.n	8002236 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021ee:	4b8c      	ldr	r3, [pc, #560]	; (8002420 <HAL_RCC_OscConfig+0x578>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a8b      	ldr	r2, [pc, #556]	; (8002420 <HAL_RCC_OscConfig+0x578>)
 80021f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021fa:	f7fe fb3d 	bl	8000878 <HAL_GetTick>
 80021fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002200:	e008      	b.n	8002214 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002202:	f7fe fb39 	bl	8000878 <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d901      	bls.n	8002214 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e264      	b.n	80026de <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002214:	4b82      	ldr	r3, [pc, #520]	; (8002420 <HAL_RCC_OscConfig+0x578>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800221c:	2b00      	cmp	r3, #0
 800221e:	d0f0      	beq.n	8002202 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002220:	4b7f      	ldr	r3, [pc, #508]	; (8002420 <HAL_RCC_OscConfig+0x578>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	691b      	ldr	r3, [r3, #16]
 800222c:	061b      	lsls	r3, r3, #24
 800222e:	497c      	ldr	r1, [pc, #496]	; (8002420 <HAL_RCC_OscConfig+0x578>)
 8002230:	4313      	orrs	r3, r2
 8002232:	604b      	str	r3, [r1, #4]
 8002234:	e018      	b.n	8002268 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002236:	4b7a      	ldr	r3, [pc, #488]	; (8002420 <HAL_RCC_OscConfig+0x578>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a79      	ldr	r2, [pc, #484]	; (8002420 <HAL_RCC_OscConfig+0x578>)
 800223c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002240:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002242:	f7fe fb19 	bl	8000878 <HAL_GetTick>
 8002246:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002248:	e008      	b.n	800225c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800224a:	f7fe fb15 	bl	8000878 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	2b02      	cmp	r3, #2
 8002256:	d901      	bls.n	800225c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e240      	b.n	80026de <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800225c:	4b70      	ldr	r3, [pc, #448]	; (8002420 <HAL_RCC_OscConfig+0x578>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002264:	2b00      	cmp	r3, #0
 8002266:	d1f0      	bne.n	800224a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0308 	and.w	r3, r3, #8
 8002270:	2b00      	cmp	r3, #0
 8002272:	d03c      	beq.n	80022ee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	695b      	ldr	r3, [r3, #20]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d01c      	beq.n	80022b6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800227c:	4b68      	ldr	r3, [pc, #416]	; (8002420 <HAL_RCC_OscConfig+0x578>)
 800227e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002282:	4a67      	ldr	r2, [pc, #412]	; (8002420 <HAL_RCC_OscConfig+0x578>)
 8002284:	f043 0301 	orr.w	r3, r3, #1
 8002288:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800228c:	f7fe faf4 	bl	8000878 <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002294:	f7fe faf0 	bl	8000878 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e21b      	b.n	80026de <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022a6:	4b5e      	ldr	r3, [pc, #376]	; (8002420 <HAL_RCC_OscConfig+0x578>)
 80022a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d0ef      	beq.n	8002294 <HAL_RCC_OscConfig+0x3ec>
 80022b4:	e01b      	b.n	80022ee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022b6:	4b5a      	ldr	r3, [pc, #360]	; (8002420 <HAL_RCC_OscConfig+0x578>)
 80022b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022bc:	4a58      	ldr	r2, [pc, #352]	; (8002420 <HAL_RCC_OscConfig+0x578>)
 80022be:	f023 0301 	bic.w	r3, r3, #1
 80022c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022c6:	f7fe fad7 	bl	8000878 <HAL_GetTick>
 80022ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022cc:	e008      	b.n	80022e0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022ce:	f7fe fad3 	bl	8000878 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e1fe      	b.n	80026de <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022e0:	4b4f      	ldr	r3, [pc, #316]	; (8002420 <HAL_RCC_OscConfig+0x578>)
 80022e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1ef      	bne.n	80022ce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0304 	and.w	r3, r3, #4
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	f000 80a6 	beq.w	8002448 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022fc:	2300      	movs	r3, #0
 80022fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002300:	4b47      	ldr	r3, [pc, #284]	; (8002420 <HAL_RCC_OscConfig+0x578>)
 8002302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002304:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d10d      	bne.n	8002328 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800230c:	4b44      	ldr	r3, [pc, #272]	; (8002420 <HAL_RCC_OscConfig+0x578>)
 800230e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002310:	4a43      	ldr	r2, [pc, #268]	; (8002420 <HAL_RCC_OscConfig+0x578>)
 8002312:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002316:	6593      	str	r3, [r2, #88]	; 0x58
 8002318:	4b41      	ldr	r3, [pc, #260]	; (8002420 <HAL_RCC_OscConfig+0x578>)
 800231a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800231c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002320:	60bb      	str	r3, [r7, #8]
 8002322:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002324:	2301      	movs	r3, #1
 8002326:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002328:	4b3e      	ldr	r3, [pc, #248]	; (8002424 <HAL_RCC_OscConfig+0x57c>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002330:	2b00      	cmp	r3, #0
 8002332:	d118      	bne.n	8002366 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002334:	4b3b      	ldr	r3, [pc, #236]	; (8002424 <HAL_RCC_OscConfig+0x57c>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a3a      	ldr	r2, [pc, #232]	; (8002424 <HAL_RCC_OscConfig+0x57c>)
 800233a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800233e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002340:	f7fe fa9a 	bl	8000878 <HAL_GetTick>
 8002344:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002346:	e008      	b.n	800235a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002348:	f7fe fa96 	bl	8000878 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e1c1      	b.n	80026de <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800235a:	4b32      	ldr	r3, [pc, #200]	; (8002424 <HAL_RCC_OscConfig+0x57c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002362:	2b00      	cmp	r3, #0
 8002364:	d0f0      	beq.n	8002348 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d108      	bne.n	8002380 <HAL_RCC_OscConfig+0x4d8>
 800236e:	4b2c      	ldr	r3, [pc, #176]	; (8002420 <HAL_RCC_OscConfig+0x578>)
 8002370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002374:	4a2a      	ldr	r2, [pc, #168]	; (8002420 <HAL_RCC_OscConfig+0x578>)
 8002376:	f043 0301 	orr.w	r3, r3, #1
 800237a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800237e:	e024      	b.n	80023ca <HAL_RCC_OscConfig+0x522>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	2b05      	cmp	r3, #5
 8002386:	d110      	bne.n	80023aa <HAL_RCC_OscConfig+0x502>
 8002388:	4b25      	ldr	r3, [pc, #148]	; (8002420 <HAL_RCC_OscConfig+0x578>)
 800238a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800238e:	4a24      	ldr	r2, [pc, #144]	; (8002420 <HAL_RCC_OscConfig+0x578>)
 8002390:	f043 0304 	orr.w	r3, r3, #4
 8002394:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002398:	4b21      	ldr	r3, [pc, #132]	; (8002420 <HAL_RCC_OscConfig+0x578>)
 800239a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800239e:	4a20      	ldr	r2, [pc, #128]	; (8002420 <HAL_RCC_OscConfig+0x578>)
 80023a0:	f043 0301 	orr.w	r3, r3, #1
 80023a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023a8:	e00f      	b.n	80023ca <HAL_RCC_OscConfig+0x522>
 80023aa:	4b1d      	ldr	r3, [pc, #116]	; (8002420 <HAL_RCC_OscConfig+0x578>)
 80023ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b0:	4a1b      	ldr	r2, [pc, #108]	; (8002420 <HAL_RCC_OscConfig+0x578>)
 80023b2:	f023 0301 	bic.w	r3, r3, #1
 80023b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023ba:	4b19      	ldr	r3, [pc, #100]	; (8002420 <HAL_RCC_OscConfig+0x578>)
 80023bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c0:	4a17      	ldr	r2, [pc, #92]	; (8002420 <HAL_RCC_OscConfig+0x578>)
 80023c2:	f023 0304 	bic.w	r3, r3, #4
 80023c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d016      	beq.n	8002400 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d2:	f7fe fa51 	bl	8000878 <HAL_GetTick>
 80023d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023d8:	e00a      	b.n	80023f0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023da:	f7fe fa4d 	bl	8000878 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d901      	bls.n	80023f0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e176      	b.n	80026de <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023f0:	4b0b      	ldr	r3, [pc, #44]	; (8002420 <HAL_RCC_OscConfig+0x578>)
 80023f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d0ed      	beq.n	80023da <HAL_RCC_OscConfig+0x532>
 80023fe:	e01a      	b.n	8002436 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002400:	f7fe fa3a 	bl	8000878 <HAL_GetTick>
 8002404:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002406:	e00f      	b.n	8002428 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002408:	f7fe fa36 	bl	8000878 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	f241 3288 	movw	r2, #5000	; 0x1388
 8002416:	4293      	cmp	r3, r2
 8002418:	d906      	bls.n	8002428 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e15f      	b.n	80026de <HAL_RCC_OscConfig+0x836>
 800241e:	bf00      	nop
 8002420:	40021000 	.word	0x40021000
 8002424:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002428:	4baa      	ldr	r3, [pc, #680]	; (80026d4 <HAL_RCC_OscConfig+0x82c>)
 800242a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1e8      	bne.n	8002408 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002436:	7ffb      	ldrb	r3, [r7, #31]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d105      	bne.n	8002448 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800243c:	4ba5      	ldr	r3, [pc, #660]	; (80026d4 <HAL_RCC_OscConfig+0x82c>)
 800243e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002440:	4aa4      	ldr	r2, [pc, #656]	; (80026d4 <HAL_RCC_OscConfig+0x82c>)
 8002442:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002446:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0320 	and.w	r3, r3, #32
 8002450:	2b00      	cmp	r3, #0
 8002452:	d03c      	beq.n	80024ce <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002458:	2b00      	cmp	r3, #0
 800245a:	d01c      	beq.n	8002496 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800245c:	4b9d      	ldr	r3, [pc, #628]	; (80026d4 <HAL_RCC_OscConfig+0x82c>)
 800245e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002462:	4a9c      	ldr	r2, [pc, #624]	; (80026d4 <HAL_RCC_OscConfig+0x82c>)
 8002464:	f043 0301 	orr.w	r3, r3, #1
 8002468:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800246c:	f7fe fa04 	bl	8000878 <HAL_GetTick>
 8002470:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002472:	e008      	b.n	8002486 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002474:	f7fe fa00 	bl	8000878 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b02      	cmp	r3, #2
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e12b      	b.n	80026de <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002486:	4b93      	ldr	r3, [pc, #588]	; (80026d4 <HAL_RCC_OscConfig+0x82c>)
 8002488:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d0ef      	beq.n	8002474 <HAL_RCC_OscConfig+0x5cc>
 8002494:	e01b      	b.n	80024ce <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002496:	4b8f      	ldr	r3, [pc, #572]	; (80026d4 <HAL_RCC_OscConfig+0x82c>)
 8002498:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800249c:	4a8d      	ldr	r2, [pc, #564]	; (80026d4 <HAL_RCC_OscConfig+0x82c>)
 800249e:	f023 0301 	bic.w	r3, r3, #1
 80024a2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a6:	f7fe f9e7 	bl	8000878 <HAL_GetTick>
 80024aa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80024ac:	e008      	b.n	80024c0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024ae:	f7fe f9e3 	bl	8000878 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d901      	bls.n	80024c0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e10e      	b.n	80026de <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80024c0:	4b84      	ldr	r3, [pc, #528]	; (80026d4 <HAL_RCC_OscConfig+0x82c>)
 80024c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1ef      	bne.n	80024ae <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f000 8102 	beq.w	80026dc <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024dc:	2b02      	cmp	r3, #2
 80024de:	f040 80c5 	bne.w	800266c <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80024e2:	4b7c      	ldr	r3, [pc, #496]	; (80026d4 <HAL_RCC_OscConfig+0x82c>)
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	f003 0203 	and.w	r2, r3, #3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d12c      	bne.n	8002550 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002500:	3b01      	subs	r3, #1
 8002502:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002504:	429a      	cmp	r2, r3
 8002506:	d123      	bne.n	8002550 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002512:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002514:	429a      	cmp	r2, r3
 8002516:	d11b      	bne.n	8002550 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002522:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002524:	429a      	cmp	r2, r3
 8002526:	d113      	bne.n	8002550 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002532:	085b      	lsrs	r3, r3, #1
 8002534:	3b01      	subs	r3, #1
 8002536:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002538:	429a      	cmp	r2, r3
 800253a:	d109      	bne.n	8002550 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002546:	085b      	lsrs	r3, r3, #1
 8002548:	3b01      	subs	r3, #1
 800254a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800254c:	429a      	cmp	r2, r3
 800254e:	d067      	beq.n	8002620 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	2b0c      	cmp	r3, #12
 8002554:	d062      	beq.n	800261c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002556:	4b5f      	ldr	r3, [pc, #380]	; (80026d4 <HAL_RCC_OscConfig+0x82c>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e0bb      	b.n	80026de <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002566:	4b5b      	ldr	r3, [pc, #364]	; (80026d4 <HAL_RCC_OscConfig+0x82c>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a5a      	ldr	r2, [pc, #360]	; (80026d4 <HAL_RCC_OscConfig+0x82c>)
 800256c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002570:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002572:	f7fe f981 	bl	8000878 <HAL_GetTick>
 8002576:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002578:	e008      	b.n	800258c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800257a:	f7fe f97d 	bl	8000878 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e0a8      	b.n	80026de <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800258c:	4b51      	ldr	r3, [pc, #324]	; (80026d4 <HAL_RCC_OscConfig+0x82c>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d1f0      	bne.n	800257a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002598:	4b4e      	ldr	r3, [pc, #312]	; (80026d4 <HAL_RCC_OscConfig+0x82c>)
 800259a:	68da      	ldr	r2, [r3, #12]
 800259c:	4b4e      	ldr	r3, [pc, #312]	; (80026d8 <HAL_RCC_OscConfig+0x830>)
 800259e:	4013      	ands	r3, r2
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80025a8:	3a01      	subs	r2, #1
 80025aa:	0112      	lsls	r2, r2, #4
 80025ac:	4311      	orrs	r1, r2
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80025b2:	0212      	lsls	r2, r2, #8
 80025b4:	4311      	orrs	r1, r2
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80025ba:	0852      	lsrs	r2, r2, #1
 80025bc:	3a01      	subs	r2, #1
 80025be:	0552      	lsls	r2, r2, #21
 80025c0:	4311      	orrs	r1, r2
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80025c6:	0852      	lsrs	r2, r2, #1
 80025c8:	3a01      	subs	r2, #1
 80025ca:	0652      	lsls	r2, r2, #25
 80025cc:	4311      	orrs	r1, r2
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80025d2:	06d2      	lsls	r2, r2, #27
 80025d4:	430a      	orrs	r2, r1
 80025d6:	493f      	ldr	r1, [pc, #252]	; (80026d4 <HAL_RCC_OscConfig+0x82c>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80025dc:	4b3d      	ldr	r3, [pc, #244]	; (80026d4 <HAL_RCC_OscConfig+0x82c>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a3c      	ldr	r2, [pc, #240]	; (80026d4 <HAL_RCC_OscConfig+0x82c>)
 80025e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025e6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025e8:	4b3a      	ldr	r3, [pc, #232]	; (80026d4 <HAL_RCC_OscConfig+0x82c>)
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	4a39      	ldr	r2, [pc, #228]	; (80026d4 <HAL_RCC_OscConfig+0x82c>)
 80025ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025f2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025f4:	f7fe f940 	bl	8000878 <HAL_GetTick>
 80025f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025fa:	e008      	b.n	800260e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025fc:	f7fe f93c 	bl	8000878 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b02      	cmp	r3, #2
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e067      	b.n	80026de <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800260e:	4b31      	ldr	r3, [pc, #196]	; (80026d4 <HAL_RCC_OscConfig+0x82c>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d0f0      	beq.n	80025fc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800261a:	e05f      	b.n	80026dc <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e05e      	b.n	80026de <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002620:	4b2c      	ldr	r3, [pc, #176]	; (80026d4 <HAL_RCC_OscConfig+0x82c>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d157      	bne.n	80026dc <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800262c:	4b29      	ldr	r3, [pc, #164]	; (80026d4 <HAL_RCC_OscConfig+0x82c>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a28      	ldr	r2, [pc, #160]	; (80026d4 <HAL_RCC_OscConfig+0x82c>)
 8002632:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002636:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002638:	4b26      	ldr	r3, [pc, #152]	; (80026d4 <HAL_RCC_OscConfig+0x82c>)
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	4a25      	ldr	r2, [pc, #148]	; (80026d4 <HAL_RCC_OscConfig+0x82c>)
 800263e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002642:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002644:	f7fe f918 	bl	8000878 <HAL_GetTick>
 8002648:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800264a:	e008      	b.n	800265e <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800264c:	f7fe f914 	bl	8000878 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b02      	cmp	r3, #2
 8002658:	d901      	bls.n	800265e <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e03f      	b.n	80026de <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800265e:	4b1d      	ldr	r3, [pc, #116]	; (80026d4 <HAL_RCC_OscConfig+0x82c>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d0f0      	beq.n	800264c <HAL_RCC_OscConfig+0x7a4>
 800266a:	e037      	b.n	80026dc <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	2b0c      	cmp	r3, #12
 8002670:	d02d      	beq.n	80026ce <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002672:	4b18      	ldr	r3, [pc, #96]	; (80026d4 <HAL_RCC_OscConfig+0x82c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a17      	ldr	r2, [pc, #92]	; (80026d4 <HAL_RCC_OscConfig+0x82c>)
 8002678:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800267c:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800267e:	4b15      	ldr	r3, [pc, #84]	; (80026d4 <HAL_RCC_OscConfig+0x82c>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d105      	bne.n	8002696 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800268a:	4b12      	ldr	r3, [pc, #72]	; (80026d4 <HAL_RCC_OscConfig+0x82c>)
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	4a11      	ldr	r2, [pc, #68]	; (80026d4 <HAL_RCC_OscConfig+0x82c>)
 8002690:	f023 0303 	bic.w	r3, r3, #3
 8002694:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002696:	4b0f      	ldr	r3, [pc, #60]	; (80026d4 <HAL_RCC_OscConfig+0x82c>)
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	4a0e      	ldr	r2, [pc, #56]	; (80026d4 <HAL_RCC_OscConfig+0x82c>)
 800269c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80026a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026a4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a6:	f7fe f8e7 	bl	8000878 <HAL_GetTick>
 80026aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026ac:	e008      	b.n	80026c0 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ae:	f7fe f8e3 	bl	8000878 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e00e      	b.n	80026de <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026c0:	4b04      	ldr	r3, [pc, #16]	; (80026d4 <HAL_RCC_OscConfig+0x82c>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d1f0      	bne.n	80026ae <HAL_RCC_OscConfig+0x806>
 80026cc:	e006      	b.n	80026dc <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e005      	b.n	80026de <HAL_RCC_OscConfig+0x836>
 80026d2:	bf00      	nop
 80026d4:	40021000 	.word	0x40021000
 80026d8:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3720      	adds	r7, #32
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop

080026e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d101      	bne.n	80026fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e0c8      	b.n	800288e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026fc:	4b66      	ldr	r3, [pc, #408]	; (8002898 <HAL_RCC_ClockConfig+0x1b0>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0307 	and.w	r3, r3, #7
 8002704:	683a      	ldr	r2, [r7, #0]
 8002706:	429a      	cmp	r2, r3
 8002708:	d910      	bls.n	800272c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800270a:	4b63      	ldr	r3, [pc, #396]	; (8002898 <HAL_RCC_ClockConfig+0x1b0>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f023 0207 	bic.w	r2, r3, #7
 8002712:	4961      	ldr	r1, [pc, #388]	; (8002898 <HAL_RCC_ClockConfig+0x1b0>)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	4313      	orrs	r3, r2
 8002718:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800271a:	4b5f      	ldr	r3, [pc, #380]	; (8002898 <HAL_RCC_ClockConfig+0x1b0>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0307 	and.w	r3, r3, #7
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	429a      	cmp	r2, r3
 8002726:	d001      	beq.n	800272c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e0b0      	b.n	800288e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0301 	and.w	r3, r3, #1
 8002734:	2b00      	cmp	r3, #0
 8002736:	d04c      	beq.n	80027d2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	2b03      	cmp	r3, #3
 800273e:	d107      	bne.n	8002750 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002740:	4b56      	ldr	r3, [pc, #344]	; (800289c <HAL_RCC_ClockConfig+0x1b4>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d121      	bne.n	8002790 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e09e      	b.n	800288e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	2b02      	cmp	r3, #2
 8002756:	d107      	bne.n	8002768 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002758:	4b50      	ldr	r3, [pc, #320]	; (800289c <HAL_RCC_ClockConfig+0x1b4>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d115      	bne.n	8002790 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e092      	b.n	800288e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d107      	bne.n	8002780 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002770:	4b4a      	ldr	r3, [pc, #296]	; (800289c <HAL_RCC_ClockConfig+0x1b4>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d109      	bne.n	8002790 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e086      	b.n	800288e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002780:	4b46      	ldr	r3, [pc, #280]	; (800289c <HAL_RCC_ClockConfig+0x1b4>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002788:	2b00      	cmp	r3, #0
 800278a:	d101      	bne.n	8002790 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e07e      	b.n	800288e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002790:	4b42      	ldr	r3, [pc, #264]	; (800289c <HAL_RCC_ClockConfig+0x1b4>)
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f023 0203 	bic.w	r2, r3, #3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	493f      	ldr	r1, [pc, #252]	; (800289c <HAL_RCC_ClockConfig+0x1b4>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027a2:	f7fe f869 	bl	8000878 <HAL_GetTick>
 80027a6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027a8:	e00a      	b.n	80027c0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027aa:	f7fe f865 	bl	8000878 <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d901      	bls.n	80027c0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e066      	b.n	800288e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027c0:	4b36      	ldr	r3, [pc, #216]	; (800289c <HAL_RCC_ClockConfig+0x1b4>)
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f003 020c 	and.w	r2, r3, #12
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d1eb      	bne.n	80027aa <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d008      	beq.n	80027f0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027de:	4b2f      	ldr	r3, [pc, #188]	; (800289c <HAL_RCC_ClockConfig+0x1b4>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	492c      	ldr	r1, [pc, #176]	; (800289c <HAL_RCC_ClockConfig+0x1b4>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027f0:	4b29      	ldr	r3, [pc, #164]	; (8002898 <HAL_RCC_ClockConfig+0x1b0>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0307 	and.w	r3, r3, #7
 80027f8:	683a      	ldr	r2, [r7, #0]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d210      	bcs.n	8002820 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027fe:	4b26      	ldr	r3, [pc, #152]	; (8002898 <HAL_RCC_ClockConfig+0x1b0>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f023 0207 	bic.w	r2, r3, #7
 8002806:	4924      	ldr	r1, [pc, #144]	; (8002898 <HAL_RCC_ClockConfig+0x1b0>)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	4313      	orrs	r3, r2
 800280c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800280e:	4b22      	ldr	r3, [pc, #136]	; (8002898 <HAL_RCC_ClockConfig+0x1b0>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0307 	and.w	r3, r3, #7
 8002816:	683a      	ldr	r2, [r7, #0]
 8002818:	429a      	cmp	r2, r3
 800281a:	d001      	beq.n	8002820 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e036      	b.n	800288e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0304 	and.w	r3, r3, #4
 8002828:	2b00      	cmp	r3, #0
 800282a:	d008      	beq.n	800283e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800282c:	4b1b      	ldr	r3, [pc, #108]	; (800289c <HAL_RCC_ClockConfig+0x1b4>)
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	4918      	ldr	r1, [pc, #96]	; (800289c <HAL_RCC_ClockConfig+0x1b4>)
 800283a:	4313      	orrs	r3, r2
 800283c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0308 	and.w	r3, r3, #8
 8002846:	2b00      	cmp	r3, #0
 8002848:	d009      	beq.n	800285e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800284a:	4b14      	ldr	r3, [pc, #80]	; (800289c <HAL_RCC_ClockConfig+0x1b4>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	4910      	ldr	r1, [pc, #64]	; (800289c <HAL_RCC_ClockConfig+0x1b4>)
 800285a:	4313      	orrs	r3, r2
 800285c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800285e:	f000 f825 	bl	80028ac <HAL_RCC_GetSysClockFreq>
 8002862:	4602      	mov	r2, r0
 8002864:	4b0d      	ldr	r3, [pc, #52]	; (800289c <HAL_RCC_ClockConfig+0x1b4>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	091b      	lsrs	r3, r3, #4
 800286a:	f003 030f 	and.w	r3, r3, #15
 800286e:	490c      	ldr	r1, [pc, #48]	; (80028a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002870:	5ccb      	ldrb	r3, [r1, r3]
 8002872:	f003 031f 	and.w	r3, r3, #31
 8002876:	fa22 f303 	lsr.w	r3, r2, r3
 800287a:	4a0a      	ldr	r2, [pc, #40]	; (80028a4 <HAL_RCC_ClockConfig+0x1bc>)
 800287c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800287e:	4b0a      	ldr	r3, [pc, #40]	; (80028a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	f7fd ffa8 	bl	80007d8 <HAL_InitTick>
 8002888:	4603      	mov	r3, r0
 800288a:	72fb      	strb	r3, [r7, #11]

  return status;
 800288c:	7afb      	ldrb	r3, [r7, #11]
}
 800288e:	4618      	mov	r0, r3
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	40022000 	.word	0x40022000
 800289c:	40021000 	.word	0x40021000
 80028a0:	08006a98 	.word	0x08006a98
 80028a4:	20000000 	.word	0x20000000
 80028a8:	20000004 	.word	0x20000004

080028ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b089      	sub	sp, #36	; 0x24
 80028b0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80028b2:	2300      	movs	r3, #0
 80028b4:	61fb      	str	r3, [r7, #28]
 80028b6:	2300      	movs	r3, #0
 80028b8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028ba:	4b3e      	ldr	r3, [pc, #248]	; (80029b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f003 030c 	and.w	r3, r3, #12
 80028c2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028c4:	4b3b      	ldr	r3, [pc, #236]	; (80029b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	f003 0303 	and.w	r3, r3, #3
 80028cc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d005      	beq.n	80028e0 <HAL_RCC_GetSysClockFreq+0x34>
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	2b0c      	cmp	r3, #12
 80028d8:	d121      	bne.n	800291e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d11e      	bne.n	800291e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80028e0:	4b34      	ldr	r3, [pc, #208]	; (80029b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0308 	and.w	r3, r3, #8
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d107      	bne.n	80028fc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80028ec:	4b31      	ldr	r3, [pc, #196]	; (80029b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80028ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028f2:	0a1b      	lsrs	r3, r3, #8
 80028f4:	f003 030f 	and.w	r3, r3, #15
 80028f8:	61fb      	str	r3, [r7, #28]
 80028fa:	e005      	b.n	8002908 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80028fc:	4b2d      	ldr	r3, [pc, #180]	; (80029b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	091b      	lsrs	r3, r3, #4
 8002902:	f003 030f 	and.w	r3, r3, #15
 8002906:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002908:	4a2b      	ldr	r2, [pc, #172]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002910:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d10d      	bne.n	8002934 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800291c:	e00a      	b.n	8002934 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	2b04      	cmp	r3, #4
 8002922:	d102      	bne.n	800292a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002924:	4b25      	ldr	r3, [pc, #148]	; (80029bc <HAL_RCC_GetSysClockFreq+0x110>)
 8002926:	61bb      	str	r3, [r7, #24]
 8002928:	e004      	b.n	8002934 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	2b08      	cmp	r3, #8
 800292e:	d101      	bne.n	8002934 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002930:	4b23      	ldr	r3, [pc, #140]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002932:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	2b0c      	cmp	r3, #12
 8002938:	d134      	bne.n	80029a4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800293a:	4b1e      	ldr	r3, [pc, #120]	; (80029b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	f003 0303 	and.w	r3, r3, #3
 8002942:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	2b02      	cmp	r3, #2
 8002948:	d003      	beq.n	8002952 <HAL_RCC_GetSysClockFreq+0xa6>
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	2b03      	cmp	r3, #3
 800294e:	d003      	beq.n	8002958 <HAL_RCC_GetSysClockFreq+0xac>
 8002950:	e005      	b.n	800295e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002952:	4b1a      	ldr	r3, [pc, #104]	; (80029bc <HAL_RCC_GetSysClockFreq+0x110>)
 8002954:	617b      	str	r3, [r7, #20]
      break;
 8002956:	e005      	b.n	8002964 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002958:	4b19      	ldr	r3, [pc, #100]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x114>)
 800295a:	617b      	str	r3, [r7, #20]
      break;
 800295c:	e002      	b.n	8002964 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	617b      	str	r3, [r7, #20]
      break;
 8002962:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002964:	4b13      	ldr	r3, [pc, #76]	; (80029b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	091b      	lsrs	r3, r3, #4
 800296a:	f003 0307 	and.w	r3, r3, #7
 800296e:	3301      	adds	r3, #1
 8002970:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002972:	4b10      	ldr	r3, [pc, #64]	; (80029b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	0a1b      	lsrs	r3, r3, #8
 8002978:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800297c:	697a      	ldr	r2, [r7, #20]
 800297e:	fb02 f203 	mul.w	r2, r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	fbb2 f3f3 	udiv	r3, r2, r3
 8002988:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800298a:	4b0a      	ldr	r3, [pc, #40]	; (80029b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	0e5b      	lsrs	r3, r3, #25
 8002990:	f003 0303 	and.w	r3, r3, #3
 8002994:	3301      	adds	r3, #1
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800299a:	697a      	ldr	r2, [r7, #20]
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80029a4:	69bb      	ldr	r3, [r7, #24]
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3724      	adds	r7, #36	; 0x24
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	40021000 	.word	0x40021000
 80029b8:	08006aa8 	.word	0x08006aa8
 80029bc:	00f42400 	.word	0x00f42400
 80029c0:	01312d00 	.word	0x01312d00

080029c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80029cc:	2300      	movs	r3, #0
 80029ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80029d0:	4b2a      	ldr	r3, [pc, #168]	; (8002a7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d003      	beq.n	80029e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80029dc:	f7ff fa00 	bl	8001de0 <HAL_PWREx_GetVoltageRange>
 80029e0:	6178      	str	r0, [r7, #20]
 80029e2:	e014      	b.n	8002a0e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80029e4:	4b25      	ldr	r3, [pc, #148]	; (8002a7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e8:	4a24      	ldr	r2, [pc, #144]	; (8002a7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029ee:	6593      	str	r3, [r2, #88]	; 0x58
 80029f0:	4b22      	ldr	r3, [pc, #136]	; (8002a7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f8:	60fb      	str	r3, [r7, #12]
 80029fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80029fc:	f7ff f9f0 	bl	8001de0 <HAL_PWREx_GetVoltageRange>
 8002a00:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002a02:	4b1e      	ldr	r3, [pc, #120]	; (8002a7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a06:	4a1d      	ldr	r2, [pc, #116]	; (8002a7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a0c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a14:	d10b      	bne.n	8002a2e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2b80      	cmp	r3, #128	; 0x80
 8002a1a:	d919      	bls.n	8002a50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2ba0      	cmp	r3, #160	; 0xa0
 8002a20:	d902      	bls.n	8002a28 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a22:	2302      	movs	r3, #2
 8002a24:	613b      	str	r3, [r7, #16]
 8002a26:	e013      	b.n	8002a50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a28:	2301      	movs	r3, #1
 8002a2a:	613b      	str	r3, [r7, #16]
 8002a2c:	e010      	b.n	8002a50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2b80      	cmp	r3, #128	; 0x80
 8002a32:	d902      	bls.n	8002a3a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002a34:	2303      	movs	r3, #3
 8002a36:	613b      	str	r3, [r7, #16]
 8002a38:	e00a      	b.n	8002a50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2b80      	cmp	r3, #128	; 0x80
 8002a3e:	d102      	bne.n	8002a46 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a40:	2302      	movs	r3, #2
 8002a42:	613b      	str	r3, [r7, #16]
 8002a44:	e004      	b.n	8002a50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2b70      	cmp	r3, #112	; 0x70
 8002a4a:	d101      	bne.n	8002a50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a50:	4b0b      	ldr	r3, [pc, #44]	; (8002a80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f023 0207 	bic.w	r2, r3, #7
 8002a58:	4909      	ldr	r1, [pc, #36]	; (8002a80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002a60:	4b07      	ldr	r3, [pc, #28]	; (8002a80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0307 	and.w	r3, r3, #7
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d001      	beq.n	8002a72 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e000      	b.n	8002a74 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3718      	adds	r7, #24
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	40022000 	.word	0x40022000

08002a84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b086      	sub	sp, #24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a90:	2300      	movs	r3, #0
 8002a92:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d031      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aa4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002aa8:	d01a      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002aaa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002aae:	d814      	bhi.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d009      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002ab4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ab8:	d10f      	bne.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002aba:	4b5d      	ldr	r3, [pc, #372]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	4a5c      	ldr	r2, [pc, #368]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ac0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ac4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ac6:	e00c      	b.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	3304      	adds	r3, #4
 8002acc:	2100      	movs	r1, #0
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f000 fa12 	bl	8002ef8 <RCCEx_PLLSAI1_Config>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ad8:	e003      	b.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	74fb      	strb	r3, [r7, #19]
      break;
 8002ade:	e000      	b.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002ae0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ae2:	7cfb      	ldrb	r3, [r7, #19]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d10b      	bne.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ae8:	4b51      	ldr	r3, [pc, #324]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002af6:	494e      	ldr	r1, [pc, #312]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002afe:	e001      	b.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b00:	7cfb      	ldrb	r3, [r7, #19]
 8002b02:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	f000 809e 	beq.w	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b12:	2300      	movs	r3, #0
 8002b14:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b16:	4b46      	ldr	r3, [pc, #280]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002b22:	2301      	movs	r3, #1
 8002b24:	e000      	b.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002b26:	2300      	movs	r3, #0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d00d      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b2c:	4b40      	ldr	r3, [pc, #256]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b30:	4a3f      	ldr	r2, [pc, #252]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b36:	6593      	str	r3, [r2, #88]	; 0x58
 8002b38:	4b3d      	ldr	r3, [pc, #244]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b40:	60bb      	str	r3, [r7, #8]
 8002b42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b44:	2301      	movs	r3, #1
 8002b46:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b48:	4b3a      	ldr	r3, [pc, #232]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a39      	ldr	r2, [pc, #228]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b52:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b54:	f7fd fe90 	bl	8000878 <HAL_GetTick>
 8002b58:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b5a:	e009      	b.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b5c:	f7fd fe8c 	bl	8000878 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d902      	bls.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	74fb      	strb	r3, [r7, #19]
        break;
 8002b6e:	e005      	b.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b70:	4b30      	ldr	r3, [pc, #192]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d0ef      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002b7c:	7cfb      	ldrb	r3, [r7, #19]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d15a      	bne.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b82:	4b2b      	ldr	r3, [pc, #172]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b8c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d01e      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b98:	697a      	ldr	r2, [r7, #20]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d019      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b9e:	4b24      	ldr	r3, [pc, #144]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ba4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ba8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002baa:	4b21      	ldr	r3, [pc, #132]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb0:	4a1f      	ldr	r2, [pc, #124]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002bba:	4b1d      	ldr	r3, [pc, #116]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc0:	4a1b      	ldr	r2, [pc, #108]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002bca:	4a19      	ldr	r2, [pc, #100]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	f003 0301 	and.w	r3, r3, #1
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d016      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bdc:	f7fd fe4c 	bl	8000878 <HAL_GetTick>
 8002be0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002be2:	e00b      	b.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002be4:	f7fd fe48 	bl	8000878 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d902      	bls.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	74fb      	strb	r3, [r7, #19]
            break;
 8002bfa:	e006      	b.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bfc:	4b0c      	ldr	r3, [pc, #48]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d0ec      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002c0a:	7cfb      	ldrb	r3, [r7, #19]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d10b      	bne.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c10:	4b07      	ldr	r3, [pc, #28]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c16:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c1e:	4904      	ldr	r1, [pc, #16]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002c26:	e009      	b.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c28:	7cfb      	ldrb	r3, [r7, #19]
 8002c2a:	74bb      	strb	r3, [r7, #18]
 8002c2c:	e006      	b.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002c2e:	bf00      	nop
 8002c30:	40021000 	.word	0x40021000
 8002c34:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c38:	7cfb      	ldrb	r3, [r7, #19]
 8002c3a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c3c:	7c7b      	ldrb	r3, [r7, #17]
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d105      	bne.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c42:	4bac      	ldr	r3, [pc, #688]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c46:	4aab      	ldr	r2, [pc, #684]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002c48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c4c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00a      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c5a:	4ba6      	ldr	r3, [pc, #664]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c60:	f023 0203 	bic.w	r2, r3, #3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a1b      	ldr	r3, [r3, #32]
 8002c68:	49a2      	ldr	r1, [pc, #648]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0302 	and.w	r3, r3, #2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d00a      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c7c:	4b9d      	ldr	r3, [pc, #628]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c82:	f023 020c 	bic.w	r2, r3, #12
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8a:	499a      	ldr	r1, [pc, #616]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0304 	and.w	r3, r3, #4
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00a      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c9e:	4b95      	ldr	r3, [pc, #596]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ca4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cac:	4991      	ldr	r1, [pc, #580]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0308 	and.w	r3, r3, #8
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d00a      	beq.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002cc0:	4b8c      	ldr	r3, [pc, #560]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cce:	4989      	ldr	r1, [pc, #548]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0320 	and.w	r3, r3, #32
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00a      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ce2:	4b84      	ldr	r3, [pc, #528]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ce8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf0:	4980      	ldr	r1, [pc, #512]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00a      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d04:	4b7b      	ldr	r3, [pc, #492]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d0a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d12:	4978      	ldr	r1, [pc, #480]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00a      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d26:	4b73      	ldr	r3, [pc, #460]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d2c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d34:	496f      	ldr	r1, [pc, #444]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d00a      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d48:	4b6a      	ldr	r3, [pc, #424]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d4e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d56:	4967      	ldr	r1, [pc, #412]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d00a      	beq.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d6a:	4b62      	ldr	r3, [pc, #392]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d70:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d78:	495e      	ldr	r1, [pc, #376]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d00a      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d8c:	4b59      	ldr	r3, [pc, #356]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d92:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d9a:	4956      	ldr	r1, [pc, #344]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00a      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002dae:	4b51      	ldr	r3, [pc, #324]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002db0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002db4:	f023 0203 	bic.w	r2, r3, #3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbc:	494d      	ldr	r1, [pc, #308]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d028      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002dd0:	4b48      	ldr	r3, [pc, #288]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dd6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dde:	4945      	ldr	r1, [pc, #276]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002dee:	d106      	bne.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002df0:	4b40      	ldr	r3, [pc, #256]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	4a3f      	ldr	r2, [pc, #252]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002df6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002dfa:	60d3      	str	r3, [r2, #12]
 8002dfc:	e011      	b.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e02:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e06:	d10c      	bne.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	3304      	adds	r3, #4
 8002e0c:	2101      	movs	r1, #1
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f000 f872 	bl	8002ef8 <RCCEx_PLLSAI1_Config>
 8002e14:	4603      	mov	r3, r0
 8002e16:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e18:	7cfb      	ldrb	r3, [r7, #19]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* set overall return value */
        status = ret;
 8002e1e:	7cfb      	ldrb	r3, [r7, #19]
 8002e20:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d028      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e2e:	4b31      	ldr	r3, [pc, #196]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e34:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e3c:	492d      	ldr	r1, [pc, #180]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e4c:	d106      	bne.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e4e:	4b29      	ldr	r3, [pc, #164]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	4a28      	ldr	r2, [pc, #160]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002e54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e58:	60d3      	str	r3, [r2, #12]
 8002e5a:	e011      	b.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e64:	d10c      	bne.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	3304      	adds	r3, #4
 8002e6a:	2101      	movs	r1, #1
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f000 f843 	bl	8002ef8 <RCCEx_PLLSAI1_Config>
 8002e72:	4603      	mov	r3, r0
 8002e74:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e76:	7cfb      	ldrb	r3, [r7, #19]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d001      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8002e7c:	7cfb      	ldrb	r3, [r7, #19]
 8002e7e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d01c      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e8c:	4b19      	ldr	r3, [pc, #100]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e92:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e9a:	4916      	ldr	r1, [pc, #88]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002eaa:	d10c      	bne.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	3304      	adds	r3, #4
 8002eb0:	2102      	movs	r1, #2
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f000 f820 	bl	8002ef8 <RCCEx_PLLSAI1_Config>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ebc:	7cfb      	ldrb	r3, [r7, #19]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x442>
      {
        /* set overall return value */
        status = ret;
 8002ec2:	7cfb      	ldrb	r3, [r7, #19]
 8002ec4:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00a      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x464>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002ed2:	4b08      	ldr	r3, [pc, #32]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee0:	4904      	ldr	r1, [pc, #16]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002ee8:	7cbb      	ldrb	r3, [r7, #18]
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3718      	adds	r7, #24
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	40021000 	.word	0x40021000

08002ef8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f02:	2300      	movs	r3, #0
 8002f04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f06:	4b74      	ldr	r3, [pc, #464]	; (80030d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	f003 0303 	and.w	r3, r3, #3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d018      	beq.n	8002f44 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002f12:	4b71      	ldr	r3, [pc, #452]	; (80030d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	f003 0203 	and.w	r2, r3, #3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d10d      	bne.n	8002f3e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
       ||
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d009      	beq.n	8002f3e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002f2a:	4b6b      	ldr	r3, [pc, #428]	; (80030d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	091b      	lsrs	r3, r3, #4
 8002f30:	f003 0307 	and.w	r3, r3, #7
 8002f34:	1c5a      	adds	r2, r3, #1
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
       ||
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d047      	beq.n	8002fce <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	73fb      	strb	r3, [r7, #15]
 8002f42:	e044      	b.n	8002fce <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2b03      	cmp	r3, #3
 8002f4a:	d018      	beq.n	8002f7e <RCCEx_PLLSAI1_Config+0x86>
 8002f4c:	2b03      	cmp	r3, #3
 8002f4e:	d825      	bhi.n	8002f9c <RCCEx_PLLSAI1_Config+0xa4>
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d002      	beq.n	8002f5a <RCCEx_PLLSAI1_Config+0x62>
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d009      	beq.n	8002f6c <RCCEx_PLLSAI1_Config+0x74>
 8002f58:	e020      	b.n	8002f9c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f5a:	4b5f      	ldr	r3, [pc, #380]	; (80030d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d11d      	bne.n	8002fa2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f6a:	e01a      	b.n	8002fa2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f6c:	4b5a      	ldr	r3, [pc, #360]	; (80030d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d116      	bne.n	8002fa6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f7c:	e013      	b.n	8002fa6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f7e:	4b56      	ldr	r3, [pc, #344]	; (80030d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d10f      	bne.n	8002faa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f8a:	4b53      	ldr	r3, [pc, #332]	; (80030d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d109      	bne.n	8002faa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f9a:	e006      	b.n	8002faa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	73fb      	strb	r3, [r7, #15]
      break;
 8002fa0:	e004      	b.n	8002fac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002fa2:	bf00      	nop
 8002fa4:	e002      	b.n	8002fac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002fa6:	bf00      	nop
 8002fa8:	e000      	b.n	8002fac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002faa:	bf00      	nop
    }

    if(status == HAL_OK)
 8002fac:	7bfb      	ldrb	r3, [r7, #15]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d10d      	bne.n	8002fce <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002fb2:	4b49      	ldr	r3, [pc, #292]	; (80030d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6819      	ldr	r1, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	011b      	lsls	r3, r3, #4
 8002fc6:	430b      	orrs	r3, r1
 8002fc8:	4943      	ldr	r1, [pc, #268]	; (80030d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002fce:	7bfb      	ldrb	r3, [r7, #15]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d17c      	bne.n	80030ce <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002fd4:	4b40      	ldr	r3, [pc, #256]	; (80030d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a3f      	ldr	r2, [pc, #252]	; (80030d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fda:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002fde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fe0:	f7fd fc4a 	bl	8000878 <HAL_GetTick>
 8002fe4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002fe6:	e009      	b.n	8002ffc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002fe8:	f7fd fc46 	bl	8000878 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d902      	bls.n	8002ffc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	73fb      	strb	r3, [r7, #15]
        break;
 8002ffa:	e005      	b.n	8003008 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ffc:	4b36      	ldr	r3, [pc, #216]	; (80030d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d1ef      	bne.n	8002fe8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003008:	7bfb      	ldrb	r3, [r7, #15]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d15f      	bne.n	80030ce <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d110      	bne.n	8003036 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003014:	4b30      	ldr	r3, [pc, #192]	; (80030d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800301c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	6892      	ldr	r2, [r2, #8]
 8003024:	0211      	lsls	r1, r2, #8
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	68d2      	ldr	r2, [r2, #12]
 800302a:	06d2      	lsls	r2, r2, #27
 800302c:	430a      	orrs	r2, r1
 800302e:	492a      	ldr	r1, [pc, #168]	; (80030d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003030:	4313      	orrs	r3, r2
 8003032:	610b      	str	r3, [r1, #16]
 8003034:	e027      	b.n	8003086 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	2b01      	cmp	r3, #1
 800303a:	d112      	bne.n	8003062 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800303c:	4b26      	ldr	r3, [pc, #152]	; (80030d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003044:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	6892      	ldr	r2, [r2, #8]
 800304c:	0211      	lsls	r1, r2, #8
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	6912      	ldr	r2, [r2, #16]
 8003052:	0852      	lsrs	r2, r2, #1
 8003054:	3a01      	subs	r2, #1
 8003056:	0552      	lsls	r2, r2, #21
 8003058:	430a      	orrs	r2, r1
 800305a:	491f      	ldr	r1, [pc, #124]	; (80030d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800305c:	4313      	orrs	r3, r2
 800305e:	610b      	str	r3, [r1, #16]
 8003060:	e011      	b.n	8003086 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003062:	4b1d      	ldr	r3, [pc, #116]	; (80030d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800306a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	6892      	ldr	r2, [r2, #8]
 8003072:	0211      	lsls	r1, r2, #8
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	6952      	ldr	r2, [r2, #20]
 8003078:	0852      	lsrs	r2, r2, #1
 800307a:	3a01      	subs	r2, #1
 800307c:	0652      	lsls	r2, r2, #25
 800307e:	430a      	orrs	r2, r1
 8003080:	4915      	ldr	r1, [pc, #84]	; (80030d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003082:	4313      	orrs	r3, r2
 8003084:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003086:	4b14      	ldr	r3, [pc, #80]	; (80030d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a13      	ldr	r2, [pc, #76]	; (80030d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800308c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003090:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003092:	f7fd fbf1 	bl	8000878 <HAL_GetTick>
 8003096:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003098:	e009      	b.n	80030ae <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800309a:	f7fd fbed 	bl	8000878 <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d902      	bls.n	80030ae <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	73fb      	strb	r3, [r7, #15]
          break;
 80030ac:	e005      	b.n	80030ba <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80030ae:	4b0a      	ldr	r3, [pc, #40]	; (80030d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d0ef      	beq.n	800309a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80030ba:	7bfb      	ldrb	r3, [r7, #15]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d106      	bne.n	80030ce <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80030c0:	4b05      	ldr	r3, [pc, #20]	; (80030d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030c2:	691a      	ldr	r2, [r3, #16]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	4903      	ldr	r1, [pc, #12]	; (80030d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80030ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3710      	adds	r7, #16
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	40021000 	.word	0x40021000

080030dc <__NVIC_SetPriority>:
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	4603      	mov	r3, r0
 80030e4:	6039      	str	r1, [r7, #0]
 80030e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	db0a      	blt.n	8003106 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	b2da      	uxtb	r2, r3
 80030f4:	490c      	ldr	r1, [pc, #48]	; (8003128 <__NVIC_SetPriority+0x4c>)
 80030f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030fa:	0112      	lsls	r2, r2, #4
 80030fc:	b2d2      	uxtb	r2, r2
 80030fe:	440b      	add	r3, r1
 8003100:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003104:	e00a      	b.n	800311c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	b2da      	uxtb	r2, r3
 800310a:	4908      	ldr	r1, [pc, #32]	; (800312c <__NVIC_SetPriority+0x50>)
 800310c:	79fb      	ldrb	r3, [r7, #7]
 800310e:	f003 030f 	and.w	r3, r3, #15
 8003112:	3b04      	subs	r3, #4
 8003114:	0112      	lsls	r2, r2, #4
 8003116:	b2d2      	uxtb	r2, r2
 8003118:	440b      	add	r3, r1
 800311a:	761a      	strb	r2, [r3, #24]
}
 800311c:	bf00      	nop
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr
 8003128:	e000e100 	.word	0xe000e100
 800312c:	e000ed00 	.word	0xe000ed00

08003130 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003134:	2100      	movs	r1, #0
 8003136:	f06f 0004 	mvn.w	r0, #4
 800313a:	f7ff ffcf 	bl	80030dc <__NVIC_SetPriority>
#endif
}
 800313e:	bf00      	nop
 8003140:	bd80      	pop	{r7, pc}
	...

08003144 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800314a:	f3ef 8305 	mrs	r3, IPSR
 800314e:	603b      	str	r3, [r7, #0]
  return(result);
 8003150:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003152:	2b00      	cmp	r3, #0
 8003154:	d003      	beq.n	800315e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003156:	f06f 0305 	mvn.w	r3, #5
 800315a:	607b      	str	r3, [r7, #4]
 800315c:	e00c      	b.n	8003178 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800315e:	4b0a      	ldr	r3, [pc, #40]	; (8003188 <osKernelInitialize+0x44>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d105      	bne.n	8003172 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003166:	4b08      	ldr	r3, [pc, #32]	; (8003188 <osKernelInitialize+0x44>)
 8003168:	2201      	movs	r2, #1
 800316a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800316c:	2300      	movs	r3, #0
 800316e:	607b      	str	r3, [r7, #4]
 8003170:	e002      	b.n	8003178 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003172:	f04f 33ff 	mov.w	r3, #4294967295
 8003176:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003178:	687b      	ldr	r3, [r7, #4]
}
 800317a:	4618      	mov	r0, r3
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	20000038 	.word	0x20000038

0800318c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003192:	f3ef 8305 	mrs	r3, IPSR
 8003196:	603b      	str	r3, [r7, #0]
  return(result);
 8003198:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800319a:	2b00      	cmp	r3, #0
 800319c:	d003      	beq.n	80031a6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800319e:	f06f 0305 	mvn.w	r3, #5
 80031a2:	607b      	str	r3, [r7, #4]
 80031a4:	e010      	b.n	80031c8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80031a6:	4b0b      	ldr	r3, [pc, #44]	; (80031d4 <osKernelStart+0x48>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d109      	bne.n	80031c2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80031ae:	f7ff ffbf 	bl	8003130 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80031b2:	4b08      	ldr	r3, [pc, #32]	; (80031d4 <osKernelStart+0x48>)
 80031b4:	2202      	movs	r2, #2
 80031b6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80031b8:	f001 fa50 	bl	800465c <vTaskStartScheduler>
      stat = osOK;
 80031bc:	2300      	movs	r3, #0
 80031be:	607b      	str	r3, [r7, #4]
 80031c0:	e002      	b.n	80031c8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80031c2:	f04f 33ff 	mov.w	r3, #4294967295
 80031c6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80031c8:	687b      	ldr	r3, [r7, #4]
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	20000038 	.word	0x20000038

080031d8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80031d8:	b580      	push	{r7, lr}
 80031da:	b08e      	sub	sp, #56	; 0x38
 80031dc:	af04      	add	r7, sp, #16
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80031e4:	2300      	movs	r3, #0
 80031e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80031e8:	f3ef 8305 	mrs	r3, IPSR
 80031ec:	617b      	str	r3, [r7, #20]
  return(result);
 80031ee:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d17e      	bne.n	80032f2 <osThreadNew+0x11a>
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d07b      	beq.n	80032f2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80031fa:	2380      	movs	r3, #128	; 0x80
 80031fc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80031fe:	2318      	movs	r3, #24
 8003200:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003202:	2300      	movs	r3, #0
 8003204:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003206:	f04f 33ff 	mov.w	r3, #4294967295
 800320a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d045      	beq.n	800329e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d002      	beq.n	8003220 <osThreadNew+0x48>
        name = attr->name;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	699b      	ldr	r3, [r3, #24]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d002      	beq.n	800322e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	699b      	ldr	r3, [r3, #24]
 800322c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d008      	beq.n	8003246 <osThreadNew+0x6e>
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	2b38      	cmp	r3, #56	; 0x38
 8003238:	d805      	bhi.n	8003246 <osThreadNew+0x6e>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <osThreadNew+0x72>
        return (NULL);
 8003246:	2300      	movs	r3, #0
 8003248:	e054      	b.n	80032f4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d003      	beq.n	800325a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	089b      	lsrs	r3, r3, #2
 8003258:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00e      	beq.n	8003280 <osThreadNew+0xa8>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	2b5b      	cmp	r3, #91	; 0x5b
 8003268:	d90a      	bls.n	8003280 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800326e:	2b00      	cmp	r3, #0
 8003270:	d006      	beq.n	8003280 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d002      	beq.n	8003280 <osThreadNew+0xa8>
        mem = 1;
 800327a:	2301      	movs	r3, #1
 800327c:	61bb      	str	r3, [r7, #24]
 800327e:	e010      	b.n	80032a2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d10c      	bne.n	80032a2 <osThreadNew+0xca>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d108      	bne.n	80032a2 <osThreadNew+0xca>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d104      	bne.n	80032a2 <osThreadNew+0xca>
          mem = 0;
 8003298:	2300      	movs	r3, #0
 800329a:	61bb      	str	r3, [r7, #24]
 800329c:	e001      	b.n	80032a2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800329e:	2300      	movs	r3, #0
 80032a0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d110      	bne.n	80032ca <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80032b0:	9202      	str	r2, [sp, #8]
 80032b2:	9301      	str	r3, [sp, #4]
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	9300      	str	r3, [sp, #0]
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	6a3a      	ldr	r2, [r7, #32]
 80032bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032be:	68f8      	ldr	r0, [r7, #12]
 80032c0:	f000 fff6 	bl	80042b0 <xTaskCreateStatic>
 80032c4:	4603      	mov	r3, r0
 80032c6:	613b      	str	r3, [r7, #16]
 80032c8:	e013      	b.n	80032f2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d110      	bne.n	80032f2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80032d0:	6a3b      	ldr	r3, [r7, #32]
 80032d2:	b29a      	uxth	r2, r3
 80032d4:	f107 0310 	add.w	r3, r7, #16
 80032d8:	9301      	str	r3, [sp, #4]
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	9300      	str	r3, [sp, #0]
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032e2:	68f8      	ldr	r0, [r7, #12]
 80032e4:	f001 f841 	bl	800436a <xTaskCreate>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d001      	beq.n	80032f2 <osThreadNew+0x11a>
            hTask = NULL;
 80032ee:	2300      	movs	r3, #0
 80032f0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80032f2:	693b      	ldr	r3, [r7, #16]
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3728      	adds	r7, #40	; 0x28
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003304:	f3ef 8305 	mrs	r3, IPSR
 8003308:	60bb      	str	r3, [r7, #8]
  return(result);
 800330a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800330c:	2b00      	cmp	r3, #0
 800330e:	d003      	beq.n	8003318 <osDelay+0x1c>
    stat = osErrorISR;
 8003310:	f06f 0305 	mvn.w	r3, #5
 8003314:	60fb      	str	r3, [r7, #12]
 8003316:	e007      	b.n	8003328 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003318:	2300      	movs	r3, #0
 800331a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d002      	beq.n	8003328 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f001 f966 	bl	80045f4 <vTaskDelay>
    }
  }

  return (stat);
 8003328:	68fb      	ldr	r3, [r7, #12]
}
 800332a:	4618      	mov	r0, r3
 800332c:	3710      	adds	r7, #16
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
	...

08003334 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003334:	b480      	push	{r7}
 8003336:	b085      	sub	sp, #20
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	4a07      	ldr	r2, [pc, #28]	; (8003360 <vApplicationGetIdleTaskMemory+0x2c>)
 8003344:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	4a06      	ldr	r2, [pc, #24]	; (8003364 <vApplicationGetIdleTaskMemory+0x30>)
 800334a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2280      	movs	r2, #128	; 0x80
 8003350:	601a      	str	r2, [r3, #0]
}
 8003352:	bf00      	nop
 8003354:	3714      	adds	r7, #20
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	2000003c 	.word	0x2000003c
 8003364:	20000098 	.word	0x20000098

08003368 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003368:	b480      	push	{r7}
 800336a:	b085      	sub	sp, #20
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	4a07      	ldr	r2, [pc, #28]	; (8003394 <vApplicationGetTimerTaskMemory+0x2c>)
 8003378:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	4a06      	ldr	r2, [pc, #24]	; (8003398 <vApplicationGetTimerTaskMemory+0x30>)
 800337e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003386:	601a      	str	r2, [r3, #0]
}
 8003388:	bf00      	nop
 800338a:	3714      	adds	r7, #20
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr
 8003394:	20000298 	.word	0x20000298
 8003398:	200002f4 	.word	0x200002f4

0800339c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f103 0208 	add.w	r2, r3, #8
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f04f 32ff 	mov.w	r2, #4294967295
 80033b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f103 0208 	add.w	r2, r3, #8
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f103 0208 	add.w	r2, r3, #8
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80033ea:	bf00      	nop
 80033ec:	370c      	adds	r7, #12
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr

080033f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80033f6:	b480      	push	{r7}
 80033f8:	b085      	sub	sp, #20
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
 80033fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	689a      	ldr	r2, [r3, #8]
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	683a      	ldr	r2, [r7, #0]
 800341a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	683a      	ldr	r2, [r7, #0]
 8003420:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	1c5a      	adds	r2, r3, #1
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	601a      	str	r2, [r3, #0]
}
 8003432:	bf00      	nop
 8003434:	3714      	adds	r7, #20
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr

0800343e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800343e:	b480      	push	{r7}
 8003440:	b085      	sub	sp, #20
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
 8003446:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003454:	d103      	bne.n	800345e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	60fb      	str	r3, [r7, #12]
 800345c:	e00c      	b.n	8003478 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	3308      	adds	r3, #8
 8003462:	60fb      	str	r3, [r7, #12]
 8003464:	e002      	b.n	800346c <vListInsert+0x2e>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	60fb      	str	r3, [r7, #12]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68ba      	ldr	r2, [r7, #8]
 8003474:	429a      	cmp	r2, r3
 8003476:	d2f6      	bcs.n	8003466 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	685a      	ldr	r2, [r3, #4]
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	683a      	ldr	r2, [r7, #0]
 8003486:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	683a      	ldr	r2, [r7, #0]
 8003492:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	1c5a      	adds	r2, r3, #1
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	601a      	str	r2, [r3, #0]
}
 80034a4:	bf00      	nop
 80034a6:	3714      	adds	r7, #20
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80034b0:	b480      	push	{r7}
 80034b2:	b085      	sub	sp, #20
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	691b      	ldr	r3, [r3, #16]
 80034bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	6892      	ldr	r2, [r2, #8]
 80034c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	6852      	ldr	r2, [r2, #4]
 80034d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d103      	bne.n	80034e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689a      	ldr	r2, [r3, #8]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	1e5a      	subs	r2, r3, #1
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3714      	adds	r7, #20
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d10a      	bne.n	800352e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800351c:	f383 8811 	msr	BASEPRI, r3
 8003520:	f3bf 8f6f 	isb	sy
 8003524:	f3bf 8f4f 	dsb	sy
 8003528:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800352a:	bf00      	nop
 800352c:	e7fe      	b.n	800352c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800352e:	f002 fb39 	bl	8005ba4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800353a:	68f9      	ldr	r1, [r7, #12]
 800353c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800353e:	fb01 f303 	mul.w	r3, r1, r3
 8003542:	441a      	add	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2200      	movs	r2, #0
 800354c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800355e:	3b01      	subs	r3, #1
 8003560:	68f9      	ldr	r1, [r7, #12]
 8003562:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003564:	fb01 f303 	mul.w	r3, r1, r3
 8003568:	441a      	add	r2, r3
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	22ff      	movs	r2, #255	; 0xff
 8003572:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	22ff      	movs	r2, #255	; 0xff
 800357a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d114      	bne.n	80035ae <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	691b      	ldr	r3, [r3, #16]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d01a      	beq.n	80035c2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	3310      	adds	r3, #16
 8003590:	4618      	mov	r0, r3
 8003592:	f001 faed 	bl	8004b70 <xTaskRemoveFromEventList>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d012      	beq.n	80035c2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800359c:	4b0c      	ldr	r3, [pc, #48]	; (80035d0 <xQueueGenericReset+0xcc>)
 800359e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035a2:	601a      	str	r2, [r3, #0]
 80035a4:	f3bf 8f4f 	dsb	sy
 80035a8:	f3bf 8f6f 	isb	sy
 80035ac:	e009      	b.n	80035c2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	3310      	adds	r3, #16
 80035b2:	4618      	mov	r0, r3
 80035b4:	f7ff fef2 	bl	800339c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	3324      	adds	r3, #36	; 0x24
 80035bc:	4618      	mov	r0, r3
 80035be:	f7ff feed 	bl	800339c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80035c2:	f002 fb1f 	bl	8005c04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80035c6:	2301      	movs	r3, #1
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3710      	adds	r7, #16
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	e000ed04 	.word	0xe000ed04

080035d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b08e      	sub	sp, #56	; 0x38
 80035d8:	af02      	add	r7, sp, #8
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]
 80035e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d10a      	bne.n	80035fe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80035e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ec:	f383 8811 	msr	BASEPRI, r3
 80035f0:	f3bf 8f6f 	isb	sy
 80035f4:	f3bf 8f4f 	dsb	sy
 80035f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80035fa:	bf00      	nop
 80035fc:	e7fe      	b.n	80035fc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d10a      	bne.n	800361a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003608:	f383 8811 	msr	BASEPRI, r3
 800360c:	f3bf 8f6f 	isb	sy
 8003610:	f3bf 8f4f 	dsb	sy
 8003614:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003616:	bf00      	nop
 8003618:	e7fe      	b.n	8003618 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d002      	beq.n	8003626 <xQueueGenericCreateStatic+0x52>
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <xQueueGenericCreateStatic+0x56>
 8003626:	2301      	movs	r3, #1
 8003628:	e000      	b.n	800362c <xQueueGenericCreateStatic+0x58>
 800362a:	2300      	movs	r3, #0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d10a      	bne.n	8003646 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003634:	f383 8811 	msr	BASEPRI, r3
 8003638:	f3bf 8f6f 	isb	sy
 800363c:	f3bf 8f4f 	dsb	sy
 8003640:	623b      	str	r3, [r7, #32]
}
 8003642:	bf00      	nop
 8003644:	e7fe      	b.n	8003644 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d102      	bne.n	8003652 <xQueueGenericCreateStatic+0x7e>
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <xQueueGenericCreateStatic+0x82>
 8003652:	2301      	movs	r3, #1
 8003654:	e000      	b.n	8003658 <xQueueGenericCreateStatic+0x84>
 8003656:	2300      	movs	r3, #0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d10a      	bne.n	8003672 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800365c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003660:	f383 8811 	msr	BASEPRI, r3
 8003664:	f3bf 8f6f 	isb	sy
 8003668:	f3bf 8f4f 	dsb	sy
 800366c:	61fb      	str	r3, [r7, #28]
}
 800366e:	bf00      	nop
 8003670:	e7fe      	b.n	8003670 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003672:	2350      	movs	r3, #80	; 0x50
 8003674:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	2b50      	cmp	r3, #80	; 0x50
 800367a:	d00a      	beq.n	8003692 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800367c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003680:	f383 8811 	msr	BASEPRI, r3
 8003684:	f3bf 8f6f 	isb	sy
 8003688:	f3bf 8f4f 	dsb	sy
 800368c:	61bb      	str	r3, [r7, #24]
}
 800368e:	bf00      	nop
 8003690:	e7fe      	b.n	8003690 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003692:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00d      	beq.n	80036ba <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800369e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80036a6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80036aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ac:	9300      	str	r3, [sp, #0]
 80036ae:	4613      	mov	r3, r2
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	68b9      	ldr	r1, [r7, #8]
 80036b4:	68f8      	ldr	r0, [r7, #12]
 80036b6:	f000 f83f 	bl	8003738 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80036ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80036bc:	4618      	mov	r0, r3
 80036be:	3730      	adds	r7, #48	; 0x30
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b08a      	sub	sp, #40	; 0x28
 80036c8:	af02      	add	r7, sp, #8
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	4613      	mov	r3, r2
 80036d0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d10a      	bne.n	80036ee <xQueueGenericCreate+0x2a>
	__asm volatile
 80036d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036dc:	f383 8811 	msr	BASEPRI, r3
 80036e0:	f3bf 8f6f 	isb	sy
 80036e4:	f3bf 8f4f 	dsb	sy
 80036e8:	613b      	str	r3, [r7, #16]
}
 80036ea:	bf00      	nop
 80036ec:	e7fe      	b.n	80036ec <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	68ba      	ldr	r2, [r7, #8]
 80036f2:	fb02 f303 	mul.w	r3, r2, r3
 80036f6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	3350      	adds	r3, #80	; 0x50
 80036fc:	4618      	mov	r0, r3
 80036fe:	f002 fb73 	bl	8005de8 <pvPortMalloc>
 8003702:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d011      	beq.n	800372e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	3350      	adds	r3, #80	; 0x50
 8003712:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800371c:	79fa      	ldrb	r2, [r7, #7]
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	9300      	str	r3, [sp, #0]
 8003722:	4613      	mov	r3, r2
 8003724:	697a      	ldr	r2, [r7, #20]
 8003726:	68b9      	ldr	r1, [r7, #8]
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f000 f805 	bl	8003738 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800372e:	69bb      	ldr	r3, [r7, #24]
	}
 8003730:	4618      	mov	r0, r3
 8003732:	3720      	adds	r7, #32
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	607a      	str	r2, [r7, #4]
 8003744:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d103      	bne.n	8003754 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	69ba      	ldr	r2, [r7, #24]
 8003750:	601a      	str	r2, [r3, #0]
 8003752:	e002      	b.n	800375a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	68ba      	ldr	r2, [r7, #8]
 8003764:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003766:	2101      	movs	r1, #1
 8003768:	69b8      	ldr	r0, [r7, #24]
 800376a:	f7ff fecb 	bl	8003504 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	78fa      	ldrb	r2, [r7, #3]
 8003772:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003776:	bf00      	nop
 8003778:	3710      	adds	r7, #16
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
	...

08003780 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b08e      	sub	sp, #56	; 0x38
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
 800378c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800378e:	2300      	movs	r3, #0
 8003790:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003798:	2b00      	cmp	r3, #0
 800379a:	d10a      	bne.n	80037b2 <xQueueGenericSend+0x32>
	__asm volatile
 800379c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a0:	f383 8811 	msr	BASEPRI, r3
 80037a4:	f3bf 8f6f 	isb	sy
 80037a8:	f3bf 8f4f 	dsb	sy
 80037ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80037ae:	bf00      	nop
 80037b0:	e7fe      	b.n	80037b0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d103      	bne.n	80037c0 <xQueueGenericSend+0x40>
 80037b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d101      	bne.n	80037c4 <xQueueGenericSend+0x44>
 80037c0:	2301      	movs	r3, #1
 80037c2:	e000      	b.n	80037c6 <xQueueGenericSend+0x46>
 80037c4:	2300      	movs	r3, #0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d10a      	bne.n	80037e0 <xQueueGenericSend+0x60>
	__asm volatile
 80037ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ce:	f383 8811 	msr	BASEPRI, r3
 80037d2:	f3bf 8f6f 	isb	sy
 80037d6:	f3bf 8f4f 	dsb	sy
 80037da:	627b      	str	r3, [r7, #36]	; 0x24
}
 80037dc:	bf00      	nop
 80037de:	e7fe      	b.n	80037de <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d103      	bne.n	80037ee <xQueueGenericSend+0x6e>
 80037e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d101      	bne.n	80037f2 <xQueueGenericSend+0x72>
 80037ee:	2301      	movs	r3, #1
 80037f0:	e000      	b.n	80037f4 <xQueueGenericSend+0x74>
 80037f2:	2300      	movs	r3, #0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d10a      	bne.n	800380e <xQueueGenericSend+0x8e>
	__asm volatile
 80037f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037fc:	f383 8811 	msr	BASEPRI, r3
 8003800:	f3bf 8f6f 	isb	sy
 8003804:	f3bf 8f4f 	dsb	sy
 8003808:	623b      	str	r3, [r7, #32]
}
 800380a:	bf00      	nop
 800380c:	e7fe      	b.n	800380c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800380e:	f001 fb6d 	bl	8004eec <xTaskGetSchedulerState>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d102      	bne.n	800381e <xQueueGenericSend+0x9e>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d101      	bne.n	8003822 <xQueueGenericSend+0xa2>
 800381e:	2301      	movs	r3, #1
 8003820:	e000      	b.n	8003824 <xQueueGenericSend+0xa4>
 8003822:	2300      	movs	r3, #0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d10a      	bne.n	800383e <xQueueGenericSend+0xbe>
	__asm volatile
 8003828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800382c:	f383 8811 	msr	BASEPRI, r3
 8003830:	f3bf 8f6f 	isb	sy
 8003834:	f3bf 8f4f 	dsb	sy
 8003838:	61fb      	str	r3, [r7, #28]
}
 800383a:	bf00      	nop
 800383c:	e7fe      	b.n	800383c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800383e:	f002 f9b1 	bl	8005ba4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003844:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800384a:	429a      	cmp	r2, r3
 800384c:	d302      	bcc.n	8003854 <xQueueGenericSend+0xd4>
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	2b02      	cmp	r3, #2
 8003852:	d129      	bne.n	80038a8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	68b9      	ldr	r1, [r7, #8]
 8003858:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800385a:	f000 fbbb 	bl	8003fd4 <prvCopyDataToQueue>
 800385e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003864:	2b00      	cmp	r3, #0
 8003866:	d010      	beq.n	800388a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800386a:	3324      	adds	r3, #36	; 0x24
 800386c:	4618      	mov	r0, r3
 800386e:	f001 f97f 	bl	8004b70 <xTaskRemoveFromEventList>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d013      	beq.n	80038a0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003878:	4b3f      	ldr	r3, [pc, #252]	; (8003978 <xQueueGenericSend+0x1f8>)
 800387a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800387e:	601a      	str	r2, [r3, #0]
 8003880:	f3bf 8f4f 	dsb	sy
 8003884:	f3bf 8f6f 	isb	sy
 8003888:	e00a      	b.n	80038a0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800388a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800388c:	2b00      	cmp	r3, #0
 800388e:	d007      	beq.n	80038a0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003890:	4b39      	ldr	r3, [pc, #228]	; (8003978 <xQueueGenericSend+0x1f8>)
 8003892:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003896:	601a      	str	r2, [r3, #0]
 8003898:	f3bf 8f4f 	dsb	sy
 800389c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80038a0:	f002 f9b0 	bl	8005c04 <vPortExitCritical>
				return pdPASS;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e063      	b.n	8003970 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d103      	bne.n	80038b6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80038ae:	f002 f9a9 	bl	8005c04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80038b2:	2300      	movs	r3, #0
 80038b4:	e05c      	b.n	8003970 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80038b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d106      	bne.n	80038ca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80038bc:	f107 0314 	add.w	r3, r7, #20
 80038c0:	4618      	mov	r0, r3
 80038c2:	f001 f9b9 	bl	8004c38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80038c6:	2301      	movs	r3, #1
 80038c8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80038ca:	f002 f99b 	bl	8005c04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80038ce:	f000 ff2b 	bl	8004728 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80038d2:	f002 f967 	bl	8005ba4 <vPortEnterCritical>
 80038d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80038dc:	b25b      	sxtb	r3, r3
 80038de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e2:	d103      	bne.n	80038ec <xQueueGenericSend+0x16c>
 80038e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038f2:	b25b      	sxtb	r3, r3
 80038f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f8:	d103      	bne.n	8003902 <xQueueGenericSend+0x182>
 80038fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003902:	f002 f97f 	bl	8005c04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003906:	1d3a      	adds	r2, r7, #4
 8003908:	f107 0314 	add.w	r3, r7, #20
 800390c:	4611      	mov	r1, r2
 800390e:	4618      	mov	r0, r3
 8003910:	f001 f9a8 	bl	8004c64 <xTaskCheckForTimeOut>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d124      	bne.n	8003964 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800391a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800391c:	f000 fc52 	bl	80041c4 <prvIsQueueFull>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d018      	beq.n	8003958 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003928:	3310      	adds	r3, #16
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	4611      	mov	r1, r2
 800392e:	4618      	mov	r0, r3
 8003930:	f001 f8ce 	bl	8004ad0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003934:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003936:	f000 fbdd 	bl	80040f4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800393a:	f000 ff03 	bl	8004744 <xTaskResumeAll>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	f47f af7c 	bne.w	800383e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003946:	4b0c      	ldr	r3, [pc, #48]	; (8003978 <xQueueGenericSend+0x1f8>)
 8003948:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800394c:	601a      	str	r2, [r3, #0]
 800394e:	f3bf 8f4f 	dsb	sy
 8003952:	f3bf 8f6f 	isb	sy
 8003956:	e772      	b.n	800383e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003958:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800395a:	f000 fbcb 	bl	80040f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800395e:	f000 fef1 	bl	8004744 <xTaskResumeAll>
 8003962:	e76c      	b.n	800383e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003964:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003966:	f000 fbc5 	bl	80040f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800396a:	f000 feeb 	bl	8004744 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800396e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003970:	4618      	mov	r0, r3
 8003972:	3738      	adds	r7, #56	; 0x38
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	e000ed04 	.word	0xe000ed04

0800397c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b090      	sub	sp, #64	; 0x40
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
 8003988:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800398e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003990:	2b00      	cmp	r3, #0
 8003992:	d10a      	bne.n	80039aa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003998:	f383 8811 	msr	BASEPRI, r3
 800399c:	f3bf 8f6f 	isb	sy
 80039a0:	f3bf 8f4f 	dsb	sy
 80039a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80039a6:	bf00      	nop
 80039a8:	e7fe      	b.n	80039a8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d103      	bne.n	80039b8 <xQueueGenericSendFromISR+0x3c>
 80039b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d101      	bne.n	80039bc <xQueueGenericSendFromISR+0x40>
 80039b8:	2301      	movs	r3, #1
 80039ba:	e000      	b.n	80039be <xQueueGenericSendFromISR+0x42>
 80039bc:	2300      	movs	r3, #0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d10a      	bne.n	80039d8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80039c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c6:	f383 8811 	msr	BASEPRI, r3
 80039ca:	f3bf 8f6f 	isb	sy
 80039ce:	f3bf 8f4f 	dsb	sy
 80039d2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80039d4:	bf00      	nop
 80039d6:	e7fe      	b.n	80039d6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d103      	bne.n	80039e6 <xQueueGenericSendFromISR+0x6a>
 80039de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d101      	bne.n	80039ea <xQueueGenericSendFromISR+0x6e>
 80039e6:	2301      	movs	r3, #1
 80039e8:	e000      	b.n	80039ec <xQueueGenericSendFromISR+0x70>
 80039ea:	2300      	movs	r3, #0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d10a      	bne.n	8003a06 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80039f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f4:	f383 8811 	msr	BASEPRI, r3
 80039f8:	f3bf 8f6f 	isb	sy
 80039fc:	f3bf 8f4f 	dsb	sy
 8003a00:	623b      	str	r3, [r7, #32]
}
 8003a02:	bf00      	nop
 8003a04:	e7fe      	b.n	8003a04 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003a06:	f002 f9af 	bl	8005d68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003a0a:	f3ef 8211 	mrs	r2, BASEPRI
 8003a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a12:	f383 8811 	msr	BASEPRI, r3
 8003a16:	f3bf 8f6f 	isb	sy
 8003a1a:	f3bf 8f4f 	dsb	sy
 8003a1e:	61fa      	str	r2, [r7, #28]
 8003a20:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003a22:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003a24:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d302      	bcc.n	8003a38 <xQueueGenericSendFromISR+0xbc>
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d12f      	bne.n	8003a98 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a46:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003a48:	683a      	ldr	r2, [r7, #0]
 8003a4a:	68b9      	ldr	r1, [r7, #8]
 8003a4c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003a4e:	f000 fac1 	bl	8003fd4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003a52:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a5a:	d112      	bne.n	8003a82 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d016      	beq.n	8003a92 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a66:	3324      	adds	r3, #36	; 0x24
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f001 f881 	bl	8004b70 <xTaskRemoveFromEventList>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d00e      	beq.n	8003a92 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00b      	beq.n	8003a92 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	601a      	str	r2, [r3, #0]
 8003a80:	e007      	b.n	8003a92 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003a82:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003a86:	3301      	adds	r3, #1
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	b25a      	sxtb	r2, r3
 8003a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003a92:	2301      	movs	r3, #1
 8003a94:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003a96:	e001      	b.n	8003a9c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a9e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003aa6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003aa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3740      	adds	r7, #64	; 0x40
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b08e      	sub	sp, #56	; 0x38
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
 8003aba:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d10a      	bne.n	8003adc <xQueueGiveFromISR+0x2a>
	__asm volatile
 8003ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aca:	f383 8811 	msr	BASEPRI, r3
 8003ace:	f3bf 8f6f 	isb	sy
 8003ad2:	f3bf 8f4f 	dsb	sy
 8003ad6:	623b      	str	r3, [r7, #32]
}
 8003ad8:	bf00      	nop
 8003ada:	e7fe      	b.n	8003ada <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d00a      	beq.n	8003afa <xQueueGiveFromISR+0x48>
	__asm volatile
 8003ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae8:	f383 8811 	msr	BASEPRI, r3
 8003aec:	f3bf 8f6f 	isb	sy
 8003af0:	f3bf 8f4f 	dsb	sy
 8003af4:	61fb      	str	r3, [r7, #28]
}
 8003af6:	bf00      	nop
 8003af8:	e7fe      	b.n	8003af8 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d103      	bne.n	8003b0a <xQueueGiveFromISR+0x58>
 8003b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d101      	bne.n	8003b0e <xQueueGiveFromISR+0x5c>
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e000      	b.n	8003b10 <xQueueGiveFromISR+0x5e>
 8003b0e:	2300      	movs	r3, #0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d10a      	bne.n	8003b2a <xQueueGiveFromISR+0x78>
	__asm volatile
 8003b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b18:	f383 8811 	msr	BASEPRI, r3
 8003b1c:	f3bf 8f6f 	isb	sy
 8003b20:	f3bf 8f4f 	dsb	sy
 8003b24:	61bb      	str	r3, [r7, #24]
}
 8003b26:	bf00      	nop
 8003b28:	e7fe      	b.n	8003b28 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003b2a:	f002 f91d 	bl	8005d68 <vPortValidateInterruptPriority>
	__asm volatile
 8003b2e:	f3ef 8211 	mrs	r2, BASEPRI
 8003b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b36:	f383 8811 	msr	BASEPRI, r3
 8003b3a:	f3bf 8f6f 	isb	sy
 8003b3e:	f3bf 8f4f 	dsb	sy
 8003b42:	617a      	str	r2, [r7, #20]
 8003b44:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8003b46:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003b48:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b4e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d22b      	bcs.n	8003bb2 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b66:	1c5a      	adds	r2, r3, #1
 8003b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003b6c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b74:	d112      	bne.n	8003b9c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d016      	beq.n	8003bac <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b80:	3324      	adds	r3, #36	; 0x24
 8003b82:	4618      	mov	r0, r3
 8003b84:	f000 fff4 	bl	8004b70 <xTaskRemoveFromEventList>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00e      	beq.n	8003bac <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d00b      	beq.n	8003bac <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	2201      	movs	r2, #1
 8003b98:	601a      	str	r2, [r3, #0]
 8003b9a:	e007      	b.n	8003bac <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003b9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ba0:	3301      	adds	r3, #1
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	b25a      	sxtb	r2, r3
 8003ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003bac:	2301      	movs	r3, #1
 8003bae:	637b      	str	r3, [r7, #52]	; 0x34
 8003bb0:	e001      	b.n	8003bb6 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	637b      	str	r3, [r7, #52]	; 0x34
 8003bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f383 8811 	msr	BASEPRI, r3
}
 8003bc0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3738      	adds	r7, #56	; 0x38
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b08c      	sub	sp, #48	; 0x30
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d10a      	bne.n	8003bfc <xQueueReceive+0x30>
	__asm volatile
 8003be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bea:	f383 8811 	msr	BASEPRI, r3
 8003bee:	f3bf 8f6f 	isb	sy
 8003bf2:	f3bf 8f4f 	dsb	sy
 8003bf6:	623b      	str	r3, [r7, #32]
}
 8003bf8:	bf00      	nop
 8003bfa:	e7fe      	b.n	8003bfa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d103      	bne.n	8003c0a <xQueueReceive+0x3e>
 8003c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d101      	bne.n	8003c0e <xQueueReceive+0x42>
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e000      	b.n	8003c10 <xQueueReceive+0x44>
 8003c0e:	2300      	movs	r3, #0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d10a      	bne.n	8003c2a <xQueueReceive+0x5e>
	__asm volatile
 8003c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c18:	f383 8811 	msr	BASEPRI, r3
 8003c1c:	f3bf 8f6f 	isb	sy
 8003c20:	f3bf 8f4f 	dsb	sy
 8003c24:	61fb      	str	r3, [r7, #28]
}
 8003c26:	bf00      	nop
 8003c28:	e7fe      	b.n	8003c28 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c2a:	f001 f95f 	bl	8004eec <xTaskGetSchedulerState>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d102      	bne.n	8003c3a <xQueueReceive+0x6e>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d101      	bne.n	8003c3e <xQueueReceive+0x72>
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e000      	b.n	8003c40 <xQueueReceive+0x74>
 8003c3e:	2300      	movs	r3, #0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d10a      	bne.n	8003c5a <xQueueReceive+0x8e>
	__asm volatile
 8003c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c48:	f383 8811 	msr	BASEPRI, r3
 8003c4c:	f3bf 8f6f 	isb	sy
 8003c50:	f3bf 8f4f 	dsb	sy
 8003c54:	61bb      	str	r3, [r7, #24]
}
 8003c56:	bf00      	nop
 8003c58:	e7fe      	b.n	8003c58 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c5a:	f001 ffa3 	bl	8005ba4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c62:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d01f      	beq.n	8003caa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003c6a:	68b9      	ldr	r1, [r7, #8]
 8003c6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c6e:	f000 fa1b 	bl	80040a8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c74:	1e5a      	subs	r2, r3, #1
 8003c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c78:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d00f      	beq.n	8003ca2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c84:	3310      	adds	r3, #16
 8003c86:	4618      	mov	r0, r3
 8003c88:	f000 ff72 	bl	8004b70 <xTaskRemoveFromEventList>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d007      	beq.n	8003ca2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003c92:	4b3d      	ldr	r3, [pc, #244]	; (8003d88 <xQueueReceive+0x1bc>)
 8003c94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c98:	601a      	str	r2, [r3, #0]
 8003c9a:	f3bf 8f4f 	dsb	sy
 8003c9e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003ca2:	f001 ffaf 	bl	8005c04 <vPortExitCritical>
				return pdPASS;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e069      	b.n	8003d7e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d103      	bne.n	8003cb8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003cb0:	f001 ffa8 	bl	8005c04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	e062      	b.n	8003d7e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d106      	bne.n	8003ccc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003cbe:	f107 0310 	add.w	r3, r7, #16
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f000 ffb8 	bl	8004c38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ccc:	f001 ff9a 	bl	8005c04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003cd0:	f000 fd2a 	bl	8004728 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003cd4:	f001 ff66 	bl	8005ba4 <vPortEnterCritical>
 8003cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003cde:	b25b      	sxtb	r3, r3
 8003ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce4:	d103      	bne.n	8003cee <xQueueReceive+0x122>
 8003ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003cf4:	b25b      	sxtb	r3, r3
 8003cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cfa:	d103      	bne.n	8003d04 <xQueueReceive+0x138>
 8003cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d04:	f001 ff7e 	bl	8005c04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d08:	1d3a      	adds	r2, r7, #4
 8003d0a:	f107 0310 	add.w	r3, r7, #16
 8003d0e:	4611      	mov	r1, r2
 8003d10:	4618      	mov	r0, r3
 8003d12:	f000 ffa7 	bl	8004c64 <xTaskCheckForTimeOut>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d123      	bne.n	8003d64 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d1e:	f000 fa3b 	bl	8004198 <prvIsQueueEmpty>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d017      	beq.n	8003d58 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d2a:	3324      	adds	r3, #36	; 0x24
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	4611      	mov	r1, r2
 8003d30:	4618      	mov	r0, r3
 8003d32:	f000 fecd 	bl	8004ad0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003d36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d38:	f000 f9dc 	bl	80040f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003d3c:	f000 fd02 	bl	8004744 <xTaskResumeAll>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d189      	bne.n	8003c5a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003d46:	4b10      	ldr	r3, [pc, #64]	; (8003d88 <xQueueReceive+0x1bc>)
 8003d48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d4c:	601a      	str	r2, [r3, #0]
 8003d4e:	f3bf 8f4f 	dsb	sy
 8003d52:	f3bf 8f6f 	isb	sy
 8003d56:	e780      	b.n	8003c5a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003d58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d5a:	f000 f9cb 	bl	80040f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d5e:	f000 fcf1 	bl	8004744 <xTaskResumeAll>
 8003d62:	e77a      	b.n	8003c5a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003d64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d66:	f000 f9c5 	bl	80040f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d6a:	f000 fceb 	bl	8004744 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d70:	f000 fa12 	bl	8004198 <prvIsQueueEmpty>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	f43f af6f 	beq.w	8003c5a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003d7c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3730      	adds	r7, #48	; 0x30
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	e000ed04 	.word	0xe000ed04

08003d8c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b08e      	sub	sp, #56	; 0x38
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003d96:	2300      	movs	r3, #0
 8003d98:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d10a      	bne.n	8003dbe <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dac:	f383 8811 	msr	BASEPRI, r3
 8003db0:	f3bf 8f6f 	isb	sy
 8003db4:	f3bf 8f4f 	dsb	sy
 8003db8:	623b      	str	r3, [r7, #32]
}
 8003dba:	bf00      	nop
 8003dbc:	e7fe      	b.n	8003dbc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00a      	beq.n	8003ddc <xQueueSemaphoreTake+0x50>
	__asm volatile
 8003dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dca:	f383 8811 	msr	BASEPRI, r3
 8003dce:	f3bf 8f6f 	isb	sy
 8003dd2:	f3bf 8f4f 	dsb	sy
 8003dd6:	61fb      	str	r3, [r7, #28]
}
 8003dd8:	bf00      	nop
 8003dda:	e7fe      	b.n	8003dda <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003ddc:	f001 f886 	bl	8004eec <xTaskGetSchedulerState>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d102      	bne.n	8003dec <xQueueSemaphoreTake+0x60>
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d101      	bne.n	8003df0 <xQueueSemaphoreTake+0x64>
 8003dec:	2301      	movs	r3, #1
 8003dee:	e000      	b.n	8003df2 <xQueueSemaphoreTake+0x66>
 8003df0:	2300      	movs	r3, #0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d10a      	bne.n	8003e0c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8003df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dfa:	f383 8811 	msr	BASEPRI, r3
 8003dfe:	f3bf 8f6f 	isb	sy
 8003e02:	f3bf 8f4f 	dsb	sy
 8003e06:	61bb      	str	r3, [r7, #24]
}
 8003e08:	bf00      	nop
 8003e0a:	e7fe      	b.n	8003e0a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e0c:	f001 feca 	bl	8005ba4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e14:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d024      	beq.n	8003e66 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e1e:	1e5a      	subs	r2, r3, #1
 8003e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e22:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d104      	bne.n	8003e36 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003e2c:	f001 f9d4 	bl	80051d8 <pvTaskIncrementMutexHeldCount>
 8003e30:	4602      	mov	r2, r0
 8003e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e34:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00f      	beq.n	8003e5e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e40:	3310      	adds	r3, #16
 8003e42:	4618      	mov	r0, r3
 8003e44:	f000 fe94 	bl	8004b70 <xTaskRemoveFromEventList>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d007      	beq.n	8003e5e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003e4e:	4b54      	ldr	r3, [pc, #336]	; (8003fa0 <xQueueSemaphoreTake+0x214>)
 8003e50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e54:	601a      	str	r2, [r3, #0]
 8003e56:	f3bf 8f4f 	dsb	sy
 8003e5a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003e5e:	f001 fed1 	bl	8005c04 <vPortExitCritical>
				return pdPASS;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e097      	b.n	8003f96 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d111      	bne.n	8003e90 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00a      	beq.n	8003e88 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8003e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e76:	f383 8811 	msr	BASEPRI, r3
 8003e7a:	f3bf 8f6f 	isb	sy
 8003e7e:	f3bf 8f4f 	dsb	sy
 8003e82:	617b      	str	r3, [r7, #20]
}
 8003e84:	bf00      	nop
 8003e86:	e7fe      	b.n	8003e86 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003e88:	f001 febc 	bl	8005c04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	e082      	b.n	8003f96 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d106      	bne.n	8003ea4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e96:	f107 030c 	add.w	r3, r7, #12
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f000 fecc 	bl	8004c38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ea4:	f001 feae 	bl	8005c04 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ea8:	f000 fc3e 	bl	8004728 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003eac:	f001 fe7a 	bl	8005ba4 <vPortEnterCritical>
 8003eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003eb6:	b25b      	sxtb	r3, r3
 8003eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ebc:	d103      	bne.n	8003ec6 <xQueueSemaphoreTake+0x13a>
 8003ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ec8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ecc:	b25b      	sxtb	r3, r3
 8003ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed2:	d103      	bne.n	8003edc <xQueueSemaphoreTake+0x150>
 8003ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003edc:	f001 fe92 	bl	8005c04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ee0:	463a      	mov	r2, r7
 8003ee2:	f107 030c 	add.w	r3, r7, #12
 8003ee6:	4611      	mov	r1, r2
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f000 febb 	bl	8004c64 <xTaskCheckForTimeOut>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d132      	bne.n	8003f5a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ef4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003ef6:	f000 f94f 	bl	8004198 <prvIsQueueEmpty>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d026      	beq.n	8003f4e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d109      	bne.n	8003f1c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003f08:	f001 fe4c 	bl	8005ba4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	4618      	mov	r0, r3
 8003f12:	f001 f809 	bl	8004f28 <xTaskPriorityInherit>
 8003f16:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003f18:	f001 fe74 	bl	8005c04 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f1e:	3324      	adds	r3, #36	; 0x24
 8003f20:	683a      	ldr	r2, [r7, #0]
 8003f22:	4611      	mov	r1, r2
 8003f24:	4618      	mov	r0, r3
 8003f26:	f000 fdd3 	bl	8004ad0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003f2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f2c:	f000 f8e2 	bl	80040f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003f30:	f000 fc08 	bl	8004744 <xTaskResumeAll>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	f47f af68 	bne.w	8003e0c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003f3c:	4b18      	ldr	r3, [pc, #96]	; (8003fa0 <xQueueSemaphoreTake+0x214>)
 8003f3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f42:	601a      	str	r2, [r3, #0]
 8003f44:	f3bf 8f4f 	dsb	sy
 8003f48:	f3bf 8f6f 	isb	sy
 8003f4c:	e75e      	b.n	8003e0c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003f4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f50:	f000 f8d0 	bl	80040f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f54:	f000 fbf6 	bl	8004744 <xTaskResumeAll>
 8003f58:	e758      	b.n	8003e0c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003f5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f5c:	f000 f8ca 	bl	80040f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f60:	f000 fbf0 	bl	8004744 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f66:	f000 f917 	bl	8004198 <prvIsQueueEmpty>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	f43f af4d 	beq.w	8003e0c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d00d      	beq.n	8003f94 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8003f78:	f001 fe14 	bl	8005ba4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003f7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f7e:	f000 f811 	bl	8003fa4 <prvGetDisinheritPriorityAfterTimeout>
 8003f82:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f001 f8a2 	bl	80050d4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003f90:	f001 fe38 	bl	8005c04 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003f94:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3738      	adds	r7, #56	; 0x38
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	e000ed04 	.word	0xe000ed04

08003fa4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b085      	sub	sp, #20
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d006      	beq.n	8003fc2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8003fbe:	60fb      	str	r3, [r7, #12]
 8003fc0:	e001      	b.n	8003fc6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
	}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3714      	adds	r7, #20
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b086      	sub	sp, #24
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	60b9      	str	r1, [r7, #8]
 8003fde:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10d      	bne.n	800400e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d14d      	bne.n	8004096 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	4618      	mov	r0, r3
 8004000:	f000 fffa 	bl	8004ff8 <xTaskPriorityDisinherit>
 8004004:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2200      	movs	r2, #0
 800400a:	609a      	str	r2, [r3, #8]
 800400c:	e043      	b.n	8004096 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d119      	bne.n	8004048 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6858      	ldr	r0, [r3, #4]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401c:	461a      	mov	r2, r3
 800401e:	68b9      	ldr	r1, [r7, #8]
 8004020:	f002 fcec 	bl	80069fc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	685a      	ldr	r2, [r3, #4]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402c:	441a      	add	r2, r3
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	685a      	ldr	r2, [r3, #4]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	429a      	cmp	r2, r3
 800403c:	d32b      	bcc.n	8004096 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	605a      	str	r2, [r3, #4]
 8004046:	e026      	b.n	8004096 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	68d8      	ldr	r0, [r3, #12]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004050:	461a      	mov	r2, r3
 8004052:	68b9      	ldr	r1, [r7, #8]
 8004054:	f002 fcd2 	bl	80069fc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	68da      	ldr	r2, [r3, #12]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004060:	425b      	negs	r3, r3
 8004062:	441a      	add	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	68da      	ldr	r2, [r3, #12]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	429a      	cmp	r2, r3
 8004072:	d207      	bcs.n	8004084 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	689a      	ldr	r2, [r3, #8]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407c:	425b      	negs	r3, r3
 800407e:	441a      	add	r2, r3
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b02      	cmp	r3, #2
 8004088:	d105      	bne.n	8004096 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d002      	beq.n	8004096 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	3b01      	subs	r3, #1
 8004094:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	1c5a      	adds	r2, r3, #1
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800409e:	697b      	ldr	r3, [r7, #20]
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3718      	adds	r7, #24
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d018      	beq.n	80040ec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	68da      	ldr	r2, [r3, #12]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c2:	441a      	add	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	68da      	ldr	r2, [r3, #12]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d303      	bcc.n	80040dc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	68d9      	ldr	r1, [r3, #12]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e4:	461a      	mov	r2, r3
 80040e6:	6838      	ldr	r0, [r7, #0]
 80040e8:	f002 fc88 	bl	80069fc <memcpy>
	}
}
 80040ec:	bf00      	nop
 80040ee:	3708      	adds	r7, #8
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80040fc:	f001 fd52 	bl	8005ba4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004106:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004108:	e011      	b.n	800412e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410e:	2b00      	cmp	r3, #0
 8004110:	d012      	beq.n	8004138 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	3324      	adds	r3, #36	; 0x24
 8004116:	4618      	mov	r0, r3
 8004118:	f000 fd2a 	bl	8004b70 <xTaskRemoveFromEventList>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d001      	beq.n	8004126 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004122:	f000 fe01 	bl	8004d28 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004126:	7bfb      	ldrb	r3, [r7, #15]
 8004128:	3b01      	subs	r3, #1
 800412a:	b2db      	uxtb	r3, r3
 800412c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800412e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004132:	2b00      	cmp	r3, #0
 8004134:	dce9      	bgt.n	800410a <prvUnlockQueue+0x16>
 8004136:	e000      	b.n	800413a <prvUnlockQueue+0x46>
					break;
 8004138:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	22ff      	movs	r2, #255	; 0xff
 800413e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004142:	f001 fd5f 	bl	8005c04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004146:	f001 fd2d 	bl	8005ba4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004150:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004152:	e011      	b.n	8004178 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d012      	beq.n	8004182 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	3310      	adds	r3, #16
 8004160:	4618      	mov	r0, r3
 8004162:	f000 fd05 	bl	8004b70 <xTaskRemoveFromEventList>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d001      	beq.n	8004170 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800416c:	f000 fddc 	bl	8004d28 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004170:	7bbb      	ldrb	r3, [r7, #14]
 8004172:	3b01      	subs	r3, #1
 8004174:	b2db      	uxtb	r3, r3
 8004176:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004178:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800417c:	2b00      	cmp	r3, #0
 800417e:	dce9      	bgt.n	8004154 <prvUnlockQueue+0x60>
 8004180:	e000      	b.n	8004184 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004182:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	22ff      	movs	r2, #255	; 0xff
 8004188:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800418c:	f001 fd3a 	bl	8005c04 <vPortExitCritical>
}
 8004190:	bf00      	nop
 8004192:	3710      	adds	r7, #16
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80041a0:	f001 fd00 	bl	8005ba4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d102      	bne.n	80041b2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80041ac:	2301      	movs	r3, #1
 80041ae:	60fb      	str	r3, [r7, #12]
 80041b0:	e001      	b.n	80041b6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80041b2:	2300      	movs	r3, #0
 80041b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80041b6:	f001 fd25 	bl	8005c04 <vPortExitCritical>

	return xReturn;
 80041ba:	68fb      	ldr	r3, [r7, #12]
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3710      	adds	r7, #16
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80041cc:	f001 fcea 	bl	8005ba4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041d8:	429a      	cmp	r2, r3
 80041da:	d102      	bne.n	80041e2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80041dc:	2301      	movs	r3, #1
 80041de:	60fb      	str	r3, [r7, #12]
 80041e0:	e001      	b.n	80041e6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80041e2:	2300      	movs	r3, #0
 80041e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80041e6:	f001 fd0d 	bl	8005c04 <vPortExitCritical>

	return xReturn;
 80041ea:	68fb      	ldr	r3, [r7, #12]
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3710      	adds	r7, #16
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80041f4:	b480      	push	{r7}
 80041f6:	b085      	sub	sp, #20
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80041fe:	2300      	movs	r3, #0
 8004200:	60fb      	str	r3, [r7, #12]
 8004202:	e014      	b.n	800422e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004204:	4a0f      	ldr	r2, [pc, #60]	; (8004244 <vQueueAddToRegistry+0x50>)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d10b      	bne.n	8004228 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004210:	490c      	ldr	r1, [pc, #48]	; (8004244 <vQueueAddToRegistry+0x50>)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	683a      	ldr	r2, [r7, #0]
 8004216:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800421a:	4a0a      	ldr	r2, [pc, #40]	; (8004244 <vQueueAddToRegistry+0x50>)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	00db      	lsls	r3, r3, #3
 8004220:	4413      	add	r3, r2
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004226:	e006      	b.n	8004236 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	3301      	adds	r3, #1
 800422c:	60fb      	str	r3, [r7, #12]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2b07      	cmp	r3, #7
 8004232:	d9e7      	bls.n	8004204 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004234:	bf00      	nop
 8004236:	bf00      	nop
 8004238:	3714      	adds	r7, #20
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	2000198c 	.word	0x2000198c

08004248 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004248:	b580      	push	{r7, lr}
 800424a:	b086      	sub	sp, #24
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004258:	f001 fca4 	bl	8005ba4 <vPortEnterCritical>
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004262:	b25b      	sxtb	r3, r3
 8004264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004268:	d103      	bne.n	8004272 <vQueueWaitForMessageRestricted+0x2a>
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004278:	b25b      	sxtb	r3, r3
 800427a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800427e:	d103      	bne.n	8004288 <vQueueWaitForMessageRestricted+0x40>
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004288:	f001 fcbc 	bl	8005c04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004290:	2b00      	cmp	r3, #0
 8004292:	d106      	bne.n	80042a2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	3324      	adds	r3, #36	; 0x24
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	68b9      	ldr	r1, [r7, #8]
 800429c:	4618      	mov	r0, r3
 800429e:	f000 fc3b 	bl	8004b18 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80042a2:	6978      	ldr	r0, [r7, #20]
 80042a4:	f7ff ff26 	bl	80040f4 <prvUnlockQueue>
	}
 80042a8:	bf00      	nop
 80042aa:	3718      	adds	r7, #24
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b08e      	sub	sp, #56	; 0x38
 80042b4:	af04      	add	r7, sp, #16
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	607a      	str	r2, [r7, #4]
 80042bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80042be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d10a      	bne.n	80042da <xTaskCreateStatic+0x2a>
	__asm volatile
 80042c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c8:	f383 8811 	msr	BASEPRI, r3
 80042cc:	f3bf 8f6f 	isb	sy
 80042d0:	f3bf 8f4f 	dsb	sy
 80042d4:	623b      	str	r3, [r7, #32]
}
 80042d6:	bf00      	nop
 80042d8:	e7fe      	b.n	80042d8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80042da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d10a      	bne.n	80042f6 <xTaskCreateStatic+0x46>
	__asm volatile
 80042e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e4:	f383 8811 	msr	BASEPRI, r3
 80042e8:	f3bf 8f6f 	isb	sy
 80042ec:	f3bf 8f4f 	dsb	sy
 80042f0:	61fb      	str	r3, [r7, #28]
}
 80042f2:	bf00      	nop
 80042f4:	e7fe      	b.n	80042f4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80042f6:	235c      	movs	r3, #92	; 0x5c
 80042f8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	2b5c      	cmp	r3, #92	; 0x5c
 80042fe:	d00a      	beq.n	8004316 <xTaskCreateStatic+0x66>
	__asm volatile
 8004300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004304:	f383 8811 	msr	BASEPRI, r3
 8004308:	f3bf 8f6f 	isb	sy
 800430c:	f3bf 8f4f 	dsb	sy
 8004310:	61bb      	str	r3, [r7, #24]
}
 8004312:	bf00      	nop
 8004314:	e7fe      	b.n	8004314 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004316:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800431a:	2b00      	cmp	r3, #0
 800431c:	d01e      	beq.n	800435c <xTaskCreateStatic+0xac>
 800431e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004320:	2b00      	cmp	r3, #0
 8004322:	d01b      	beq.n	800435c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004326:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800432c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800432e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004330:	2202      	movs	r2, #2
 8004332:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004336:	2300      	movs	r3, #0
 8004338:	9303      	str	r3, [sp, #12]
 800433a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433c:	9302      	str	r3, [sp, #8]
 800433e:	f107 0314 	add.w	r3, r7, #20
 8004342:	9301      	str	r3, [sp, #4]
 8004344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004346:	9300      	str	r3, [sp, #0]
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	68b9      	ldr	r1, [r7, #8]
 800434e:	68f8      	ldr	r0, [r7, #12]
 8004350:	f000 f850 	bl	80043f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004354:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004356:	f000 f8dd 	bl	8004514 <prvAddNewTaskToReadyList>
 800435a:	e001      	b.n	8004360 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800435c:	2300      	movs	r3, #0
 800435e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004360:	697b      	ldr	r3, [r7, #20]
	}
 8004362:	4618      	mov	r0, r3
 8004364:	3728      	adds	r7, #40	; 0x28
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}

0800436a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800436a:	b580      	push	{r7, lr}
 800436c:	b08c      	sub	sp, #48	; 0x30
 800436e:	af04      	add	r7, sp, #16
 8004370:	60f8      	str	r0, [r7, #12]
 8004372:	60b9      	str	r1, [r7, #8]
 8004374:	603b      	str	r3, [r7, #0]
 8004376:	4613      	mov	r3, r2
 8004378:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800437a:	88fb      	ldrh	r3, [r7, #6]
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	4618      	mov	r0, r3
 8004380:	f001 fd32 	bl	8005de8 <pvPortMalloc>
 8004384:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d00e      	beq.n	80043aa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800438c:	205c      	movs	r0, #92	; 0x5c
 800438e:	f001 fd2b 	bl	8005de8 <pvPortMalloc>
 8004392:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d003      	beq.n	80043a2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	697a      	ldr	r2, [r7, #20]
 800439e:	631a      	str	r2, [r3, #48]	; 0x30
 80043a0:	e005      	b.n	80043ae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80043a2:	6978      	ldr	r0, [r7, #20]
 80043a4:	f001 fdec 	bl	8005f80 <vPortFree>
 80043a8:	e001      	b.n	80043ae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80043aa:	2300      	movs	r3, #0
 80043ac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d017      	beq.n	80043e4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80043bc:	88fa      	ldrh	r2, [r7, #6]
 80043be:	2300      	movs	r3, #0
 80043c0:	9303      	str	r3, [sp, #12]
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	9302      	str	r3, [sp, #8]
 80043c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c8:	9301      	str	r3, [sp, #4]
 80043ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043cc:	9300      	str	r3, [sp, #0]
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	68b9      	ldr	r1, [r7, #8]
 80043d2:	68f8      	ldr	r0, [r7, #12]
 80043d4:	f000 f80e 	bl	80043f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80043d8:	69f8      	ldr	r0, [r7, #28]
 80043da:	f000 f89b 	bl	8004514 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80043de:	2301      	movs	r3, #1
 80043e0:	61bb      	str	r3, [r7, #24]
 80043e2:	e002      	b.n	80043ea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80043e4:	f04f 33ff 	mov.w	r3, #4294967295
 80043e8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80043ea:	69bb      	ldr	r3, [r7, #24]
	}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3720      	adds	r7, #32
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b088      	sub	sp, #32
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	607a      	str	r2, [r7, #4]
 8004400:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004404:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	461a      	mov	r2, r3
 800440c:	21a5      	movs	r1, #165	; 0xa5
 800440e:	f002 fb03 	bl	8006a18 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004414:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800441c:	3b01      	subs	r3, #1
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	4413      	add	r3, r2
 8004422:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	f023 0307 	bic.w	r3, r3, #7
 800442a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	f003 0307 	and.w	r3, r3, #7
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00a      	beq.n	800444c <prvInitialiseNewTask+0x58>
	__asm volatile
 8004436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800443a:	f383 8811 	msr	BASEPRI, r3
 800443e:	f3bf 8f6f 	isb	sy
 8004442:	f3bf 8f4f 	dsb	sy
 8004446:	617b      	str	r3, [r7, #20]
}
 8004448:	bf00      	nop
 800444a:	e7fe      	b.n	800444a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d01f      	beq.n	8004492 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004452:	2300      	movs	r3, #0
 8004454:	61fb      	str	r3, [r7, #28]
 8004456:	e012      	b.n	800447e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004458:	68ba      	ldr	r2, [r7, #8]
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	4413      	add	r3, r2
 800445e:	7819      	ldrb	r1, [r3, #0]
 8004460:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	4413      	add	r3, r2
 8004466:	3334      	adds	r3, #52	; 0x34
 8004468:	460a      	mov	r2, r1
 800446a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800446c:	68ba      	ldr	r2, [r7, #8]
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	4413      	add	r3, r2
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d006      	beq.n	8004486 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	3301      	adds	r3, #1
 800447c:	61fb      	str	r3, [r7, #28]
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	2b0f      	cmp	r3, #15
 8004482:	d9e9      	bls.n	8004458 <prvInitialiseNewTask+0x64>
 8004484:	e000      	b.n	8004488 <prvInitialiseNewTask+0x94>
			{
				break;
 8004486:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800448a:	2200      	movs	r2, #0
 800448c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004490:	e003      	b.n	800449a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004494:	2200      	movs	r2, #0
 8004496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800449a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800449c:	2b37      	cmp	r3, #55	; 0x37
 800449e:	d901      	bls.n	80044a4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80044a0:	2337      	movs	r3, #55	; 0x37
 80044a2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80044a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044a8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80044aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044ae:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80044b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b2:	2200      	movs	r2, #0
 80044b4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80044b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b8:	3304      	adds	r3, #4
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7fe ff8e 	bl	80033dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80044c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c2:	3318      	adds	r3, #24
 80044c4:	4618      	mov	r0, r3
 80044c6:	f7fe ff89 	bl	80033dc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80044ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044ce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80044d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80044da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044de:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80044e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e2:	2200      	movs	r2, #0
 80044e4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80044e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80044ee:	683a      	ldr	r2, [r7, #0]
 80044f0:	68f9      	ldr	r1, [r7, #12]
 80044f2:	69b8      	ldr	r0, [r7, #24]
 80044f4:	f001 fa26 	bl	8005944 <pxPortInitialiseStack>
 80044f8:	4602      	mov	r2, r0
 80044fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044fc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80044fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004500:	2b00      	cmp	r3, #0
 8004502:	d002      	beq.n	800450a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004506:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004508:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800450a:	bf00      	nop
 800450c:	3720      	adds	r7, #32
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
	...

08004514 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800451c:	f001 fb42 	bl	8005ba4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004520:	4b2d      	ldr	r3, [pc, #180]	; (80045d8 <prvAddNewTaskToReadyList+0xc4>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	3301      	adds	r3, #1
 8004526:	4a2c      	ldr	r2, [pc, #176]	; (80045d8 <prvAddNewTaskToReadyList+0xc4>)
 8004528:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800452a:	4b2c      	ldr	r3, [pc, #176]	; (80045dc <prvAddNewTaskToReadyList+0xc8>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d109      	bne.n	8004546 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004532:	4a2a      	ldr	r2, [pc, #168]	; (80045dc <prvAddNewTaskToReadyList+0xc8>)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004538:	4b27      	ldr	r3, [pc, #156]	; (80045d8 <prvAddNewTaskToReadyList+0xc4>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d110      	bne.n	8004562 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004540:	f000 fc16 	bl	8004d70 <prvInitialiseTaskLists>
 8004544:	e00d      	b.n	8004562 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004546:	4b26      	ldr	r3, [pc, #152]	; (80045e0 <prvAddNewTaskToReadyList+0xcc>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d109      	bne.n	8004562 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800454e:	4b23      	ldr	r3, [pc, #140]	; (80045dc <prvAddNewTaskToReadyList+0xc8>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004558:	429a      	cmp	r2, r3
 800455a:	d802      	bhi.n	8004562 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800455c:	4a1f      	ldr	r2, [pc, #124]	; (80045dc <prvAddNewTaskToReadyList+0xc8>)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004562:	4b20      	ldr	r3, [pc, #128]	; (80045e4 <prvAddNewTaskToReadyList+0xd0>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	3301      	adds	r3, #1
 8004568:	4a1e      	ldr	r2, [pc, #120]	; (80045e4 <prvAddNewTaskToReadyList+0xd0>)
 800456a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800456c:	4b1d      	ldr	r3, [pc, #116]	; (80045e4 <prvAddNewTaskToReadyList+0xd0>)
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004578:	4b1b      	ldr	r3, [pc, #108]	; (80045e8 <prvAddNewTaskToReadyList+0xd4>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	429a      	cmp	r2, r3
 800457e:	d903      	bls.n	8004588 <prvAddNewTaskToReadyList+0x74>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004584:	4a18      	ldr	r2, [pc, #96]	; (80045e8 <prvAddNewTaskToReadyList+0xd4>)
 8004586:	6013      	str	r3, [r2, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800458c:	4613      	mov	r3, r2
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	4413      	add	r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	4a15      	ldr	r2, [pc, #84]	; (80045ec <prvAddNewTaskToReadyList+0xd8>)
 8004596:	441a      	add	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	3304      	adds	r3, #4
 800459c:	4619      	mov	r1, r3
 800459e:	4610      	mov	r0, r2
 80045a0:	f7fe ff29 	bl	80033f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80045a4:	f001 fb2e 	bl	8005c04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80045a8:	4b0d      	ldr	r3, [pc, #52]	; (80045e0 <prvAddNewTaskToReadyList+0xcc>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d00e      	beq.n	80045ce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80045b0:	4b0a      	ldr	r3, [pc, #40]	; (80045dc <prvAddNewTaskToReadyList+0xc8>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d207      	bcs.n	80045ce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80045be:	4b0c      	ldr	r3, [pc, #48]	; (80045f0 <prvAddNewTaskToReadyList+0xdc>)
 80045c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045c4:	601a      	str	r2, [r3, #0]
 80045c6:	f3bf 8f4f 	dsb	sy
 80045ca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045ce:	bf00      	nop
 80045d0:	3708      	adds	r7, #8
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	20000bc8 	.word	0x20000bc8
 80045dc:	200006f4 	.word	0x200006f4
 80045e0:	20000bd4 	.word	0x20000bd4
 80045e4:	20000be4 	.word	0x20000be4
 80045e8:	20000bd0 	.word	0x20000bd0
 80045ec:	200006f8 	.word	0x200006f8
 80045f0:	e000ed04 	.word	0xe000ed04

080045f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80045fc:	2300      	movs	r3, #0
 80045fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d017      	beq.n	8004636 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004606:	4b13      	ldr	r3, [pc, #76]	; (8004654 <vTaskDelay+0x60>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00a      	beq.n	8004624 <vTaskDelay+0x30>
	__asm volatile
 800460e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004612:	f383 8811 	msr	BASEPRI, r3
 8004616:	f3bf 8f6f 	isb	sy
 800461a:	f3bf 8f4f 	dsb	sy
 800461e:	60bb      	str	r3, [r7, #8]
}
 8004620:	bf00      	nop
 8004622:	e7fe      	b.n	8004622 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004624:	f000 f880 	bl	8004728 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004628:	2100      	movs	r1, #0
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 fde8 	bl	8005200 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004630:	f000 f888 	bl	8004744 <xTaskResumeAll>
 8004634:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d107      	bne.n	800464c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800463c:	4b06      	ldr	r3, [pc, #24]	; (8004658 <vTaskDelay+0x64>)
 800463e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004642:	601a      	str	r2, [r3, #0]
 8004644:	f3bf 8f4f 	dsb	sy
 8004648:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800464c:	bf00      	nop
 800464e:	3710      	adds	r7, #16
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}
 8004654:	20000bf0 	.word	0x20000bf0
 8004658:	e000ed04 	.word	0xe000ed04

0800465c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b08a      	sub	sp, #40	; 0x28
 8004660:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004662:	2300      	movs	r3, #0
 8004664:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004666:	2300      	movs	r3, #0
 8004668:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800466a:	463a      	mov	r2, r7
 800466c:	1d39      	adds	r1, r7, #4
 800466e:	f107 0308 	add.w	r3, r7, #8
 8004672:	4618      	mov	r0, r3
 8004674:	f7fe fe5e 	bl	8003334 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004678:	6839      	ldr	r1, [r7, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	68ba      	ldr	r2, [r7, #8]
 800467e:	9202      	str	r2, [sp, #8]
 8004680:	9301      	str	r3, [sp, #4]
 8004682:	2300      	movs	r3, #0
 8004684:	9300      	str	r3, [sp, #0]
 8004686:	2300      	movs	r3, #0
 8004688:	460a      	mov	r2, r1
 800468a:	4921      	ldr	r1, [pc, #132]	; (8004710 <vTaskStartScheduler+0xb4>)
 800468c:	4821      	ldr	r0, [pc, #132]	; (8004714 <vTaskStartScheduler+0xb8>)
 800468e:	f7ff fe0f 	bl	80042b0 <xTaskCreateStatic>
 8004692:	4603      	mov	r3, r0
 8004694:	4a20      	ldr	r2, [pc, #128]	; (8004718 <vTaskStartScheduler+0xbc>)
 8004696:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004698:	4b1f      	ldr	r3, [pc, #124]	; (8004718 <vTaskStartScheduler+0xbc>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d002      	beq.n	80046a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80046a0:	2301      	movs	r3, #1
 80046a2:	617b      	str	r3, [r7, #20]
 80046a4:	e001      	b.n	80046aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80046a6:	2300      	movs	r3, #0
 80046a8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d102      	bne.n	80046b6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80046b0:	f000 fdfa 	bl	80052a8 <xTimerCreateTimerTask>
 80046b4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d116      	bne.n	80046ea <vTaskStartScheduler+0x8e>
	__asm volatile
 80046bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c0:	f383 8811 	msr	BASEPRI, r3
 80046c4:	f3bf 8f6f 	isb	sy
 80046c8:	f3bf 8f4f 	dsb	sy
 80046cc:	613b      	str	r3, [r7, #16]
}
 80046ce:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80046d0:	4b12      	ldr	r3, [pc, #72]	; (800471c <vTaskStartScheduler+0xc0>)
 80046d2:	f04f 32ff 	mov.w	r2, #4294967295
 80046d6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80046d8:	4b11      	ldr	r3, [pc, #68]	; (8004720 <vTaskStartScheduler+0xc4>)
 80046da:	2201      	movs	r2, #1
 80046dc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80046de:	4b11      	ldr	r3, [pc, #68]	; (8004724 <vTaskStartScheduler+0xc8>)
 80046e0:	2200      	movs	r2, #0
 80046e2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80046e4:	f001 f9bc 	bl	8005a60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80046e8:	e00e      	b.n	8004708 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f0:	d10a      	bne.n	8004708 <vTaskStartScheduler+0xac>
	__asm volatile
 80046f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f6:	f383 8811 	msr	BASEPRI, r3
 80046fa:	f3bf 8f6f 	isb	sy
 80046fe:	f3bf 8f4f 	dsb	sy
 8004702:	60fb      	str	r3, [r7, #12]
}
 8004704:	bf00      	nop
 8004706:	e7fe      	b.n	8004706 <vTaskStartScheduler+0xaa>
}
 8004708:	bf00      	nop
 800470a:	3718      	adds	r7, #24
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}
 8004710:	08006a5c 	.word	0x08006a5c
 8004714:	08004d41 	.word	0x08004d41
 8004718:	20000bec 	.word	0x20000bec
 800471c:	20000be8 	.word	0x20000be8
 8004720:	20000bd4 	.word	0x20000bd4
 8004724:	20000bcc 	.word	0x20000bcc

08004728 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004728:	b480      	push	{r7}
 800472a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800472c:	4b04      	ldr	r3, [pc, #16]	; (8004740 <vTaskSuspendAll+0x18>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	3301      	adds	r3, #1
 8004732:	4a03      	ldr	r2, [pc, #12]	; (8004740 <vTaskSuspendAll+0x18>)
 8004734:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004736:	bf00      	nop
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr
 8004740:	20000bf0 	.word	0x20000bf0

08004744 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800474a:	2300      	movs	r3, #0
 800474c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800474e:	2300      	movs	r3, #0
 8004750:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004752:	4b42      	ldr	r3, [pc, #264]	; (800485c <xTaskResumeAll+0x118>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d10a      	bne.n	8004770 <xTaskResumeAll+0x2c>
	__asm volatile
 800475a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800475e:	f383 8811 	msr	BASEPRI, r3
 8004762:	f3bf 8f6f 	isb	sy
 8004766:	f3bf 8f4f 	dsb	sy
 800476a:	603b      	str	r3, [r7, #0]
}
 800476c:	bf00      	nop
 800476e:	e7fe      	b.n	800476e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004770:	f001 fa18 	bl	8005ba4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004774:	4b39      	ldr	r3, [pc, #228]	; (800485c <xTaskResumeAll+0x118>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	3b01      	subs	r3, #1
 800477a:	4a38      	ldr	r2, [pc, #224]	; (800485c <xTaskResumeAll+0x118>)
 800477c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800477e:	4b37      	ldr	r3, [pc, #220]	; (800485c <xTaskResumeAll+0x118>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d162      	bne.n	800484c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004786:	4b36      	ldr	r3, [pc, #216]	; (8004860 <xTaskResumeAll+0x11c>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d05e      	beq.n	800484c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800478e:	e02f      	b.n	80047f0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004790:	4b34      	ldr	r3, [pc, #208]	; (8004864 <xTaskResumeAll+0x120>)
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	3318      	adds	r3, #24
 800479c:	4618      	mov	r0, r3
 800479e:	f7fe fe87 	bl	80034b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	3304      	adds	r3, #4
 80047a6:	4618      	mov	r0, r3
 80047a8:	f7fe fe82 	bl	80034b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047b0:	4b2d      	ldr	r3, [pc, #180]	; (8004868 <xTaskResumeAll+0x124>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d903      	bls.n	80047c0 <xTaskResumeAll+0x7c>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047bc:	4a2a      	ldr	r2, [pc, #168]	; (8004868 <xTaskResumeAll+0x124>)
 80047be:	6013      	str	r3, [r2, #0]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047c4:	4613      	mov	r3, r2
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	4413      	add	r3, r2
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	4a27      	ldr	r2, [pc, #156]	; (800486c <xTaskResumeAll+0x128>)
 80047ce:	441a      	add	r2, r3
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	3304      	adds	r3, #4
 80047d4:	4619      	mov	r1, r3
 80047d6:	4610      	mov	r0, r2
 80047d8:	f7fe fe0d 	bl	80033f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047e0:	4b23      	ldr	r3, [pc, #140]	; (8004870 <xTaskResumeAll+0x12c>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d302      	bcc.n	80047f0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80047ea:	4b22      	ldr	r3, [pc, #136]	; (8004874 <xTaskResumeAll+0x130>)
 80047ec:	2201      	movs	r2, #1
 80047ee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80047f0:	4b1c      	ldr	r3, [pc, #112]	; (8004864 <xTaskResumeAll+0x120>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d1cb      	bne.n	8004790 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d001      	beq.n	8004802 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80047fe:	f000 fb55 	bl	8004eac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004802:	4b1d      	ldr	r3, [pc, #116]	; (8004878 <xTaskResumeAll+0x134>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d010      	beq.n	8004830 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800480e:	f000 f847 	bl	80048a0 <xTaskIncrementTick>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d002      	beq.n	800481e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004818:	4b16      	ldr	r3, [pc, #88]	; (8004874 <xTaskResumeAll+0x130>)
 800481a:	2201      	movs	r2, #1
 800481c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	3b01      	subs	r3, #1
 8004822:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d1f1      	bne.n	800480e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800482a:	4b13      	ldr	r3, [pc, #76]	; (8004878 <xTaskResumeAll+0x134>)
 800482c:	2200      	movs	r2, #0
 800482e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004830:	4b10      	ldr	r3, [pc, #64]	; (8004874 <xTaskResumeAll+0x130>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d009      	beq.n	800484c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004838:	2301      	movs	r3, #1
 800483a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800483c:	4b0f      	ldr	r3, [pc, #60]	; (800487c <xTaskResumeAll+0x138>)
 800483e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004842:	601a      	str	r2, [r3, #0]
 8004844:	f3bf 8f4f 	dsb	sy
 8004848:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800484c:	f001 f9da 	bl	8005c04 <vPortExitCritical>

	return xAlreadyYielded;
 8004850:	68bb      	ldr	r3, [r7, #8]
}
 8004852:	4618      	mov	r0, r3
 8004854:	3710      	adds	r7, #16
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	20000bf0 	.word	0x20000bf0
 8004860:	20000bc8 	.word	0x20000bc8
 8004864:	20000b88 	.word	0x20000b88
 8004868:	20000bd0 	.word	0x20000bd0
 800486c:	200006f8 	.word	0x200006f8
 8004870:	200006f4 	.word	0x200006f4
 8004874:	20000bdc 	.word	0x20000bdc
 8004878:	20000bd8 	.word	0x20000bd8
 800487c:	e000ed04 	.word	0xe000ed04

08004880 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004886:	4b05      	ldr	r3, [pc, #20]	; (800489c <xTaskGetTickCount+0x1c>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800488c:	687b      	ldr	r3, [r7, #4]
}
 800488e:	4618      	mov	r0, r3
 8004890:	370c      	adds	r7, #12
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr
 800489a:	bf00      	nop
 800489c:	20000bcc 	.word	0x20000bcc

080048a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b086      	sub	sp, #24
 80048a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80048a6:	2300      	movs	r3, #0
 80048a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048aa:	4b4f      	ldr	r3, [pc, #316]	; (80049e8 <xTaskIncrementTick+0x148>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	f040 808f 	bne.w	80049d2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80048b4:	4b4d      	ldr	r3, [pc, #308]	; (80049ec <xTaskIncrementTick+0x14c>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	3301      	adds	r3, #1
 80048ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80048bc:	4a4b      	ldr	r2, [pc, #300]	; (80049ec <xTaskIncrementTick+0x14c>)
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d120      	bne.n	800490a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80048c8:	4b49      	ldr	r3, [pc, #292]	; (80049f0 <xTaskIncrementTick+0x150>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00a      	beq.n	80048e8 <xTaskIncrementTick+0x48>
	__asm volatile
 80048d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d6:	f383 8811 	msr	BASEPRI, r3
 80048da:	f3bf 8f6f 	isb	sy
 80048de:	f3bf 8f4f 	dsb	sy
 80048e2:	603b      	str	r3, [r7, #0]
}
 80048e4:	bf00      	nop
 80048e6:	e7fe      	b.n	80048e6 <xTaskIncrementTick+0x46>
 80048e8:	4b41      	ldr	r3, [pc, #260]	; (80049f0 <xTaskIncrementTick+0x150>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	60fb      	str	r3, [r7, #12]
 80048ee:	4b41      	ldr	r3, [pc, #260]	; (80049f4 <xTaskIncrementTick+0x154>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a3f      	ldr	r2, [pc, #252]	; (80049f0 <xTaskIncrementTick+0x150>)
 80048f4:	6013      	str	r3, [r2, #0]
 80048f6:	4a3f      	ldr	r2, [pc, #252]	; (80049f4 <xTaskIncrementTick+0x154>)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6013      	str	r3, [r2, #0]
 80048fc:	4b3e      	ldr	r3, [pc, #248]	; (80049f8 <xTaskIncrementTick+0x158>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	3301      	adds	r3, #1
 8004902:	4a3d      	ldr	r2, [pc, #244]	; (80049f8 <xTaskIncrementTick+0x158>)
 8004904:	6013      	str	r3, [r2, #0]
 8004906:	f000 fad1 	bl	8004eac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800490a:	4b3c      	ldr	r3, [pc, #240]	; (80049fc <xTaskIncrementTick+0x15c>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	693a      	ldr	r2, [r7, #16]
 8004910:	429a      	cmp	r2, r3
 8004912:	d349      	bcc.n	80049a8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004914:	4b36      	ldr	r3, [pc, #216]	; (80049f0 <xTaskIncrementTick+0x150>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d104      	bne.n	8004928 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800491e:	4b37      	ldr	r3, [pc, #220]	; (80049fc <xTaskIncrementTick+0x15c>)
 8004920:	f04f 32ff 	mov.w	r2, #4294967295
 8004924:	601a      	str	r2, [r3, #0]
					break;
 8004926:	e03f      	b.n	80049a8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004928:	4b31      	ldr	r3, [pc, #196]	; (80049f0 <xTaskIncrementTick+0x150>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004938:	693a      	ldr	r2, [r7, #16]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	429a      	cmp	r2, r3
 800493e:	d203      	bcs.n	8004948 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004940:	4a2e      	ldr	r2, [pc, #184]	; (80049fc <xTaskIncrementTick+0x15c>)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004946:	e02f      	b.n	80049a8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	3304      	adds	r3, #4
 800494c:	4618      	mov	r0, r3
 800494e:	f7fe fdaf 	bl	80034b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004956:	2b00      	cmp	r3, #0
 8004958:	d004      	beq.n	8004964 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	3318      	adds	r3, #24
 800495e:	4618      	mov	r0, r3
 8004960:	f7fe fda6 	bl	80034b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004968:	4b25      	ldr	r3, [pc, #148]	; (8004a00 <xTaskIncrementTick+0x160>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	429a      	cmp	r2, r3
 800496e:	d903      	bls.n	8004978 <xTaskIncrementTick+0xd8>
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004974:	4a22      	ldr	r2, [pc, #136]	; (8004a00 <xTaskIncrementTick+0x160>)
 8004976:	6013      	str	r3, [r2, #0]
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800497c:	4613      	mov	r3, r2
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	4413      	add	r3, r2
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	4a1f      	ldr	r2, [pc, #124]	; (8004a04 <xTaskIncrementTick+0x164>)
 8004986:	441a      	add	r2, r3
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	3304      	adds	r3, #4
 800498c:	4619      	mov	r1, r3
 800498e:	4610      	mov	r0, r2
 8004990:	f7fe fd31 	bl	80033f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004998:	4b1b      	ldr	r3, [pc, #108]	; (8004a08 <xTaskIncrementTick+0x168>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499e:	429a      	cmp	r2, r3
 80049a0:	d3b8      	bcc.n	8004914 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80049a2:	2301      	movs	r3, #1
 80049a4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049a6:	e7b5      	b.n	8004914 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80049a8:	4b17      	ldr	r3, [pc, #92]	; (8004a08 <xTaskIncrementTick+0x168>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049ae:	4915      	ldr	r1, [pc, #84]	; (8004a04 <xTaskIncrementTick+0x164>)
 80049b0:	4613      	mov	r3, r2
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	4413      	add	r3, r2
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	440b      	add	r3, r1
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d901      	bls.n	80049c4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80049c0:	2301      	movs	r3, #1
 80049c2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80049c4:	4b11      	ldr	r3, [pc, #68]	; (8004a0c <xTaskIncrementTick+0x16c>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d007      	beq.n	80049dc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80049cc:	2301      	movs	r3, #1
 80049ce:	617b      	str	r3, [r7, #20]
 80049d0:	e004      	b.n	80049dc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80049d2:	4b0f      	ldr	r3, [pc, #60]	; (8004a10 <xTaskIncrementTick+0x170>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	3301      	adds	r3, #1
 80049d8:	4a0d      	ldr	r2, [pc, #52]	; (8004a10 <xTaskIncrementTick+0x170>)
 80049da:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80049dc:	697b      	ldr	r3, [r7, #20]
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3718      	adds	r7, #24
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	20000bf0 	.word	0x20000bf0
 80049ec:	20000bcc 	.word	0x20000bcc
 80049f0:	20000b80 	.word	0x20000b80
 80049f4:	20000b84 	.word	0x20000b84
 80049f8:	20000be0 	.word	0x20000be0
 80049fc:	20000be8 	.word	0x20000be8
 8004a00:	20000bd0 	.word	0x20000bd0
 8004a04:	200006f8 	.word	0x200006f8
 8004a08:	200006f4 	.word	0x200006f4
 8004a0c:	20000bdc 	.word	0x20000bdc
 8004a10:	20000bd8 	.word	0x20000bd8

08004a14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004a14:	b480      	push	{r7}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004a1a:	4b28      	ldr	r3, [pc, #160]	; (8004abc <vTaskSwitchContext+0xa8>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d003      	beq.n	8004a2a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004a22:	4b27      	ldr	r3, [pc, #156]	; (8004ac0 <vTaskSwitchContext+0xac>)
 8004a24:	2201      	movs	r2, #1
 8004a26:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004a28:	e041      	b.n	8004aae <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004a2a:	4b25      	ldr	r3, [pc, #148]	; (8004ac0 <vTaskSwitchContext+0xac>)
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a30:	4b24      	ldr	r3, [pc, #144]	; (8004ac4 <vTaskSwitchContext+0xb0>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	60fb      	str	r3, [r7, #12]
 8004a36:	e010      	b.n	8004a5a <vTaskSwitchContext+0x46>
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d10a      	bne.n	8004a54 <vTaskSwitchContext+0x40>
	__asm volatile
 8004a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a42:	f383 8811 	msr	BASEPRI, r3
 8004a46:	f3bf 8f6f 	isb	sy
 8004a4a:	f3bf 8f4f 	dsb	sy
 8004a4e:	607b      	str	r3, [r7, #4]
}
 8004a50:	bf00      	nop
 8004a52:	e7fe      	b.n	8004a52 <vTaskSwitchContext+0x3e>
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	3b01      	subs	r3, #1
 8004a58:	60fb      	str	r3, [r7, #12]
 8004a5a:	491b      	ldr	r1, [pc, #108]	; (8004ac8 <vTaskSwitchContext+0xb4>)
 8004a5c:	68fa      	ldr	r2, [r7, #12]
 8004a5e:	4613      	mov	r3, r2
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	4413      	add	r3, r2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	440b      	add	r3, r1
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d0e4      	beq.n	8004a38 <vTaskSwitchContext+0x24>
 8004a6e:	68fa      	ldr	r2, [r7, #12]
 8004a70:	4613      	mov	r3, r2
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	4413      	add	r3, r2
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	4a13      	ldr	r2, [pc, #76]	; (8004ac8 <vTaskSwitchContext+0xb4>)
 8004a7a:	4413      	add	r3, r2
 8004a7c:	60bb      	str	r3, [r7, #8]
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	685a      	ldr	r2, [r3, #4]
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	605a      	str	r2, [r3, #4]
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	685a      	ldr	r2, [r3, #4]
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	3308      	adds	r3, #8
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d104      	bne.n	8004a9e <vTaskSwitchContext+0x8a>
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	685a      	ldr	r2, [r3, #4]
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	605a      	str	r2, [r3, #4]
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	4a09      	ldr	r2, [pc, #36]	; (8004acc <vTaskSwitchContext+0xb8>)
 8004aa6:	6013      	str	r3, [r2, #0]
 8004aa8:	4a06      	ldr	r2, [pc, #24]	; (8004ac4 <vTaskSwitchContext+0xb0>)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6013      	str	r3, [r2, #0]
}
 8004aae:	bf00      	nop
 8004ab0:	3714      	adds	r7, #20
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop
 8004abc:	20000bf0 	.word	0x20000bf0
 8004ac0:	20000bdc 	.word	0x20000bdc
 8004ac4:	20000bd0 	.word	0x20000bd0
 8004ac8:	200006f8 	.word	0x200006f8
 8004acc:	200006f4 	.word	0x200006f4

08004ad0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d10a      	bne.n	8004af6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae4:	f383 8811 	msr	BASEPRI, r3
 8004ae8:	f3bf 8f6f 	isb	sy
 8004aec:	f3bf 8f4f 	dsb	sy
 8004af0:	60fb      	str	r3, [r7, #12]
}
 8004af2:	bf00      	nop
 8004af4:	e7fe      	b.n	8004af4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004af6:	4b07      	ldr	r3, [pc, #28]	; (8004b14 <vTaskPlaceOnEventList+0x44>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	3318      	adds	r3, #24
 8004afc:	4619      	mov	r1, r3
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f7fe fc9d 	bl	800343e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004b04:	2101      	movs	r1, #1
 8004b06:	6838      	ldr	r0, [r7, #0]
 8004b08:	f000 fb7a 	bl	8005200 <prvAddCurrentTaskToDelayedList>
}
 8004b0c:	bf00      	nop
 8004b0e:	3710      	adds	r7, #16
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	200006f4 	.word	0x200006f4

08004b18 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b086      	sub	sp, #24
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d10a      	bne.n	8004b40 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b2e:	f383 8811 	msr	BASEPRI, r3
 8004b32:	f3bf 8f6f 	isb	sy
 8004b36:	f3bf 8f4f 	dsb	sy
 8004b3a:	617b      	str	r3, [r7, #20]
}
 8004b3c:	bf00      	nop
 8004b3e:	e7fe      	b.n	8004b3e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b40:	4b0a      	ldr	r3, [pc, #40]	; (8004b6c <vTaskPlaceOnEventListRestricted+0x54>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	3318      	adds	r3, #24
 8004b46:	4619      	mov	r1, r3
 8004b48:	68f8      	ldr	r0, [r7, #12]
 8004b4a:	f7fe fc54 	bl	80033f6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d002      	beq.n	8004b5a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004b54:	f04f 33ff 	mov.w	r3, #4294967295
 8004b58:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004b5a:	6879      	ldr	r1, [r7, #4]
 8004b5c:	68b8      	ldr	r0, [r7, #8]
 8004b5e:	f000 fb4f 	bl	8005200 <prvAddCurrentTaskToDelayedList>
	}
 8004b62:	bf00      	nop
 8004b64:	3718      	adds	r7, #24
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	200006f4 	.word	0x200006f4

08004b70 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b086      	sub	sp, #24
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d10a      	bne.n	8004b9c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b8a:	f383 8811 	msr	BASEPRI, r3
 8004b8e:	f3bf 8f6f 	isb	sy
 8004b92:	f3bf 8f4f 	dsb	sy
 8004b96:	60fb      	str	r3, [r7, #12]
}
 8004b98:	bf00      	nop
 8004b9a:	e7fe      	b.n	8004b9a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	3318      	adds	r3, #24
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f7fe fc85 	bl	80034b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ba6:	4b1e      	ldr	r3, [pc, #120]	; (8004c20 <xTaskRemoveFromEventList+0xb0>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d11d      	bne.n	8004bea <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	3304      	adds	r3, #4
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f7fe fc7c 	bl	80034b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bbc:	4b19      	ldr	r3, [pc, #100]	; (8004c24 <xTaskRemoveFromEventList+0xb4>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d903      	bls.n	8004bcc <xTaskRemoveFromEventList+0x5c>
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc8:	4a16      	ldr	r2, [pc, #88]	; (8004c24 <xTaskRemoveFromEventList+0xb4>)
 8004bca:	6013      	str	r3, [r2, #0]
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	4413      	add	r3, r2
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	4a13      	ldr	r2, [pc, #76]	; (8004c28 <xTaskRemoveFromEventList+0xb8>)
 8004bda:	441a      	add	r2, r3
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	3304      	adds	r3, #4
 8004be0:	4619      	mov	r1, r3
 8004be2:	4610      	mov	r0, r2
 8004be4:	f7fe fc07 	bl	80033f6 <vListInsertEnd>
 8004be8:	e005      	b.n	8004bf6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	3318      	adds	r3, #24
 8004bee:	4619      	mov	r1, r3
 8004bf0:	480e      	ldr	r0, [pc, #56]	; (8004c2c <xTaskRemoveFromEventList+0xbc>)
 8004bf2:	f7fe fc00 	bl	80033f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bfa:	4b0d      	ldr	r3, [pc, #52]	; (8004c30 <xTaskRemoveFromEventList+0xc0>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d905      	bls.n	8004c10 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004c04:	2301      	movs	r3, #1
 8004c06:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004c08:	4b0a      	ldr	r3, [pc, #40]	; (8004c34 <xTaskRemoveFromEventList+0xc4>)
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	601a      	str	r2, [r3, #0]
 8004c0e:	e001      	b.n	8004c14 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004c10:	2300      	movs	r3, #0
 8004c12:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004c14:	697b      	ldr	r3, [r7, #20]
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3718      	adds	r7, #24
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	20000bf0 	.word	0x20000bf0
 8004c24:	20000bd0 	.word	0x20000bd0
 8004c28:	200006f8 	.word	0x200006f8
 8004c2c:	20000b88 	.word	0x20000b88
 8004c30:	200006f4 	.word	0x200006f4
 8004c34:	20000bdc 	.word	0x20000bdc

08004c38 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004c40:	4b06      	ldr	r3, [pc, #24]	; (8004c5c <vTaskInternalSetTimeOutState+0x24>)
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004c48:	4b05      	ldr	r3, [pc, #20]	; (8004c60 <vTaskInternalSetTimeOutState+0x28>)
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	605a      	str	r2, [r3, #4]
}
 8004c50:	bf00      	nop
 8004c52:	370c      	adds	r7, #12
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr
 8004c5c:	20000be0 	.word	0x20000be0
 8004c60:	20000bcc 	.word	0x20000bcc

08004c64 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b088      	sub	sp, #32
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d10a      	bne.n	8004c8a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c78:	f383 8811 	msr	BASEPRI, r3
 8004c7c:	f3bf 8f6f 	isb	sy
 8004c80:	f3bf 8f4f 	dsb	sy
 8004c84:	613b      	str	r3, [r7, #16]
}
 8004c86:	bf00      	nop
 8004c88:	e7fe      	b.n	8004c88 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d10a      	bne.n	8004ca6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c94:	f383 8811 	msr	BASEPRI, r3
 8004c98:	f3bf 8f6f 	isb	sy
 8004c9c:	f3bf 8f4f 	dsb	sy
 8004ca0:	60fb      	str	r3, [r7, #12]
}
 8004ca2:	bf00      	nop
 8004ca4:	e7fe      	b.n	8004ca4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004ca6:	f000 ff7d 	bl	8005ba4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004caa:	4b1d      	ldr	r3, [pc, #116]	; (8004d20 <xTaskCheckForTimeOut+0xbc>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	69ba      	ldr	r2, [r7, #24]
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc2:	d102      	bne.n	8004cca <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	61fb      	str	r3, [r7, #28]
 8004cc8:	e023      	b.n	8004d12 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	4b15      	ldr	r3, [pc, #84]	; (8004d24 <xTaskCheckForTimeOut+0xc0>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d007      	beq.n	8004ce6 <xTaskCheckForTimeOut+0x82>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	69ba      	ldr	r2, [r7, #24]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d302      	bcc.n	8004ce6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	61fb      	str	r3, [r7, #28]
 8004ce4:	e015      	b.n	8004d12 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	697a      	ldr	r2, [r7, #20]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d20b      	bcs.n	8004d08 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	1ad2      	subs	r2, r2, r3
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f7ff ff9b 	bl	8004c38 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004d02:	2300      	movs	r3, #0
 8004d04:	61fb      	str	r3, [r7, #28]
 8004d06:	e004      	b.n	8004d12 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004d12:	f000 ff77 	bl	8005c04 <vPortExitCritical>

	return xReturn;
 8004d16:	69fb      	ldr	r3, [r7, #28]
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3720      	adds	r7, #32
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	20000bcc 	.word	0x20000bcc
 8004d24:	20000be0 	.word	0x20000be0

08004d28 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004d28:	b480      	push	{r7}
 8004d2a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004d2c:	4b03      	ldr	r3, [pc, #12]	; (8004d3c <vTaskMissedYield+0x14>)
 8004d2e:	2201      	movs	r2, #1
 8004d30:	601a      	str	r2, [r3, #0]
}
 8004d32:	bf00      	nop
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr
 8004d3c:	20000bdc 	.word	0x20000bdc

08004d40 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b082      	sub	sp, #8
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004d48:	f000 f852 	bl	8004df0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004d4c:	4b06      	ldr	r3, [pc, #24]	; (8004d68 <prvIdleTask+0x28>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d9f9      	bls.n	8004d48 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004d54:	4b05      	ldr	r3, [pc, #20]	; (8004d6c <prvIdleTask+0x2c>)
 8004d56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d5a:	601a      	str	r2, [r3, #0]
 8004d5c:	f3bf 8f4f 	dsb	sy
 8004d60:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004d64:	e7f0      	b.n	8004d48 <prvIdleTask+0x8>
 8004d66:	bf00      	nop
 8004d68:	200006f8 	.word	0x200006f8
 8004d6c:	e000ed04 	.word	0xe000ed04

08004d70 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d76:	2300      	movs	r3, #0
 8004d78:	607b      	str	r3, [r7, #4]
 8004d7a:	e00c      	b.n	8004d96 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	4613      	mov	r3, r2
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	4413      	add	r3, r2
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	4a12      	ldr	r2, [pc, #72]	; (8004dd0 <prvInitialiseTaskLists+0x60>)
 8004d88:	4413      	add	r3, r2
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f7fe fb06 	bl	800339c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	3301      	adds	r3, #1
 8004d94:	607b      	str	r3, [r7, #4]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2b37      	cmp	r3, #55	; 0x37
 8004d9a:	d9ef      	bls.n	8004d7c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004d9c:	480d      	ldr	r0, [pc, #52]	; (8004dd4 <prvInitialiseTaskLists+0x64>)
 8004d9e:	f7fe fafd 	bl	800339c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004da2:	480d      	ldr	r0, [pc, #52]	; (8004dd8 <prvInitialiseTaskLists+0x68>)
 8004da4:	f7fe fafa 	bl	800339c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004da8:	480c      	ldr	r0, [pc, #48]	; (8004ddc <prvInitialiseTaskLists+0x6c>)
 8004daa:	f7fe faf7 	bl	800339c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004dae:	480c      	ldr	r0, [pc, #48]	; (8004de0 <prvInitialiseTaskLists+0x70>)
 8004db0:	f7fe faf4 	bl	800339c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004db4:	480b      	ldr	r0, [pc, #44]	; (8004de4 <prvInitialiseTaskLists+0x74>)
 8004db6:	f7fe faf1 	bl	800339c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004dba:	4b0b      	ldr	r3, [pc, #44]	; (8004de8 <prvInitialiseTaskLists+0x78>)
 8004dbc:	4a05      	ldr	r2, [pc, #20]	; (8004dd4 <prvInitialiseTaskLists+0x64>)
 8004dbe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004dc0:	4b0a      	ldr	r3, [pc, #40]	; (8004dec <prvInitialiseTaskLists+0x7c>)
 8004dc2:	4a05      	ldr	r2, [pc, #20]	; (8004dd8 <prvInitialiseTaskLists+0x68>)
 8004dc4:	601a      	str	r2, [r3, #0]
}
 8004dc6:	bf00      	nop
 8004dc8:	3708      	adds	r7, #8
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	200006f8 	.word	0x200006f8
 8004dd4:	20000b58 	.word	0x20000b58
 8004dd8:	20000b6c 	.word	0x20000b6c
 8004ddc:	20000b88 	.word	0x20000b88
 8004de0:	20000b9c 	.word	0x20000b9c
 8004de4:	20000bb4 	.word	0x20000bb4
 8004de8:	20000b80 	.word	0x20000b80
 8004dec:	20000b84 	.word	0x20000b84

08004df0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004df6:	e019      	b.n	8004e2c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004df8:	f000 fed4 	bl	8005ba4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004dfc:	4b10      	ldr	r3, [pc, #64]	; (8004e40 <prvCheckTasksWaitingTermination+0x50>)
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	3304      	adds	r3, #4
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f7fe fb51 	bl	80034b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004e0e:	4b0d      	ldr	r3, [pc, #52]	; (8004e44 <prvCheckTasksWaitingTermination+0x54>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	3b01      	subs	r3, #1
 8004e14:	4a0b      	ldr	r2, [pc, #44]	; (8004e44 <prvCheckTasksWaitingTermination+0x54>)
 8004e16:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004e18:	4b0b      	ldr	r3, [pc, #44]	; (8004e48 <prvCheckTasksWaitingTermination+0x58>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	4a0a      	ldr	r2, [pc, #40]	; (8004e48 <prvCheckTasksWaitingTermination+0x58>)
 8004e20:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004e22:	f000 feef 	bl	8005c04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 f810 	bl	8004e4c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e2c:	4b06      	ldr	r3, [pc, #24]	; (8004e48 <prvCheckTasksWaitingTermination+0x58>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d1e1      	bne.n	8004df8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004e34:	bf00      	nop
 8004e36:	bf00      	nop
 8004e38:	3708      	adds	r7, #8
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	20000b9c 	.word	0x20000b9c
 8004e44:	20000bc8 	.word	0x20000bc8
 8004e48:	20000bb0 	.word	0x20000bb0

08004e4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d108      	bne.n	8004e70 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e62:	4618      	mov	r0, r3
 8004e64:	f001 f88c 	bl	8005f80 <vPortFree>
				vPortFree( pxTCB );
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f001 f889 	bl	8005f80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004e6e:	e018      	b.n	8004ea2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d103      	bne.n	8004e82 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f001 f880 	bl	8005f80 <vPortFree>
	}
 8004e80:	e00f      	b.n	8004ea2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d00a      	beq.n	8004ea2 <prvDeleteTCB+0x56>
	__asm volatile
 8004e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e90:	f383 8811 	msr	BASEPRI, r3
 8004e94:	f3bf 8f6f 	isb	sy
 8004e98:	f3bf 8f4f 	dsb	sy
 8004e9c:	60fb      	str	r3, [r7, #12]
}
 8004e9e:	bf00      	nop
 8004ea0:	e7fe      	b.n	8004ea0 <prvDeleteTCB+0x54>
	}
 8004ea2:	bf00      	nop
 8004ea4:	3710      	adds	r7, #16
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
	...

08004eac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004eb2:	4b0c      	ldr	r3, [pc, #48]	; (8004ee4 <prvResetNextTaskUnblockTime+0x38>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d104      	bne.n	8004ec6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004ebc:	4b0a      	ldr	r3, [pc, #40]	; (8004ee8 <prvResetNextTaskUnblockTime+0x3c>)
 8004ebe:	f04f 32ff 	mov.w	r2, #4294967295
 8004ec2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004ec4:	e008      	b.n	8004ed8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ec6:	4b07      	ldr	r3, [pc, #28]	; (8004ee4 <prvResetNextTaskUnblockTime+0x38>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	4a04      	ldr	r2, [pc, #16]	; (8004ee8 <prvResetNextTaskUnblockTime+0x3c>)
 8004ed6:	6013      	str	r3, [r2, #0]
}
 8004ed8:	bf00      	nop
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr
 8004ee4:	20000b80 	.word	0x20000b80
 8004ee8:	20000be8 	.word	0x20000be8

08004eec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004ef2:	4b0b      	ldr	r3, [pc, #44]	; (8004f20 <xTaskGetSchedulerState+0x34>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d102      	bne.n	8004f00 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004efa:	2301      	movs	r3, #1
 8004efc:	607b      	str	r3, [r7, #4]
 8004efe:	e008      	b.n	8004f12 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f00:	4b08      	ldr	r3, [pc, #32]	; (8004f24 <xTaskGetSchedulerState+0x38>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d102      	bne.n	8004f0e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004f08:	2302      	movs	r3, #2
 8004f0a:	607b      	str	r3, [r7, #4]
 8004f0c:	e001      	b.n	8004f12 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004f12:	687b      	ldr	r3, [r7, #4]
	}
 8004f14:	4618      	mov	r0, r3
 8004f16:	370c      	adds	r7, #12
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr
 8004f20:	20000bd4 	.word	0x20000bd4
 8004f24:	20000bf0 	.word	0x20000bf0

08004f28 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004f34:	2300      	movs	r3, #0
 8004f36:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d051      	beq.n	8004fe2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f42:	4b2a      	ldr	r3, [pc, #168]	; (8004fec <xTaskPriorityInherit+0xc4>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d241      	bcs.n	8004fd0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	699b      	ldr	r3, [r3, #24]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	db06      	blt.n	8004f62 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f54:	4b25      	ldr	r3, [pc, #148]	; (8004fec <xTaskPriorityInherit+0xc4>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	6959      	ldr	r1, [r3, #20]
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	4413      	add	r3, r2
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	4a1f      	ldr	r2, [pc, #124]	; (8004ff0 <xTaskPriorityInherit+0xc8>)
 8004f74:	4413      	add	r3, r2
 8004f76:	4299      	cmp	r1, r3
 8004f78:	d122      	bne.n	8004fc0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	3304      	adds	r3, #4
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7fe fa96 	bl	80034b0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004f84:	4b19      	ldr	r3, [pc, #100]	; (8004fec <xTaskPriorityInherit+0xc4>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f92:	4b18      	ldr	r3, [pc, #96]	; (8004ff4 <xTaskPriorityInherit+0xcc>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d903      	bls.n	8004fa2 <xTaskPriorityInherit+0x7a>
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f9e:	4a15      	ldr	r2, [pc, #84]	; (8004ff4 <xTaskPriorityInherit+0xcc>)
 8004fa0:	6013      	str	r3, [r2, #0]
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fa6:	4613      	mov	r3, r2
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	4413      	add	r3, r2
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	4a10      	ldr	r2, [pc, #64]	; (8004ff0 <xTaskPriorityInherit+0xc8>)
 8004fb0:	441a      	add	r2, r3
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	3304      	adds	r3, #4
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	4610      	mov	r0, r2
 8004fba:	f7fe fa1c 	bl	80033f6 <vListInsertEnd>
 8004fbe:	e004      	b.n	8004fca <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004fc0:	4b0a      	ldr	r3, [pc, #40]	; (8004fec <xTaskPriorityInherit+0xc4>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	60fb      	str	r3, [r7, #12]
 8004fce:	e008      	b.n	8004fe2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004fd4:	4b05      	ldr	r3, [pc, #20]	; (8004fec <xTaskPriorityInherit+0xc4>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d201      	bcs.n	8004fe2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
	}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3710      	adds	r7, #16
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	200006f4 	.word	0x200006f4
 8004ff0:	200006f8 	.word	0x200006f8
 8004ff4:	20000bd0 	.word	0x20000bd0

08004ff8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b086      	sub	sp, #24
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005004:	2300      	movs	r3, #0
 8005006:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d056      	beq.n	80050bc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800500e:	4b2e      	ldr	r3, [pc, #184]	; (80050c8 <xTaskPriorityDisinherit+0xd0>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	693a      	ldr	r2, [r7, #16]
 8005014:	429a      	cmp	r2, r3
 8005016:	d00a      	beq.n	800502e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800501c:	f383 8811 	msr	BASEPRI, r3
 8005020:	f3bf 8f6f 	isb	sy
 8005024:	f3bf 8f4f 	dsb	sy
 8005028:	60fb      	str	r3, [r7, #12]
}
 800502a:	bf00      	nop
 800502c:	e7fe      	b.n	800502c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005032:	2b00      	cmp	r3, #0
 8005034:	d10a      	bne.n	800504c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800503a:	f383 8811 	msr	BASEPRI, r3
 800503e:	f3bf 8f6f 	isb	sy
 8005042:	f3bf 8f4f 	dsb	sy
 8005046:	60bb      	str	r3, [r7, #8]
}
 8005048:	bf00      	nop
 800504a:	e7fe      	b.n	800504a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005050:	1e5a      	subs	r2, r3, #1
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800505e:	429a      	cmp	r2, r3
 8005060:	d02c      	beq.n	80050bc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005066:	2b00      	cmp	r3, #0
 8005068:	d128      	bne.n	80050bc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	3304      	adds	r3, #4
 800506e:	4618      	mov	r0, r3
 8005070:	f7fe fa1e 	bl	80034b0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005080:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800508c:	4b0f      	ldr	r3, [pc, #60]	; (80050cc <xTaskPriorityDisinherit+0xd4>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	429a      	cmp	r2, r3
 8005092:	d903      	bls.n	800509c <xTaskPriorityDisinherit+0xa4>
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005098:	4a0c      	ldr	r2, [pc, #48]	; (80050cc <xTaskPriorityDisinherit+0xd4>)
 800509a:	6013      	str	r3, [r2, #0]
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050a0:	4613      	mov	r3, r2
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	4413      	add	r3, r2
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	4a09      	ldr	r2, [pc, #36]	; (80050d0 <xTaskPriorityDisinherit+0xd8>)
 80050aa:	441a      	add	r2, r3
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	3304      	adds	r3, #4
 80050b0:	4619      	mov	r1, r3
 80050b2:	4610      	mov	r0, r2
 80050b4:	f7fe f99f 	bl	80033f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80050b8:	2301      	movs	r3, #1
 80050ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80050bc:	697b      	ldr	r3, [r7, #20]
	}
 80050be:	4618      	mov	r0, r3
 80050c0:	3718      	adds	r7, #24
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	200006f4 	.word	0x200006f4
 80050cc:	20000bd0 	.word	0x20000bd0
 80050d0:	200006f8 	.word	0x200006f8

080050d4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b088      	sub	sp, #32
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80050e2:	2301      	movs	r3, #1
 80050e4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d06a      	beq.n	80051c2 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80050ec:	69bb      	ldr	r3, [r7, #24]
 80050ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d10a      	bne.n	800510a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80050f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f8:	f383 8811 	msr	BASEPRI, r3
 80050fc:	f3bf 8f6f 	isb	sy
 8005100:	f3bf 8f4f 	dsb	sy
 8005104:	60fb      	str	r3, [r7, #12]
}
 8005106:	bf00      	nop
 8005108:	e7fe      	b.n	8005108 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800510e:	683a      	ldr	r2, [r7, #0]
 8005110:	429a      	cmp	r2, r3
 8005112:	d902      	bls.n	800511a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	61fb      	str	r3, [r7, #28]
 8005118:	e002      	b.n	8005120 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800511e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005124:	69fa      	ldr	r2, [r7, #28]
 8005126:	429a      	cmp	r2, r3
 8005128:	d04b      	beq.n	80051c2 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800512e:	697a      	ldr	r2, [r7, #20]
 8005130:	429a      	cmp	r2, r3
 8005132:	d146      	bne.n	80051c2 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005134:	4b25      	ldr	r3, [pc, #148]	; (80051cc <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	69ba      	ldr	r2, [r7, #24]
 800513a:	429a      	cmp	r2, r3
 800513c:	d10a      	bne.n	8005154 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800513e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005142:	f383 8811 	msr	BASEPRI, r3
 8005146:	f3bf 8f6f 	isb	sy
 800514a:	f3bf 8f4f 	dsb	sy
 800514e:	60bb      	str	r3, [r7, #8]
}
 8005150:	bf00      	nop
 8005152:	e7fe      	b.n	8005152 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005154:	69bb      	ldr	r3, [r7, #24]
 8005156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005158:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	69fa      	ldr	r2, [r7, #28]
 800515e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	699b      	ldr	r3, [r3, #24]
 8005164:	2b00      	cmp	r3, #0
 8005166:	db04      	blt.n	8005172 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	6959      	ldr	r1, [r3, #20]
 8005176:	693a      	ldr	r2, [r7, #16]
 8005178:	4613      	mov	r3, r2
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	4413      	add	r3, r2
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	4a13      	ldr	r2, [pc, #76]	; (80051d0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005182:	4413      	add	r3, r2
 8005184:	4299      	cmp	r1, r3
 8005186:	d11c      	bne.n	80051c2 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	3304      	adds	r3, #4
 800518c:	4618      	mov	r0, r3
 800518e:	f7fe f98f 	bl	80034b0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005196:	4b0f      	ldr	r3, [pc, #60]	; (80051d4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	429a      	cmp	r2, r3
 800519c:	d903      	bls.n	80051a6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a2:	4a0c      	ldr	r2, [pc, #48]	; (80051d4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80051a4:	6013      	str	r3, [r2, #0]
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051aa:	4613      	mov	r3, r2
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	4413      	add	r3, r2
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	4a07      	ldr	r2, [pc, #28]	; (80051d0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80051b4:	441a      	add	r2, r3
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	3304      	adds	r3, #4
 80051ba:	4619      	mov	r1, r3
 80051bc:	4610      	mov	r0, r2
 80051be:	f7fe f91a 	bl	80033f6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80051c2:	bf00      	nop
 80051c4:	3720      	adds	r7, #32
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	200006f4 	.word	0x200006f4
 80051d0:	200006f8 	.word	0x200006f8
 80051d4:	20000bd0 	.word	0x20000bd0

080051d8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80051d8:	b480      	push	{r7}
 80051da:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80051dc:	4b07      	ldr	r3, [pc, #28]	; (80051fc <pvTaskIncrementMutexHeldCount+0x24>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d004      	beq.n	80051ee <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80051e4:	4b05      	ldr	r3, [pc, #20]	; (80051fc <pvTaskIncrementMutexHeldCount+0x24>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80051ea:	3201      	adds	r2, #1
 80051ec:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80051ee:	4b03      	ldr	r3, [pc, #12]	; (80051fc <pvTaskIncrementMutexHeldCount+0x24>)
 80051f0:	681b      	ldr	r3, [r3, #0]
	}
 80051f2:	4618      	mov	r0, r3
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr
 80051fc:	200006f4 	.word	0x200006f4

08005200 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800520a:	4b21      	ldr	r3, [pc, #132]	; (8005290 <prvAddCurrentTaskToDelayedList+0x90>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005210:	4b20      	ldr	r3, [pc, #128]	; (8005294 <prvAddCurrentTaskToDelayedList+0x94>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	3304      	adds	r3, #4
 8005216:	4618      	mov	r0, r3
 8005218:	f7fe f94a 	bl	80034b0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005222:	d10a      	bne.n	800523a <prvAddCurrentTaskToDelayedList+0x3a>
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d007      	beq.n	800523a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800522a:	4b1a      	ldr	r3, [pc, #104]	; (8005294 <prvAddCurrentTaskToDelayedList+0x94>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	3304      	adds	r3, #4
 8005230:	4619      	mov	r1, r3
 8005232:	4819      	ldr	r0, [pc, #100]	; (8005298 <prvAddCurrentTaskToDelayedList+0x98>)
 8005234:	f7fe f8df 	bl	80033f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005238:	e026      	b.n	8005288 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800523a:	68fa      	ldr	r2, [r7, #12]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4413      	add	r3, r2
 8005240:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005242:	4b14      	ldr	r3, [pc, #80]	; (8005294 <prvAddCurrentTaskToDelayedList+0x94>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68ba      	ldr	r2, [r7, #8]
 8005248:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800524a:	68ba      	ldr	r2, [r7, #8]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	429a      	cmp	r2, r3
 8005250:	d209      	bcs.n	8005266 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005252:	4b12      	ldr	r3, [pc, #72]	; (800529c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	4b0f      	ldr	r3, [pc, #60]	; (8005294 <prvAddCurrentTaskToDelayedList+0x94>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	3304      	adds	r3, #4
 800525c:	4619      	mov	r1, r3
 800525e:	4610      	mov	r0, r2
 8005260:	f7fe f8ed 	bl	800343e <vListInsert>
}
 8005264:	e010      	b.n	8005288 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005266:	4b0e      	ldr	r3, [pc, #56]	; (80052a0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	4b0a      	ldr	r3, [pc, #40]	; (8005294 <prvAddCurrentTaskToDelayedList+0x94>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	3304      	adds	r3, #4
 8005270:	4619      	mov	r1, r3
 8005272:	4610      	mov	r0, r2
 8005274:	f7fe f8e3 	bl	800343e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005278:	4b0a      	ldr	r3, [pc, #40]	; (80052a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68ba      	ldr	r2, [r7, #8]
 800527e:	429a      	cmp	r2, r3
 8005280:	d202      	bcs.n	8005288 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005282:	4a08      	ldr	r2, [pc, #32]	; (80052a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	6013      	str	r3, [r2, #0]
}
 8005288:	bf00      	nop
 800528a:	3710      	adds	r7, #16
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}
 8005290:	20000bcc 	.word	0x20000bcc
 8005294:	200006f4 	.word	0x200006f4
 8005298:	20000bb4 	.word	0x20000bb4
 800529c:	20000b84 	.word	0x20000b84
 80052a0:	20000b80 	.word	0x20000b80
 80052a4:	20000be8 	.word	0x20000be8

080052a8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b08a      	sub	sp, #40	; 0x28
 80052ac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80052ae:	2300      	movs	r3, #0
 80052b0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80052b2:	f000 fb07 	bl	80058c4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80052b6:	4b1c      	ldr	r3, [pc, #112]	; (8005328 <xTimerCreateTimerTask+0x80>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d021      	beq.n	8005302 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80052be:	2300      	movs	r3, #0
 80052c0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80052c2:	2300      	movs	r3, #0
 80052c4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80052c6:	1d3a      	adds	r2, r7, #4
 80052c8:	f107 0108 	add.w	r1, r7, #8
 80052cc:	f107 030c 	add.w	r3, r7, #12
 80052d0:	4618      	mov	r0, r3
 80052d2:	f7fe f849 	bl	8003368 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80052d6:	6879      	ldr	r1, [r7, #4]
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	68fa      	ldr	r2, [r7, #12]
 80052dc:	9202      	str	r2, [sp, #8]
 80052de:	9301      	str	r3, [sp, #4]
 80052e0:	2302      	movs	r3, #2
 80052e2:	9300      	str	r3, [sp, #0]
 80052e4:	2300      	movs	r3, #0
 80052e6:	460a      	mov	r2, r1
 80052e8:	4910      	ldr	r1, [pc, #64]	; (800532c <xTimerCreateTimerTask+0x84>)
 80052ea:	4811      	ldr	r0, [pc, #68]	; (8005330 <xTimerCreateTimerTask+0x88>)
 80052ec:	f7fe ffe0 	bl	80042b0 <xTaskCreateStatic>
 80052f0:	4603      	mov	r3, r0
 80052f2:	4a10      	ldr	r2, [pc, #64]	; (8005334 <xTimerCreateTimerTask+0x8c>)
 80052f4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80052f6:	4b0f      	ldr	r3, [pc, #60]	; (8005334 <xTimerCreateTimerTask+0x8c>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d001      	beq.n	8005302 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80052fe:	2301      	movs	r3, #1
 8005300:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d10a      	bne.n	800531e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800530c:	f383 8811 	msr	BASEPRI, r3
 8005310:	f3bf 8f6f 	isb	sy
 8005314:	f3bf 8f4f 	dsb	sy
 8005318:	613b      	str	r3, [r7, #16]
}
 800531a:	bf00      	nop
 800531c:	e7fe      	b.n	800531c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800531e:	697b      	ldr	r3, [r7, #20]
}
 8005320:	4618      	mov	r0, r3
 8005322:	3718      	adds	r7, #24
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}
 8005328:	20000c24 	.word	0x20000c24
 800532c:	08006a64 	.word	0x08006a64
 8005330:	0800546d 	.word	0x0800546d
 8005334:	20000c28 	.word	0x20000c28

08005338 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b08a      	sub	sp, #40	; 0x28
 800533c:	af00      	add	r7, sp, #0
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	60b9      	str	r1, [r7, #8]
 8005342:	607a      	str	r2, [r7, #4]
 8005344:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005346:	2300      	movs	r3, #0
 8005348:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d10a      	bne.n	8005366 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005354:	f383 8811 	msr	BASEPRI, r3
 8005358:	f3bf 8f6f 	isb	sy
 800535c:	f3bf 8f4f 	dsb	sy
 8005360:	623b      	str	r3, [r7, #32]
}
 8005362:	bf00      	nop
 8005364:	e7fe      	b.n	8005364 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005366:	4b1a      	ldr	r3, [pc, #104]	; (80053d0 <xTimerGenericCommand+0x98>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d02a      	beq.n	80053c4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	2b05      	cmp	r3, #5
 800537e:	dc18      	bgt.n	80053b2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005380:	f7ff fdb4 	bl	8004eec <xTaskGetSchedulerState>
 8005384:	4603      	mov	r3, r0
 8005386:	2b02      	cmp	r3, #2
 8005388:	d109      	bne.n	800539e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800538a:	4b11      	ldr	r3, [pc, #68]	; (80053d0 <xTimerGenericCommand+0x98>)
 800538c:	6818      	ldr	r0, [r3, #0]
 800538e:	f107 0110 	add.w	r1, r7, #16
 8005392:	2300      	movs	r3, #0
 8005394:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005396:	f7fe f9f3 	bl	8003780 <xQueueGenericSend>
 800539a:	6278      	str	r0, [r7, #36]	; 0x24
 800539c:	e012      	b.n	80053c4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800539e:	4b0c      	ldr	r3, [pc, #48]	; (80053d0 <xTimerGenericCommand+0x98>)
 80053a0:	6818      	ldr	r0, [r3, #0]
 80053a2:	f107 0110 	add.w	r1, r7, #16
 80053a6:	2300      	movs	r3, #0
 80053a8:	2200      	movs	r2, #0
 80053aa:	f7fe f9e9 	bl	8003780 <xQueueGenericSend>
 80053ae:	6278      	str	r0, [r7, #36]	; 0x24
 80053b0:	e008      	b.n	80053c4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80053b2:	4b07      	ldr	r3, [pc, #28]	; (80053d0 <xTimerGenericCommand+0x98>)
 80053b4:	6818      	ldr	r0, [r3, #0]
 80053b6:	f107 0110 	add.w	r1, r7, #16
 80053ba:	2300      	movs	r3, #0
 80053bc:	683a      	ldr	r2, [r7, #0]
 80053be:	f7fe fadd 	bl	800397c <xQueueGenericSendFromISR>
 80053c2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80053c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3728      	adds	r7, #40	; 0x28
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	20000c24 	.word	0x20000c24

080053d4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b088      	sub	sp, #32
 80053d8:	af02      	add	r7, sp, #8
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053de:	4b22      	ldr	r3, [pc, #136]	; (8005468 <prvProcessExpiredTimer+0x94>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	3304      	adds	r3, #4
 80053ec:	4618      	mov	r0, r3
 80053ee:	f7fe f85f 	bl	80034b0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80053f8:	f003 0304 	and.w	r3, r3, #4
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d022      	beq.n	8005446 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	699a      	ldr	r2, [r3, #24]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	18d1      	adds	r1, r2, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	683a      	ldr	r2, [r7, #0]
 800540c:	6978      	ldr	r0, [r7, #20]
 800540e:	f000 f8d1 	bl	80055b4 <prvInsertTimerInActiveList>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d01f      	beq.n	8005458 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005418:	2300      	movs	r3, #0
 800541a:	9300      	str	r3, [sp, #0]
 800541c:	2300      	movs	r3, #0
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	2100      	movs	r1, #0
 8005422:	6978      	ldr	r0, [r7, #20]
 8005424:	f7ff ff88 	bl	8005338 <xTimerGenericCommand>
 8005428:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d113      	bne.n	8005458 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005434:	f383 8811 	msr	BASEPRI, r3
 8005438:	f3bf 8f6f 	isb	sy
 800543c:	f3bf 8f4f 	dsb	sy
 8005440:	60fb      	str	r3, [r7, #12]
}
 8005442:	bf00      	nop
 8005444:	e7fe      	b.n	8005444 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800544c:	f023 0301 	bic.w	r3, r3, #1
 8005450:	b2da      	uxtb	r2, r3
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	6a1b      	ldr	r3, [r3, #32]
 800545c:	6978      	ldr	r0, [r7, #20]
 800545e:	4798      	blx	r3
}
 8005460:	bf00      	nop
 8005462:	3718      	adds	r7, #24
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}
 8005468:	20000c1c 	.word	0x20000c1c

0800546c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005474:	f107 0308 	add.w	r3, r7, #8
 8005478:	4618      	mov	r0, r3
 800547a:	f000 f857 	bl	800552c <prvGetNextExpireTime>
 800547e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	4619      	mov	r1, r3
 8005484:	68f8      	ldr	r0, [r7, #12]
 8005486:	f000 f803 	bl	8005490 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800548a:	f000 f8d5 	bl	8005638 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800548e:	e7f1      	b.n	8005474 <prvTimerTask+0x8>

08005490 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800549a:	f7ff f945 	bl	8004728 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800549e:	f107 0308 	add.w	r3, r7, #8
 80054a2:	4618      	mov	r0, r3
 80054a4:	f000 f866 	bl	8005574 <prvSampleTimeNow>
 80054a8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d130      	bne.n	8005512 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d10a      	bne.n	80054cc <prvProcessTimerOrBlockTask+0x3c>
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d806      	bhi.n	80054cc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80054be:	f7ff f941 	bl	8004744 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80054c2:	68f9      	ldr	r1, [r7, #12]
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f7ff ff85 	bl	80053d4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80054ca:	e024      	b.n	8005516 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d008      	beq.n	80054e4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80054d2:	4b13      	ldr	r3, [pc, #76]	; (8005520 <prvProcessTimerOrBlockTask+0x90>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d101      	bne.n	80054e0 <prvProcessTimerOrBlockTask+0x50>
 80054dc:	2301      	movs	r3, #1
 80054de:	e000      	b.n	80054e2 <prvProcessTimerOrBlockTask+0x52>
 80054e0:	2300      	movs	r3, #0
 80054e2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80054e4:	4b0f      	ldr	r3, [pc, #60]	; (8005524 <prvProcessTimerOrBlockTask+0x94>)
 80054e6:	6818      	ldr	r0, [r3, #0]
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	683a      	ldr	r2, [r7, #0]
 80054f0:	4619      	mov	r1, r3
 80054f2:	f7fe fea9 	bl	8004248 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80054f6:	f7ff f925 	bl	8004744 <xTaskResumeAll>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d10a      	bne.n	8005516 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005500:	4b09      	ldr	r3, [pc, #36]	; (8005528 <prvProcessTimerOrBlockTask+0x98>)
 8005502:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005506:	601a      	str	r2, [r3, #0]
 8005508:	f3bf 8f4f 	dsb	sy
 800550c:	f3bf 8f6f 	isb	sy
}
 8005510:	e001      	b.n	8005516 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005512:	f7ff f917 	bl	8004744 <xTaskResumeAll>
}
 8005516:	bf00      	nop
 8005518:	3710      	adds	r7, #16
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	20000c20 	.word	0x20000c20
 8005524:	20000c24 	.word	0x20000c24
 8005528:	e000ed04 	.word	0xe000ed04

0800552c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800552c:	b480      	push	{r7}
 800552e:	b085      	sub	sp, #20
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005534:	4b0e      	ldr	r3, [pc, #56]	; (8005570 <prvGetNextExpireTime+0x44>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d101      	bne.n	8005542 <prvGetNextExpireTime+0x16>
 800553e:	2201      	movs	r2, #1
 8005540:	e000      	b.n	8005544 <prvGetNextExpireTime+0x18>
 8005542:	2200      	movs	r2, #0
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d105      	bne.n	800555c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005550:	4b07      	ldr	r3, [pc, #28]	; (8005570 <prvGetNextExpireTime+0x44>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	60fb      	str	r3, [r7, #12]
 800555a:	e001      	b.n	8005560 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800555c:	2300      	movs	r3, #0
 800555e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005560:	68fb      	ldr	r3, [r7, #12]
}
 8005562:	4618      	mov	r0, r3
 8005564:	3714      	adds	r7, #20
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr
 800556e:	bf00      	nop
 8005570:	20000c1c 	.word	0x20000c1c

08005574 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b084      	sub	sp, #16
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800557c:	f7ff f980 	bl	8004880 <xTaskGetTickCount>
 8005580:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005582:	4b0b      	ldr	r3, [pc, #44]	; (80055b0 <prvSampleTimeNow+0x3c>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	429a      	cmp	r2, r3
 800558a:	d205      	bcs.n	8005598 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800558c:	f000 f936 	bl	80057fc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	601a      	str	r2, [r3, #0]
 8005596:	e002      	b.n	800559e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800559e:	4a04      	ldr	r2, [pc, #16]	; (80055b0 <prvSampleTimeNow+0x3c>)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80055a4:	68fb      	ldr	r3, [r7, #12]
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3710      	adds	r7, #16
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	20000c2c 	.word	0x20000c2c

080055b4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b086      	sub	sp, #24
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	607a      	str	r2, [r7, #4]
 80055c0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80055c2:	2300      	movs	r3, #0
 80055c4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	68ba      	ldr	r2, [r7, #8]
 80055ca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	68fa      	ldr	r2, [r7, #12]
 80055d0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80055d2:	68ba      	ldr	r2, [r7, #8]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d812      	bhi.n	8005600 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	1ad2      	subs	r2, r2, r3
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	699b      	ldr	r3, [r3, #24]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d302      	bcc.n	80055ee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80055e8:	2301      	movs	r3, #1
 80055ea:	617b      	str	r3, [r7, #20]
 80055ec:	e01b      	b.n	8005626 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80055ee:	4b10      	ldr	r3, [pc, #64]	; (8005630 <prvInsertTimerInActiveList+0x7c>)
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	3304      	adds	r3, #4
 80055f6:	4619      	mov	r1, r3
 80055f8:	4610      	mov	r0, r2
 80055fa:	f7fd ff20 	bl	800343e <vListInsert>
 80055fe:	e012      	b.n	8005626 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	429a      	cmp	r2, r3
 8005606:	d206      	bcs.n	8005616 <prvInsertTimerInActiveList+0x62>
 8005608:	68ba      	ldr	r2, [r7, #8]
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	429a      	cmp	r2, r3
 800560e:	d302      	bcc.n	8005616 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005610:	2301      	movs	r3, #1
 8005612:	617b      	str	r3, [r7, #20]
 8005614:	e007      	b.n	8005626 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005616:	4b07      	ldr	r3, [pc, #28]	; (8005634 <prvInsertTimerInActiveList+0x80>)
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	3304      	adds	r3, #4
 800561e:	4619      	mov	r1, r3
 8005620:	4610      	mov	r0, r2
 8005622:	f7fd ff0c 	bl	800343e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005626:	697b      	ldr	r3, [r7, #20]
}
 8005628:	4618      	mov	r0, r3
 800562a:	3718      	adds	r7, #24
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	20000c20 	.word	0x20000c20
 8005634:	20000c1c 	.word	0x20000c1c

08005638 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b08e      	sub	sp, #56	; 0x38
 800563c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800563e:	e0ca      	b.n	80057d6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2b00      	cmp	r3, #0
 8005644:	da18      	bge.n	8005678 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005646:	1d3b      	adds	r3, r7, #4
 8005648:	3304      	adds	r3, #4
 800564a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800564c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800564e:	2b00      	cmp	r3, #0
 8005650:	d10a      	bne.n	8005668 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005656:	f383 8811 	msr	BASEPRI, r3
 800565a:	f3bf 8f6f 	isb	sy
 800565e:	f3bf 8f4f 	dsb	sy
 8005662:	61fb      	str	r3, [r7, #28]
}
 8005664:	bf00      	nop
 8005666:	e7fe      	b.n	8005666 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800566e:	6850      	ldr	r0, [r2, #4]
 8005670:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005672:	6892      	ldr	r2, [r2, #8]
 8005674:	4611      	mov	r1, r2
 8005676:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2b00      	cmp	r3, #0
 800567c:	f2c0 80aa 	blt.w	80057d4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005686:	695b      	ldr	r3, [r3, #20]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d004      	beq.n	8005696 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800568c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800568e:	3304      	adds	r3, #4
 8005690:	4618      	mov	r0, r3
 8005692:	f7fd ff0d 	bl	80034b0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005696:	463b      	mov	r3, r7
 8005698:	4618      	mov	r0, r3
 800569a:	f7ff ff6b 	bl	8005574 <prvSampleTimeNow>
 800569e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2b09      	cmp	r3, #9
 80056a4:	f200 8097 	bhi.w	80057d6 <prvProcessReceivedCommands+0x19e>
 80056a8:	a201      	add	r2, pc, #4	; (adr r2, 80056b0 <prvProcessReceivedCommands+0x78>)
 80056aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ae:	bf00      	nop
 80056b0:	080056d9 	.word	0x080056d9
 80056b4:	080056d9 	.word	0x080056d9
 80056b8:	080056d9 	.word	0x080056d9
 80056bc:	0800574d 	.word	0x0800574d
 80056c0:	08005761 	.word	0x08005761
 80056c4:	080057ab 	.word	0x080057ab
 80056c8:	080056d9 	.word	0x080056d9
 80056cc:	080056d9 	.word	0x080056d9
 80056d0:	0800574d 	.word	0x0800574d
 80056d4:	08005761 	.word	0x08005761
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80056d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056de:	f043 0301 	orr.w	r3, r3, #1
 80056e2:	b2da      	uxtb	r2, r3
 80056e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80056ea:	68ba      	ldr	r2, [r7, #8]
 80056ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ee:	699b      	ldr	r3, [r3, #24]
 80056f0:	18d1      	adds	r1, r2, r3
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056f8:	f7ff ff5c 	bl	80055b4 <prvInsertTimerInActiveList>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d069      	beq.n	80057d6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005704:	6a1b      	ldr	r3, [r3, #32]
 8005706:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005708:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800570a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800570c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005710:	f003 0304 	and.w	r3, r3, #4
 8005714:	2b00      	cmp	r3, #0
 8005716:	d05e      	beq.n	80057d6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005718:	68ba      	ldr	r2, [r7, #8]
 800571a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571c:	699b      	ldr	r3, [r3, #24]
 800571e:	441a      	add	r2, r3
 8005720:	2300      	movs	r3, #0
 8005722:	9300      	str	r3, [sp, #0]
 8005724:	2300      	movs	r3, #0
 8005726:	2100      	movs	r1, #0
 8005728:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800572a:	f7ff fe05 	bl	8005338 <xTimerGenericCommand>
 800572e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005730:	6a3b      	ldr	r3, [r7, #32]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d14f      	bne.n	80057d6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800573a:	f383 8811 	msr	BASEPRI, r3
 800573e:	f3bf 8f6f 	isb	sy
 8005742:	f3bf 8f4f 	dsb	sy
 8005746:	61bb      	str	r3, [r7, #24]
}
 8005748:	bf00      	nop
 800574a:	e7fe      	b.n	800574a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800574c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800574e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005752:	f023 0301 	bic.w	r3, r3, #1
 8005756:	b2da      	uxtb	r2, r3
 8005758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800575a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800575e:	e03a      	b.n	80057d6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005762:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005766:	f043 0301 	orr.w	r3, r3, #1
 800576a:	b2da      	uxtb	r2, r3
 800576c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800576e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005772:	68ba      	ldr	r2, [r7, #8]
 8005774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005776:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800577a:	699b      	ldr	r3, [r3, #24]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d10a      	bne.n	8005796 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005784:	f383 8811 	msr	BASEPRI, r3
 8005788:	f3bf 8f6f 	isb	sy
 800578c:	f3bf 8f4f 	dsb	sy
 8005790:	617b      	str	r3, [r7, #20]
}
 8005792:	bf00      	nop
 8005794:	e7fe      	b.n	8005794 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005798:	699a      	ldr	r2, [r3, #24]
 800579a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579c:	18d1      	adds	r1, r2, r3
 800579e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057a4:	f7ff ff06 	bl	80055b4 <prvInsertTimerInActiveList>
					break;
 80057a8:	e015      	b.n	80057d6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80057aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057b0:	f003 0302 	and.w	r3, r3, #2
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d103      	bne.n	80057c0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80057b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057ba:	f000 fbe1 	bl	8005f80 <vPortFree>
 80057be:	e00a      	b.n	80057d6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80057c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057c6:	f023 0301 	bic.w	r3, r3, #1
 80057ca:	b2da      	uxtb	r2, r3
 80057cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80057d2:	e000      	b.n	80057d6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80057d4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80057d6:	4b08      	ldr	r3, [pc, #32]	; (80057f8 <prvProcessReceivedCommands+0x1c0>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	1d39      	adds	r1, r7, #4
 80057dc:	2200      	movs	r2, #0
 80057de:	4618      	mov	r0, r3
 80057e0:	f7fe f9f4 	bl	8003bcc <xQueueReceive>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	f47f af2a 	bne.w	8005640 <prvProcessReceivedCommands+0x8>
	}
}
 80057ec:	bf00      	nop
 80057ee:	bf00      	nop
 80057f0:	3730      	adds	r7, #48	; 0x30
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	20000c24 	.word	0x20000c24

080057fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b088      	sub	sp, #32
 8005800:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005802:	e048      	b.n	8005896 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005804:	4b2d      	ldr	r3, [pc, #180]	; (80058bc <prvSwitchTimerLists+0xc0>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800580e:	4b2b      	ldr	r3, [pc, #172]	; (80058bc <prvSwitchTimerLists+0xc0>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	3304      	adds	r3, #4
 800581c:	4618      	mov	r0, r3
 800581e:	f7fd fe47 	bl	80034b0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6a1b      	ldr	r3, [r3, #32]
 8005826:	68f8      	ldr	r0, [r7, #12]
 8005828:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005830:	f003 0304 	and.w	r3, r3, #4
 8005834:	2b00      	cmp	r3, #0
 8005836:	d02e      	beq.n	8005896 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	699b      	ldr	r3, [r3, #24]
 800583c:	693a      	ldr	r2, [r7, #16]
 800583e:	4413      	add	r3, r2
 8005840:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005842:	68ba      	ldr	r2, [r7, #8]
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	429a      	cmp	r2, r3
 8005848:	d90e      	bls.n	8005868 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	68ba      	ldr	r2, [r7, #8]
 800584e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	68fa      	ldr	r2, [r7, #12]
 8005854:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005856:	4b19      	ldr	r3, [pc, #100]	; (80058bc <prvSwitchTimerLists+0xc0>)
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	3304      	adds	r3, #4
 800585e:	4619      	mov	r1, r3
 8005860:	4610      	mov	r0, r2
 8005862:	f7fd fdec 	bl	800343e <vListInsert>
 8005866:	e016      	b.n	8005896 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005868:	2300      	movs	r3, #0
 800586a:	9300      	str	r3, [sp, #0]
 800586c:	2300      	movs	r3, #0
 800586e:	693a      	ldr	r2, [r7, #16]
 8005870:	2100      	movs	r1, #0
 8005872:	68f8      	ldr	r0, [r7, #12]
 8005874:	f7ff fd60 	bl	8005338 <xTimerGenericCommand>
 8005878:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d10a      	bne.n	8005896 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005884:	f383 8811 	msr	BASEPRI, r3
 8005888:	f3bf 8f6f 	isb	sy
 800588c:	f3bf 8f4f 	dsb	sy
 8005890:	603b      	str	r3, [r7, #0]
}
 8005892:	bf00      	nop
 8005894:	e7fe      	b.n	8005894 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005896:	4b09      	ldr	r3, [pc, #36]	; (80058bc <prvSwitchTimerLists+0xc0>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d1b1      	bne.n	8005804 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80058a0:	4b06      	ldr	r3, [pc, #24]	; (80058bc <prvSwitchTimerLists+0xc0>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80058a6:	4b06      	ldr	r3, [pc, #24]	; (80058c0 <prvSwitchTimerLists+0xc4>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a04      	ldr	r2, [pc, #16]	; (80058bc <prvSwitchTimerLists+0xc0>)
 80058ac:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80058ae:	4a04      	ldr	r2, [pc, #16]	; (80058c0 <prvSwitchTimerLists+0xc4>)
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	6013      	str	r3, [r2, #0]
}
 80058b4:	bf00      	nop
 80058b6:	3718      	adds	r7, #24
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	20000c1c 	.word	0x20000c1c
 80058c0:	20000c20 	.word	0x20000c20

080058c4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b082      	sub	sp, #8
 80058c8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80058ca:	f000 f96b 	bl	8005ba4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80058ce:	4b15      	ldr	r3, [pc, #84]	; (8005924 <prvCheckForValidListAndQueue+0x60>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d120      	bne.n	8005918 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80058d6:	4814      	ldr	r0, [pc, #80]	; (8005928 <prvCheckForValidListAndQueue+0x64>)
 80058d8:	f7fd fd60 	bl	800339c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80058dc:	4813      	ldr	r0, [pc, #76]	; (800592c <prvCheckForValidListAndQueue+0x68>)
 80058de:	f7fd fd5d 	bl	800339c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80058e2:	4b13      	ldr	r3, [pc, #76]	; (8005930 <prvCheckForValidListAndQueue+0x6c>)
 80058e4:	4a10      	ldr	r2, [pc, #64]	; (8005928 <prvCheckForValidListAndQueue+0x64>)
 80058e6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80058e8:	4b12      	ldr	r3, [pc, #72]	; (8005934 <prvCheckForValidListAndQueue+0x70>)
 80058ea:	4a10      	ldr	r2, [pc, #64]	; (800592c <prvCheckForValidListAndQueue+0x68>)
 80058ec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80058ee:	2300      	movs	r3, #0
 80058f0:	9300      	str	r3, [sp, #0]
 80058f2:	4b11      	ldr	r3, [pc, #68]	; (8005938 <prvCheckForValidListAndQueue+0x74>)
 80058f4:	4a11      	ldr	r2, [pc, #68]	; (800593c <prvCheckForValidListAndQueue+0x78>)
 80058f6:	2110      	movs	r1, #16
 80058f8:	200a      	movs	r0, #10
 80058fa:	f7fd fe6b 	bl	80035d4 <xQueueGenericCreateStatic>
 80058fe:	4603      	mov	r3, r0
 8005900:	4a08      	ldr	r2, [pc, #32]	; (8005924 <prvCheckForValidListAndQueue+0x60>)
 8005902:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005904:	4b07      	ldr	r3, [pc, #28]	; (8005924 <prvCheckForValidListAndQueue+0x60>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d005      	beq.n	8005918 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800590c:	4b05      	ldr	r3, [pc, #20]	; (8005924 <prvCheckForValidListAndQueue+0x60>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	490b      	ldr	r1, [pc, #44]	; (8005940 <prvCheckForValidListAndQueue+0x7c>)
 8005912:	4618      	mov	r0, r3
 8005914:	f7fe fc6e 	bl	80041f4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005918:	f000 f974 	bl	8005c04 <vPortExitCritical>
}
 800591c:	bf00      	nop
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
 8005922:	bf00      	nop
 8005924:	20000c24 	.word	0x20000c24
 8005928:	20000bf4 	.word	0x20000bf4
 800592c:	20000c08 	.word	0x20000c08
 8005930:	20000c1c 	.word	0x20000c1c
 8005934:	20000c20 	.word	0x20000c20
 8005938:	20000cd0 	.word	0x20000cd0
 800593c:	20000c30 	.word	0x20000c30
 8005940:	08006a6c 	.word	0x08006a6c

08005944 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005944:	b480      	push	{r7}
 8005946:	b085      	sub	sp, #20
 8005948:	af00      	add	r7, sp, #0
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	60b9      	str	r1, [r7, #8]
 800594e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	3b04      	subs	r3, #4
 8005954:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800595c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	3b04      	subs	r3, #4
 8005962:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	f023 0201 	bic.w	r2, r3, #1
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	3b04      	subs	r3, #4
 8005972:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005974:	4a0c      	ldr	r2, [pc, #48]	; (80059a8 <pxPortInitialiseStack+0x64>)
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	3b14      	subs	r3, #20
 800597e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	3b04      	subs	r3, #4
 800598a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f06f 0202 	mvn.w	r2, #2
 8005992:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	3b20      	subs	r3, #32
 8005998:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800599a:	68fb      	ldr	r3, [r7, #12]
}
 800599c:	4618      	mov	r0, r3
 800599e:	3714      	adds	r7, #20
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr
 80059a8:	080059ad 	.word	0x080059ad

080059ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80059ac:	b480      	push	{r7}
 80059ae:	b085      	sub	sp, #20
 80059b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80059b2:	2300      	movs	r3, #0
 80059b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80059b6:	4b12      	ldr	r3, [pc, #72]	; (8005a00 <prvTaskExitError+0x54>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059be:	d00a      	beq.n	80059d6 <prvTaskExitError+0x2a>
	__asm volatile
 80059c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c4:	f383 8811 	msr	BASEPRI, r3
 80059c8:	f3bf 8f6f 	isb	sy
 80059cc:	f3bf 8f4f 	dsb	sy
 80059d0:	60fb      	str	r3, [r7, #12]
}
 80059d2:	bf00      	nop
 80059d4:	e7fe      	b.n	80059d4 <prvTaskExitError+0x28>
	__asm volatile
 80059d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059da:	f383 8811 	msr	BASEPRI, r3
 80059de:	f3bf 8f6f 	isb	sy
 80059e2:	f3bf 8f4f 	dsb	sy
 80059e6:	60bb      	str	r3, [r7, #8]
}
 80059e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80059ea:	bf00      	nop
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d0fc      	beq.n	80059ec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80059f2:	bf00      	nop
 80059f4:	bf00      	nop
 80059f6:	3714      	adds	r7, #20
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr
 8005a00:	2000000c 	.word	0x2000000c
	...

08005a10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005a10:	4b07      	ldr	r3, [pc, #28]	; (8005a30 <pxCurrentTCBConst2>)
 8005a12:	6819      	ldr	r1, [r3, #0]
 8005a14:	6808      	ldr	r0, [r1, #0]
 8005a16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a1a:	f380 8809 	msr	PSP, r0
 8005a1e:	f3bf 8f6f 	isb	sy
 8005a22:	f04f 0000 	mov.w	r0, #0
 8005a26:	f380 8811 	msr	BASEPRI, r0
 8005a2a:	4770      	bx	lr
 8005a2c:	f3af 8000 	nop.w

08005a30 <pxCurrentTCBConst2>:
 8005a30:	200006f4 	.word	0x200006f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005a34:	bf00      	nop
 8005a36:	bf00      	nop

08005a38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005a38:	4808      	ldr	r0, [pc, #32]	; (8005a5c <prvPortStartFirstTask+0x24>)
 8005a3a:	6800      	ldr	r0, [r0, #0]
 8005a3c:	6800      	ldr	r0, [r0, #0]
 8005a3e:	f380 8808 	msr	MSP, r0
 8005a42:	f04f 0000 	mov.w	r0, #0
 8005a46:	f380 8814 	msr	CONTROL, r0
 8005a4a:	b662      	cpsie	i
 8005a4c:	b661      	cpsie	f
 8005a4e:	f3bf 8f4f 	dsb	sy
 8005a52:	f3bf 8f6f 	isb	sy
 8005a56:	df00      	svc	0
 8005a58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005a5a:	bf00      	nop
 8005a5c:	e000ed08 	.word	0xe000ed08

08005a60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b086      	sub	sp, #24
 8005a64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005a66:	4b46      	ldr	r3, [pc, #280]	; (8005b80 <xPortStartScheduler+0x120>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a46      	ldr	r2, [pc, #280]	; (8005b84 <xPortStartScheduler+0x124>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d10a      	bne.n	8005a86 <xPortStartScheduler+0x26>
	__asm volatile
 8005a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a74:	f383 8811 	msr	BASEPRI, r3
 8005a78:	f3bf 8f6f 	isb	sy
 8005a7c:	f3bf 8f4f 	dsb	sy
 8005a80:	613b      	str	r3, [r7, #16]
}
 8005a82:	bf00      	nop
 8005a84:	e7fe      	b.n	8005a84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005a86:	4b3e      	ldr	r3, [pc, #248]	; (8005b80 <xPortStartScheduler+0x120>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a3f      	ldr	r2, [pc, #252]	; (8005b88 <xPortStartScheduler+0x128>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d10a      	bne.n	8005aa6 <xPortStartScheduler+0x46>
	__asm volatile
 8005a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a94:	f383 8811 	msr	BASEPRI, r3
 8005a98:	f3bf 8f6f 	isb	sy
 8005a9c:	f3bf 8f4f 	dsb	sy
 8005aa0:	60fb      	str	r3, [r7, #12]
}
 8005aa2:	bf00      	nop
 8005aa4:	e7fe      	b.n	8005aa4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005aa6:	4b39      	ldr	r3, [pc, #228]	; (8005b8c <xPortStartScheduler+0x12c>)
 8005aa8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	22ff      	movs	r2, #255	; 0xff
 8005ab6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005ac0:	78fb      	ldrb	r3, [r7, #3]
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005ac8:	b2da      	uxtb	r2, r3
 8005aca:	4b31      	ldr	r3, [pc, #196]	; (8005b90 <xPortStartScheduler+0x130>)
 8005acc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005ace:	4b31      	ldr	r3, [pc, #196]	; (8005b94 <xPortStartScheduler+0x134>)
 8005ad0:	2207      	movs	r2, #7
 8005ad2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005ad4:	e009      	b.n	8005aea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005ad6:	4b2f      	ldr	r3, [pc, #188]	; (8005b94 <xPortStartScheduler+0x134>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	3b01      	subs	r3, #1
 8005adc:	4a2d      	ldr	r2, [pc, #180]	; (8005b94 <xPortStartScheduler+0x134>)
 8005ade:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005ae0:	78fb      	ldrb	r3, [r7, #3]
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	005b      	lsls	r3, r3, #1
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005aea:	78fb      	ldrb	r3, [r7, #3]
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005af2:	2b80      	cmp	r3, #128	; 0x80
 8005af4:	d0ef      	beq.n	8005ad6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005af6:	4b27      	ldr	r3, [pc, #156]	; (8005b94 <xPortStartScheduler+0x134>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f1c3 0307 	rsb	r3, r3, #7
 8005afe:	2b04      	cmp	r3, #4
 8005b00:	d00a      	beq.n	8005b18 <xPortStartScheduler+0xb8>
	__asm volatile
 8005b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b06:	f383 8811 	msr	BASEPRI, r3
 8005b0a:	f3bf 8f6f 	isb	sy
 8005b0e:	f3bf 8f4f 	dsb	sy
 8005b12:	60bb      	str	r3, [r7, #8]
}
 8005b14:	bf00      	nop
 8005b16:	e7fe      	b.n	8005b16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005b18:	4b1e      	ldr	r3, [pc, #120]	; (8005b94 <xPortStartScheduler+0x134>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	021b      	lsls	r3, r3, #8
 8005b1e:	4a1d      	ldr	r2, [pc, #116]	; (8005b94 <xPortStartScheduler+0x134>)
 8005b20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005b22:	4b1c      	ldr	r3, [pc, #112]	; (8005b94 <xPortStartScheduler+0x134>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b2a:	4a1a      	ldr	r2, [pc, #104]	; (8005b94 <xPortStartScheduler+0x134>)
 8005b2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	b2da      	uxtb	r2, r3
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005b36:	4b18      	ldr	r3, [pc, #96]	; (8005b98 <xPortStartScheduler+0x138>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a17      	ldr	r2, [pc, #92]	; (8005b98 <xPortStartScheduler+0x138>)
 8005b3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005b40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005b42:	4b15      	ldr	r3, [pc, #84]	; (8005b98 <xPortStartScheduler+0x138>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a14      	ldr	r2, [pc, #80]	; (8005b98 <xPortStartScheduler+0x138>)
 8005b48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005b4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005b4e:	f000 f8dd 	bl	8005d0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005b52:	4b12      	ldr	r3, [pc, #72]	; (8005b9c <xPortStartScheduler+0x13c>)
 8005b54:	2200      	movs	r2, #0
 8005b56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005b58:	f000 f8fc 	bl	8005d54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005b5c:	4b10      	ldr	r3, [pc, #64]	; (8005ba0 <xPortStartScheduler+0x140>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a0f      	ldr	r2, [pc, #60]	; (8005ba0 <xPortStartScheduler+0x140>)
 8005b62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005b66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005b68:	f7ff ff66 	bl	8005a38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005b6c:	f7fe ff52 	bl	8004a14 <vTaskSwitchContext>
	prvTaskExitError();
 8005b70:	f7ff ff1c 	bl	80059ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005b74:	2300      	movs	r3, #0
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3718      	adds	r7, #24
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	e000ed00 	.word	0xe000ed00
 8005b84:	410fc271 	.word	0x410fc271
 8005b88:	410fc270 	.word	0x410fc270
 8005b8c:	e000e400 	.word	0xe000e400
 8005b90:	20000d20 	.word	0x20000d20
 8005b94:	20000d24 	.word	0x20000d24
 8005b98:	e000ed20 	.word	0xe000ed20
 8005b9c:	2000000c 	.word	0x2000000c
 8005ba0:	e000ef34 	.word	0xe000ef34

08005ba4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
	__asm volatile
 8005baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bae:	f383 8811 	msr	BASEPRI, r3
 8005bb2:	f3bf 8f6f 	isb	sy
 8005bb6:	f3bf 8f4f 	dsb	sy
 8005bba:	607b      	str	r3, [r7, #4]
}
 8005bbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005bbe:	4b0f      	ldr	r3, [pc, #60]	; (8005bfc <vPortEnterCritical+0x58>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	4a0d      	ldr	r2, [pc, #52]	; (8005bfc <vPortEnterCritical+0x58>)
 8005bc6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005bc8:	4b0c      	ldr	r3, [pc, #48]	; (8005bfc <vPortEnterCritical+0x58>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d10f      	bne.n	8005bf0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005bd0:	4b0b      	ldr	r3, [pc, #44]	; (8005c00 <vPortEnterCritical+0x5c>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d00a      	beq.n	8005bf0 <vPortEnterCritical+0x4c>
	__asm volatile
 8005bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bde:	f383 8811 	msr	BASEPRI, r3
 8005be2:	f3bf 8f6f 	isb	sy
 8005be6:	f3bf 8f4f 	dsb	sy
 8005bea:	603b      	str	r3, [r7, #0]
}
 8005bec:	bf00      	nop
 8005bee:	e7fe      	b.n	8005bee <vPortEnterCritical+0x4a>
	}
}
 8005bf0:	bf00      	nop
 8005bf2:	370c      	adds	r7, #12
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr
 8005bfc:	2000000c 	.word	0x2000000c
 8005c00:	e000ed04 	.word	0xe000ed04

08005c04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005c0a:	4b12      	ldr	r3, [pc, #72]	; (8005c54 <vPortExitCritical+0x50>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d10a      	bne.n	8005c28 <vPortExitCritical+0x24>
	__asm volatile
 8005c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c16:	f383 8811 	msr	BASEPRI, r3
 8005c1a:	f3bf 8f6f 	isb	sy
 8005c1e:	f3bf 8f4f 	dsb	sy
 8005c22:	607b      	str	r3, [r7, #4]
}
 8005c24:	bf00      	nop
 8005c26:	e7fe      	b.n	8005c26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005c28:	4b0a      	ldr	r3, [pc, #40]	; (8005c54 <vPortExitCritical+0x50>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	3b01      	subs	r3, #1
 8005c2e:	4a09      	ldr	r2, [pc, #36]	; (8005c54 <vPortExitCritical+0x50>)
 8005c30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005c32:	4b08      	ldr	r3, [pc, #32]	; (8005c54 <vPortExitCritical+0x50>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d105      	bne.n	8005c46 <vPortExitCritical+0x42>
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	f383 8811 	msr	BASEPRI, r3
}
 8005c44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005c46:	bf00      	nop
 8005c48:	370c      	adds	r7, #12
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr
 8005c52:	bf00      	nop
 8005c54:	2000000c 	.word	0x2000000c
	...

08005c60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005c60:	f3ef 8009 	mrs	r0, PSP
 8005c64:	f3bf 8f6f 	isb	sy
 8005c68:	4b15      	ldr	r3, [pc, #84]	; (8005cc0 <pxCurrentTCBConst>)
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	f01e 0f10 	tst.w	lr, #16
 8005c70:	bf08      	it	eq
 8005c72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005c76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c7a:	6010      	str	r0, [r2, #0]
 8005c7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005c80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005c84:	f380 8811 	msr	BASEPRI, r0
 8005c88:	f3bf 8f4f 	dsb	sy
 8005c8c:	f3bf 8f6f 	isb	sy
 8005c90:	f7fe fec0 	bl	8004a14 <vTaskSwitchContext>
 8005c94:	f04f 0000 	mov.w	r0, #0
 8005c98:	f380 8811 	msr	BASEPRI, r0
 8005c9c:	bc09      	pop	{r0, r3}
 8005c9e:	6819      	ldr	r1, [r3, #0]
 8005ca0:	6808      	ldr	r0, [r1, #0]
 8005ca2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ca6:	f01e 0f10 	tst.w	lr, #16
 8005caa:	bf08      	it	eq
 8005cac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005cb0:	f380 8809 	msr	PSP, r0
 8005cb4:	f3bf 8f6f 	isb	sy
 8005cb8:	4770      	bx	lr
 8005cba:	bf00      	nop
 8005cbc:	f3af 8000 	nop.w

08005cc0 <pxCurrentTCBConst>:
 8005cc0:	200006f4 	.word	0x200006f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005cc4:	bf00      	nop
 8005cc6:	bf00      	nop

08005cc8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b082      	sub	sp, #8
 8005ccc:	af00      	add	r7, sp, #0
	__asm volatile
 8005cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd2:	f383 8811 	msr	BASEPRI, r3
 8005cd6:	f3bf 8f6f 	isb	sy
 8005cda:	f3bf 8f4f 	dsb	sy
 8005cde:	607b      	str	r3, [r7, #4]
}
 8005ce0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005ce2:	f7fe fddd 	bl	80048a0 <xTaskIncrementTick>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d003      	beq.n	8005cf4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005cec:	4b06      	ldr	r3, [pc, #24]	; (8005d08 <xPortSysTickHandler+0x40>)
 8005cee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cf2:	601a      	str	r2, [r3, #0]
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	f383 8811 	msr	BASEPRI, r3
}
 8005cfe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005d00:	bf00      	nop
 8005d02:	3708      	adds	r7, #8
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}
 8005d08:	e000ed04 	.word	0xe000ed04

08005d0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005d10:	4b0b      	ldr	r3, [pc, #44]	; (8005d40 <vPortSetupTimerInterrupt+0x34>)
 8005d12:	2200      	movs	r2, #0
 8005d14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005d16:	4b0b      	ldr	r3, [pc, #44]	; (8005d44 <vPortSetupTimerInterrupt+0x38>)
 8005d18:	2200      	movs	r2, #0
 8005d1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005d1c:	4b0a      	ldr	r3, [pc, #40]	; (8005d48 <vPortSetupTimerInterrupt+0x3c>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a0a      	ldr	r2, [pc, #40]	; (8005d4c <vPortSetupTimerInterrupt+0x40>)
 8005d22:	fba2 2303 	umull	r2, r3, r2, r3
 8005d26:	099b      	lsrs	r3, r3, #6
 8005d28:	4a09      	ldr	r2, [pc, #36]	; (8005d50 <vPortSetupTimerInterrupt+0x44>)
 8005d2a:	3b01      	subs	r3, #1
 8005d2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005d2e:	4b04      	ldr	r3, [pc, #16]	; (8005d40 <vPortSetupTimerInterrupt+0x34>)
 8005d30:	2207      	movs	r2, #7
 8005d32:	601a      	str	r2, [r3, #0]
}
 8005d34:	bf00      	nop
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr
 8005d3e:	bf00      	nop
 8005d40:	e000e010 	.word	0xe000e010
 8005d44:	e000e018 	.word	0xe000e018
 8005d48:	20000000 	.word	0x20000000
 8005d4c:	10624dd3 	.word	0x10624dd3
 8005d50:	e000e014 	.word	0xe000e014

08005d54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005d54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005d64 <vPortEnableVFP+0x10>
 8005d58:	6801      	ldr	r1, [r0, #0]
 8005d5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005d5e:	6001      	str	r1, [r0, #0]
 8005d60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005d62:	bf00      	nop
 8005d64:	e000ed88 	.word	0xe000ed88

08005d68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005d68:	b480      	push	{r7}
 8005d6a:	b085      	sub	sp, #20
 8005d6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005d6e:	f3ef 8305 	mrs	r3, IPSR
 8005d72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2b0f      	cmp	r3, #15
 8005d78:	d914      	bls.n	8005da4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005d7a:	4a17      	ldr	r2, [pc, #92]	; (8005dd8 <vPortValidateInterruptPriority+0x70>)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	4413      	add	r3, r2
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005d84:	4b15      	ldr	r3, [pc, #84]	; (8005ddc <vPortValidateInterruptPriority+0x74>)
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	7afa      	ldrb	r2, [r7, #11]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d20a      	bcs.n	8005da4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d92:	f383 8811 	msr	BASEPRI, r3
 8005d96:	f3bf 8f6f 	isb	sy
 8005d9a:	f3bf 8f4f 	dsb	sy
 8005d9e:	607b      	str	r3, [r7, #4]
}
 8005da0:	bf00      	nop
 8005da2:	e7fe      	b.n	8005da2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005da4:	4b0e      	ldr	r3, [pc, #56]	; (8005de0 <vPortValidateInterruptPriority+0x78>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005dac:	4b0d      	ldr	r3, [pc, #52]	; (8005de4 <vPortValidateInterruptPriority+0x7c>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d90a      	bls.n	8005dca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db8:	f383 8811 	msr	BASEPRI, r3
 8005dbc:	f3bf 8f6f 	isb	sy
 8005dc0:	f3bf 8f4f 	dsb	sy
 8005dc4:	603b      	str	r3, [r7, #0]
}
 8005dc6:	bf00      	nop
 8005dc8:	e7fe      	b.n	8005dc8 <vPortValidateInterruptPriority+0x60>
	}
 8005dca:	bf00      	nop
 8005dcc:	3714      	adds	r7, #20
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr
 8005dd6:	bf00      	nop
 8005dd8:	e000e3f0 	.word	0xe000e3f0
 8005ddc:	20000d20 	.word	0x20000d20
 8005de0:	e000ed0c 	.word	0xe000ed0c
 8005de4:	20000d24 	.word	0x20000d24

08005de8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b08a      	sub	sp, #40	; 0x28
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005df0:	2300      	movs	r3, #0
 8005df2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005df4:	f7fe fc98 	bl	8004728 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005df8:	4b5b      	ldr	r3, [pc, #364]	; (8005f68 <pvPortMalloc+0x180>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d101      	bne.n	8005e04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005e00:	f000 f920 	bl	8006044 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005e04:	4b59      	ldr	r3, [pc, #356]	; (8005f6c <pvPortMalloc+0x184>)
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	4013      	ands	r3, r2
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	f040 8093 	bne.w	8005f38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d01d      	beq.n	8005e54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005e18:	2208      	movs	r2, #8
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4413      	add	r3, r2
 8005e1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f003 0307 	and.w	r3, r3, #7
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d014      	beq.n	8005e54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f023 0307 	bic.w	r3, r3, #7
 8005e30:	3308      	adds	r3, #8
 8005e32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f003 0307 	and.w	r3, r3, #7
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d00a      	beq.n	8005e54 <pvPortMalloc+0x6c>
	__asm volatile
 8005e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e42:	f383 8811 	msr	BASEPRI, r3
 8005e46:	f3bf 8f6f 	isb	sy
 8005e4a:	f3bf 8f4f 	dsb	sy
 8005e4e:	617b      	str	r3, [r7, #20]
}
 8005e50:	bf00      	nop
 8005e52:	e7fe      	b.n	8005e52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d06e      	beq.n	8005f38 <pvPortMalloc+0x150>
 8005e5a:	4b45      	ldr	r3, [pc, #276]	; (8005f70 <pvPortMalloc+0x188>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d869      	bhi.n	8005f38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005e64:	4b43      	ldr	r3, [pc, #268]	; (8005f74 <pvPortMalloc+0x18c>)
 8005e66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005e68:	4b42      	ldr	r3, [pc, #264]	; (8005f74 <pvPortMalloc+0x18c>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e6e:	e004      	b.n	8005e7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d903      	bls.n	8005e8c <pvPortMalloc+0xa4>
 8005e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d1f1      	bne.n	8005e70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005e8c:	4b36      	ldr	r3, [pc, #216]	; (8005f68 <pvPortMalloc+0x180>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d050      	beq.n	8005f38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005e96:	6a3b      	ldr	r3, [r7, #32]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	2208      	movs	r2, #8
 8005e9c:	4413      	add	r3, r2
 8005e9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	6a3b      	ldr	r3, [r7, #32]
 8005ea6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eaa:	685a      	ldr	r2, [r3, #4]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	1ad2      	subs	r2, r2, r3
 8005eb0:	2308      	movs	r3, #8
 8005eb2:	005b      	lsls	r3, r3, #1
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d91f      	bls.n	8005ef8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005eb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	4413      	add	r3, r2
 8005ebe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ec0:	69bb      	ldr	r3, [r7, #24]
 8005ec2:	f003 0307 	and.w	r3, r3, #7
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d00a      	beq.n	8005ee0 <pvPortMalloc+0xf8>
	__asm volatile
 8005eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ece:	f383 8811 	msr	BASEPRI, r3
 8005ed2:	f3bf 8f6f 	isb	sy
 8005ed6:	f3bf 8f4f 	dsb	sy
 8005eda:	613b      	str	r3, [r7, #16]
}
 8005edc:	bf00      	nop
 8005ede:	e7fe      	b.n	8005ede <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee2:	685a      	ldr	r2, [r3, #4]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	1ad2      	subs	r2, r2, r3
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005ef2:	69b8      	ldr	r0, [r7, #24]
 8005ef4:	f000 f908 	bl	8006108 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005ef8:	4b1d      	ldr	r3, [pc, #116]	; (8005f70 <pvPortMalloc+0x188>)
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	1ad3      	subs	r3, r2, r3
 8005f02:	4a1b      	ldr	r2, [pc, #108]	; (8005f70 <pvPortMalloc+0x188>)
 8005f04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005f06:	4b1a      	ldr	r3, [pc, #104]	; (8005f70 <pvPortMalloc+0x188>)
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	4b1b      	ldr	r3, [pc, #108]	; (8005f78 <pvPortMalloc+0x190>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d203      	bcs.n	8005f1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005f12:	4b17      	ldr	r3, [pc, #92]	; (8005f70 <pvPortMalloc+0x188>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a18      	ldr	r2, [pc, #96]	; (8005f78 <pvPortMalloc+0x190>)
 8005f18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1c:	685a      	ldr	r2, [r3, #4]
 8005f1e:	4b13      	ldr	r3, [pc, #76]	; (8005f6c <pvPortMalloc+0x184>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	431a      	orrs	r2, r3
 8005f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005f2e:	4b13      	ldr	r3, [pc, #76]	; (8005f7c <pvPortMalloc+0x194>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	3301      	adds	r3, #1
 8005f34:	4a11      	ldr	r2, [pc, #68]	; (8005f7c <pvPortMalloc+0x194>)
 8005f36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005f38:	f7fe fc04 	bl	8004744 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	f003 0307 	and.w	r3, r3, #7
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d00a      	beq.n	8005f5c <pvPortMalloc+0x174>
	__asm volatile
 8005f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f4a:	f383 8811 	msr	BASEPRI, r3
 8005f4e:	f3bf 8f6f 	isb	sy
 8005f52:	f3bf 8f4f 	dsb	sy
 8005f56:	60fb      	str	r3, [r7, #12]
}
 8005f58:	bf00      	nop
 8005f5a:	e7fe      	b.n	8005f5a <pvPortMalloc+0x172>
	return pvReturn;
 8005f5c:	69fb      	ldr	r3, [r7, #28]
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3728      	adds	r7, #40	; 0x28
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	200018e8 	.word	0x200018e8
 8005f6c:	200018fc 	.word	0x200018fc
 8005f70:	200018ec 	.word	0x200018ec
 8005f74:	200018e0 	.word	0x200018e0
 8005f78:	200018f0 	.word	0x200018f0
 8005f7c:	200018f4 	.word	0x200018f4

08005f80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b086      	sub	sp, #24
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d04d      	beq.n	800602e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005f92:	2308      	movs	r3, #8
 8005f94:	425b      	negs	r3, r3
 8005f96:	697a      	ldr	r2, [r7, #20]
 8005f98:	4413      	add	r3, r2
 8005f9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	685a      	ldr	r2, [r3, #4]
 8005fa4:	4b24      	ldr	r3, [pc, #144]	; (8006038 <vPortFree+0xb8>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4013      	ands	r3, r2
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d10a      	bne.n	8005fc4 <vPortFree+0x44>
	__asm volatile
 8005fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb2:	f383 8811 	msr	BASEPRI, r3
 8005fb6:	f3bf 8f6f 	isb	sy
 8005fba:	f3bf 8f4f 	dsb	sy
 8005fbe:	60fb      	str	r3, [r7, #12]
}
 8005fc0:	bf00      	nop
 8005fc2:	e7fe      	b.n	8005fc2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d00a      	beq.n	8005fe2 <vPortFree+0x62>
	__asm volatile
 8005fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd0:	f383 8811 	msr	BASEPRI, r3
 8005fd4:	f3bf 8f6f 	isb	sy
 8005fd8:	f3bf 8f4f 	dsb	sy
 8005fdc:	60bb      	str	r3, [r7, #8]
}
 8005fde:	bf00      	nop
 8005fe0:	e7fe      	b.n	8005fe0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	685a      	ldr	r2, [r3, #4]
 8005fe6:	4b14      	ldr	r3, [pc, #80]	; (8006038 <vPortFree+0xb8>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4013      	ands	r3, r2
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d01e      	beq.n	800602e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d11a      	bne.n	800602e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	685a      	ldr	r2, [r3, #4]
 8005ffc:	4b0e      	ldr	r3, [pc, #56]	; (8006038 <vPortFree+0xb8>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	43db      	mvns	r3, r3
 8006002:	401a      	ands	r2, r3
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006008:	f7fe fb8e 	bl	8004728 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	685a      	ldr	r2, [r3, #4]
 8006010:	4b0a      	ldr	r3, [pc, #40]	; (800603c <vPortFree+0xbc>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4413      	add	r3, r2
 8006016:	4a09      	ldr	r2, [pc, #36]	; (800603c <vPortFree+0xbc>)
 8006018:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800601a:	6938      	ldr	r0, [r7, #16]
 800601c:	f000 f874 	bl	8006108 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006020:	4b07      	ldr	r3, [pc, #28]	; (8006040 <vPortFree+0xc0>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	3301      	adds	r3, #1
 8006026:	4a06      	ldr	r2, [pc, #24]	; (8006040 <vPortFree+0xc0>)
 8006028:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800602a:	f7fe fb8b 	bl	8004744 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800602e:	bf00      	nop
 8006030:	3718      	adds	r7, #24
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	200018fc 	.word	0x200018fc
 800603c:	200018ec 	.word	0x200018ec
 8006040:	200018f8 	.word	0x200018f8

08006044 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006044:	b480      	push	{r7}
 8006046:	b085      	sub	sp, #20
 8006048:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800604a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800604e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006050:	4b27      	ldr	r3, [pc, #156]	; (80060f0 <prvHeapInit+0xac>)
 8006052:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f003 0307 	and.w	r3, r3, #7
 800605a:	2b00      	cmp	r3, #0
 800605c:	d00c      	beq.n	8006078 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	3307      	adds	r3, #7
 8006062:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f023 0307 	bic.w	r3, r3, #7
 800606a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800606c:	68ba      	ldr	r2, [r7, #8]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	1ad3      	subs	r3, r2, r3
 8006072:	4a1f      	ldr	r2, [pc, #124]	; (80060f0 <prvHeapInit+0xac>)
 8006074:	4413      	add	r3, r2
 8006076:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800607c:	4a1d      	ldr	r2, [pc, #116]	; (80060f4 <prvHeapInit+0xb0>)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006082:	4b1c      	ldr	r3, [pc, #112]	; (80060f4 <prvHeapInit+0xb0>)
 8006084:	2200      	movs	r2, #0
 8006086:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	68ba      	ldr	r2, [r7, #8]
 800608c:	4413      	add	r3, r2
 800608e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006090:	2208      	movs	r2, #8
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	1a9b      	subs	r3, r3, r2
 8006096:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f023 0307 	bic.w	r3, r3, #7
 800609e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	4a15      	ldr	r2, [pc, #84]	; (80060f8 <prvHeapInit+0xb4>)
 80060a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80060a6:	4b14      	ldr	r3, [pc, #80]	; (80060f8 <prvHeapInit+0xb4>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2200      	movs	r2, #0
 80060ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80060ae:	4b12      	ldr	r3, [pc, #72]	; (80060f8 <prvHeapInit+0xb4>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	2200      	movs	r2, #0
 80060b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	68fa      	ldr	r2, [r7, #12]
 80060be:	1ad2      	subs	r2, r2, r3
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80060c4:	4b0c      	ldr	r3, [pc, #48]	; (80060f8 <prvHeapInit+0xb4>)
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	4a0a      	ldr	r2, [pc, #40]	; (80060fc <prvHeapInit+0xb8>)
 80060d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	4a09      	ldr	r2, [pc, #36]	; (8006100 <prvHeapInit+0xbc>)
 80060da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80060dc:	4b09      	ldr	r3, [pc, #36]	; (8006104 <prvHeapInit+0xc0>)
 80060de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80060e2:	601a      	str	r2, [r3, #0]
}
 80060e4:	bf00      	nop
 80060e6:	3714      	adds	r7, #20
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr
 80060f0:	20000d28 	.word	0x20000d28
 80060f4:	200018e0 	.word	0x200018e0
 80060f8:	200018e8 	.word	0x200018e8
 80060fc:	200018f0 	.word	0x200018f0
 8006100:	200018ec 	.word	0x200018ec
 8006104:	200018fc 	.word	0x200018fc

08006108 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006108:	b480      	push	{r7}
 800610a:	b085      	sub	sp, #20
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006110:	4b28      	ldr	r3, [pc, #160]	; (80061b4 <prvInsertBlockIntoFreeList+0xac>)
 8006112:	60fb      	str	r3, [r7, #12]
 8006114:	e002      	b.n	800611c <prvInsertBlockIntoFreeList+0x14>
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	60fb      	str	r3, [r7, #12]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	429a      	cmp	r2, r3
 8006124:	d8f7      	bhi.n	8006116 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	68ba      	ldr	r2, [r7, #8]
 8006130:	4413      	add	r3, r2
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	429a      	cmp	r2, r3
 8006136:	d108      	bne.n	800614a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	685a      	ldr	r2, [r3, #4]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	441a      	add	r2, r3
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	68ba      	ldr	r2, [r7, #8]
 8006154:	441a      	add	r2, r3
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	429a      	cmp	r2, r3
 800615c:	d118      	bne.n	8006190 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	4b15      	ldr	r3, [pc, #84]	; (80061b8 <prvInsertBlockIntoFreeList+0xb0>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	429a      	cmp	r2, r3
 8006168:	d00d      	beq.n	8006186 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	685a      	ldr	r2, [r3, #4]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	441a      	add	r2, r3
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	601a      	str	r2, [r3, #0]
 8006184:	e008      	b.n	8006198 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006186:	4b0c      	ldr	r3, [pc, #48]	; (80061b8 <prvInsertBlockIntoFreeList+0xb0>)
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	601a      	str	r2, [r3, #0]
 800618e:	e003      	b.n	8006198 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	429a      	cmp	r2, r3
 800619e:	d002      	beq.n	80061a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80061a6:	bf00      	nop
 80061a8:	3714      	adds	r7, #20
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr
 80061b2:	bf00      	nop
 80061b4:	200018e0 	.word	0x200018e0
 80061b8:	200018e8 	.word	0x200018e8

080061bc <IIM42652_ReadRegister>:

SemaphoreHandle_t ImuIntSemaphore;	// Handler of semaphore that blocks the sensor reading function until the DRDY interrupt arrives.
uint8_t DRDY_IIMFlag = 0x00;			// Flags the occurrence of the DRDY interrupt from IIM42652.

HAL_StatusTypeDef IIM42652_ReadRegister( IIM42652 *dev, uint8_t reg, uint8_t *data )
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b088      	sub	sp, #32
 80061c0:	af04      	add	r7, sp, #16
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	460b      	mov	r3, r1
 80061c6:	607a      	str	r2, [r7, #4]
 80061c8:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Read( dev->i2cHandle, IIM42652_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	6818      	ldr	r0, [r3, #0]
 80061ce:	7afb      	ldrb	r3, [r7, #11]
 80061d0:	b29a      	uxth	r2, r3
 80061d2:	f04f 33ff 	mov.w	r3, #4294967295
 80061d6:	9302      	str	r3, [sp, #8]
 80061d8:	2301      	movs	r3, #1
 80061da:	9301      	str	r3, [sp, #4]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	9300      	str	r3, [sp, #0]
 80061e0:	2301      	movs	r3, #1
 80061e2:	21d2      	movs	r1, #210	; 0xd2
 80061e4:	f7fb f9c2 	bl	800156c <HAL_I2C_Mem_Read>
 80061e8:	4603      	mov	r3, r0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3710      	adds	r7, #16
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}

080061f2 <IIM42652_WriteRegister>:
	return HAL_I2C_Mem_Read( dev->i2cHandle, IIM42652_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, length, HAL_MAX_DELAY);
}


HAL_StatusTypeDef IIM42652_WriteRegister( IIM42652 *dev, uint8_t reg, uint8_t *data )
{
 80061f2:	b580      	push	{r7, lr}
 80061f4:	b088      	sub	sp, #32
 80061f6:	af04      	add	r7, sp, #16
 80061f8:	60f8      	str	r0, [r7, #12]
 80061fa:	460b      	mov	r3, r1
 80061fc:	607a      	str	r2, [r7, #4]
 80061fe:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Write( dev->i2cHandle, IIM42652_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6818      	ldr	r0, [r3, #0]
 8006204:	7afb      	ldrb	r3, [r7, #11]
 8006206:	b29a      	uxth	r2, r3
 8006208:	f04f 33ff 	mov.w	r3, #4294967295
 800620c:	9302      	str	r3, [sp, #8]
 800620e:	2301      	movs	r3, #1
 8006210:	9301      	str	r3, [sp, #4]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	9300      	str	r3, [sp, #0]
 8006216:	2301      	movs	r3, #1
 8006218:	21d2      	movs	r1, #210	; 0xd2
 800621a:	f7fb f893 	bl	8001344 <HAL_I2C_Mem_Write>
 800621e:	4603      	mov	r3, r0
}
 8006220:	4618      	mov	r0, r3
 8006222:	3710      	adds	r7, #16
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <IIM42652_SoftReset>:


/* Function that performs a soft reset of device */
HAL_StatusTypeDef IIM42652_SoftReset( IIM42652 *dev )
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef status;
	uint8_t config;

	/* Reads config register, enables reset bit and writes changes */
	status =  IIM42652_ReadRegister( dev, DEVICE_CONFIG_ADD, &config );
 8006230:	f107 030e 	add.w	r3, r7, #14
 8006234:	461a      	mov	r2, r3
 8006236:	2111      	movs	r1, #17
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f7ff ffbf 	bl	80061bc <IIM42652_ReadRegister>
 800623e:	4603      	mov	r3, r0
 8006240:	73fb      	strb	r3, [r7, #15]

	config |= 0x01;
 8006242:	7bbb      	ldrb	r3, [r7, #14]
 8006244:	f043 0301 	orr.w	r3, r3, #1
 8006248:	b2db      	uxtb	r3, r3
 800624a:	73bb      	strb	r3, [r7, #14]

	status |= IIM42652_WriteRegister( dev, DEVICE_CONFIG_ADD, &config );
 800624c:	f107 030e 	add.w	r3, r7, #14
 8006250:	461a      	mov	r2, r3
 8006252:	2111      	movs	r1, #17
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f7ff ffcc 	bl	80061f2 <IIM42652_WriteRegister>
 800625a:	4603      	mov	r3, r0
 800625c:	461a      	mov	r2, r3
 800625e:	7bfb      	ldrb	r3, [r7, #15]
 8006260:	4313      	orrs	r3, r2
 8006262:	73fb      	strb	r3, [r7, #15]

	/* Waits for reset */
	vTaskDelay( 5000 / portTICK_PERIOD_MS );
 8006264:	f241 3088 	movw	r0, #5000	; 0x1388
 8006268:	f7fe f9c4 	bl	80045f4 <vTaskDelay>

	return status;
 800626c:	7bfb      	ldrb	r3, [r7, #15]
}
 800626e:	4618      	mov	r0, r3
 8006270:	3710      	adds	r7, #16
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}

08006276 <IIM42652_EnableGyro>:


/* Function enables gyroscope */
HAL_StatusTypeDef IIM42652_EnableGyro( IIM42652 *dev )
{
 8006276:	b580      	push	{r7, lr}
 8006278:	b084      	sub	sp, #16
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef status;
	uint8_t config;

	/* Reads config register, enables reset bit and writes changes */
	status =  IIM42652_ReadRegister( dev, PWR_MGMT0_ADD, &config );
 800627e:	f107 030e 	add.w	r3, r7, #14
 8006282:	461a      	mov	r2, r3
 8006284:	214e      	movs	r1, #78	; 0x4e
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f7ff ff98 	bl	80061bc <IIM42652_ReadRegister>
 800628c:	4603      	mov	r3, r0
 800628e:	73fb      	strb	r3, [r7, #15]

	config |= IIM42652_SET_GYRO_TLOW_NOISE_MODE;
 8006290:	7bbb      	ldrb	r3, [r7, #14]
 8006292:	f043 030c 	orr.w	r3, r3, #12
 8006296:	b2db      	uxtb	r3, r3
 8006298:	73bb      	strb	r3, [r7, #14]

	status |= IIM42652_WriteRegister( dev, PWR_MGMT0_ADD, &config );
 800629a:	f107 030e 	add.w	r3, r7, #14
 800629e:	461a      	mov	r2, r3
 80062a0:	214e      	movs	r1, #78	; 0x4e
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f7ff ffa5 	bl	80061f2 <IIM42652_WriteRegister>
 80062a8:	4603      	mov	r3, r0
 80062aa:	461a      	mov	r2, r3
 80062ac:	7bfb      	ldrb	r3, [r7, #15]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	73fb      	strb	r3, [r7, #15]

	/* Waits for gyroscope power on */
	vTaskDelay( 5000 / portTICK_PERIOD_MS );
 80062b2:	f241 3088 	movw	r0, #5000	; 0x1388
 80062b6:	f7fe f99d 	bl	80045f4 <vTaskDelay>

	return status;
 80062ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3710      	adds	r7, #16
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <IIM42652_EnableAccel>:


/* Function enables gyroscope */
HAL_StatusTypeDef IIM42652_EnableAccel( IIM42652 *dev )
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b084      	sub	sp, #16
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef status;
	uint8_t config;

	/* Reads config register, enables reset bit and writes changes */
	status =  IIM42652_ReadRegister( dev, PWR_MGMT0_ADD, &config );
 80062cc:	f107 030e 	add.w	r3, r7, #14
 80062d0:	461a      	mov	r2, r3
 80062d2:	214e      	movs	r1, #78	; 0x4e
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f7ff ff71 	bl	80061bc <IIM42652_ReadRegister>
 80062da:	4603      	mov	r3, r0
 80062dc:	73fb      	strb	r3, [r7, #15]

	config |= IIM42652_SET_ACCEL_LOW_NOISE_MODE;
 80062de:	7bbb      	ldrb	r3, [r7, #14]
 80062e0:	f043 0303 	orr.w	r3, r3, #3
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	73bb      	strb	r3, [r7, #14]

	status |= IIM42652_WriteRegister( dev, PWR_MGMT0_ADD, &config );
 80062e8:	f107 030e 	add.w	r3, r7, #14
 80062ec:	461a      	mov	r2, r3
 80062ee:	214e      	movs	r1, #78	; 0x4e
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f7ff ff7e 	bl	80061f2 <IIM42652_WriteRegister>
 80062f6:	4603      	mov	r3, r0
 80062f8:	461a      	mov	r2, r3
 80062fa:	7bfb      	ldrb	r3, [r7, #15]
 80062fc:	4313      	orrs	r3, r2
 80062fe:	73fb      	strb	r3, [r7, #15]

	/* Waits for accelerometer power on */
	vTaskDelay( 5000 / portTICK_PERIOD_MS );
 8006300:	f241 3088 	movw	r0, #5000	; 0x1388
 8006304:	f7fe f976 	bl	80045f4 <vTaskDelay>

	return status;
 8006308:	7bfb      	ldrb	r3, [r7, #15]
}
 800630a:	4618      	mov	r0, r3
 800630c:	3710      	adds	r7, #16
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}

08006312 <IIM42652_setConfigGyro>:


/* Configures gyroscope parameters */
HAL_StatusTypeDef IIM42652_setConfigGyro( IIM42652 *dev, IIM42652_GYRO_CFG_t gyrCfg )
{
 8006312:	b580      	push	{r7, lr}
 8006314:	b086      	sub	sp, #24
 8006316:	af00      	add	r7, sp, #0
 8006318:	60f8      	str	r0, [r7, #12]
 800631a:	1d3b      	adds	r3, r7, #4
 800631c:	e883 0006 	stmia.w	r3, {r1, r2}
	uint8_t config = 0x00;
 8006320:	2300      	movs	r3, #0
 8006322:	75bb      	strb	r3, [r7, #22]
	HAL_StatusTypeDef status = HAL_OK;
 8006324:	2300      	movs	r3, #0
 8006326:	75fb      	strb	r3, [r7, #23]

	/* Writes gyroscope selected registers */

	config  = ( gyrCfg.gyro_fs_sel & ( BIT_MASK_BIT_2 | BIT_MASK_BIT_1 | BIT_MASK_BIT_0 ) ) << 5;
 8006328:	793b      	ldrb	r3, [r7, #4]
 800632a:	015b      	lsls	r3, r3, #5
 800632c:	b2db      	uxtb	r3, r3
 800632e:	75bb      	strb	r3, [r7, #22]
	config |=   gyrCfg.gyro_odr    & ( BIT_MASK_BIT_3 | BIT_MASK_BIT_2 | BIT_MASK_BIT_1 | BIT_MASK_BIT_0 );
 8006330:	797b      	ldrb	r3, [r7, #5]
 8006332:	b25b      	sxtb	r3, r3
 8006334:	f003 030f 	and.w	r3, r3, #15
 8006338:	b25a      	sxtb	r2, r3
 800633a:	7dbb      	ldrb	r3, [r7, #22]
 800633c:	b25b      	sxtb	r3, r3
 800633e:	4313      	orrs	r3, r2
 8006340:	b25b      	sxtb	r3, r3
 8006342:	b2db      	uxtb	r3, r3
 8006344:	75bb      	strb	r3, [r7, #22]

	status = IIM42652_WriteRegister( dev, GYRO_CONFIG0_ADD, &config );
 8006346:	f107 0316 	add.w	r3, r7, #22
 800634a:	461a      	mov	r2, r3
 800634c:	214f      	movs	r1, #79	; 0x4f
 800634e:	68f8      	ldr	r0, [r7, #12]
 8006350:	f7ff ff4f 	bl	80061f2 <IIM42652_WriteRegister>
 8006354:	4603      	mov	r3, r0
 8006356:	75fb      	strb	r3, [r7, #23]

	config  =  ( gyrCfg.gyro_ui_filt_ord  & ( BIT_MASK_BIT_1 | BIT_MASK_BIT_0 ) ) << 2;
 8006358:	79bb      	ldrb	r3, [r7, #6]
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	b2db      	uxtb	r3, r3
 800635e:	f003 030c 	and.w	r3, r3, #12
 8006362:	b2db      	uxtb	r3, r3
 8006364:	75bb      	strb	r3, [r7, #22]
	config |=    gyrCfg.gyro_dec2_m2_ord  & ( BIT_MASK_BIT_1 | BIT_MASK_BIT_0 );
 8006366:	79fb      	ldrb	r3, [r7, #7]
 8006368:	b25b      	sxtb	r3, r3
 800636a:	f003 0303 	and.w	r3, r3, #3
 800636e:	b25a      	sxtb	r2, r3
 8006370:	7dbb      	ldrb	r3, [r7, #22]
 8006372:	b25b      	sxtb	r3, r3
 8006374:	4313      	orrs	r3, r2
 8006376:	b25b      	sxtb	r3, r3
 8006378:	b2db      	uxtb	r3, r3
 800637a:	75bb      	strb	r3, [r7, #22]

	status |= IIM42652_WriteRegister( dev, GYRO_CONFIG1_ADD, &config );
 800637c:	f107 0316 	add.w	r3, r7, #22
 8006380:	461a      	mov	r2, r3
 8006382:	2151      	movs	r1, #81	; 0x51
 8006384:	68f8      	ldr	r0, [r7, #12]
 8006386:	f7ff ff34 	bl	80061f2 <IIM42652_WriteRegister>
 800638a:	4603      	mov	r3, r0
 800638c:	461a      	mov	r2, r3
 800638e:	7dfb      	ldrb	r3, [r7, #23]
 8006390:	4313      	orrs	r3, r2
 8006392:	75fb      	strb	r3, [r7, #23]


	status |=  IIM42652_ReadRegister( dev, GYR_ACC_CONFIG0_ADD, &config );
 8006394:	f107 0316 	add.w	r3, r7, #22
 8006398:	461a      	mov	r2, r3
 800639a:	2152      	movs	r1, #82	; 0x52
 800639c:	68f8      	ldr	r0, [r7, #12]
 800639e:	f7ff ff0d 	bl	80061bc <IIM42652_ReadRegister>
 80063a2:	4603      	mov	r3, r0
 80063a4:	461a      	mov	r2, r3
 80063a6:	7dfb      	ldrb	r3, [r7, #23]
 80063a8:	4313      	orrs	r3, r2
 80063aa:	75fb      	strb	r3, [r7, #23]

	config |= gyrCfg.gyro_ui_filt_bw & ( BIT_MASK_BIT_3 | BIT_MASK_BIT_2 | BIT_MASK_BIT_1 | BIT_MASK_BIT_0 );
 80063ac:	7a3b      	ldrb	r3, [r7, #8]
 80063ae:	b25b      	sxtb	r3, r3
 80063b0:	f003 030f 	and.w	r3, r3, #15
 80063b4:	b25a      	sxtb	r2, r3
 80063b6:	7dbb      	ldrb	r3, [r7, #22]
 80063b8:	b25b      	sxtb	r3, r3
 80063ba:	4313      	orrs	r3, r2
 80063bc:	b25b      	sxtb	r3, r3
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	75bb      	strb	r3, [r7, #22]

	status |= IIM42652_WriteRegister( dev, GYRO_CONFIG1_ADD, &config );
 80063c2:	f107 0316 	add.w	r3, r7, #22
 80063c6:	461a      	mov	r2, r3
 80063c8:	2151      	movs	r1, #81	; 0x51
 80063ca:	68f8      	ldr	r0, [r7, #12]
 80063cc:	f7ff ff11 	bl	80061f2 <IIM42652_WriteRegister>
 80063d0:	4603      	mov	r3, r0
 80063d2:	461a      	mov	r2, r3
 80063d4:	7dfb      	ldrb	r3, [r7, #23]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	75fb      	strb	r3, [r7, #23]


	return status;
 80063da:	7dfb      	ldrb	r3, [r7, #23]
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3718      	adds	r7, #24
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <IIM42652_setConfigAccel>:


/* Configure accelerometer parameters */
HAL_StatusTypeDef IIM42652_setConfigAccel( IIM42652 *dev, IIM42652_ACCL_CFG_t accCfg )
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b086      	sub	sp, #24
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	60f8      	str	r0, [r7, #12]
 80063ec:	1d3b      	adds	r3, r7, #4
 80063ee:	e883 0006 	stmia.w	r3, {r1, r2}
	uint8_t config = 0x00;
 80063f2:	2300      	movs	r3, #0
 80063f4:	75bb      	strb	r3, [r7, #22]
	HAL_StatusTypeDef status = HAL_OK;
 80063f6:	2300      	movs	r3, #0
 80063f8:	75fb      	strb	r3, [r7, #23]

	/* Writes gyroscope selected registers */

	config  = ( accCfg.accel_fs_sel & ( BIT_MASK_BIT_2 | BIT_MASK_BIT_1 | BIT_MASK_BIT_0 ) ) << 5;
 80063fa:	793b      	ldrb	r3, [r7, #4]
 80063fc:	015b      	lsls	r3, r3, #5
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	75bb      	strb	r3, [r7, #22]
	config |=   accCfg.accel_odr    & ( BIT_MASK_BIT_3 | BIT_MASK_BIT_2 | BIT_MASK_BIT_1 | BIT_MASK_BIT_0 );
 8006402:	797b      	ldrb	r3, [r7, #5]
 8006404:	b25b      	sxtb	r3, r3
 8006406:	f003 030f 	and.w	r3, r3, #15
 800640a:	b25a      	sxtb	r2, r3
 800640c:	7dbb      	ldrb	r3, [r7, #22]
 800640e:	b25b      	sxtb	r3, r3
 8006410:	4313      	orrs	r3, r2
 8006412:	b25b      	sxtb	r3, r3
 8006414:	b2db      	uxtb	r3, r3
 8006416:	75bb      	strb	r3, [r7, #22]

	status |= IIM42652_WriteRegister( dev, ACCL_CONFIG0_ADD, &config );
 8006418:	f107 0316 	add.w	r3, r7, #22
 800641c:	461a      	mov	r2, r3
 800641e:	2150      	movs	r1, #80	; 0x50
 8006420:	68f8      	ldr	r0, [r7, #12]
 8006422:	f7ff fee6 	bl	80061f2 <IIM42652_WriteRegister>
 8006426:	4603      	mov	r3, r0
 8006428:	461a      	mov	r2, r3
 800642a:	7dfb      	ldrb	r3, [r7, #23]
 800642c:	4313      	orrs	r3, r2
 800642e:	75fb      	strb	r3, [r7, #23]

	status |=  IIM42652_ReadRegister( dev, GYR_ACC_CONFIG0_ADD, &config );
 8006430:	f107 0316 	add.w	r3, r7, #22
 8006434:	461a      	mov	r2, r3
 8006436:	2152      	movs	r1, #82	; 0x52
 8006438:	68f8      	ldr	r0, [r7, #12]
 800643a:	f7ff febf 	bl	80061bc <IIM42652_ReadRegister>
 800643e:	4603      	mov	r3, r0
 8006440:	461a      	mov	r2, r3
 8006442:	7dfb      	ldrb	r3, [r7, #23]
 8006444:	4313      	orrs	r3, r2
 8006446:	75fb      	strb	r3, [r7, #23]

	config |= ( accCfg.accel_ui_filt_bw & ( BIT_MASK_BIT_3 | BIT_MASK_BIT_2 | BIT_MASK_BIT_1 | BIT_MASK_BIT_0 ) ) << 4;
 8006448:	79bb      	ldrb	r3, [r7, #6]
 800644a:	011b      	lsls	r3, r3, #4
 800644c:	b25a      	sxtb	r2, r3
 800644e:	7dbb      	ldrb	r3, [r7, #22]
 8006450:	b25b      	sxtb	r3, r3
 8006452:	4313      	orrs	r3, r2
 8006454:	b25b      	sxtb	r3, r3
 8006456:	b2db      	uxtb	r3, r3
 8006458:	75bb      	strb	r3, [r7, #22]

	status |= IIM42652_WriteRegister( dev, GYR_ACC_CONFIG0_ADD, &config );
 800645a:	f107 0316 	add.w	r3, r7, #22
 800645e:	461a      	mov	r2, r3
 8006460:	2152      	movs	r1, #82	; 0x52
 8006462:	68f8      	ldr	r0, [r7, #12]
 8006464:	f7ff fec5 	bl	80061f2 <IIM42652_WriteRegister>
 8006468:	4603      	mov	r3, r0
 800646a:	461a      	mov	r2, r3
 800646c:	7dfb      	ldrb	r3, [r7, #23]
 800646e:	4313      	orrs	r3, r2
 8006470:	75fb      	strb	r3, [r7, #23]

	config  =  ( accCfg.accel_ui_filt_ord  & ( BIT_MASK_BIT_1 | BIT_MASK_BIT_0 ) ) << 3;
 8006472:	79fb      	ldrb	r3, [r7, #7]
 8006474:	00db      	lsls	r3, r3, #3
 8006476:	b2db      	uxtb	r3, r3
 8006478:	f003 0318 	and.w	r3, r3, #24
 800647c:	b2db      	uxtb	r3, r3
 800647e:	75bb      	strb	r3, [r7, #22]
	config |=  ( accCfg.accel_dec2_m2_ord  & ( BIT_MASK_BIT_1 | BIT_MASK_BIT_0 ) ) << 1;
 8006480:	7a3b      	ldrb	r3, [r7, #8]
 8006482:	005b      	lsls	r3, r3, #1
 8006484:	b25b      	sxtb	r3, r3
 8006486:	f003 0306 	and.w	r3, r3, #6
 800648a:	b25a      	sxtb	r2, r3
 800648c:	7dbb      	ldrb	r3, [r7, #22]
 800648e:	b25b      	sxtb	r3, r3
 8006490:	4313      	orrs	r3, r2
 8006492:	b25b      	sxtb	r3, r3
 8006494:	b2db      	uxtb	r3, r3
 8006496:	75bb      	strb	r3, [r7, #22]

	status |= IIM42652_WriteRegister( dev, ACCL_CONFIG1_ADD, &config );
 8006498:	f107 0316 	add.w	r3, r7, #22
 800649c:	461a      	mov	r2, r3
 800649e:	2153      	movs	r1, #83	; 0x53
 80064a0:	68f8      	ldr	r0, [r7, #12]
 80064a2:	f7ff fea6 	bl	80061f2 <IIM42652_WriteRegister>
 80064a6:	4603      	mov	r3, r0
 80064a8:	461a      	mov	r2, r3
 80064aa:	7dfb      	ldrb	r3, [r7, #23]
 80064ac:	4313      	orrs	r3, r2
 80064ae:	75fb      	strb	r3, [r7, #23]

	return status;
 80064b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3718      	adds	r7, #24
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}

080064ba <IIM42652_ConfigInterrupt>:


HAL_StatusTypeDef IIM42652_ConfigInterrupt( IIM42652 *dev )
{
 80064ba:	b580      	push	{r7, lr}
 80064bc:	b084      	sub	sp, #16
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
	uint8_t config = 0x00;
 80064c2:	2300      	movs	r3, #0
 80064c4:	73bb      	strb	r3, [r7, #14]
	HAL_StatusTypeDef status = HAL_OK;
 80064c6:	2300      	movs	r3, #0
 80064c8:	73fb      	strb	r3, [r7, #15]

	/* Implement interrupt configuration */
	config = IIM42654_SET_INT1 | IIM42652_SET_INT_ACTIVE_HI;
 80064ca:	2305      	movs	r3, #5
 80064cc:	73bb      	strb	r3, [r7, #14]
	status = IIM42652_WriteRegister( dev, INT_CONFIG_ADD, &config );
 80064ce:	f107 030e 	add.w	r3, r7, #14
 80064d2:	461a      	mov	r2, r3
 80064d4:	2114      	movs	r1, #20
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f7ff fe8b 	bl	80061f2 <IIM42652_WriteRegister>
 80064dc:	4603      	mov	r3, r0
 80064de:	73fb      	strb	r3, [r7, #15]

	config = IIM42652_SET_UI_DRDY_INT_CLEAR;
 80064e0:	2320      	movs	r3, #32
 80064e2:	73bb      	strb	r3, [r7, #14]
	status = IIM42652_WriteRegister( dev, INT_CONFIG0_ADD, &config );
 80064e4:	f107 030e 	add.w	r3, r7, #14
 80064e8:	461a      	mov	r2, r3
 80064ea:	2163      	movs	r1, #99	; 0x63
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f7ff fe80 	bl	80061f2 <IIM42652_WriteRegister>
 80064f2:	4603      	mov	r3, r0
 80064f4:	73fb      	strb	r3, [r7, #15]

	config = IIM42652_SET_UI_DRDY_INT1_EN;
 80064f6:	2308      	movs	r3, #8
 80064f8:	73bb      	strb	r3, [r7, #14]
	status = IIM42652_WriteRegister( dev, INT_SOURCE0_ADD, &config );
 80064fa:	f107 030e 	add.w	r3, r7, #14
 80064fe:	461a      	mov	r2, r3
 8006500:	2165      	movs	r1, #101	; 0x65
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f7ff fe75 	bl	80061f2 <IIM42652_WriteRegister>
 8006508:	4603      	mov	r3, r0
 800650a:	73fb      	strb	r3, [r7, #15]

	return status;
 800650c:	7bfb      	ldrb	r3, [r7, #15]
}
 800650e:	4618      	mov	r0, r3
 8006510:	3710      	adds	r7, #16
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
	...

08006518 <IIM42652_Init>:


uint8_t IIM42652_Init( IIM42652 *dev, I2C_HandleTypeDef *i2cHandle )
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b088      	sub	sp, #32
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]

	IIM42652_ACCL_CFG_t ACC_CFG;
	IIM42652_GYRO_CFG_t GYR_CFG;

	/* Initialise structure parameters */
	dev->i2cHandle = i2cHandle;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	683a      	ldr	r2, [r7, #0]
 8006526:	601a      	str	r2, [r3, #0]

	dev->acc[0] = 0.0f;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f04f 0200 	mov.w	r2, #0
 800652e:	605a      	str	r2, [r3, #4]
	dev->acc[1] = 0.0f;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f04f 0200 	mov.w	r2, #0
 8006536:	609a      	str	r2, [r3, #8]
	dev->acc[2] = 0.0f;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f04f 0200 	mov.w	r2, #0
 800653e:	60da      	str	r2, [r3, #12]

	dev->gyr[0] = 0.0f;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f04f 0200 	mov.w	r2, #0
 8006546:	611a      	str	r2, [r3, #16]
	dev->gyr[1] = 0.0f;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f04f 0200 	mov.w	r2, #0
 800654e:	615a      	str	r2, [r3, #20]
	dev->gyr[2] = 0.0f;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f04f 0200 	mov.w	r2, #0
 8006556:	619a      	str	r2, [r3, #24]

	dev->temp_c = 0.0f;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f04f 0200 	mov.w	r2, #0
 800655e:	61da      	str	r2, [r3, #28]

	/* I2C transaction errors */
	uint8_t errNum = 0;
 8006560:	2300      	movs	r3, #0
 8006562:	77fb      	strb	r3, [r7, #31]
	HAL_StatusTypeDef status;

	/* Check for device ID */
	uint8_t regDataID;

	status = IIM42652_ReadRegister(dev, WHO_AM_I_ADD, &regDataID);
 8006564:	f107 030f 	add.w	r3, r7, #15
 8006568:	461a      	mov	r2, r3
 800656a:	2175      	movs	r1, #117	; 0x75
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f7ff fe25 	bl	80061bc <IIM42652_ReadRegister>
 8006572:	4603      	mov	r3, r0
 8006574:	77bb      	strb	r3, [r7, #30]
	errNum += ( status != HAL_OK );
 8006576:	7fbb      	ldrb	r3, [r7, #30]
 8006578:	2b00      	cmp	r3, #0
 800657a:	bf14      	ite	ne
 800657c:	2301      	movne	r3, #1
 800657e:	2300      	moveq	r3, #0
 8006580:	b2db      	uxtb	r3, r3
 8006582:	461a      	mov	r2, r3
 8006584:	7ffb      	ldrb	r3, [r7, #31]
 8006586:	4413      	add	r3, r2
 8006588:	77fb      	strb	r3, [r7, #31]

	/* If ID not equal to IIM42652_I2C_ID, Init returns with an error code */
	if( regDataID != IIM42652_I2C_ID ) return HAL_ERROR;
 800658a:	7bfb      	ldrb	r3, [r7, #15]
 800658c:	2b6f      	cmp	r3, #111	; 0x6f
 800658e:	d001      	beq.n	8006594 <IIM42652_Init+0x7c>
 8006590:	2301      	movs	r3, #1
 8006592:	e044      	b.n	800661e <IIM42652_Init+0x106>
	else {

		/* Initialize routine */
		status |= IIM42652_SoftReset  ( dev );
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f7ff fe47 	bl	8006228 <IIM42652_SoftReset>
 800659a:	4603      	mov	r3, r0
 800659c:	461a      	mov	r2, r3
 800659e:	7fbb      	ldrb	r3, [r7, #30]
 80065a0:	4313      	orrs	r3, r2
 80065a2:	77bb      	strb	r3, [r7, #30]
		status |= IIM42652_EnableGyro ( dev );
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f7ff fe66 	bl	8006276 <IIM42652_EnableGyro>
 80065aa:	4603      	mov	r3, r0
 80065ac:	461a      	mov	r2, r3
 80065ae:	7fbb      	ldrb	r3, [r7, #30]
 80065b0:	4313      	orrs	r3, r2
 80065b2:	77bb      	strb	r3, [r7, #30]
		status |= IIM42652_EnableAccel( dev );
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f7ff fe85 	bl	80062c4 <IIM42652_EnableAccel>
 80065ba:	4603      	mov	r3, r0
 80065bc:	461a      	mov	r2, r3
 80065be:	7fbb      	ldrb	r3, [r7, #30]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	77bb      	strb	r3, [r7, #30]


		GYR_CFG.gyro_fs_sel      = IIM42652_SET_GYRO_FS_SEL_2000_dps;
 80065c4:	2300      	movs	r3, #0
 80065c6:	743b      	strb	r3, [r7, #16]
		GYR_CFG.gyro_odr         = IIM42652_SET_GYRO_ODR_1kHz;
 80065c8:	2306      	movs	r3, #6
 80065ca:	747b      	strb	r3, [r7, #17]
		GYR_CFG.gyro_ui_filt_ord = IIM42652_SET_GYRO_UI_FILT_ORD_2st;
 80065cc:	2301      	movs	r3, #1
 80065ce:	74bb      	strb	r3, [r7, #18]
		GYR_CFG.gyro_dec2_m2_ord = IIM42652_SET_GYRO_DEC2_M2_ORD_3st;
 80065d0:	2302      	movs	r3, #2
 80065d2:	74fb      	strb	r3, [r7, #19]
		GYR_CFG.gyro_ui_filt_bw  = IIM42652_SET_GYRO_UI_FILT_BW_ODR_4;
 80065d4:	2301      	movs	r3, #1
 80065d6:	753b      	strb	r3, [r7, #20]
	    IIM42652_setConfigGyro( dev, GYR_CFG );
 80065d8:	f107 0310 	add.w	r3, r7, #16
 80065dc:	e893 0006 	ldmia.w	r3, {r1, r2}
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f7ff fe96 	bl	8006312 <IIM42652_setConfigGyro>

	    ACC_CFG.accel_fs_sel      = IIM42652_SET_ACCEL_FS_SEL_16g;
 80065e6:	2300      	movs	r3, #0
 80065e8:	763b      	strb	r3, [r7, #24]
	    ACC_CFG.accel_odr         = IIM42652_SET_ACCEL_ODR_1kHz;
 80065ea:	2306      	movs	r3, #6
 80065ec:	767b      	strb	r3, [r7, #25]
	    ACC_CFG.accel_ui_filt_bw  = IIM42652_SET_ACCEL_UI_FILT_BW_ODR_4;
 80065ee:	2301      	movs	r3, #1
 80065f0:	76bb      	strb	r3, [r7, #26]
	    ACC_CFG.accel_ui_filt_ord = IIM42652_SET_ACCEL_UI_FILT_ORD_2st;
 80065f2:	2301      	movs	r3, #1
 80065f4:	76fb      	strb	r3, [r7, #27]
	    ACC_CFG.accel_dec2_m2_ord = IIM42652_SET_ACCEL_DEC2_M2_ORD_3st;
 80065f6:	2302      	movs	r3, #2
 80065f8:	773b      	strb	r3, [r7, #28]
	    IIM42652_setConfigAccel( dev, ACC_CFG );
 80065fa:	f107 0318 	add.w	r3, r7, #24
 80065fe:	e893 0006 	ldmia.w	r3, {r1, r2}
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f7ff feee 	bl	80063e4 <IIM42652_setConfigAccel>

	    IIM42652_ConfigInterrupt( dev );
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f7ff ff56 	bl	80064ba <IIM42652_ConfigInterrupt>

	    /* Takes semaphore until DRDY is ready */
	    xSemaphoreTake( ImuIntSemaphore, portMAX_DELAY );
 800660e:	4b06      	ldr	r3, [pc, #24]	; (8006628 <IIM42652_Init+0x110>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f04f 31ff 	mov.w	r1, #4294967295
 8006616:	4618      	mov	r0, r3
 8006618:	f7fd fbb8 	bl	8003d8c <xQueueSemaphoreTake>
	}


	return 0;
 800661c:	2300      	movs	r3, #0
}
 800661e:	4618      	mov	r0, r3
 8006620:	3720      	adds	r7, #32
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
 8006626:	bf00      	nop
 8006628:	200019cc 	.word	0x200019cc

0800662c <sendI2C>:

/* Internal function declaration */

/* Function that communicates with MLX90393, first sending the command and waiting for the response */
HAL_StatusTypeDef sendI2C( I2C_HandleTypeDef *hi2c, uint8_t *receiveBuffer, uint8_t *sendBuffer, uint8_t sendMessageLength, uint8_t receiveMessageLength )
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b088      	sub	sp, #32
 8006630:	af02      	add	r7, sp, #8
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	607a      	str	r2, [r7, #4]
 8006638:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef i2c_status = HAL_OK;
 800663a:	2300      	movs	r3, #0
 800663c:	75fb      	strb	r3, [r7, #23]

	i2c_status |= HAL_I2C_Master_Transmit( hi2c, MLX90393_I2C_ADDRESS, sendBuffer, sendMessageLength, HAL_MAX_DELAY );
 800663e:	78fb      	ldrb	r3, [r7, #3]
 8006640:	b29b      	uxth	r3, r3
 8006642:	f04f 32ff 	mov.w	r2, #4294967295
 8006646:	9200      	str	r2, [sp, #0]
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	211c      	movs	r1, #28
 800664c:	68f8      	ldr	r0, [r7, #12]
 800664e:	f7fa fc8f 	bl	8000f70 <HAL_I2C_Master_Transmit>
 8006652:	4603      	mov	r3, r0
 8006654:	461a      	mov	r2, r3
 8006656:	7dfb      	ldrb	r3, [r7, #23]
 8006658:	4313      	orrs	r3, r2
 800665a:	75fb      	strb	r3, [r7, #23]
	i2c_status |= HAL_I2C_Master_Receive ( hi2c, MLX90393_I2C_ADDRESS, receiveBuffer, receiveMessageLength, HAL_MAX_DELAY );
 800665c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006660:	b29b      	uxth	r3, r3
 8006662:	f04f 32ff 	mov.w	r2, #4294967295
 8006666:	9200      	str	r2, [sp, #0]
 8006668:	68ba      	ldr	r2, [r7, #8]
 800666a:	211c      	movs	r1, #28
 800666c:	68f8      	ldr	r0, [r7, #12]
 800666e:	f7fa fd73 	bl	8001158 <HAL_I2C_Master_Receive>
 8006672:	4603      	mov	r3, r0
 8006674:	461a      	mov	r2, r3
 8006676:	7dfb      	ldrb	r3, [r7, #23]
 8006678:	4313      	orrs	r3, r2
 800667a:	75fb      	strb	r3, [r7, #23]

    return i2c_status;
 800667c:	7dfb      	ldrb	r3, [r7, #23]
}
 800667e:	4618      	mov	r0, r3
 8006680:	3718      	adds	r7, #24
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}

08006686 <MLX90393_SB>:
}


/* Start Burst command, zyxt determines which axis to measure */
uint8_t MLX90393_SB	( MLX90393 *dev, uint8_t zyxt )
{
 8006686:	b580      	push	{r7, lr}
 8006688:	b086      	sub	sp, #24
 800668a:	af02      	add	r7, sp, #8
 800668c:	6078      	str	r0, [r7, #4]
 800668e:	460b      	mov	r3, r1
 8006690:	70fb      	strb	r3, [r7, #3]
	uint8_t status;
	HAL_StatusTypeDef i2c_status = HAL_OK;
 8006692:	2300      	movs	r3, #0
 8006694:	73fb      	strb	r3, [r7, #15]

	/* Construct the SB command with axis from function parameters */
	uint8_t command = MLX90393_REG_SB | ( zyxt & 0x0F );
 8006696:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800669a:	f003 030f 	and.w	r3, r3, #15
 800669e:	b25b      	sxtb	r3, r3
 80066a0:	f043 0310 	orr.w	r3, r3, #16
 80066a4:	b25b      	sxtb	r3, r3
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	737b      	strb	r3, [r7, #13]

	i2c_status = sendI2C( dev->i2cHandle, &status, &command, 1, 1 );
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6818      	ldr	r0, [r3, #0]
 80066ae:	f107 020d 	add.w	r2, r7, #13
 80066b2:	f107 010e 	add.w	r1, r7, #14
 80066b6:	2301      	movs	r3, #1
 80066b8:	9300      	str	r3, [sp, #0]
 80066ba:	2301      	movs	r3, #1
 80066bc:	f7ff ffb6 	bl	800662c <sendI2C>
 80066c0:	4603      	mov	r3, r0
 80066c2:	73fb      	strb	r3, [r7, #15]

	/* Checks the HAL status of i2c transaction */
	if(i2c_status != HAL_OK) return MLX90393_STATUS_ERROR;
 80066c4:	7bfb      	ldrb	r3, [r7, #15]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d001      	beq.n	80066ce <MLX90393_SB+0x48>
 80066ca:	23ff      	movs	r3, #255	; 0xff
 80066cc:	e000      	b.n	80066d0 <MLX90393_SB+0x4a>
	else{
		return status;
 80066ce:	7bbb      	ldrb	r3, [r7, #14]
	}
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3710      	adds	r7, #16
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <MLX90393_RM>:
 *
 * readData needs to be a pointer to an array of size RM_DATA_LENGHT
 *
 */
uint8_t MLX90393_RM	( MLX90393 *dev, uint8_t zyxt, uint8_t* readData )
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b088      	sub	sp, #32
 80066dc:	af02      	add	r7, sp, #8
 80066de:	60f8      	str	r0, [r7, #12]
 80066e0:	460b      	mov	r3, r1
 80066e2:	607a      	str	r2, [r7, #4]
 80066e4:	72fb      	strb	r3, [r7, #11]
	uint8_t status;
	HAL_StatusTypeDef i2c_status = HAL_OK;
 80066e6:	2300      	movs	r3, #0
 80066e8:	75fb      	strb	r3, [r7, #23]

	/* Construct the SB command with axis from function parameters */
	uint8_t command = MLX90393_REG_RM | ( zyxt & 0x0F );
 80066ea:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80066ee:	f003 030f 	and.w	r3, r3, #15
 80066f2:	b25b      	sxtb	r3, r3
 80066f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066f8:	b25b      	sxtb	r3, r3
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	757b      	strb	r3, [r7, #21]

	i2c_status = sendI2C( dev->i2cHandle, readData, &command, 1, RM_DATA_LENGHT );
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	6818      	ldr	r0, [r3, #0]
 8006702:	f107 0215 	add.w	r2, r7, #21
 8006706:	2309      	movs	r3, #9
 8006708:	9300      	str	r3, [sp, #0]
 800670a:	2301      	movs	r3, #1
 800670c:	6879      	ldr	r1, [r7, #4]
 800670e:	f7ff ff8d 	bl	800662c <sendI2C>
 8006712:	4603      	mov	r3, r0
 8006714:	75fb      	strb	r3, [r7, #23]

	/* First byte in data buffer is status */
	status = readData[0];
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	75bb      	strb	r3, [r7, #22]

	/* Checks the HAL status of i2c transaction */
	if(i2c_status != HAL_OK) return MLX90393_STATUS_ERROR;
 800671c:	7dfb      	ldrb	r3, [r7, #23]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d001      	beq.n	8006726 <MLX90393_RM+0x4e>
 8006722:	23ff      	movs	r3, #255	; 0xff
 8006724:	e000      	b.n	8006728 <MLX90393_RM+0x50>
	else{
		return status;
 8006726:	7dbb      	ldrb	r3, [r7, #22]
	}
}
 8006728:	4618      	mov	r0, r3
 800672a:	3718      	adds	r7, #24
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}

08006730 <MLX90393_WR>:
}


/* Write Register command, writes a word size register directly into volatile RAM */
uint8_t MLX90393_WR	( MLX90393 *dev, uint16_t *data, uint8_t regAddress )
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b088      	sub	sp, #32
 8006734:	af02      	add	r7, sp, #8
 8006736:	60f8      	str	r0, [r7, #12]
 8006738:	60b9      	str	r1, [r7, #8]
 800673a:	4613      	mov	r3, r2
 800673c:	71fb      	strb	r3, [r7, #7]
	uint8_t status;
	uint8_t sendBuffer[4];
	HAL_StatusTypeDef i2c_status = HAL_OK;
 800673e:	2300      	movs	r3, #0
 8006740:	75fb      	strb	r3, [r7, #23]

	/* Constructs send buffer with Command + dataHI + dataLO + address */
	sendBuffer[0] = MLX90393_REG_WR;
 8006742:	2360      	movs	r3, #96	; 0x60
 8006744:	743b      	strb	r3, [r7, #16]
	sendBuffer[1] = (*data >> 8);
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	881b      	ldrh	r3, [r3, #0]
 800674a:	0a1b      	lsrs	r3, r3, #8
 800674c:	b29b      	uxth	r3, r3
 800674e:	b2db      	uxtb	r3, r3
 8006750:	747b      	strb	r3, [r7, #17]
	sendBuffer[2] = (*data & 0xFF);
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	881b      	ldrh	r3, [r3, #0]
 8006756:	b2db      	uxtb	r3, r3
 8006758:	74bb      	strb	r3, [r7, #18]
	sendBuffer[3] = regAddress;
 800675a:	79fb      	ldrb	r3, [r7, #7]
 800675c:	74fb      	strb	r3, [r7, #19]

	i2c_status = sendI2C( dev->i2cHandle, &status, sendBuffer, WR_DATA_LENGHT, 1 );
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	6818      	ldr	r0, [r3, #0]
 8006762:	f107 0210 	add.w	r2, r7, #16
 8006766:	f107 0116 	add.w	r1, r7, #22
 800676a:	2301      	movs	r3, #1
 800676c:	9300      	str	r3, [sp, #0]
 800676e:	2304      	movs	r3, #4
 8006770:	f7ff ff5c 	bl	800662c <sendI2C>
 8006774:	4603      	mov	r3, r0
 8006776:	75fb      	strb	r3, [r7, #23]

	/* Checks the HAL status of i2c transaction */
	if(i2c_status != HAL_OK) return MLX90393_STATUS_ERROR;
 8006778:	7dfb      	ldrb	r3, [r7, #23]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d001      	beq.n	8006782 <MLX90393_WR+0x52>
 800677e:	23ff      	movs	r3, #255	; 0xff
 8006780:	e000      	b.n	8006784 <MLX90393_WR+0x54>
	else{
		return status;
 8006782:	7dbb      	ldrb	r3, [r7, #22]
	}
}
 8006784:	4618      	mov	r0, r3
 8006786:	3718      	adds	r7, #24
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <MLX90393_RT>:


/* Reset command, is used to reset the device, if device is runnning it will reset to idle mode */
uint8_t MLX90393_RT	( MLX90393 *dev )
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b086      	sub	sp, #24
 8006790:	af02      	add	r7, sp, #8
 8006792:	6078      	str	r0, [r7, #4]
	uint8_t status;
	HAL_StatusTypeDef i2c_status = HAL_OK;
 8006794:	2300      	movs	r3, #0
 8006796:	73fb      	strb	r3, [r7, #15]

	i2c_status = sendI2C( dev->i2cHandle, &status, (uint8_t*)MLX90393_REG_RT, 1, 1 );
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6818      	ldr	r0, [r3, #0]
 800679c:	f107 010e 	add.w	r1, r7, #14
 80067a0:	2301      	movs	r3, #1
 80067a2:	9300      	str	r3, [sp, #0]
 80067a4:	2301      	movs	r3, #1
 80067a6:	22f0      	movs	r2, #240	; 0xf0
 80067a8:	f7ff ff40 	bl	800662c <sendI2C>
 80067ac:	4603      	mov	r3, r0
 80067ae:	73fb      	strb	r3, [r7, #15]

	/* Checks the HAL status of i2c transaction */
	if(i2c_status != HAL_OK) return MLX90393_STATUS_ERROR;
 80067b0:	7bfb      	ldrb	r3, [r7, #15]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d001      	beq.n	80067ba <MLX90393_RT+0x2e>
 80067b6:	23ff      	movs	r3, #255	; 0xff
 80067b8:	e000      	b.n	80067bc <MLX90393_RT+0x30>
	else{
		return status;
 80067ba:	7bbb      	ldrb	r3, [r7, #14]
	}
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3710      	adds	r7, #16
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}

080067c4 <MLX90393_Init>:
}


/* Initialization of sensor */
uint8_t MLX90393_Init ( MLX90393 *dev, I2C_HandleTypeDef *i2cHandle )
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b086      	sub	sp, #24
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	6039      	str	r1, [r7, #0]
	/* Initialize structure parameters */
	dev->i2cHandle = i2cHandle;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	683a      	ldr	r2, [r7, #0]
 80067d2:	601a      	str	r2, [r3, #0]

	dev->mag[0] = 0.0f;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f04f 0200 	mov.w	r2, #0
 80067da:	605a      	str	r2, [r3, #4]
	dev->mag[1] = 0.0f;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f04f 0200 	mov.w	r2, #0
 80067e2:	609a      	str	r2, [r3, #8]
	dev->mag[2] = 0.0f;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f04f 0200 	mov.w	r2, #0
 80067ea:	60da      	str	r2, [r3, #12]

	dev->temp_c = 0.0f;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f04f 0200 	mov.w	r2, #0
 80067f2:	611a      	str	r2, [r3, #16]

	/* Performs a NOP command to get the status of the device, returns HAL status */
	uint8_t status = 0;
 80067f4:	2300      	movs	r3, #0
 80067f6:	75fb      	strb	r3, [r7, #23]
	status = MLX90393_RT( dev );
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f7ff ffc7 	bl	800678c <MLX90393_RT>
 80067fe:	4603      	mov	r3, r0
 8006800:	75fb      	strb	r3, [r7, #23]

	if( status == MLX90393_STATUS_ERROR ) return HAL_ERROR;
 8006802:	7dfb      	ldrb	r3, [r7, #23]
 8006804:	2bff      	cmp	r3, #255	; 0xff
 8006806:	d101      	bne.n	800680c <MLX90393_Init+0x48>
 8006808:	2301      	movs	r3, #1
 800680a:	e05c      	b.n	80068c6 <MLX90393_Init+0x102>
		/* Configure registers,  */
		MLX90393_CONF_1 configWord1;
		MLX90393_CONF_2 configWord2;
		MLX90393_CONF_3 configWord3;

		configWord1.data = 0x0000;
 800680c:	2300      	movs	r3, #0
 800680e:	823b      	strh	r3, [r7, #16]
		configWord2.data = 0x0000;
 8006810:	2300      	movs	r3, #0
 8006812:	81bb      	strh	r3, [r7, #12]
		configWord3.data = 0x0000;
 8006814:	2300      	movs	r3, #0
 8006816:	813b      	strh	r3, [r7, #8]

		configWord1.GAINSEL = 0x03;		/* Gain Select 3 */
 8006818:	7c3b      	ldrb	r3, [r7, #16]
 800681a:	2203      	movs	r2, #3
 800681c:	f362 1306 	bfi	r3, r2, #4, #3
 8006820:	743b      	strb	r3, [r7, #16]

		configWord2.TRIGINT = 0x01;		/* Select pin as interrupt */
 8006822:	7b7b      	ldrb	r3, [r7, #13]
 8006824:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006828:	737b      	strb	r3, [r7, #13]

		configWord3.RESX 	= 0x03; 	/* X resolution 19 */
 800682a:	7a3b      	ldrb	r3, [r7, #8]
 800682c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006830:	723b      	strb	r3, [r7, #8]
		configWord3.RESY 	= 0x03; 	/* Y resolution 19 */
 8006832:	893b      	ldrh	r3, [r7, #8]
 8006834:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006838:	813b      	strh	r3, [r7, #8]
		configWord3.RESZ 	= 0x00; 	/* Z resolution 16 */
 800683a:	7a7b      	ldrb	r3, [r7, #9]
 800683c:	f36f 0342 	bfc	r3, #1, #2
 8006840:	727b      	strb	r3, [r7, #9]
		configWord3.OSR 	= 0x02; 	/* OSR to 2 */
 8006842:	7a3b      	ldrb	r3, [r7, #8]
 8006844:	2202      	movs	r2, #2
 8006846:	f362 0301 	bfi	r3, r2, #0, #2
 800684a:	723b      	strb	r3, [r7, #8]
		configWord3.DIGFIL 	= 0x06; 	/* Digital filter to 6 */
 800684c:	7a3b      	ldrb	r3, [r7, #8]
 800684e:	2206      	movs	r2, #6
 8006850:	f362 0384 	bfi	r3, r2, #2, #3
 8006854:	723b      	strb	r3, [r7, #8]


		/* Write registers and returns status */
		uint8_t status1 = MLX90393_WR ( dev, &configWord1.data, MLX90393_CONF1 );
 8006856:	f107 0310 	add.w	r3, r7, #16
 800685a:	2200      	movs	r2, #0
 800685c:	4619      	mov	r1, r3
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f7ff ff66 	bl	8006730 <MLX90393_WR>
 8006864:	4603      	mov	r3, r0
 8006866:	75bb      	strb	r3, [r7, #22]
		uint8_t status2 = MLX90393_WR ( dev, &configWord2.data, MLX90393_CONF2 );
 8006868:	f107 030c 	add.w	r3, r7, #12
 800686c:	2201      	movs	r2, #1
 800686e:	4619      	mov	r1, r3
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f7ff ff5d 	bl	8006730 <MLX90393_WR>
 8006876:	4603      	mov	r3, r0
 8006878:	757b      	strb	r3, [r7, #21]
		uint8_t status3 = MLX90393_WR ( dev, &configWord3.data, MLX90393_CONF3 );
 800687a:	f107 0308 	add.w	r3, r7, #8
 800687e:	2202      	movs	r2, #2
 8006880:	4619      	mov	r1, r3
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f7ff ff54 	bl	8006730 <MLX90393_WR>
 8006888:	4603      	mov	r3, r0
 800688a:	753b      	strb	r3, [r7, #20]

		/* Initializes Semaphore and enables interrupts*/
		MagIntSemaphore = xSemaphoreCreateBinary();
 800688c:	2203      	movs	r2, #3
 800688e:	2100      	movs	r1, #0
 8006890:	2001      	movs	r0, #1
 8006892:	f7fc ff17 	bl	80036c4 <xQueueGenericCreate>
 8006896:	4603      	mov	r3, r0
 8006898:	4a0d      	ldr	r2, [pc, #52]	; (80068d0 <MLX90393_Init+0x10c>)
 800689a:	6013      	str	r3, [r2, #0]
		enableIRQ();
 800689c:	f7f9 fd36 	bl	800030c <enableIRQ>

		/* Starts burst mode, and inmediatly takes semaphore */
		MLX90393_SB( dev, MLX90393_AXIS_ALL );
 80068a0:	210e      	movs	r1, #14
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f7ff feef 	bl	8006686 <MLX90393_SB>
		xSemaphoreTake( MagIntSemaphore, portMAX_DELAY );
 80068a8:	4b09      	ldr	r3, [pc, #36]	; (80068d0 <MLX90393_Init+0x10c>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f04f 31ff 	mov.w	r1, #4294967295
 80068b0:	4618      	mov	r0, r3
 80068b2:	f7fd fa6b 	bl	8003d8c <xQueueSemaphoreTake>

		status = status1 | status2 | status3;
 80068b6:	7dba      	ldrb	r2, [r7, #22]
 80068b8:	7d7b      	ldrb	r3, [r7, #21]
 80068ba:	4313      	orrs	r3, r2
 80068bc:	b2da      	uxtb	r2, r3
 80068be:	7d3b      	ldrb	r3, [r7, #20]
 80068c0:	4313      	orrs	r3, r2
 80068c2:	75fb      	strb	r3, [r7, #23]

		return status;
 80068c4:	7dfb      	ldrb	r3, [r7, #23]
	}

}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3718      	adds	r7, #24
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
 80068ce:	bf00      	nop
 80068d0:	200019d0 	.word	0x200019d0

080068d4 <MLX90393_ReadMeasurementAxisAll>:
 * This function reads the magnetic field in the x, y and z axis.
 * The data is output in the following order: T (MSB), T (LSB), X (MSB), X (LSB), Y (MSB), Y (LSB), Z (MSB), Z (LSB)
 *
 */
uint8_t MLX90393_ReadMeasurementAxisAll( MLX90393 *dev, uint16_t *XmagRead, uint16_t *YmagRead, uint16_t *ZmagRead )
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b088      	sub	sp, #32
 80068d8:	af00      	add	r7, sp, #0
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	60b9      	str	r1, [r7, #8]
 80068de:	607a      	str	r2, [r7, #4]
 80068e0:	603b      	str	r3, [r7, #0]
	uint8_t readStatus;
	uint8_t dataBuffer[RM_DATA_LENGHT] = { 0x00 };
 80068e2:	2300      	movs	r3, #0
 80068e4:	617b      	str	r3, [r7, #20]
 80068e6:	f107 0318 	add.w	r3, r7, #24
 80068ea:	2200      	movs	r2, #0
 80068ec:	601a      	str	r2, [r3, #0]
 80068ee:	711a      	strb	r2, [r3, #4]

	/* Reads data from MLX90393 device in all axis */
	readStatus = MLX90393_RM( dev, 0x08, dataBuffer );
 80068f0:	f107 0314 	add.w	r3, r7, #20
 80068f4:	461a      	mov	r2, r3
 80068f6:	2108      	movs	r1, #8
 80068f8:	68f8      	ldr	r0, [r7, #12]
 80068fa:	f7ff feed 	bl	80066d8 <MLX90393_RM>
 80068fe:	4603      	mov	r3, r0
 8006900:	77fb      	strb	r3, [r7, #31]

	*XmagRead = ( dataBuffer[2] << 8 ) | dataBuffer[1];
 8006902:	7dbb      	ldrb	r3, [r7, #22]
 8006904:	021b      	lsls	r3, r3, #8
 8006906:	b21a      	sxth	r2, r3
 8006908:	7d7b      	ldrb	r3, [r7, #21]
 800690a:	b21b      	sxth	r3, r3
 800690c:	4313      	orrs	r3, r2
 800690e:	b21b      	sxth	r3, r3
 8006910:	b29a      	uxth	r2, r3
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	801a      	strh	r2, [r3, #0]
	*YmagRead = ( dataBuffer[4] << 8 ) | dataBuffer[3];
 8006916:	7e3b      	ldrb	r3, [r7, #24]
 8006918:	021b      	lsls	r3, r3, #8
 800691a:	b21a      	sxth	r2, r3
 800691c:	7dfb      	ldrb	r3, [r7, #23]
 800691e:	b21b      	sxth	r3, r3
 8006920:	4313      	orrs	r3, r2
 8006922:	b21b      	sxth	r3, r3
 8006924:	b29a      	uxth	r2, r3
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	801a      	strh	r2, [r3, #0]
	*ZmagRead = ( dataBuffer[6] << 8 ) | dataBuffer[5];
 800692a:	7ebb      	ldrb	r3, [r7, #26]
 800692c:	021b      	lsls	r3, r3, #8
 800692e:	b21a      	sxth	r2, r3
 8006930:	7e7b      	ldrb	r3, [r7, #25]
 8006932:	b21b      	sxth	r3, r3
 8006934:	4313      	orrs	r3, r2
 8006936:	b21b      	sxth	r3, r3
 8006938:	b29a      	uxth	r2, r3
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	801a      	strh	r2, [r3, #0]

	/* Clears the DRDY flag and takes semaphore*/
	DRDYFlag = 0x00;
 800693e:	4b07      	ldr	r3, [pc, #28]	; (800695c <MLX90393_ReadMeasurementAxisAll+0x88>)
 8006940:	2200      	movs	r2, #0
 8006942:	701a      	strb	r2, [r3, #0]
	xSemaphoreTake( MagIntSemaphore, portMAX_DELAY );
 8006944:	4b06      	ldr	r3, [pc, #24]	; (8006960 <MLX90393_ReadMeasurementAxisAll+0x8c>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f04f 31ff 	mov.w	r1, #4294967295
 800694c:	4618      	mov	r0, r3
 800694e:	f7fd fa1d 	bl	8003d8c <xQueueSemaphoreTake>

	return readStatus;
 8006952:	7ffb      	ldrb	r3, [r7, #31]
}
 8006954:	4618      	mov	r0, r3
 8006956:	3720      	adds	r7, #32
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}
 800695c:	20001900 	.word	0x20001900
 8006960:	200019d0 	.word	0x200019d0

08006964 <MLX90393_DRDYCallback>:


/* Callback to DRDY interrupt */
void MLX90393_DRDYCallback( void )
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b082      	sub	sp, #8
 8006968:	af00      	add	r7, sp, #0
	/* Gives semaphore and yields */

	if(DRDYFlag == 0x00)
 800696a:	4b0f      	ldr	r3, [pc, #60]	; (80069a8 <MLX90393_DRDYCallback+0x44>)
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d116      	bne.n	80069a0 <MLX90393_DRDYCallback+0x3c>
	{
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8006972:	2300      	movs	r3, #0
 8006974:	607b      	str	r3, [r7, #4]
		xSemaphoreGiveFromISR( MagIntSemaphore, &xHigherPriorityTaskWoken );
 8006976:	4b0d      	ldr	r3, [pc, #52]	; (80069ac <MLX90393_DRDYCallback+0x48>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	1d3a      	adds	r2, r7, #4
 800697c:	4611      	mov	r1, r2
 800697e:	4618      	mov	r0, r3
 8006980:	f7fd f897 	bl	8003ab2 <xQueueGiveFromISR>
		portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d007      	beq.n	800699a <MLX90393_DRDYCallback+0x36>
 800698a:	4b09      	ldr	r3, [pc, #36]	; (80069b0 <MLX90393_DRDYCallback+0x4c>)
 800698c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006990:	601a      	str	r2, [r3, #0]
 8006992:	f3bf 8f4f 	dsb	sy
 8006996:	f3bf 8f6f 	isb	sy

		DRDYFlag = 0x01;
 800699a:	4b03      	ldr	r3, [pc, #12]	; (80069a8 <MLX90393_DRDYCallback+0x44>)
 800699c:	2201      	movs	r2, #1
 800699e:	701a      	strb	r2, [r3, #0]
	}
}
 80069a0:	bf00      	nop
 80069a2:	3708      	adds	r7, #8
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}
 80069a8:	20001900 	.word	0x20001900
 80069ac:	200019d0 	.word	0x200019d0
 80069b0:	e000ed04 	.word	0xe000ed04

080069b4 <__libc_init_array>:
 80069b4:	b570      	push	{r4, r5, r6, lr}
 80069b6:	4d0d      	ldr	r5, [pc, #52]	; (80069ec <__libc_init_array+0x38>)
 80069b8:	4c0d      	ldr	r4, [pc, #52]	; (80069f0 <__libc_init_array+0x3c>)
 80069ba:	1b64      	subs	r4, r4, r5
 80069bc:	10a4      	asrs	r4, r4, #2
 80069be:	2600      	movs	r6, #0
 80069c0:	42a6      	cmp	r6, r4
 80069c2:	d109      	bne.n	80069d8 <__libc_init_array+0x24>
 80069c4:	4d0b      	ldr	r5, [pc, #44]	; (80069f4 <__libc_init_array+0x40>)
 80069c6:	4c0c      	ldr	r4, [pc, #48]	; (80069f8 <__libc_init_array+0x44>)
 80069c8:	f000 f82e 	bl	8006a28 <_init>
 80069cc:	1b64      	subs	r4, r4, r5
 80069ce:	10a4      	asrs	r4, r4, #2
 80069d0:	2600      	movs	r6, #0
 80069d2:	42a6      	cmp	r6, r4
 80069d4:	d105      	bne.n	80069e2 <__libc_init_array+0x2e>
 80069d6:	bd70      	pop	{r4, r5, r6, pc}
 80069d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80069dc:	4798      	blx	r3
 80069de:	3601      	adds	r6, #1
 80069e0:	e7ee      	b.n	80069c0 <__libc_init_array+0xc>
 80069e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80069e6:	4798      	blx	r3
 80069e8:	3601      	adds	r6, #1
 80069ea:	e7f2      	b.n	80069d2 <__libc_init_array+0x1e>
 80069ec:	08006ad8 	.word	0x08006ad8
 80069f0:	08006ad8 	.word	0x08006ad8
 80069f4:	08006ad8 	.word	0x08006ad8
 80069f8:	08006adc 	.word	0x08006adc

080069fc <memcpy>:
 80069fc:	440a      	add	r2, r1
 80069fe:	4291      	cmp	r1, r2
 8006a00:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a04:	d100      	bne.n	8006a08 <memcpy+0xc>
 8006a06:	4770      	bx	lr
 8006a08:	b510      	push	{r4, lr}
 8006a0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a12:	4291      	cmp	r1, r2
 8006a14:	d1f9      	bne.n	8006a0a <memcpy+0xe>
 8006a16:	bd10      	pop	{r4, pc}

08006a18 <memset>:
 8006a18:	4402      	add	r2, r0
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d100      	bne.n	8006a22 <memset+0xa>
 8006a20:	4770      	bx	lr
 8006a22:	f803 1b01 	strb.w	r1, [r3], #1
 8006a26:	e7f9      	b.n	8006a1c <memset+0x4>

08006a28 <_init>:
 8006a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a2a:	bf00      	nop
 8006a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a2e:	bc08      	pop	{r3}
 8006a30:	469e      	mov	lr, r3
 8006a32:	4770      	bx	lr

08006a34 <_fini>:
 8006a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a36:	bf00      	nop
 8006a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a3a:	bc08      	pop	{r3}
 8006a3c:	469e      	mov	lr, r3
 8006a3e:	4770      	bx	lr
