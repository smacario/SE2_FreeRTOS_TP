
STM32L451RCT_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000924c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  080093ec  080093ec  000193ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080094b0  080094b0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080094b0  080094b0  000194b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080094b8  080094b8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080094b8  080094b8  000194b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080094bc  080094bc  000194bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080094c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001aa0  20000010  080094d0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ab0  080094d0  00021ab0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025189  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000046f8  00000000  00000000  000451c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bd0  00000000  00000000  000498c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a08  00000000  00000000  0004b498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002561b  00000000  00000000  0004cea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f857  00000000  00000000  000724bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0f1d  00000000  00000000  00091d12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00172c2f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007470  00000000  00000000  00172c84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080093d4 	.word	0x080093d4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	080093d4 	.word	0x080093d4

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96e 	b.w	80004d4 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468c      	mov	ip, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	f040 8083 	bne.w	8000326 <__udivmoddi4+0x116>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d947      	bls.n	80002b6 <__udivmoddi4+0xa6>
 8000226:	fab2 f282 	clz	r2, r2
 800022a:	b142      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022c:	f1c2 0020 	rsb	r0, r2, #32
 8000230:	fa24 f000 	lsr.w	r0, r4, r0
 8000234:	4091      	lsls	r1, r2
 8000236:	4097      	lsls	r7, r2
 8000238:	ea40 0c01 	orr.w	ip, r0, r1
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbbc f6f8 	udiv	r6, ip, r8
 8000248:	fa1f fe87 	uxth.w	lr, r7
 800024c:	fb08 c116 	mls	r1, r8, r6, ip
 8000250:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000254:	fb06 f10e 	mul.w	r1, r6, lr
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18fb      	adds	r3, r7, r3
 800025e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000262:	f080 8119 	bcs.w	8000498 <__udivmoddi4+0x288>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8116 	bls.w	8000498 <__udivmoddi4+0x288>
 800026c:	3e02      	subs	r6, #2
 800026e:	443b      	add	r3, r7
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0f8 	udiv	r0, r3, r8
 8000278:	fb08 3310 	mls	r3, r8, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fe0e 	mul.w	lr, r0, lr
 8000284:	45a6      	cmp	lr, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	193c      	adds	r4, r7, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8105 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000292:	45a6      	cmp	lr, r4
 8000294:	f240 8102 	bls.w	800049c <__udivmoddi4+0x28c>
 8000298:	3802      	subs	r0, #2
 800029a:	443c      	add	r4, r7
 800029c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a0:	eba4 040e 	sub.w	r4, r4, lr
 80002a4:	2600      	movs	r6, #0
 80002a6:	b11d      	cbz	r5, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c5 4300 	strd	r4, r3, [r5]
 80002b0:	4631      	mov	r1, r6
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	b902      	cbnz	r2, 80002ba <__udivmoddi4+0xaa>
 80002b8:	deff      	udf	#255	; 0xff
 80002ba:	fab2 f282 	clz	r2, r2
 80002be:	2a00      	cmp	r2, #0
 80002c0:	d150      	bne.n	8000364 <__udivmoddi4+0x154>
 80002c2:	1bcb      	subs	r3, r1, r7
 80002c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c8:	fa1f f887 	uxth.w	r8, r7
 80002cc:	2601      	movs	r6, #1
 80002ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80002d2:	0c21      	lsrs	r1, r4, #16
 80002d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002dc:	fb08 f30c 	mul.w	r3, r8, ip
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d907      	bls.n	80002f4 <__udivmoddi4+0xe4>
 80002e4:	1879      	adds	r1, r7, r1
 80002e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0xe2>
 80002ec:	428b      	cmp	r3, r1
 80002ee:	f200 80e9 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 80002f2:	4684      	mov	ip, r0
 80002f4:	1ac9      	subs	r1, r1, r3
 80002f6:	b2a3      	uxth	r3, r4
 80002f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000300:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000304:	fb08 f800 	mul.w	r8, r8, r0
 8000308:	45a0      	cmp	r8, r4
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x10c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x10a>
 8000314:	45a0      	cmp	r8, r4
 8000316:	f200 80d9 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 800031a:	4618      	mov	r0, r3
 800031c:	eba4 0408 	sub.w	r4, r4, r8
 8000320:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000324:	e7bf      	b.n	80002a6 <__udivmoddi4+0x96>
 8000326:	428b      	cmp	r3, r1
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x12e>
 800032a:	2d00      	cmp	r5, #0
 800032c:	f000 80b1 	beq.w	8000492 <__udivmoddi4+0x282>
 8000330:	2600      	movs	r6, #0
 8000332:	e9c5 0100 	strd	r0, r1, [r5]
 8000336:	4630      	mov	r0, r6
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	fab3 f683 	clz	r6, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d14a      	bne.n	80003dc <__udivmoddi4+0x1cc>
 8000346:	428b      	cmp	r3, r1
 8000348:	d302      	bcc.n	8000350 <__udivmoddi4+0x140>
 800034a:	4282      	cmp	r2, r0
 800034c:	f200 80b8 	bhi.w	80004c0 <__udivmoddi4+0x2b0>
 8000350:	1a84      	subs	r4, r0, r2
 8000352:	eb61 0103 	sbc.w	r1, r1, r3
 8000356:	2001      	movs	r0, #1
 8000358:	468c      	mov	ip, r1
 800035a:	2d00      	cmp	r5, #0
 800035c:	d0a8      	beq.n	80002b0 <__udivmoddi4+0xa0>
 800035e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000362:	e7a5      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000364:	f1c2 0320 	rsb	r3, r2, #32
 8000368:	fa20 f603 	lsr.w	r6, r0, r3
 800036c:	4097      	lsls	r7, r2
 800036e:	fa01 f002 	lsl.w	r0, r1, r2
 8000372:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000376:	40d9      	lsrs	r1, r3
 8000378:	4330      	orrs	r0, r6
 800037a:	0c03      	lsrs	r3, r0, #16
 800037c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000380:	fa1f f887 	uxth.w	r8, r7
 8000384:	fb0e 1116 	mls	r1, lr, r6, r1
 8000388:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800038c:	fb06 f108 	mul.w	r1, r6, r8
 8000390:	4299      	cmp	r1, r3
 8000392:	fa04 f402 	lsl.w	r4, r4, r2
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x19c>
 8000398:	18fb      	adds	r3, r7, r3
 800039a:	f106 3cff 	add.w	ip, r6, #4294967295
 800039e:	f080 808d 	bcs.w	80004bc <__udivmoddi4+0x2ac>
 80003a2:	4299      	cmp	r1, r3
 80003a4:	f240 808a 	bls.w	80004bc <__udivmoddi4+0x2ac>
 80003a8:	3e02      	subs	r6, #2
 80003aa:	443b      	add	r3, r7
 80003ac:	1a5b      	subs	r3, r3, r1
 80003ae:	b281      	uxth	r1, r0
 80003b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb00 f308 	mul.w	r3, r0, r8
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x1c4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ca:	d273      	bcs.n	80004b4 <__udivmoddi4+0x2a4>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d971      	bls.n	80004b4 <__udivmoddi4+0x2a4>
 80003d0:	3802      	subs	r0, #2
 80003d2:	4439      	add	r1, r7
 80003d4:	1acb      	subs	r3, r1, r3
 80003d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003da:	e778      	b.n	80002ce <__udivmoddi4+0xbe>
 80003dc:	f1c6 0c20 	rsb	ip, r6, #32
 80003e0:	fa03 f406 	lsl.w	r4, r3, r6
 80003e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e8:	431c      	orrs	r4, r3
 80003ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80003ee:	fa01 f306 	lsl.w	r3, r1, r6
 80003f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003fa:	431f      	orrs	r7, r3
 80003fc:	0c3b      	lsrs	r3, r7, #16
 80003fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000402:	fa1f f884 	uxth.w	r8, r4
 8000406:	fb0e 1119 	mls	r1, lr, r9, r1
 800040a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800040e:	fb09 fa08 	mul.w	sl, r9, r8
 8000412:	458a      	cmp	sl, r1
 8000414:	fa02 f206 	lsl.w	r2, r2, r6
 8000418:	fa00 f306 	lsl.w	r3, r0, r6
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x220>
 800041e:	1861      	adds	r1, r4, r1
 8000420:	f109 30ff 	add.w	r0, r9, #4294967295
 8000424:	d248      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 8000426:	458a      	cmp	sl, r1
 8000428:	d946      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800042a:	f1a9 0902 	sub.w	r9, r9, #2
 800042e:	4421      	add	r1, r4
 8000430:	eba1 010a 	sub.w	r1, r1, sl
 8000434:	b2bf      	uxth	r7, r7
 8000436:	fbb1 f0fe 	udiv	r0, r1, lr
 800043a:	fb0e 1110 	mls	r1, lr, r0, r1
 800043e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000442:	fb00 f808 	mul.w	r8, r0, r8
 8000446:	45b8      	cmp	r8, r7
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x24a>
 800044a:	19e7      	adds	r7, r4, r7
 800044c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000450:	d22e      	bcs.n	80004b0 <__udivmoddi4+0x2a0>
 8000452:	45b8      	cmp	r8, r7
 8000454:	d92c      	bls.n	80004b0 <__udivmoddi4+0x2a0>
 8000456:	3802      	subs	r0, #2
 8000458:	4427      	add	r7, r4
 800045a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800045e:	eba7 0708 	sub.w	r7, r7, r8
 8000462:	fba0 8902 	umull	r8, r9, r0, r2
 8000466:	454f      	cmp	r7, r9
 8000468:	46c6      	mov	lr, r8
 800046a:	4649      	mov	r1, r9
 800046c:	d31a      	bcc.n	80004a4 <__udivmoddi4+0x294>
 800046e:	d017      	beq.n	80004a0 <__udivmoddi4+0x290>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x27a>
 8000472:	ebb3 020e 	subs.w	r2, r3, lr
 8000476:	eb67 0701 	sbc.w	r7, r7, r1
 800047a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800047e:	40f2      	lsrs	r2, r6
 8000480:	ea4c 0202 	orr.w	r2, ip, r2
 8000484:	40f7      	lsrs	r7, r6
 8000486:	e9c5 2700 	strd	r2, r7, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e70b      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e9      	b.n	8000270 <__udivmoddi4+0x60>
 800049c:	4618      	mov	r0, r3
 800049e:	e6fd      	b.n	800029c <__udivmoddi4+0x8c>
 80004a0:	4543      	cmp	r3, r8
 80004a2:	d2e5      	bcs.n	8000470 <__udivmoddi4+0x260>
 80004a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7df      	b.n	8000470 <__udivmoddi4+0x260>
 80004b0:	4608      	mov	r0, r1
 80004b2:	e7d2      	b.n	800045a <__udivmoddi4+0x24a>
 80004b4:	4660      	mov	r0, ip
 80004b6:	e78d      	b.n	80003d4 <__udivmoddi4+0x1c4>
 80004b8:	4681      	mov	r9, r0
 80004ba:	e7b9      	b.n	8000430 <__udivmoddi4+0x220>
 80004bc:	4666      	mov	r6, ip
 80004be:	e775      	b.n	80003ac <__udivmoddi4+0x19c>
 80004c0:	4630      	mov	r0, r6
 80004c2:	e74a      	b.n	800035a <__udivmoddi4+0x14a>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	4439      	add	r1, r7
 80004ca:	e713      	b.n	80002f4 <__udivmoddi4+0xe4>
 80004cc:	3802      	subs	r0, #2
 80004ce:	443c      	add	r4, r7
 80004d0:	e724      	b.n	800031c <__udivmoddi4+0x10c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004dc:	4a04      	ldr	r2, [pc, #16]	; (80004f0 <MX_FREERTOS_Init+0x18>)
 80004de:	2100      	movs	r1, #0
 80004e0:	4804      	ldr	r0, [pc, #16]	; (80004f4 <MX_FREERTOS_Init+0x1c>)
 80004e2:	f005 fbe7 	bl	8005cb4 <osThreadNew>
 80004e6:	4603      	mov	r3, r0
 80004e8:	4a03      	ldr	r2, [pc, #12]	; (80004f8 <MX_FREERTOS_Init+0x20>)
 80004ea:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80004ec:	bf00      	nop
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	08009444 	.word	0x08009444
 80004f4:	080004fd 	.word	0x080004fd
 80004f8:	2000191c 	.word	0x2000191c

080004fc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000504:	2001      	movs	r0, #1
 8000506:	f005 fc67 	bl	8005dd8 <osDelay>
 800050a:	e7fb      	b.n	8000504 <StartDefaultTask+0x8>

0800050c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b08a      	sub	sp, #40	; 0x28
 8000510:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000512:	f107 0314 	add.w	r3, r7, #20
 8000516:	2200      	movs	r2, #0
 8000518:	601a      	str	r2, [r3, #0]
 800051a:	605a      	str	r2, [r3, #4]
 800051c:	609a      	str	r2, [r3, #8]
 800051e:	60da      	str	r2, [r3, #12]
 8000520:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000522:	4b3e      	ldr	r3, [pc, #248]	; (800061c <MX_GPIO_Init+0x110>)
 8000524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000526:	4a3d      	ldr	r2, [pc, #244]	; (800061c <MX_GPIO_Init+0x110>)
 8000528:	f043 0304 	orr.w	r3, r3, #4
 800052c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800052e:	4b3b      	ldr	r3, [pc, #236]	; (800061c <MX_GPIO_Init+0x110>)
 8000530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000532:	f003 0304 	and.w	r3, r3, #4
 8000536:	613b      	str	r3, [r7, #16]
 8000538:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800053a:	4b38      	ldr	r3, [pc, #224]	; (800061c <MX_GPIO_Init+0x110>)
 800053c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053e:	4a37      	ldr	r2, [pc, #220]	; (800061c <MX_GPIO_Init+0x110>)
 8000540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000544:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000546:	4b35      	ldr	r3, [pc, #212]	; (800061c <MX_GPIO_Init+0x110>)
 8000548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800054a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800054e:	60fb      	str	r3, [r7, #12]
 8000550:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000552:	4b32      	ldr	r3, [pc, #200]	; (800061c <MX_GPIO_Init+0x110>)
 8000554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000556:	4a31      	ldr	r2, [pc, #196]	; (800061c <MX_GPIO_Init+0x110>)
 8000558:	f043 0302 	orr.w	r3, r3, #2
 800055c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800055e:	4b2f      	ldr	r3, [pc, #188]	; (800061c <MX_GPIO_Init+0x110>)
 8000560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000562:	f003 0302 	and.w	r3, r3, #2
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800056a:	4b2c      	ldr	r3, [pc, #176]	; (800061c <MX_GPIO_Init+0x110>)
 800056c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800056e:	4a2b      	ldr	r2, [pc, #172]	; (800061c <MX_GPIO_Init+0x110>)
 8000570:	f043 0301 	orr.w	r3, r3, #1
 8000574:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000576:	4b29      	ldr	r3, [pc, #164]	; (800061c <MX_GPIO_Init+0x110>)
 8000578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057a:	f003 0301 	and.w	r3, r3, #1
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000582:	2200      	movs	r2, #0
 8000584:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000588:	4825      	ldr	r0, [pc, #148]	; (8000620 <MX_GPIO_Init+0x114>)
 800058a:	f000 ff79 	bl	8001480 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NAV1_OUT_GPIO_Port, NAV1_OUT_Pin, GPIO_PIN_RESET);
 800058e:	2200      	movs	r2, #0
 8000590:	2101      	movs	r1, #1
 8000592:	4824      	ldr	r0, [pc, #144]	; (8000624 <MX_GPIO_Init+0x118>)
 8000594:	f000 ff74 	bl	8001480 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000598:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800059c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800059e:	2301      	movs	r3, #1
 80005a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a2:	2300      	movs	r3, #0
 80005a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a6:	2300      	movs	r3, #0
 80005a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005aa:	f107 0314 	add.w	r3, r7, #20
 80005ae:	4619      	mov	r1, r3
 80005b0:	481b      	ldr	r0, [pc, #108]	; (8000620 <MX_GPIO_Init+0x114>)
 80005b2:	f000 fdeb 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NAV1_OUT_Pin;
 80005b6:	2301      	movs	r3, #1
 80005b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ba:	2301      	movs	r3, #1
 80005bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005be:	2300      	movs	r3, #0
 80005c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c2:	2300      	movs	r3, #0
 80005c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NAV1_OUT_GPIO_Port, &GPIO_InitStruct);
 80005c6:	f107 0314 	add.w	r3, r7, #20
 80005ca:	4619      	mov	r1, r3
 80005cc:	4815      	ldr	r0, [pc, #84]	; (8000624 <MX_GPIO_Init+0x118>)
 80005ce:	f000 fddd 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT_MAG_Pin;
 80005d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005d8:	4b13      	ldr	r3, [pc, #76]	; (8000628 <MX_GPIO_Init+0x11c>)
 80005da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005dc:	2300      	movs	r3, #0
 80005de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_MAG_GPIO_Port, &GPIO_InitStruct);
 80005e0:	f107 0314 	add.w	r3, r7, #20
 80005e4:	4619      	mov	r1, r3
 80005e6:	480f      	ldr	r0, [pc, #60]	; (8000624 <MX_GPIO_Init+0x118>)
 80005e8:	f000 fdd0 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT_IMU_Pin;
 80005ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005f2:	4b0e      	ldr	r3, [pc, #56]	; (800062c <MX_GPIO_Init+0x120>)
 80005f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005f6:	2301      	movs	r3, #1
 80005f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_IMU_GPIO_Port, &GPIO_InitStruct);
 80005fa:	f107 0314 	add.w	r3, r7, #20
 80005fe:	4619      	mov	r1, r3
 8000600:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000604:	f000 fdc2 	bl	800118c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000608:	2200      	movs	r2, #0
 800060a:	2105      	movs	r1, #5
 800060c:	2028      	movs	r0, #40	; 0x28
 800060e:	f000 fcfa 	bl	8001006 <HAL_NVIC_SetPriority>
  //HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

}
 8000612:	bf00      	nop
 8000614:	3728      	adds	r7, #40	; 0x28
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	40021000 	.word	0x40021000
 8000620:	48000800 	.word	0x48000800
 8000624:	48000400 	.word	0x48000400
 8000628:	10110000 	.word	0x10110000
 800062c:	10210000 	.word	0x10210000

08000630 <enableIRQ>:

/* USER CODE BEGIN 2 */


void enableIRQ( void )
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000634:	2028      	movs	r0, #40	; 0x28
 8000636:	f000 fd02 	bl	800103e <HAL_NVIC_EnableIRQ>
}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}
	...

08000640 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000644:	4b1b      	ldr	r3, [pc, #108]	; (80006b4 <MX_I2C2_Init+0x74>)
 8000646:	4a1c      	ldr	r2, [pc, #112]	; (80006b8 <MX_I2C2_Init+0x78>)
 8000648:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 800064a:	4b1a      	ldr	r3, [pc, #104]	; (80006b4 <MX_I2C2_Init+0x74>)
 800064c:	4a1b      	ldr	r2, [pc, #108]	; (80006bc <MX_I2C2_Init+0x7c>)
 800064e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000650:	4b18      	ldr	r3, [pc, #96]	; (80006b4 <MX_I2C2_Init+0x74>)
 8000652:	2200      	movs	r2, #0
 8000654:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000656:	4b17      	ldr	r3, [pc, #92]	; (80006b4 <MX_I2C2_Init+0x74>)
 8000658:	2201      	movs	r2, #1
 800065a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800065c:	4b15      	ldr	r3, [pc, #84]	; (80006b4 <MX_I2C2_Init+0x74>)
 800065e:	2200      	movs	r2, #0
 8000660:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000662:	4b14      	ldr	r3, [pc, #80]	; (80006b4 <MX_I2C2_Init+0x74>)
 8000664:	2200      	movs	r2, #0
 8000666:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000668:	4b12      	ldr	r3, [pc, #72]	; (80006b4 <MX_I2C2_Init+0x74>)
 800066a:	2200      	movs	r2, #0
 800066c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800066e:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <MX_I2C2_Init+0x74>)
 8000670:	2200      	movs	r2, #0
 8000672:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000674:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <MX_I2C2_Init+0x74>)
 8000676:	2200      	movs	r2, #0
 8000678:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800067a:	480e      	ldr	r0, [pc, #56]	; (80006b4 <MX_I2C2_Init+0x74>)
 800067c:	f000 ff3b 	bl	80014f6 <HAL_I2C_Init>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000686:	f000 f96f 	bl	8000968 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800068a:	2100      	movs	r1, #0
 800068c:	4809      	ldr	r0, [pc, #36]	; (80006b4 <MX_I2C2_Init+0x74>)
 800068e:	f002 fe43 	bl	8003318 <HAL_I2CEx_ConfigAnalogFilter>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000698:	f000 f966 	bl	8000968 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800069c:	2100      	movs	r1, #0
 800069e:	4805      	ldr	r0, [pc, #20]	; (80006b4 <MX_I2C2_Init+0x74>)
 80006a0:	f002 fe85 	bl	80033ae <HAL_I2CEx_ConfigDigitalFilter>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80006aa:	f000 f95d 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	20001920 	.word	0x20001920
 80006b8:	40005800 	.word	0x40005800
 80006bc:	10909cec 	.word	0x10909cec

080006c0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b0a2      	sub	sp, #136	; 0x88
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006d8:	f107 0310 	add.w	r3, r7, #16
 80006dc:	2264      	movs	r2, #100	; 0x64
 80006de:	2100      	movs	r1, #0
 80006e0:	4618      	mov	r0, r3
 80006e2:	f008 fe6f 	bl	80093c4 <memset>
  if(i2cHandle->Instance==I2C2)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4a24      	ldr	r2, [pc, #144]	; (800077c <HAL_I2C_MspInit+0xbc>)
 80006ec:	4293      	cmp	r3, r2
 80006ee:	d140      	bne.n	8000772 <HAL_I2C_MspInit+0xb2>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80006f0:	2380      	movs	r3, #128	; 0x80
 80006f2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006f8:	f107 0310 	add.w	r3, r7, #16
 80006fc:	4618      	mov	r0, r3
 80006fe:	f003 fd2d 	bl	800415c <HAL_RCCEx_PeriphCLKConfig>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000708:	f000 f92e 	bl	8000968 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800070c:	4b1c      	ldr	r3, [pc, #112]	; (8000780 <HAL_I2C_MspInit+0xc0>)
 800070e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000710:	4a1b      	ldr	r2, [pc, #108]	; (8000780 <HAL_I2C_MspInit+0xc0>)
 8000712:	f043 0302 	orr.w	r3, r3, #2
 8000716:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000718:	4b19      	ldr	r3, [pc, #100]	; (8000780 <HAL_I2C_MspInit+0xc0>)
 800071a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071c:	f003 0302 	and.w	r3, r3, #2
 8000720:	60fb      	str	r3, [r7, #12]
 8000722:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB13     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000724:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000728:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800072a:	2312      	movs	r3, #18
 800072c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072e:	2300      	movs	r3, #0
 8000730:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000732:	2303      	movs	r3, #3
 8000734:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000738:	2304      	movs	r3, #4
 800073a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800073e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000742:	4619      	mov	r1, r3
 8000744:	480f      	ldr	r0, [pc, #60]	; (8000784 <HAL_I2C_MspInit+0xc4>)
 8000746:	f000 fd21 	bl	800118c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800074a:	4b0d      	ldr	r3, [pc, #52]	; (8000780 <HAL_I2C_MspInit+0xc0>)
 800074c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800074e:	4a0c      	ldr	r2, [pc, #48]	; (8000780 <HAL_I2C_MspInit+0xc0>)
 8000750:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000754:	6593      	str	r3, [r2, #88]	; 0x58
 8000756:	4b0a      	ldr	r3, [pc, #40]	; (8000780 <HAL_I2C_MspInit+0xc0>)
 8000758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800075a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8000762:	2200      	movs	r2, #0
 8000764:	2105      	movs	r1, #5
 8000766:	2021      	movs	r0, #33	; 0x21
 8000768:	f000 fc4d 	bl	8001006 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800076c:	2021      	movs	r0, #33	; 0x21
 800076e:	f000 fc66 	bl	800103e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000772:	bf00      	nop
 8000774:	3788      	adds	r7, #136	; 0x88
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40005800 	.word	0x40005800
 8000780:	40021000 	.word	0x40021000
 8000784:	48000400 	.word	0x48000400

08000788 <taskSensorIMU>:
	}
}


void taskSensorIMU ( void *pvParameters )
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]

	while(1)
	{
		IIM42652_ReadMeasurementAxisAll( &IMU );
 8000790:	4801      	ldr	r0, [pc, #4]	; (8000798 <taskSensorIMU+0x10>)
 8000792:	f008 fd13 	bl	80091bc <IIM42652_ReadMeasurementAxisAll>
 8000796:	e7fb      	b.n	8000790 <taskSensorIMU+0x8>
 8000798:	2000196c 	.word	0x2000196c

0800079c <taskLED>:
}


/* Task for blinking LED and sensor task initialization  */
void taskLED ( void *pvParameters )
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b086      	sub	sp, #24
 80007a0:	af02      	add	r7, sp, #8
 80007a2:	6078      	str	r0, [r7, #4]

	static uint32_t pin_state = 0;
	HAL_StatusTypeDef i2cStatus = HAL_OK;
 80007a4:	2300      	movs	r3, #0
 80007a6:	73fb      	strb	r3, [r7, #15]


	/* This section initializes sensors and sensors tasks */

	i2cStatus |= IIM42652_Init(&IMU, &hi2c2);
 80007a8:	491c      	ldr	r1, [pc, #112]	; (800081c <taskLED+0x80>)
 80007aa:	481d      	ldr	r0, [pc, #116]	; (8000820 <taskLED+0x84>)
 80007ac:	f008 fc62 	bl	8009074 <IIM42652_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	461a      	mov	r2, r3
 80007b4:	7bfb      	ldrb	r3, [r7, #15]
 80007b6:	4313      	orrs	r3, r2
 80007b8:	73fb      	strb	r3, [r7, #15]
	//i2cStatus |= MLX90393_Init(&MAG, &hi2c2);

	if(i2cStatus == HAL_ERROR)
 80007ba:	7bfb      	ldrb	r3, [r7, #15]
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d105      	bne.n	80007cc <taskLED+0x30>
	{ /* Error condition */
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 80007c0:	2201      	movs	r2, #1
 80007c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007c6:	4817      	ldr	r0, [pc, #92]	; (8000824 <taskLED+0x88>)
 80007c8:	f000 fe5a 	bl	8001480 <HAL_GPIO_WritePin>
	}

	enableIRQ();
 80007cc:	f7ff ff30 	bl	8000630 <enableIRQ>

	BaseType_t xReturnIMU = xTaskCreate ( taskSensorIMU, "IMU", 300, NULL, 3, &tasIMU_Handler );
 80007d0:	4b15      	ldr	r3, [pc, #84]	; (8000828 <taskLED+0x8c>)
 80007d2:	9301      	str	r3, [sp, #4]
 80007d4:	2303      	movs	r3, #3
 80007d6:	9300      	str	r3, [sp, #0]
 80007d8:	2300      	movs	r3, #0
 80007da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80007de:	4913      	ldr	r1, [pc, #76]	; (800082c <taskLED+0x90>)
 80007e0:	4813      	ldr	r0, [pc, #76]	; (8000830 <taskLED+0x94>)
 80007e2:	f006 fb30 	bl	8006e46 <xTaskCreate>
 80007e6:	60b8      	str	r0, [r7, #8]
	//if( ( xReturnIMU | xReturnMAG ) == pdFALSE )  { /* Error condition */ }


	while(1)
	{
		vTaskDelay(150 / portTICK_PERIOD_MS);
 80007e8:	2096      	movs	r0, #150	; 0x96
 80007ea:	f006 fc73 	bl	80070d4 <vTaskDelay>

		pin_state = !pin_state;
 80007ee:	4b11      	ldr	r3, [pc, #68]	; (8000834 <taskLED+0x98>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	bf0c      	ite	eq
 80007f6:	2301      	moveq	r3, #1
 80007f8:	2300      	movne	r3, #0
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	461a      	mov	r2, r3
 80007fe:	4b0d      	ldr	r3, [pc, #52]	; (8000834 <taskLED+0x98>)
 8000800:	601a      	str	r2, [r3, #0]

		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, pin_state);
 8000802:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <taskLED+0x98>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	b2db      	uxtb	r3, r3
 8000808:	461a      	mov	r2, r3
 800080a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800080e:	4805      	ldr	r0, [pc, #20]	; (8000824 <taskLED+0x88>)
 8000810:	f000 fe36 	bl	8001480 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8000814:	2032      	movs	r0, #50	; 0x32
 8000816:	f000 faf7 	bl	8000e08 <HAL_Delay>
		vTaskDelay(150 / portTICK_PERIOD_MS);
 800081a:	e7e5      	b.n	80007e8 <taskLED+0x4c>
 800081c:	20001920 	.word	0x20001920
 8000820:	2000196c 	.word	0x2000196c
 8000824:	48000800 	.word	0x48000800
 8000828:	20000030 	.word	0x20000030
 800082c:	080093f8 	.word	0x080093f8
 8000830:	08000789 	.word	0x08000789
 8000834:	20000034 	.word	0x20000034

08000838 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800083e:	f000 fa6e 	bl	8000d1e <HAL_Init>

  /* USER CODE BEGIN Init */

  /* Initialize init task */
  BaseType_t xReturnLED  = xTaskCreate ( taskLED, "t_LED", 100, NULL, 2, &taskLED_Handler );
 8000842:	4b10      	ldr	r3, [pc, #64]	; (8000884 <main+0x4c>)
 8000844:	9301      	str	r3, [sp, #4]
 8000846:	2302      	movs	r3, #2
 8000848:	9300      	str	r3, [sp, #0]
 800084a:	2300      	movs	r3, #0
 800084c:	2264      	movs	r2, #100	; 0x64
 800084e:	490e      	ldr	r1, [pc, #56]	; (8000888 <main+0x50>)
 8000850:	480e      	ldr	r0, [pc, #56]	; (800088c <main+0x54>)
 8000852:	f006 faf8 	bl	8006e46 <xTaskCreate>
 8000856:	6078      	str	r0, [r7, #4]
  if( ( xReturnLED ) == pdFALSE ) { /* Error condition */ }

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000858:	f000 f81c 	bl	8000894 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800085c:	f7ff fe56 	bl	800050c <MX_GPIO_Init>
  MX_I2C2_Init();
 8000860:	f7ff feee 	bl	8000640 <MX_I2C2_Init>
  MX_TIM16_Init();
 8000864:	f000 f954 	bl	8000b10 <MX_TIM16_Init>
  MX_USART3_UART_Init();
 8000868:	f000 f99e 	bl	8000ba8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* Disables INT pin for UART */
  HAL_GPIO_WritePin(NAV1_OUT_GPIO_Port, NAV1_OUT_Pin, 0x00);
 800086c:	2200      	movs	r2, #0
 800086e:	2101      	movs	r1, #1
 8000870:	4807      	ldr	r0, [pc, #28]	; (8000890 <main+0x58>)
 8000872:	f000 fe05 	bl	8001480 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000876:	f005 f9d3 	bl	8005c20 <osKernelInitialize>
  MX_FREERTOS_Init();
 800087a:	f7ff fe2d 	bl	80004d8 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800087e:	f005 f9f3 	bl	8005c68 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000882:	e7fe      	b.n	8000882 <main+0x4a>
 8000884:	2000002c 	.word	0x2000002c
 8000888:	080093fc 	.word	0x080093fc
 800088c:	0800079d 	.word	0x0800079d
 8000890:	48000400 	.word	0x48000400

08000894 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b096      	sub	sp, #88	; 0x58
 8000898:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800089a:	f107 0314 	add.w	r3, r7, #20
 800089e:	2244      	movs	r2, #68	; 0x44
 80008a0:	2100      	movs	r1, #0
 80008a2:	4618      	mov	r0, r3
 80008a4:	f008 fd8e 	bl	80093c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a8:	463b      	mov	r3, r7
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
 80008b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008b6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008ba:	f002 fdd3 	bl	8003464 <HAL_PWREx_ControlVoltageScaling>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80008c4:	f000 f850 	bl	8000968 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008c8:	2301      	movs	r3, #1
 80008ca:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008d2:	2302      	movs	r3, #2
 80008d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008d6:	2303      	movs	r3, #3
 80008d8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 80008da:	2302      	movs	r3, #2
 80008dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80008de:	2310      	movs	r3, #16
 80008e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008e2:	2307      	movs	r3, #7
 80008e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008e6:	2302      	movs	r3, #2
 80008e8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008ea:	2302      	movs	r3, #2
 80008ec:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ee:	f107 0314 	add.w	r3, r7, #20
 80008f2:	4618      	mov	r0, r3
 80008f4:	f002 fe0c 	bl	8003510 <HAL_RCC_OscConfig>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80008fe:	f000 f833 	bl	8000968 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000902:	230f      	movs	r3, #15
 8000904:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000906:	2303      	movs	r3, #3
 8000908:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800090a:	2300      	movs	r3, #0
 800090c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800090e:	2300      	movs	r3, #0
 8000910:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000912:	2300      	movs	r3, #0
 8000914:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000916:	463b      	mov	r3, r7
 8000918:	2104      	movs	r1, #4
 800091a:	4618      	mov	r0, r3
 800091c:	f003 fa18 	bl	8003d50 <HAL_RCC_ClockConfig>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000926:	f000 f81f 	bl	8000968 <Error_Handler>
  }
}
 800092a:	bf00      	nop
 800092c:	3758      	adds	r7, #88	; 0x58
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
	...

08000934 <configureTimerForRunTimeStats>:

/* USER CODE BEGIN 4 */

void configureTimerForRunTimeStats(void) {
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  ulHighFrequencyTimerTicks = 0;
 8000938:	4b03      	ldr	r3, [pc, #12]	; (8000948 <configureTimerForRunTimeStats+0x14>)
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim16);
 800093e:	4803      	ldr	r0, [pc, #12]	; (800094c <configureTimerForRunTimeStats+0x18>)
 8000940:	f003 ff90 	bl	8004864 <HAL_TIM_Base_Start_IT>
}
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20001980 	.word	0x20001980
 800094c:	20001998 	.word	0x20001998

08000950 <getRunTimeCounterValue>:

unsigned long getRunTimeCounterValue(void) {
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  return ulHighFrequencyTimerTicks;
 8000954:	4b03      	ldr	r3, [pc, #12]	; (8000964 <getRunTimeCounterValue+0x14>)
 8000956:	681b      	ldr	r3, [r3, #0]
}
 8000958:	4618      	mov	r0, r3
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	20001980 	.word	0x20001980

08000968 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800096c:	b672      	cpsid	i
}
 800096e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000970:	e7fe      	b.n	8000970 <Error_Handler+0x8>
	...

08000974 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097a:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <HAL_MspInit+0x4c>)
 800097c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800097e:	4a10      	ldr	r2, [pc, #64]	; (80009c0 <HAL_MspInit+0x4c>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	6613      	str	r3, [r2, #96]	; 0x60
 8000986:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <HAL_MspInit+0x4c>)
 8000988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000992:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <HAL_MspInit+0x4c>)
 8000994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000996:	4a0a      	ldr	r2, [pc, #40]	; (80009c0 <HAL_MspInit+0x4c>)
 8000998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800099c:	6593      	str	r3, [r2, #88]	; 0x58
 800099e:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <HAL_MspInit+0x4c>)
 80009a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a6:	603b      	str	r3, [r7, #0]
 80009a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009aa:	2200      	movs	r2, #0
 80009ac:	210f      	movs	r1, #15
 80009ae:	f06f 0001 	mvn.w	r0, #1
 80009b2:	f000 fb28 	bl	8001006 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40021000 	.word	0x40021000

080009c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <NMI_Handler+0x4>

080009ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ce:	e7fe      	b.n	80009ce <HardFault_Handler+0x4>

080009d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <MemManage_Handler+0x4>

080009d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009da:	e7fe      	b.n	80009da <BusFault_Handler+0x4>

080009dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <UsageFault_Handler+0x4>

080009e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e2:	b480      	push	{r7}
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr

080009f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009f4:	f000 f9e8 	bl	8000dc8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80009f8:	f007 f804 	bl	8007a04 <xTaskGetSchedulerState>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d001      	beq.n	8000a06 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000a02:	f007 fee9 	bl	80087d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
	...

08000a0c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

	ulHighFrequencyTimerTicks++;
 8000a10:	4b04      	ldr	r3, [pc, #16]	; (8000a24 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	3301      	adds	r3, #1
 8000a16:	4a03      	ldr	r2, [pc, #12]	; (8000a24 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8000a18:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000a1a:	4803      	ldr	r0, [pc, #12]	; (8000a28 <TIM1_UP_TIM16_IRQHandler+0x1c>)
 8000a1c:	f003 ff7e 	bl	800491c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000a20:	bf00      	nop
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	20001980 	.word	0x20001980
 8000a28:	20001998 	.word	0x20001998

08000a2c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  IIM42652_I2C2Callback();
 8000a30:	f008 fc4e 	bl	80092d0 <IIM42652_I2C2Callback>

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8000a34:	4802      	ldr	r0, [pc, #8]	; (8000a40 <I2C2_EV_IRQHandler+0x14>)
 8000a36:	f001 f8b1 	bl	8001b9c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	20001920 	.word	0x20001920

08000a44 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000a48:	4802      	ldr	r0, [pc, #8]	; (8000a54 <USART3_IRQHandler+0x10>)
 8000a4a:	f004 f9ef 	bl	8004e2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	200019e4 	.word	0x200019e4

08000a58 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	/* REqads pending register 1 from external interrupt struct */
	uint32_t pending = EXTI->PR1;
 8000a5e:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <EXTI15_10_IRQHandler+0x50>)
 8000a60:	695b      	ldr	r3, [r3, #20]
 8000a62:	607b      	str	r3, [r7, #4]


	if( pending & (1 << 12) )
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d005      	beq.n	8000a7a <EXTI15_10_IRQHandler+0x22>
	{
		IIM42652_DRDYCallback();
 8000a6e:	f008 fc07 	bl	8009280 <IIM42652_DRDYCallback>
		__HAL_GPIO_EXTI_CLEAR_IT(INT_IMU_Pin);
 8000a72:	4b0d      	ldr	r3, [pc, #52]	; (8000aa8 <EXTI15_10_IRQHandler+0x50>)
 8000a74:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a78:	615a      	str	r2, [r3, #20]
	}

	if( pending & (1 << 15) )
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d005      	beq.n	8000a90 <EXTI15_10_IRQHandler+0x38>
	{
		MLX90393_DRDYCallback();
 8000a84:	f008 fc44 	bl	8009310 <MLX90393_DRDYCallback>
		__HAL_GPIO_EXTI_CLEAR_IT(INT_MAG_Pin);
 8000a88:	4b07      	ldr	r3, [pc, #28]	; (8000aa8 <EXTI15_10_IRQHandler+0x50>)
 8000a8a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a8e:	615a      	str	r2, [r3, #20]
	}


  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8000a90:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000a94:	f000 fd0c 	bl	80014b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000a98:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000a9c:	f000 fd08 	bl	80014b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */


  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000aa0:	bf00      	nop
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40010400 	.word	0x40010400

08000aac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ab0:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <SystemInit+0x5c>)
 8000ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ab6:	4a14      	ldr	r2, [pc, #80]	; (8000b08 <SystemInit+0x5c>)
 8000ab8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000abc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000ac0:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <SystemInit+0x60>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a11      	ldr	r2, [pc, #68]	; (8000b0c <SystemInit+0x60>)
 8000ac6:	f043 0301 	orr.w	r3, r3, #1
 8000aca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000acc:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <SystemInit+0x60>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	; (8000b0c <SystemInit+0x60>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4a0d      	ldr	r2, [pc, #52]	; (8000b0c <SystemInit+0x60>)
 8000ad8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000adc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000ae0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000ae2:	4b0a      	ldr	r3, [pc, #40]	; (8000b0c <SystemInit+0x60>)
 8000ae4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ae8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000aea:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <SystemInit+0x60>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a07      	ldr	r2, [pc, #28]	; (8000b0c <SystemInit+0x60>)
 8000af0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000af4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000af6:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <SystemInit+0x60>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	619a      	str	r2, [r3, #24]
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	e000ed00 	.word	0xe000ed00
 8000b0c:	40021000 	.word	0x40021000

08000b10 <MX_TIM16_Init>:

TIM_HandleTypeDef htim16;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000b14:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <MX_TIM16_Init+0x44>)
 8000b16:	4a10      	ldr	r2, [pc, #64]	; (8000b58 <MX_TIM16_Init+0x48>)
 8000b18:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <MX_TIM16_Init+0x44>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b20:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <MX_TIM16_Init+0x44>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 799;
 8000b26:	4b0b      	ldr	r3, [pc, #44]	; (8000b54 <MX_TIM16_Init+0x44>)
 8000b28:	f240 321f 	movw	r2, #799	; 0x31f
 8000b2c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b2e:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <MX_TIM16_Init+0x44>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000b34:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <MX_TIM16_Init+0x44>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b3a:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <MX_TIM16_Init+0x44>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000b40:	4804      	ldr	r0, [pc, #16]	; (8000b54 <MX_TIM16_Init+0x44>)
 8000b42:	f003 fe37 	bl	80047b4 <HAL_TIM_Base_Init>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000b4c:	f7ff ff0c 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000b50:	bf00      	nop
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	20001998 	.word	0x20001998
 8000b58:	40014400 	.word	0x40014400

08000b5c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a0d      	ldr	r2, [pc, #52]	; (8000ba0 <HAL_TIM_Base_MspInit+0x44>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d113      	bne.n	8000b96 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000b6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ba4 <HAL_TIM_Base_MspInit+0x48>)
 8000b70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b72:	4a0c      	ldr	r2, [pc, #48]	; (8000ba4 <HAL_TIM_Base_MspInit+0x48>)
 8000b74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b78:	6613      	str	r3, [r2, #96]	; 0x60
 8000b7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ba4 <HAL_TIM_Base_MspInit+0x48>)
 8000b7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5, 0);
 8000b86:	2200      	movs	r2, #0
 8000b88:	2105      	movs	r1, #5
 8000b8a:	2019      	movs	r0, #25
 8000b8c:	f000 fa3b 	bl	8001006 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000b90:	2019      	movs	r0, #25
 8000b92:	f000 fa54 	bl	800103e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8000b96:	bf00      	nop
 8000b98:	3710      	adds	r7, #16
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40014400 	.word	0x40014400
 8000ba4:	40021000 	.word	0x40021000

08000ba8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bac:	4b14      	ldr	r3, [pc, #80]	; (8000c00 <MX_USART3_UART_Init+0x58>)
 8000bae:	4a15      	ldr	r2, [pc, #84]	; (8000c04 <MX_USART3_UART_Init+0x5c>)
 8000bb0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bb2:	4b13      	ldr	r3, [pc, #76]	; (8000c00 <MX_USART3_UART_Init+0x58>)
 8000bb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bb8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bba:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <MX_USART3_UART_Init+0x58>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bc0:	4b0f      	ldr	r3, [pc, #60]	; (8000c00 <MX_USART3_UART_Init+0x58>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bc6:	4b0e      	ldr	r3, [pc, #56]	; (8000c00 <MX_USART3_UART_Init+0x58>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bcc:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <MX_USART3_UART_Init+0x58>)
 8000bce:	220c      	movs	r2, #12
 8000bd0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bd2:	4b0b      	ldr	r3, [pc, #44]	; (8000c00 <MX_USART3_UART_Init+0x58>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd8:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <MX_USART3_UART_Init+0x58>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bde:	4b08      	ldr	r3, [pc, #32]	; (8000c00 <MX_USART3_UART_Init+0x58>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000be4:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <MX_USART3_UART_Init+0x58>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bea:	4805      	ldr	r0, [pc, #20]	; (8000c00 <MX_USART3_UART_Init+0x58>)
 8000bec:	f004 f874 	bl	8004cd8 <HAL_UART_Init>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000bf6:	f7ff feb7 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	200019e4 	.word	0x200019e4
 8000c04:	40004800 	.word	0x40004800

08000c08 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b0a2      	sub	sp, #136	; 0x88
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c10:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
 8000c1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c20:	f107 0310 	add.w	r3, r7, #16
 8000c24:	2264      	movs	r2, #100	; 0x64
 8000c26:	2100      	movs	r1, #0
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f008 fbcb 	bl	80093c4 <memset>
  if(uartHandle->Instance==USART3)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a23      	ldr	r2, [pc, #140]	; (8000cc0 <HAL_UART_MspInit+0xb8>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d13f      	bne.n	8000cb8 <HAL_UART_MspInit+0xb0>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c38:	2304      	movs	r3, #4
 8000c3a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c40:	f107 0310 	add.w	r3, r7, #16
 8000c44:	4618      	mov	r0, r3
 8000c46:	f003 fa89 	bl	800415c <HAL_RCCEx_PeriphCLKConfig>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c50:	f7ff fe8a 	bl	8000968 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c54:	4b1b      	ldr	r3, [pc, #108]	; (8000cc4 <HAL_UART_MspInit+0xbc>)
 8000c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c58:	4a1a      	ldr	r2, [pc, #104]	; (8000cc4 <HAL_UART_MspInit+0xbc>)
 8000c5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c5e:	6593      	str	r3, [r2, #88]	; 0x58
 8000c60:	4b18      	ldr	r3, [pc, #96]	; (8000cc4 <HAL_UART_MspInit+0xbc>)
 8000c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c6c:	4b15      	ldr	r3, [pc, #84]	; (8000cc4 <HAL_UART_MspInit+0xbc>)
 8000c6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c70:	4a14      	ldr	r2, [pc, #80]	; (8000cc4 <HAL_UART_MspInit+0xbc>)
 8000c72:	f043 0304 	orr.w	r3, r3, #4
 8000c76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c78:	4b12      	ldr	r3, [pc, #72]	; (8000cc4 <HAL_UART_MspInit+0xbc>)
 8000c7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c7c:	f003 0304 	and.w	r3, r3, #4
 8000c80:	60bb      	str	r3, [r7, #8]
 8000c82:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PC4     ------> USART3_TX
    PC5     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000c84:	2330      	movs	r3, #48	; 0x30
 8000c86:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c90:	2303      	movs	r3, #3
 8000c92:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c96:	2307      	movs	r3, #7
 8000c98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c9c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4809      	ldr	r0, [pc, #36]	; (8000cc8 <HAL_UART_MspInit+0xc0>)
 8000ca4:	f000 fa72 	bl	800118c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	2105      	movs	r1, #5
 8000cac:	2027      	movs	r0, #39	; 0x27
 8000cae:	f000 f9aa 	bl	8001006 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000cb2:	2027      	movs	r0, #39	; 0x27
 8000cb4:	f000 f9c3 	bl	800103e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000cb8:	bf00      	nop
 8000cba:	3788      	adds	r7, #136	; 0x88
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	40004800 	.word	0x40004800
 8000cc4:	40021000 	.word	0x40021000
 8000cc8:	48000800 	.word	0x48000800

08000ccc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ccc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d04 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cd0:	f7ff feec 	bl	8000aac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000cd4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000cd6:	e003      	b.n	8000ce0 <LoopCopyDataInit>

08000cd8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000cd8:	4b0b      	ldr	r3, [pc, #44]	; (8000d08 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000cda:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000cdc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000cde:	3104      	adds	r1, #4

08000ce0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000ce0:	480a      	ldr	r0, [pc, #40]	; (8000d0c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000ce2:	4b0b      	ldr	r3, [pc, #44]	; (8000d10 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000ce4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000ce6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000ce8:	d3f6      	bcc.n	8000cd8 <CopyDataInit>
	ldr	r2, =_sbss
 8000cea:	4a0a      	ldr	r2, [pc, #40]	; (8000d14 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000cec:	e002      	b.n	8000cf4 <LoopFillZerobss>

08000cee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000cee:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000cf0:	f842 3b04 	str.w	r3, [r2], #4

08000cf4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000cf4:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <LoopForever+0x16>)
	cmp	r2, r3
 8000cf6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000cf8:	d3f9      	bcc.n	8000cee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cfa:	f008 fb31 	bl	8009360 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cfe:	f7ff fd9b 	bl	8000838 <main>

08000d02 <LoopForever>:

LoopForever:
    b LoopForever
 8000d02:	e7fe      	b.n	8000d02 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d04:	20020000 	.word	0x20020000
	ldr	r3, =_sidata
 8000d08:	080094c0 	.word	0x080094c0
	ldr	r0, =_sdata
 8000d0c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000d10:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8000d14:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8000d18:	20001ab0 	.word	0x20001ab0

08000d1c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d1c:	e7fe      	b.n	8000d1c <ADC1_IRQHandler>

08000d1e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b082      	sub	sp, #8
 8000d22:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d24:	2300      	movs	r3, #0
 8000d26:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d28:	2003      	movs	r0, #3
 8000d2a:	f000 f961 	bl	8000ff0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d2e:	200f      	movs	r0, #15
 8000d30:	f000 f80e 	bl	8000d50 <HAL_InitTick>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d002      	beq.n	8000d40 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	71fb      	strb	r3, [r7, #7]
 8000d3e:	e001      	b.n	8000d44 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d40:	f7ff fe18 	bl	8000974 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d44:	79fb      	ldrb	r3, [r7, #7]
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
	...

08000d50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d5c:	4b17      	ldr	r3, [pc, #92]	; (8000dbc <HAL_InitTick+0x6c>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d023      	beq.n	8000dac <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d64:	4b16      	ldr	r3, [pc, #88]	; (8000dc0 <HAL_InitTick+0x70>)
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	4b14      	ldr	r3, [pc, #80]	; (8000dbc <HAL_InitTick+0x6c>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f000 f96d 	bl	800105a <HAL_SYSTICK_Config>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d10f      	bne.n	8000da6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2b0f      	cmp	r3, #15
 8000d8a:	d809      	bhi.n	8000da0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	6879      	ldr	r1, [r7, #4]
 8000d90:	f04f 30ff 	mov.w	r0, #4294967295
 8000d94:	f000 f937 	bl	8001006 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d98:	4a0a      	ldr	r2, [pc, #40]	; (8000dc4 <HAL_InitTick+0x74>)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6013      	str	r3, [r2, #0]
 8000d9e:	e007      	b.n	8000db0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000da0:	2301      	movs	r3, #1
 8000da2:	73fb      	strb	r3, [r7, #15]
 8000da4:	e004      	b.n	8000db0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	73fb      	strb	r3, [r7, #15]
 8000daa:	e001      	b.n	8000db0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000dac:	2301      	movs	r3, #1
 8000dae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3710      	adds	r7, #16
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000008 	.word	0x20000008
 8000dc0:	20000000 	.word	0x20000000
 8000dc4:	20000004 	.word	0x20000004

08000dc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dcc:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <HAL_IncTick+0x20>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	4b06      	ldr	r3, [pc, #24]	; (8000dec <HAL_IncTick+0x24>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	4a04      	ldr	r2, [pc, #16]	; (8000dec <HAL_IncTick+0x24>)
 8000dda:	6013      	str	r3, [r2, #0]
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	20000008 	.word	0x20000008
 8000dec:	20001a68 	.word	0x20001a68

08000df0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  return uwTick;
 8000df4:	4b03      	ldr	r3, [pc, #12]	; (8000e04 <HAL_GetTick+0x14>)
 8000df6:	681b      	ldr	r3, [r3, #0]
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	20001a68 	.word	0x20001a68

08000e08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e10:	f7ff ffee 	bl	8000df0 <HAL_GetTick>
 8000e14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e20:	d005      	beq.n	8000e2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e22:	4b0a      	ldr	r3, [pc, #40]	; (8000e4c <HAL_Delay+0x44>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	461a      	mov	r2, r3
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e2e:	bf00      	nop
 8000e30:	f7ff ffde 	bl	8000df0 <HAL_GetTick>
 8000e34:	4602      	mov	r2, r0
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	68fa      	ldr	r2, [r7, #12]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d8f7      	bhi.n	8000e30 <HAL_Delay+0x28>
  {
  }
}
 8000e40:	bf00      	nop
 8000e42:	bf00      	nop
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000008 	.word	0x20000008

08000e50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	f003 0307 	and.w	r3, r3, #7
 8000e5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e60:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <__NVIC_SetPriorityGrouping+0x44>)
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e66:	68ba      	ldr	r2, [r7, #8]
 8000e68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e82:	4a04      	ldr	r2, [pc, #16]	; (8000e94 <__NVIC_SetPriorityGrouping+0x44>)
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	60d3      	str	r3, [r2, #12]
}
 8000e88:	bf00      	nop
 8000e8a:	3714      	adds	r7, #20
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e9c:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	0a1b      	lsrs	r3, r3, #8
 8000ea2:	f003 0307 	and.w	r3, r3, #7
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	db0b      	blt.n	8000ede <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ec6:	79fb      	ldrb	r3, [r7, #7]
 8000ec8:	f003 021f 	and.w	r2, r3, #31
 8000ecc:	4907      	ldr	r1, [pc, #28]	; (8000eec <__NVIC_EnableIRQ+0x38>)
 8000ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed2:	095b      	lsrs	r3, r3, #5
 8000ed4:	2001      	movs	r0, #1
 8000ed6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ede:	bf00      	nop
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	e000e100 	.word	0xe000e100

08000ef0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	6039      	str	r1, [r7, #0]
 8000efa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	db0a      	blt.n	8000f1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	b2da      	uxtb	r2, r3
 8000f08:	490c      	ldr	r1, [pc, #48]	; (8000f3c <__NVIC_SetPriority+0x4c>)
 8000f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0e:	0112      	lsls	r2, r2, #4
 8000f10:	b2d2      	uxtb	r2, r2
 8000f12:	440b      	add	r3, r1
 8000f14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f18:	e00a      	b.n	8000f30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	b2da      	uxtb	r2, r3
 8000f1e:	4908      	ldr	r1, [pc, #32]	; (8000f40 <__NVIC_SetPriority+0x50>)
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	f003 030f 	and.w	r3, r3, #15
 8000f26:	3b04      	subs	r3, #4
 8000f28:	0112      	lsls	r2, r2, #4
 8000f2a:	b2d2      	uxtb	r2, r2
 8000f2c:	440b      	add	r3, r1
 8000f2e:	761a      	strb	r2, [r3, #24]
}
 8000f30:	bf00      	nop
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	e000e100 	.word	0xe000e100
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b089      	sub	sp, #36	; 0x24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	f003 0307 	and.w	r3, r3, #7
 8000f56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	f1c3 0307 	rsb	r3, r3, #7
 8000f5e:	2b04      	cmp	r3, #4
 8000f60:	bf28      	it	cs
 8000f62:	2304      	movcs	r3, #4
 8000f64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	3304      	adds	r3, #4
 8000f6a:	2b06      	cmp	r3, #6
 8000f6c:	d902      	bls.n	8000f74 <NVIC_EncodePriority+0x30>
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	3b03      	subs	r3, #3
 8000f72:	e000      	b.n	8000f76 <NVIC_EncodePriority+0x32>
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f78:	f04f 32ff 	mov.w	r2, #4294967295
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	43da      	mvns	r2, r3
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	401a      	ands	r2, r3
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	fa01 f303 	lsl.w	r3, r1, r3
 8000f96:	43d9      	mvns	r1, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f9c:	4313      	orrs	r3, r2
         );
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3724      	adds	r7, #36	; 0x24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
	...

08000fac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fbc:	d301      	bcc.n	8000fc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e00f      	b.n	8000fe2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fc2:	4a0a      	ldr	r2, [pc, #40]	; (8000fec <SysTick_Config+0x40>)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3b01      	subs	r3, #1
 8000fc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fca:	210f      	movs	r1, #15
 8000fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd0:	f7ff ff8e 	bl	8000ef0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fd4:	4b05      	ldr	r3, [pc, #20]	; (8000fec <SysTick_Config+0x40>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fda:	4b04      	ldr	r3, [pc, #16]	; (8000fec <SysTick_Config+0x40>)
 8000fdc:	2207      	movs	r2, #7
 8000fde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	e000e010 	.word	0xe000e010

08000ff0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f7ff ff29 	bl	8000e50 <__NVIC_SetPriorityGrouping>
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b086      	sub	sp, #24
 800100a:	af00      	add	r7, sp, #0
 800100c:	4603      	mov	r3, r0
 800100e:	60b9      	str	r1, [r7, #8]
 8001010:	607a      	str	r2, [r7, #4]
 8001012:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001018:	f7ff ff3e 	bl	8000e98 <__NVIC_GetPriorityGrouping>
 800101c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	68b9      	ldr	r1, [r7, #8]
 8001022:	6978      	ldr	r0, [r7, #20]
 8001024:	f7ff ff8e 	bl	8000f44 <NVIC_EncodePriority>
 8001028:	4602      	mov	r2, r0
 800102a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800102e:	4611      	mov	r1, r2
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff ff5d 	bl	8000ef0 <__NVIC_SetPriority>
}
 8001036:	bf00      	nop
 8001038:	3718      	adds	r7, #24
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b082      	sub	sp, #8
 8001042:	af00      	add	r7, sp, #0
 8001044:	4603      	mov	r3, r0
 8001046:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff ff31 	bl	8000eb4 <__NVIC_EnableIRQ>
}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f7ff ffa2 	bl	8000fac <SysTick_Config>
 8001068:	4603      	mov	r3, r0
}
 800106a:	4618      	mov	r0, r3
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001072:	b480      	push	{r7}
 8001074:	b085      	sub	sp, #20
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800107a:	2300      	movs	r3, #0
 800107c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001084:	b2db      	uxtb	r3, r3
 8001086:	2b02      	cmp	r3, #2
 8001088:	d008      	beq.n	800109c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2204      	movs	r2, #4
 800108e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2200      	movs	r2, #0
 8001094:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001098:	2301      	movs	r3, #1
 800109a:	e022      	b.n	80010e2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f022 020e 	bic.w	r2, r2, #14
 80010aa:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f022 0201 	bic.w	r2, r2, #1
 80010ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c0:	f003 021c 	and.w	r2, r3, #28
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c8:	2101      	movs	r1, #1
 80010ca:	fa01 f202 	lsl.w	r2, r1, r2
 80010ce:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2201      	movs	r2, #1
 80010d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2200      	movs	r2, #0
 80010dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80010e0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3714      	adds	r7, #20
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr

080010ee <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b084      	sub	sp, #16
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010f6:	2300      	movs	r3, #0
 80010f8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001100:	b2db      	uxtb	r3, r3
 8001102:	2b02      	cmp	r3, #2
 8001104:	d005      	beq.n	8001112 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2204      	movs	r2, #4
 800110a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800110c:	2301      	movs	r3, #1
 800110e:	73fb      	strb	r3, [r7, #15]
 8001110:	e029      	b.n	8001166 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f022 020e 	bic.w	r2, r2, #14
 8001120:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f022 0201 	bic.w	r2, r2, #1
 8001130:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001136:	f003 021c 	and.w	r2, r3, #28
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	2101      	movs	r1, #1
 8001140:	fa01 f202 	lsl.w	r2, r1, r2
 8001144:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2201      	movs	r2, #1
 800114a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2200      	movs	r2, #0
 8001152:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800115a:	2b00      	cmp	r3, #0
 800115c:	d003      	beq.n	8001166 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	4798      	blx	r3
    }
  }
  return status;
 8001166:	7bfb      	ldrb	r3, [r7, #15]
}
 8001168:	4618      	mov	r0, r3
 800116a:	3710      	adds	r7, #16
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800117e:	b2db      	uxtb	r3, r3
}
 8001180:	4618      	mov	r0, r3
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800118c:	b480      	push	{r7}
 800118e:	b087      	sub	sp, #28
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001196:	2300      	movs	r3, #0
 8001198:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800119a:	e154      	b.n	8001446 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	2101      	movs	r1, #1
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	fa01 f303 	lsl.w	r3, r1, r3
 80011a8:	4013      	ands	r3, r2
 80011aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	f000 8146 	beq.w	8001440 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d00b      	beq.n	80011d4 <HAL_GPIO_Init+0x48>
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d007      	beq.n	80011d4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011c8:	2b11      	cmp	r3, #17
 80011ca:	d003      	beq.n	80011d4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	2b12      	cmp	r3, #18
 80011d2:	d130      	bne.n	8001236 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	2203      	movs	r2, #3
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	43db      	mvns	r3, r3
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	4013      	ands	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	68da      	ldr	r2, [r3, #12]
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800120a:	2201      	movs	r2, #1
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	43db      	mvns	r3, r3
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	4013      	ands	r3, r2
 8001218:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	091b      	lsrs	r3, r3, #4
 8001220:	f003 0201 	and.w	r2, r3, #1
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	4313      	orrs	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	2203      	movs	r2, #3
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43db      	mvns	r3, r3
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	4013      	ands	r3, r2
 800124c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	689a      	ldr	r2, [r3, #8]
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	4313      	orrs	r3, r2
 800125e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	2b02      	cmp	r3, #2
 800126c:	d003      	beq.n	8001276 <HAL_GPIO_Init+0xea>
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	2b12      	cmp	r3, #18
 8001274:	d123      	bne.n	80012be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	08da      	lsrs	r2, r3, #3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	3208      	adds	r2, #8
 800127e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001282:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	f003 0307 	and.w	r3, r3, #7
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	220f      	movs	r2, #15
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	43db      	mvns	r3, r3
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	4013      	ands	r3, r2
 8001298:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	691a      	ldr	r2, [r3, #16]
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	f003 0307 	and.w	r3, r3, #7
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	08da      	lsrs	r2, r3, #3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	3208      	adds	r2, #8
 80012b8:	6939      	ldr	r1, [r7, #16]
 80012ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	2203      	movs	r2, #3
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	43db      	mvns	r3, r3
 80012d0:	693a      	ldr	r2, [r7, #16]
 80012d2:	4013      	ands	r3, r2
 80012d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f003 0203 	and.w	r2, r3, #3
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	f000 80a0 	beq.w	8001440 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001300:	4b58      	ldr	r3, [pc, #352]	; (8001464 <HAL_GPIO_Init+0x2d8>)
 8001302:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001304:	4a57      	ldr	r2, [pc, #348]	; (8001464 <HAL_GPIO_Init+0x2d8>)
 8001306:	f043 0301 	orr.w	r3, r3, #1
 800130a:	6613      	str	r3, [r2, #96]	; 0x60
 800130c:	4b55      	ldr	r3, [pc, #340]	; (8001464 <HAL_GPIO_Init+0x2d8>)
 800130e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001310:	f003 0301 	and.w	r3, r3, #1
 8001314:	60bb      	str	r3, [r7, #8]
 8001316:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001318:	4a53      	ldr	r2, [pc, #332]	; (8001468 <HAL_GPIO_Init+0x2dc>)
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	089b      	lsrs	r3, r3, #2
 800131e:	3302      	adds	r3, #2
 8001320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001324:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	f003 0303 	and.w	r3, r3, #3
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	220f      	movs	r2, #15
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	43db      	mvns	r3, r3
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	4013      	ands	r3, r2
 800133a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001342:	d019      	beq.n	8001378 <HAL_GPIO_Init+0x1ec>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4a49      	ldr	r2, [pc, #292]	; (800146c <HAL_GPIO_Init+0x2e0>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d013      	beq.n	8001374 <HAL_GPIO_Init+0x1e8>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4a48      	ldr	r2, [pc, #288]	; (8001470 <HAL_GPIO_Init+0x2e4>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d00d      	beq.n	8001370 <HAL_GPIO_Init+0x1e4>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	4a47      	ldr	r2, [pc, #284]	; (8001474 <HAL_GPIO_Init+0x2e8>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d007      	beq.n	800136c <HAL_GPIO_Init+0x1e0>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4a46      	ldr	r2, [pc, #280]	; (8001478 <HAL_GPIO_Init+0x2ec>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d101      	bne.n	8001368 <HAL_GPIO_Init+0x1dc>
 8001364:	2304      	movs	r3, #4
 8001366:	e008      	b.n	800137a <HAL_GPIO_Init+0x1ee>
 8001368:	2307      	movs	r3, #7
 800136a:	e006      	b.n	800137a <HAL_GPIO_Init+0x1ee>
 800136c:	2303      	movs	r3, #3
 800136e:	e004      	b.n	800137a <HAL_GPIO_Init+0x1ee>
 8001370:	2302      	movs	r3, #2
 8001372:	e002      	b.n	800137a <HAL_GPIO_Init+0x1ee>
 8001374:	2301      	movs	r3, #1
 8001376:	e000      	b.n	800137a <HAL_GPIO_Init+0x1ee>
 8001378:	2300      	movs	r3, #0
 800137a:	697a      	ldr	r2, [r7, #20]
 800137c:	f002 0203 	and.w	r2, r2, #3
 8001380:	0092      	lsls	r2, r2, #2
 8001382:	4093      	lsls	r3, r2
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	4313      	orrs	r3, r2
 8001388:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800138a:	4937      	ldr	r1, [pc, #220]	; (8001468 <HAL_GPIO_Init+0x2dc>)
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	089b      	lsrs	r3, r3, #2
 8001390:	3302      	adds	r3, #2
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001398:	4b38      	ldr	r3, [pc, #224]	; (800147c <HAL_GPIO_Init+0x2f0>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	43db      	mvns	r3, r3
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	4013      	ands	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d003      	beq.n	80013bc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013bc:	4a2f      	ldr	r2, [pc, #188]	; (800147c <HAL_GPIO_Init+0x2f0>)
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80013c2:	4b2e      	ldr	r3, [pc, #184]	; (800147c <HAL_GPIO_Init+0x2f0>)
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	43db      	mvns	r3, r3
 80013cc:	693a      	ldr	r2, [r7, #16]
 80013ce:	4013      	ands	r3, r2
 80013d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d003      	beq.n	80013e6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013e6:	4a25      	ldr	r2, [pc, #148]	; (800147c <HAL_GPIO_Init+0x2f0>)
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013ec:	4b23      	ldr	r3, [pc, #140]	; (800147c <HAL_GPIO_Init+0x2f0>)
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	43db      	mvns	r3, r3
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	4013      	ands	r3, r2
 80013fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001404:	2b00      	cmp	r3, #0
 8001406:	d003      	beq.n	8001410 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	4313      	orrs	r3, r2
 800140e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001410:	4a1a      	ldr	r2, [pc, #104]	; (800147c <HAL_GPIO_Init+0x2f0>)
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001416:	4b19      	ldr	r3, [pc, #100]	; (800147c <HAL_GPIO_Init+0x2f0>)
 8001418:	68db      	ldr	r3, [r3, #12]
 800141a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	43db      	mvns	r3, r3
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	4013      	ands	r3, r2
 8001424:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d003      	beq.n	800143a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	4313      	orrs	r3, r2
 8001438:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800143a:	4a10      	ldr	r2, [pc, #64]	; (800147c <HAL_GPIO_Init+0x2f0>)
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	3301      	adds	r3, #1
 8001444:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	fa22 f303 	lsr.w	r3, r2, r3
 8001450:	2b00      	cmp	r3, #0
 8001452:	f47f aea3 	bne.w	800119c <HAL_GPIO_Init+0x10>
  }
}
 8001456:	bf00      	nop
 8001458:	bf00      	nop
 800145a:	371c      	adds	r7, #28
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	40021000 	.word	0x40021000
 8001468:	40010000 	.word	0x40010000
 800146c:	48000400 	.word	0x48000400
 8001470:	48000800 	.word	0x48000800
 8001474:	48000c00 	.word	0x48000c00
 8001478:	48001000 	.word	0x48001000
 800147c:	40010400 	.word	0x40010400

08001480 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	460b      	mov	r3, r1
 800148a:	807b      	strh	r3, [r7, #2]
 800148c:	4613      	mov	r3, r2
 800148e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001490:	787b      	ldrb	r3, [r7, #1]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d003      	beq.n	800149e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001496:	887a      	ldrh	r2, [r7, #2]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800149c:	e002      	b.n	80014a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800149e:	887a      	ldrh	r2, [r7, #2]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80014ba:	4b08      	ldr	r3, [pc, #32]	; (80014dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014bc:	695a      	ldr	r2, [r3, #20]
 80014be:	88fb      	ldrh	r3, [r7, #6]
 80014c0:	4013      	ands	r3, r2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d006      	beq.n	80014d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014c6:	4a05      	ldr	r2, [pc, #20]	; (80014dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014c8:	88fb      	ldrh	r3, [r7, #6]
 80014ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014cc:	88fb      	ldrh	r3, [r7, #6]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f000 f806 	bl	80014e0 <HAL_GPIO_EXTI_Callback>
  }
}
 80014d4:	bf00      	nop
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40010400 	.word	0x40010400

080014e0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80014ea:	bf00      	nop
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b082      	sub	sp, #8
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d101      	bne.n	8001508 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	e081      	b.n	800160c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800150e:	b2db      	uxtb	r3, r3
 8001510:	2b00      	cmp	r3, #0
 8001512:	d106      	bne.n	8001522 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2200      	movs	r2, #0
 8001518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f7ff f8cf 	bl	80006c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2224      	movs	r2, #36	; 0x24
 8001526:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f022 0201 	bic.w	r2, r2, #1
 8001538:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685a      	ldr	r2, [r3, #4]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001546:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	689a      	ldr	r2, [r3, #8]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001556:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d107      	bne.n	8001570 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	689a      	ldr	r2, [r3, #8]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800156c:	609a      	str	r2, [r3, #8]
 800156e:	e006      	b.n	800157e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689a      	ldr	r2, [r3, #8]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800157c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	2b02      	cmp	r3, #2
 8001584:	d104      	bne.n	8001590 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800158e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	6812      	ldr	r2, [r2, #0]
 800159a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800159e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015a2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	68da      	ldr	r2, [r3, #12]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015b2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	691a      	ldr	r2, [r3, #16]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	695b      	ldr	r3, [r3, #20]
 80015bc:	ea42 0103 	orr.w	r1, r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	021a      	lsls	r2, r3, #8
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	430a      	orrs	r2, r1
 80015cc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	69d9      	ldr	r1, [r3, #28]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a1a      	ldr	r2, [r3, #32]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	430a      	orrs	r2, r1
 80015dc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f042 0201 	orr.w	r2, r2, #1
 80015ec:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2220      	movs	r2, #32
 80015f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800160a:	2300      	movs	r3, #0
}
 800160c:	4618      	mov	r0, r3
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b088      	sub	sp, #32
 8001618:	af02      	add	r7, sp, #8
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	4608      	mov	r0, r1
 800161e:	4611      	mov	r1, r2
 8001620:	461a      	mov	r2, r3
 8001622:	4603      	mov	r3, r0
 8001624:	817b      	strh	r3, [r7, #10]
 8001626:	460b      	mov	r3, r1
 8001628:	813b      	strh	r3, [r7, #8]
 800162a:	4613      	mov	r3, r2
 800162c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001634:	b2db      	uxtb	r3, r3
 8001636:	2b20      	cmp	r3, #32
 8001638:	f040 80f9 	bne.w	800182e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800163c:	6a3b      	ldr	r3, [r7, #32]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d002      	beq.n	8001648 <HAL_I2C_Mem_Write+0x34>
 8001642:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001644:	2b00      	cmp	r3, #0
 8001646:	d105      	bne.n	8001654 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800164e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e0ed      	b.n	8001830 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800165a:	2b01      	cmp	r3, #1
 800165c:	d101      	bne.n	8001662 <HAL_I2C_Mem_Write+0x4e>
 800165e:	2302      	movs	r3, #2
 8001660:	e0e6      	b.n	8001830 <HAL_I2C_Mem_Write+0x21c>
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	2201      	movs	r2, #1
 8001666:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800166a:	f7ff fbc1 	bl	8000df0 <HAL_GetTick>
 800166e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	9300      	str	r3, [sp, #0]
 8001674:	2319      	movs	r3, #25
 8001676:	2201      	movs	r2, #1
 8001678:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800167c:	68f8      	ldr	r0, [r7, #12]
 800167e:	f001 fc38 	bl	8002ef2 <I2C_WaitOnFlagUntilTimeout>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e0d1      	b.n	8001830 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2221      	movs	r2, #33	; 0x21
 8001690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2240      	movs	r2, #64	; 0x40
 8001698:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	2200      	movs	r2, #0
 80016a0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	6a3a      	ldr	r2, [r7, #32]
 80016a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80016ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2200      	movs	r2, #0
 80016b2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80016b4:	88f8      	ldrh	r0, [r7, #6]
 80016b6:	893a      	ldrh	r2, [r7, #8]
 80016b8:	8979      	ldrh	r1, [r7, #10]
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	9301      	str	r3, [sp, #4]
 80016be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016c0:	9300      	str	r3, [sp, #0]
 80016c2:	4603      	mov	r3, r0
 80016c4:	68f8      	ldr	r0, [r7, #12]
 80016c6:	f000 fee9 	bl	800249c <I2C_RequestMemoryWrite>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d005      	beq.n	80016dc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	2200      	movs	r2, #0
 80016d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e0a9      	b.n	8001830 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016e0:	b29b      	uxth	r3, r3
 80016e2:	2bff      	cmp	r3, #255	; 0xff
 80016e4:	d90e      	bls.n	8001704 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	22ff      	movs	r2, #255	; 0xff
 80016ea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016f0:	b2da      	uxtb	r2, r3
 80016f2:	8979      	ldrh	r1, [r7, #10]
 80016f4:	2300      	movs	r3, #0
 80016f6:	9300      	str	r3, [sp, #0]
 80016f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016fc:	68f8      	ldr	r0, [r7, #12]
 80016fe:	f001 fd1b 	bl	8003138 <I2C_TransferConfig>
 8001702:	e00f      	b.n	8001724 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001708:	b29a      	uxth	r2, r3
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001712:	b2da      	uxtb	r2, r3
 8001714:	8979      	ldrh	r1, [r7, #10]
 8001716:	2300      	movs	r3, #0
 8001718:	9300      	str	r3, [sp, #0]
 800171a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800171e:	68f8      	ldr	r0, [r7, #12]
 8001720:	f001 fd0a 	bl	8003138 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001724:	697a      	ldr	r2, [r7, #20]
 8001726:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001728:	68f8      	ldr	r0, [r7, #12]
 800172a:	f001 fc22 	bl	8002f72 <I2C_WaitOnTXISFlagUntilTimeout>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e07b      	b.n	8001830 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173c:	781a      	ldrb	r2, [r3, #0]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001748:	1c5a      	adds	r2, r3, #1
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001752:	b29b      	uxth	r3, r3
 8001754:	3b01      	subs	r3, #1
 8001756:	b29a      	uxth	r2, r3
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001760:	3b01      	subs	r3, #1
 8001762:	b29a      	uxth	r2, r3
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800176c:	b29b      	uxth	r3, r3
 800176e:	2b00      	cmp	r3, #0
 8001770:	d034      	beq.n	80017dc <HAL_I2C_Mem_Write+0x1c8>
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001776:	2b00      	cmp	r3, #0
 8001778:	d130      	bne.n	80017dc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	9300      	str	r3, [sp, #0]
 800177e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001780:	2200      	movs	r2, #0
 8001782:	2180      	movs	r1, #128	; 0x80
 8001784:	68f8      	ldr	r0, [r7, #12]
 8001786:	f001 fbb4 	bl	8002ef2 <I2C_WaitOnFlagUntilTimeout>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e04d      	b.n	8001830 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001798:	b29b      	uxth	r3, r3
 800179a:	2bff      	cmp	r3, #255	; 0xff
 800179c:	d90e      	bls.n	80017bc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	22ff      	movs	r2, #255	; 0xff
 80017a2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	8979      	ldrh	r1, [r7, #10]
 80017ac:	2300      	movs	r3, #0
 80017ae:	9300      	str	r3, [sp, #0]
 80017b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017b4:	68f8      	ldr	r0, [r7, #12]
 80017b6:	f001 fcbf 	bl	8003138 <I2C_TransferConfig>
 80017ba:	e00f      	b.n	80017dc <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017c0:	b29a      	uxth	r2, r3
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ca:	b2da      	uxtb	r2, r3
 80017cc:	8979      	ldrh	r1, [r7, #10]
 80017ce:	2300      	movs	r3, #0
 80017d0:	9300      	str	r3, [sp, #0]
 80017d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017d6:	68f8      	ldr	r0, [r7, #12]
 80017d8:	f001 fcae 	bl	8003138 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d19e      	bne.n	8001724 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017e6:	697a      	ldr	r2, [r7, #20]
 80017e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017ea:	68f8      	ldr	r0, [r7, #12]
 80017ec:	f001 fc01 	bl	8002ff2 <I2C_WaitOnSTOPFlagUntilTimeout>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e01a      	b.n	8001830 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2220      	movs	r2, #32
 8001800:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	6859      	ldr	r1, [r3, #4]
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	4b0a      	ldr	r3, [pc, #40]	; (8001838 <HAL_I2C_Mem_Write+0x224>)
 800180e:	400b      	ands	r3, r1
 8001810:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	2220      	movs	r2, #32
 8001816:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2200      	movs	r2, #0
 800181e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2200      	movs	r2, #0
 8001826:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800182a:	2300      	movs	r3, #0
 800182c:	e000      	b.n	8001830 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800182e:	2302      	movs	r3, #2
  }
}
 8001830:	4618      	mov	r0, r3
 8001832:	3718      	adds	r7, #24
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	fe00e800 	.word	0xfe00e800

0800183c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b088      	sub	sp, #32
 8001840:	af02      	add	r7, sp, #8
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	4608      	mov	r0, r1
 8001846:	4611      	mov	r1, r2
 8001848:	461a      	mov	r2, r3
 800184a:	4603      	mov	r3, r0
 800184c:	817b      	strh	r3, [r7, #10]
 800184e:	460b      	mov	r3, r1
 8001850:	813b      	strh	r3, [r7, #8]
 8001852:	4613      	mov	r3, r2
 8001854:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800185c:	b2db      	uxtb	r3, r3
 800185e:	2b20      	cmp	r3, #32
 8001860:	f040 80fd 	bne.w	8001a5e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001864:	6a3b      	ldr	r3, [r7, #32]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d002      	beq.n	8001870 <HAL_I2C_Mem_Read+0x34>
 800186a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800186c:	2b00      	cmp	r3, #0
 800186e:	d105      	bne.n	800187c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001876:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e0f1      	b.n	8001a60 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001882:	2b01      	cmp	r3, #1
 8001884:	d101      	bne.n	800188a <HAL_I2C_Mem_Read+0x4e>
 8001886:	2302      	movs	r3, #2
 8001888:	e0ea      	b.n	8001a60 <HAL_I2C_Mem_Read+0x224>
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2201      	movs	r2, #1
 800188e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001892:	f7ff faad 	bl	8000df0 <HAL_GetTick>
 8001896:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	9300      	str	r3, [sp, #0]
 800189c:	2319      	movs	r3, #25
 800189e:	2201      	movs	r2, #1
 80018a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018a4:	68f8      	ldr	r0, [r7, #12]
 80018a6:	f001 fb24 	bl	8002ef2 <I2C_WaitOnFlagUntilTimeout>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e0d5      	b.n	8001a60 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2222      	movs	r2, #34	; 0x22
 80018b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2240      	movs	r2, #64	; 0x40
 80018c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2200      	movs	r2, #0
 80018c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	6a3a      	ldr	r2, [r7, #32]
 80018ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80018d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2200      	movs	r2, #0
 80018da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80018dc:	88f8      	ldrh	r0, [r7, #6]
 80018de:	893a      	ldrh	r2, [r7, #8]
 80018e0:	8979      	ldrh	r1, [r7, #10]
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	9301      	str	r3, [sp, #4]
 80018e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018e8:	9300      	str	r3, [sp, #0]
 80018ea:	4603      	mov	r3, r0
 80018ec:	68f8      	ldr	r0, [r7, #12]
 80018ee:	f000 fe29 	bl	8002544 <I2C_RequestMemoryRead>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d005      	beq.n	8001904 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2200      	movs	r2, #0
 80018fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e0ad      	b.n	8001a60 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001908:	b29b      	uxth	r3, r3
 800190a:	2bff      	cmp	r3, #255	; 0xff
 800190c:	d90e      	bls.n	800192c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	22ff      	movs	r2, #255	; 0xff
 8001912:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001918:	b2da      	uxtb	r2, r3
 800191a:	8979      	ldrh	r1, [r7, #10]
 800191c:	4b52      	ldr	r3, [pc, #328]	; (8001a68 <HAL_I2C_Mem_Read+0x22c>)
 800191e:	9300      	str	r3, [sp, #0]
 8001920:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001924:	68f8      	ldr	r0, [r7, #12]
 8001926:	f001 fc07 	bl	8003138 <I2C_TransferConfig>
 800192a:	e00f      	b.n	800194c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001930:	b29a      	uxth	r2, r3
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800193a:	b2da      	uxtb	r2, r3
 800193c:	8979      	ldrh	r1, [r7, #10]
 800193e:	4b4a      	ldr	r3, [pc, #296]	; (8001a68 <HAL_I2C_Mem_Read+0x22c>)
 8001940:	9300      	str	r3, [sp, #0]
 8001942:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001946:	68f8      	ldr	r0, [r7, #12]
 8001948:	f001 fbf6 	bl	8003138 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	9300      	str	r3, [sp, #0]
 8001950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001952:	2200      	movs	r2, #0
 8001954:	2104      	movs	r1, #4
 8001956:	68f8      	ldr	r0, [r7, #12]
 8001958:	f001 facb 	bl	8002ef2 <I2C_WaitOnFlagUntilTimeout>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e07c      	b.n	8001a60 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001970:	b2d2      	uxtb	r2, r2
 8001972:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001978:	1c5a      	adds	r2, r3, #1
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001982:	3b01      	subs	r3, #1
 8001984:	b29a      	uxth	r2, r3
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800198e:	b29b      	uxth	r3, r3
 8001990:	3b01      	subs	r3, #1
 8001992:	b29a      	uxth	r2, r3
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800199c:	b29b      	uxth	r3, r3
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d034      	beq.n	8001a0c <HAL_I2C_Mem_Read+0x1d0>
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d130      	bne.n	8001a0c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	9300      	str	r3, [sp, #0]
 80019ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019b0:	2200      	movs	r2, #0
 80019b2:	2180      	movs	r1, #128	; 0x80
 80019b4:	68f8      	ldr	r0, [r7, #12]
 80019b6:	f001 fa9c 	bl	8002ef2 <I2C_WaitOnFlagUntilTimeout>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e04d      	b.n	8001a60 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	2bff      	cmp	r3, #255	; 0xff
 80019cc:	d90e      	bls.n	80019ec <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	22ff      	movs	r2, #255	; 0xff
 80019d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019d8:	b2da      	uxtb	r2, r3
 80019da:	8979      	ldrh	r1, [r7, #10]
 80019dc:	2300      	movs	r3, #0
 80019de:	9300      	str	r3, [sp, #0]
 80019e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019e4:	68f8      	ldr	r0, [r7, #12]
 80019e6:	f001 fba7 	bl	8003138 <I2C_TransferConfig>
 80019ea:	e00f      	b.n	8001a0c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019f0:	b29a      	uxth	r2, r3
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019fa:	b2da      	uxtb	r2, r3
 80019fc:	8979      	ldrh	r1, [r7, #10]
 80019fe:	2300      	movs	r3, #0
 8001a00:	9300      	str	r3, [sp, #0]
 8001a02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a06:	68f8      	ldr	r0, [r7, #12]
 8001a08:	f001 fb96 	bl	8003138 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d19a      	bne.n	800194c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a16:	697a      	ldr	r2, [r7, #20]
 8001a18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a1a:	68f8      	ldr	r0, [r7, #12]
 8001a1c:	f001 fae9 	bl	8002ff2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e01a      	b.n	8001a60 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2220      	movs	r2, #32
 8001a30:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	6859      	ldr	r1, [r3, #4]
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	4b0b      	ldr	r3, [pc, #44]	; (8001a6c <HAL_I2C_Mem_Read+0x230>)
 8001a3e:	400b      	ands	r3, r1
 8001a40:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2220      	movs	r2, #32
 8001a46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	e000      	b.n	8001a60 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001a5e:	2302      	movs	r3, #2
  }
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3718      	adds	r7, #24
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	80002400 	.word	0x80002400
 8001a6c:	fe00e800 	.word	0xfe00e800

08001a70 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b088      	sub	sp, #32
 8001a74:	af02      	add	r7, sp, #8
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	4608      	mov	r0, r1
 8001a7a:	4611      	mov	r1, r2
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	4603      	mov	r3, r0
 8001a80:	817b      	strh	r3, [r7, #10]
 8001a82:	460b      	mov	r3, r1
 8001a84:	813b      	strh	r3, [r7, #8]
 8001a86:	4613      	mov	r3, r2
 8001a88:	80fb      	strh	r3, [r7, #6]
  uint32_t xfermode;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b20      	cmp	r3, #32
 8001a94:	d176      	bne.n	8001b84 <HAL_I2C_Mem_Read_IT+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a96:	6a3b      	ldr	r3, [r7, #32]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d002      	beq.n	8001aa2 <HAL_I2C_Mem_Read_IT+0x32>
 8001a9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d105      	bne.n	8001aae <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001aa8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e06b      	b.n	8001b86 <HAL_I2C_Mem_Read_IT+0x116>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ab8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001abc:	d101      	bne.n	8001ac2 <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 8001abe:	2302      	movs	r3, #2
 8001ac0:	e061      	b.n	8001b86 <HAL_I2C_Mem_Read_IT+0x116>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d101      	bne.n	8001ad0 <HAL_I2C_Mem_Read_IT+0x60>
 8001acc:	2302      	movs	r3, #2
 8001ace:	e05a      	b.n	8001b86 <HAL_I2C_Mem_Read_IT+0x116>
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001ad8:	f7ff f98a 	bl	8000df0 <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2222      	movs	r2, #34	; 0x22
 8001ae2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2240      	movs	r2, #64	; 0x40
 8001aea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2200      	movs	r2, #0
 8001af2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	6a3a      	ldr	r2, [r7, #32]
 8001af8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001afe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	4a23      	ldr	r2, [pc, #140]	; (8001b90 <HAL_I2C_Mem_Read_IT+0x120>)
 8001b04:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	4a22      	ldr	r2, [pc, #136]	; (8001b94 <HAL_I2C_Mem_Read_IT+0x124>)
 8001b0a:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	2bff      	cmp	r3, #255	; 0xff
 8001b14:	d906      	bls.n	8001b24 <HAL_I2C_Mem_Read_IT+0xb4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	22ff      	movs	r2, #255	; 0xff
 8001b1a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8001b1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b20:	617b      	str	r3, [r7, #20]
 8001b22:	e007      	b.n	8001b34 <HAL_I2C_Mem_Read_IT+0xc4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b28:	b29a      	uxth	r2, r3
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001b2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b32:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8001b34:	88f8      	ldrh	r0, [r7, #6]
 8001b36:	893a      	ldrh	r2, [r7, #8]
 8001b38:	8979      	ldrh	r1, [r7, #10]
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	9301      	str	r3, [sp, #4]
 8001b3e:	2319      	movs	r3, #25
 8001b40:	9300      	str	r3, [sp, #0]
 8001b42:	4603      	mov	r3, r0
 8001b44:	68f8      	ldr	r0, [r7, #12]
 8001b46:	f000 fcfd 	bl	8002544 <I2C_RequestMemoryRead>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d005      	beq.n	8001b5c <HAL_I2C_Mem_Read_IT+0xec>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2200      	movs	r2, #0
 8001b54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e014      	b.n	8001b86 <HAL_I2C_Mem_Read_IT+0x116>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b60:	b2da      	uxtb	r2, r3
 8001b62:	8979      	ldrh	r1, [r7, #10]
 8001b64:	4b0c      	ldr	r3, [pc, #48]	; (8001b98 <HAL_I2C_Mem_Read_IT+0x128>)
 8001b66:	9300      	str	r3, [sp, #0]
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	68f8      	ldr	r0, [r7, #12]
 8001b6c:	f001 fae4 	bl	8003138 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001b78:	2102      	movs	r1, #2
 8001b7a:	68f8      	ldr	r0, [r7, #12]
 8001b7c:	f001 fb0a 	bl	8003194 <I2C_Enable_IRQ>

    return HAL_OK;
 8001b80:	2300      	movs	r3, #0
 8001b82:	e000      	b.n	8001b86 <HAL_I2C_Mem_Read_IT+0x116>
  }
  else
  {
    return HAL_BUSY;
 8001b84:	2302      	movs	r3, #2
  }
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3718      	adds	r7, #24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	ffff0000 	.word	0xffff0000
 8001b94:	08001ca1 	.word	0x08001ca1
 8001b98:	80002400 	.word	0x80002400

08001b9c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d005      	beq.n	8001bc8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bc0:	68ba      	ldr	r2, [r7, #8]
 8001bc2:	68f9      	ldr	r1, [r7, #12]
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	4798      	blx	r3
  }
}
 8001bc8:	bf00      	nop
 8001bca:	3710      	adds	r7, #16
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001bec:	bf00      	nop
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001c00:	bf00      	nop
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	460b      	mov	r3, r1
 8001c2a:	70fb      	strb	r3, [r7, #3]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001c44:	bf00      	nop
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001c6c:	bf00      	nop
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <I2C_Master_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b088      	sub	sp, #32
 8001ca4:	af02      	add	r7, sp, #8
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d101      	bne.n	8001cbe <I2C_Master_ISR_IT+0x1e>
 8001cba:	2302      	movs	r3, #2
 8001cbc:	e114      	b.n	8001ee8 <I2C_Master_ISR_IT+0x248>
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	091b      	lsrs	r3, r3, #4
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d013      	beq.n	8001cfa <I2C_Master_ISR_IT+0x5a>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	091b      	lsrs	r3, r3, #4
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d00d      	beq.n	8001cfa <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2210      	movs	r2, #16
 8001ce4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cea:	f043 0204 	orr.w	r2, r3, #4
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001cf2:	68f8      	ldr	r0, [r7, #12]
 8001cf4:	f001 f8bb 	bl	8002e6e <I2C_Flush_TXDR>
 8001cf8:	e0e1      	b.n	8001ebe <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	089b      	lsrs	r3, r3, #2
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d023      	beq.n	8001d4e <I2C_Master_ISR_IT+0xae>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	089b      	lsrs	r3, r3, #2
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d01d      	beq.n	8001d4e <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	f023 0304 	bic.w	r3, r3, #4
 8001d18:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d24:	b2d2      	uxtb	r2, r2
 8001d26:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2c:	1c5a      	adds	r2, r3, #1
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d36:	3b01      	subs	r3, #1
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	3b01      	subs	r3, #1
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d4c:	e0b7      	b.n	8001ebe <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	085b      	lsrs	r3, r3, #1
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d01e      	beq.n	8001d98 <I2C_Master_ISR_IT+0xf8>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	085b      	lsrs	r3, r3, #1
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d018      	beq.n	8001d98 <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6a:	781a      	ldrb	r2, [r3, #0]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d76:	1c5a      	adds	r2, r3, #1
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d80:	3b01      	subs	r3, #1
 8001d82:	b29a      	uxth	r2, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d96:	e092      	b.n	8001ebe <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	09db      	lsrs	r3, r3, #7
 8001d9c:	f003 0301 	and.w	r3, r3, #1
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d05d      	beq.n	8001e60 <I2C_Master_ISR_IT+0x1c0>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	099b      	lsrs	r3, r3, #6
 8001da8:	f003 0301 	and.w	r3, r3, #1
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d057      	beq.n	8001e60 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d040      	beq.n	8001e3c <I2C_Master_ISR_IT+0x19c>
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d13c      	bne.n	8001e3c <I2C_Master_ISR_IT+0x19c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001dce:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	2bff      	cmp	r3, #255	; 0xff
 8001dd8:	d90e      	bls.n	8001df8 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	22ff      	movs	r2, #255	; 0xff
 8001dde:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001de4:	b2da      	uxtb	r2, r3
 8001de6:	8a79      	ldrh	r1, [r7, #18]
 8001de8:	2300      	movs	r3, #0
 8001dea:	9300      	str	r3, [sp, #0]
 8001dec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001df0:	68f8      	ldr	r0, [r7, #12]
 8001df2:	f001 f9a1 	bl	8003138 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001df6:	e032      	b.n	8001e5e <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dfc:	b29a      	uxth	r2, r3
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e06:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001e0a:	d00b      	beq.n	8001e24 <I2C_Master_ISR_IT+0x184>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e16:	8a79      	ldrh	r1, [r7, #18]
 8001e18:	2000      	movs	r0, #0
 8001e1a:	9000      	str	r0, [sp, #0]
 8001e1c:	68f8      	ldr	r0, [r7, #12]
 8001e1e:	f001 f98b 	bl	8003138 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e22:	e01c      	b.n	8001e5e <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e28:	b2da      	uxtb	r2, r3
 8001e2a:	8a79      	ldrh	r1, [r7, #18]
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	9300      	str	r3, [sp, #0]
 8001e30:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e34:	68f8      	ldr	r0, [r7, #12]
 8001e36:	f001 f97f 	bl	8003138 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e3a:	e010      	b.n	8001e5e <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e4a:	d003      	beq.n	8001e54 <I2C_Master_ISR_IT+0x1b4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8001e4c:	68f8      	ldr	r0, [r7, #12]
 8001e4e:	f000 fc51 	bl	80026f4 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e52:	e034      	b.n	8001ebe <I2C_Master_ISR_IT+0x21e>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001e54:	2140      	movs	r1, #64	; 0x40
 8001e56:	68f8      	ldr	r0, [r7, #12]
 8001e58:	f000 ff12 	bl	8002c80 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e5c:	e02f      	b.n	8001ebe <I2C_Master_ISR_IT+0x21e>
 8001e5e:	e02e      	b.n	8001ebe <I2C_Master_ISR_IT+0x21e>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	099b      	lsrs	r3, r3, #6
 8001e64:	f003 0301 	and.w	r3, r3, #1
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d028      	beq.n	8001ebe <I2C_Master_ISR_IT+0x21e>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	099b      	lsrs	r3, r3, #6
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d022      	beq.n	8001ebe <I2C_Master_ISR_IT+0x21e>
  {
    if (hi2c->XferCount == 0U)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d119      	bne.n	8001eb6 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e90:	d015      	beq.n	8001ebe <I2C_Master_ISR_IT+0x21e>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e96:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001e9a:	d108      	bne.n	8001eae <I2C_Master_ISR_IT+0x20e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	685a      	ldr	r2, [r3, #4]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001eaa:	605a      	str	r2, [r3, #4]
 8001eac:	e007      	b.n	8001ebe <I2C_Master_ISR_IT+0x21e>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8001eae:	68f8      	ldr	r0, [r7, #12]
 8001eb0:	f000 fc20 	bl	80026f4 <I2C_ITMasterSeqCplt>
 8001eb4:	e003      	b.n	8001ebe <I2C_Master_ISR_IT+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001eb6:	2140      	movs	r1, #64	; 0x40
 8001eb8:	68f8      	ldr	r0, [r7, #12]
 8001eba:	f000 fee1 	bl	8002c80 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	095b      	lsrs	r3, r3, #5
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d009      	beq.n	8001ede <I2C_Master_ISR_IT+0x23e>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	095b      	lsrs	r3, r3, #5
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d003      	beq.n	8001ede <I2C_Master_ISR_IT+0x23e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8001ed6:	6979      	ldr	r1, [r7, #20]
 8001ed8:	68f8      	ldr	r0, [r7, #12]
 8001eda:	f000 fca7 	bl	800282c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3718      	adds	r7, #24
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f00:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d101      	bne.n	8001f14 <I2C_Slave_ISR_IT+0x24>
 8001f10:	2302      	movs	r3, #2
 8001f12:	e0ec      	b.n	80020ee <I2C_Slave_ISR_IT+0x1fe>
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	095b      	lsrs	r3, r3, #5
 8001f20:	f003 0301 	and.w	r3, r3, #1
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d009      	beq.n	8001f3c <I2C_Slave_ISR_IT+0x4c>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	095b      	lsrs	r3, r3, #5
 8001f2c:	f003 0301 	and.w	r3, r3, #1
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d003      	beq.n	8001f3c <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001f34:	6939      	ldr	r1, [r7, #16]
 8001f36:	68f8      	ldr	r0, [r7, #12]
 8001f38:	f000 fd42 	bl	80029c0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	091b      	lsrs	r3, r3, #4
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d04d      	beq.n	8001fe4 <I2C_Slave_ISR_IT+0xf4>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	091b      	lsrs	r3, r3, #4
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d047      	beq.n	8001fe4 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d128      	bne.n	8001fb0 <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b28      	cmp	r3, #40	; 0x28
 8001f68:	d108      	bne.n	8001f7c <I2C_Slave_ISR_IT+0x8c>
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f70:	d104      	bne.n	8001f7c <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001f72:	6939      	ldr	r1, [r7, #16]
 8001f74:	68f8      	ldr	r0, [r7, #12]
 8001f76:	f000 fe2d 	bl	8002bd4 <I2C_ITListenCplt>
 8001f7a:	e032      	b.n	8001fe2 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	2b29      	cmp	r3, #41	; 0x29
 8001f86:	d10e      	bne.n	8001fa6 <I2C_Slave_ISR_IT+0xb6>
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001f8e:	d00a      	beq.n	8001fa6 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2210      	movs	r2, #16
 8001f96:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001f98:	68f8      	ldr	r0, [r7, #12]
 8001f9a:	f000 ff68 	bl	8002e6e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001f9e:	68f8      	ldr	r0, [r7, #12]
 8001fa0:	f000 fbe5 	bl	800276e <I2C_ITSlaveSeqCplt>
 8001fa4:	e01d      	b.n	8001fe2 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2210      	movs	r2, #16
 8001fac:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001fae:	e096      	b.n	80020de <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2210      	movs	r2, #16
 8001fb6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fbc:	f043 0204 	orr.w	r2, r3, #4
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d004      	beq.n	8001fd4 <I2C_Slave_ISR_IT+0xe4>
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fd0:	f040 8085 	bne.w	80020de <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd8:	4619      	mov	r1, r3
 8001fda:	68f8      	ldr	r0, [r7, #12]
 8001fdc:	f000 fe50 	bl	8002c80 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001fe0:	e07d      	b.n	80020de <I2C_Slave_ISR_IT+0x1ee>
 8001fe2:	e07c      	b.n	80020de <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	089b      	lsrs	r3, r3, #2
 8001fe8:	f003 0301 	and.w	r3, r3, #1
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d030      	beq.n	8002052 <I2C_Slave_ISR_IT+0x162>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	089b      	lsrs	r3, r3, #2
 8001ff4:	f003 0301 	and.w	r3, r3, #1
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d02a      	beq.n	8002052 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002000:	b29b      	uxth	r3, r3
 8002002:	2b00      	cmp	r3, #0
 8002004:	d018      	beq.n	8002038 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002010:	b2d2      	uxtb	r2, r2
 8002012:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002018:	1c5a      	adds	r2, r3, #1
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002022:	3b01      	subs	r3, #1
 8002024:	b29a      	uxth	r2, r3
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800202e:	b29b      	uxth	r3, r3
 8002030:	3b01      	subs	r3, #1
 8002032:	b29a      	uxth	r2, r3
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800203c:	b29b      	uxth	r3, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d14f      	bne.n	80020e2 <I2C_Slave_ISR_IT+0x1f2>
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002048:	d04b      	beq.n	80020e2 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800204a:	68f8      	ldr	r0, [r7, #12]
 800204c:	f000 fb8f 	bl	800276e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002050:	e047      	b.n	80020e2 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	08db      	lsrs	r3, r3, #3
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	2b00      	cmp	r3, #0
 800205c:	d00a      	beq.n	8002074 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	08db      	lsrs	r3, r3, #3
 8002062:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002066:	2b00      	cmp	r3, #0
 8002068:	d004      	beq.n	8002074 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800206a:	6939      	ldr	r1, [r7, #16]
 800206c:	68f8      	ldr	r0, [r7, #12]
 800206e:	f000 fabd 	bl	80025ec <I2C_ITAddrCplt>
 8002072:	e037      	b.n	80020e4 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	085b      	lsrs	r3, r3, #1
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	2b00      	cmp	r3, #0
 800207e:	d031      	beq.n	80020e4 <I2C_Slave_ISR_IT+0x1f4>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	085b      	lsrs	r3, r3, #1
 8002084:	f003 0301 	and.w	r3, r3, #1
 8002088:	2b00      	cmp	r3, #0
 800208a:	d02b      	beq.n	80020e4 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002090:	b29b      	uxth	r3, r3
 8002092:	2b00      	cmp	r3, #0
 8002094:	d018      	beq.n	80020c8 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209a:	781a      	ldrb	r2, [r3, #0]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a6:	1c5a      	adds	r2, r3, #1
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	3b01      	subs	r3, #1
 80020b4:	b29a      	uxth	r2, r3
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020be:	3b01      	subs	r3, #1
 80020c0:	b29a      	uxth	r2, r3
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	851a      	strh	r2, [r3, #40]	; 0x28
 80020c6:	e00d      	b.n	80020e4 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020ce:	d002      	beq.n	80020d6 <I2C_Slave_ISR_IT+0x1e6>
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d106      	bne.n	80020e4 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80020d6:	68f8      	ldr	r0, [r7, #12]
 80020d8:	f000 fb49 	bl	800276e <I2C_ITSlaveSeqCplt>
 80020dc:	e002      	b.n	80020e4 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 80020de:	bf00      	nop
 80020e0:	e000      	b.n	80020e4 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 80020e2:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2200      	movs	r2, #0
 80020e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3718      	adds	r7, #24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b088      	sub	sp, #32
 80020fa:	af02      	add	r7, sp, #8
 80020fc:	60f8      	str	r0, [r7, #12]
 80020fe:	60b9      	str	r1, [r7, #8]
 8002100:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002108:	2b01      	cmp	r3, #1
 800210a:	d101      	bne.n	8002110 <I2C_Master_ISR_DMA+0x1a>
 800210c:	2302      	movs	r3, #2
 800210e:	e0e1      	b.n	80022d4 <I2C_Master_ISR_DMA+0x1de>
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	091b      	lsrs	r3, r3, #4
 800211c:	f003 0301 	and.w	r3, r3, #1
 8002120:	2b00      	cmp	r3, #0
 8002122:	d017      	beq.n	8002154 <I2C_Master_ISR_DMA+0x5e>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	091b      	lsrs	r3, r3, #4
 8002128:	f003 0301 	and.w	r3, r3, #1
 800212c:	2b00      	cmp	r3, #0
 800212e:	d011      	beq.n	8002154 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2210      	movs	r2, #16
 8002136:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213c:	f043 0204 	orr.w	r2, r3, #4
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002144:	2120      	movs	r1, #32
 8002146:	68f8      	ldr	r0, [r7, #12]
 8002148:	f001 f824 	bl	8003194 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800214c:	68f8      	ldr	r0, [r7, #12]
 800214e:	f000 fe8e 	bl	8002e6e <I2C_Flush_TXDR>
 8002152:	e0ba      	b.n	80022ca <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	09db      	lsrs	r3, r3, #7
 8002158:	f003 0301 	and.w	r3, r3, #1
 800215c:	2b00      	cmp	r3, #0
 800215e:	d072      	beq.n	8002246 <I2C_Master_ISR_DMA+0x150>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	099b      	lsrs	r3, r3, #6
 8002164:	f003 0301 	and.w	r3, r3, #1
 8002168:	2b00      	cmp	r3, #0
 800216a:	d06c      	beq.n	8002246 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800217a:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002180:	b29b      	uxth	r3, r3
 8002182:	2b00      	cmp	r3, #0
 8002184:	d04e      	beq.n	8002224 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	b29b      	uxth	r3, r3
 800218e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002192:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002198:	b29b      	uxth	r3, r3
 800219a:	2bff      	cmp	r3, #255	; 0xff
 800219c:	d906      	bls.n	80021ac <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	22ff      	movs	r2, #255	; 0xff
 80021a2:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 80021a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021a8:	617b      	str	r3, [r7, #20]
 80021aa:	e010      	b.n	80021ce <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021b0:	b29a      	uxth	r2, r3
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ba:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80021be:	d003      	beq.n	80021c8 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c4:	617b      	str	r3, [r7, #20]
 80021c6:	e002      	b.n	80021ce <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80021c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021cc:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021d2:	b2da      	uxtb	r2, r3
 80021d4:	8a79      	ldrh	r1, [r7, #18]
 80021d6:	2300      	movs	r3, #0
 80021d8:	9300      	str	r3, [sp, #0]
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	68f8      	ldr	r0, [r7, #12]
 80021de:	f000 ffab 	bl	8003138 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021e6:	b29a      	uxth	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	b29a      	uxth	r2, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	2b22      	cmp	r3, #34	; 0x22
 80021fe:	d108      	bne.n	8002212 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800220e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002210:	e05b      	b.n	80022ca <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002220:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002222:	e052      	b.n	80022ca <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800222e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002232:	d003      	beq.n	800223c <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002234:	68f8      	ldr	r0, [r7, #12]
 8002236:	f000 fa5d 	bl	80026f4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800223a:	e046      	b.n	80022ca <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800223c:	2140      	movs	r1, #64	; 0x40
 800223e:	68f8      	ldr	r0, [r7, #12]
 8002240:	f000 fd1e 	bl	8002c80 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002244:	e041      	b.n	80022ca <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	099b      	lsrs	r3, r3, #6
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	2b00      	cmp	r3, #0
 8002250:	d029      	beq.n	80022a6 <I2C_Master_ISR_DMA+0x1b0>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	099b      	lsrs	r3, r3, #6
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	2b00      	cmp	r3, #0
 800225c:	d023      	beq.n	80022a6 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002262:	b29b      	uxth	r3, r3
 8002264:	2b00      	cmp	r3, #0
 8002266:	d119      	bne.n	800229c <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002272:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002276:	d027      	beq.n	80022c8 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002280:	d108      	bne.n	8002294 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002290:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8002292:	e019      	b.n	80022c8 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002294:	68f8      	ldr	r0, [r7, #12]
 8002296:	f000 fa2d 	bl	80026f4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800229a:	e015      	b.n	80022c8 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800229c:	2140      	movs	r1, #64	; 0x40
 800229e:	68f8      	ldr	r0, [r7, #12]
 80022a0:	f000 fcee 	bl	8002c80 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80022a4:	e010      	b.n	80022c8 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	095b      	lsrs	r3, r3, #5
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00b      	beq.n	80022ca <I2C_Master_ISR_DMA+0x1d4>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	095b      	lsrs	r3, r3, #5
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d005      	beq.n	80022ca <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80022be:	68b9      	ldr	r1, [r7, #8]
 80022c0:	68f8      	ldr	r0, [r7, #12]
 80022c2:	f000 fab3 	bl	800282c <I2C_ITMasterCplt>
 80022c6:	e000      	b.n	80022ca <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 80022c8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3718      	adds	r7, #24
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b088      	sub	sp, #32
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ec:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80022ee:	2300      	movs	r3, #0
 80022f0:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d101      	bne.n	8002300 <I2C_Slave_ISR_DMA+0x24>
 80022fc:	2302      	movs	r3, #2
 80022fe:	e0c9      	b.n	8002494 <I2C_Slave_ISR_DMA+0x1b8>
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	095b      	lsrs	r3, r3, #5
 800230c:	f003 0301 	and.w	r3, r3, #1
 8002310:	2b00      	cmp	r3, #0
 8002312:	d009      	beq.n	8002328 <I2C_Slave_ISR_DMA+0x4c>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	095b      	lsrs	r3, r3, #5
 8002318:	f003 0301 	and.w	r3, r3, #1
 800231c:	2b00      	cmp	r3, #0
 800231e:	d003      	beq.n	8002328 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002320:	68b9      	ldr	r1, [r7, #8]
 8002322:	68f8      	ldr	r0, [r7, #12]
 8002324:	f000 fb4c 	bl	80029c0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	091b      	lsrs	r3, r3, #4
 800232c:	f003 0301 	and.w	r3, r3, #1
 8002330:	2b00      	cmp	r3, #0
 8002332:	f000 809a 	beq.w	800246a <I2C_Slave_ISR_DMA+0x18e>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	091b      	lsrs	r3, r3, #4
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	2b00      	cmp	r3, #0
 8002340:	f000 8093 	beq.w	800246a <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	0b9b      	lsrs	r3, r3, #14
 8002348:	f003 0301 	and.w	r3, r3, #1
 800234c:	2b00      	cmp	r3, #0
 800234e:	d105      	bne.n	800235c <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	0bdb      	lsrs	r3, r3, #15
 8002354:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002358:	2b00      	cmp	r3, #0
 800235a:	d07f      	beq.n	800245c <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002360:	2b00      	cmp	r3, #0
 8002362:	d00d      	beq.n	8002380 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	0bdb      	lsrs	r3, r3, #15
 8002368:	f003 0301 	and.w	r3, r3, #1
 800236c:	2b00      	cmp	r3, #0
 800236e:	d007      	beq.n	8002380 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d101      	bne.n	8002380 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 800237c:	2301      	movs	r3, #1
 800237e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002384:	2b00      	cmp	r3, #0
 8002386:	d00d      	beq.n	80023a4 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	0b9b      	lsrs	r3, r3, #14
 800238c:	f003 0301 	and.w	r3, r3, #1
 8002390:	2b00      	cmp	r3, #0
 8002392:	d007      	beq.n	80023a4 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d101      	bne.n	80023a4 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 80023a0:	2301      	movs	r3, #1
 80023a2:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d128      	bne.n	80023fc <I2C_Slave_ISR_DMA+0x120>
      {
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2b28      	cmp	r3, #40	; 0x28
 80023b4:	d108      	bne.n	80023c8 <I2C_Slave_ISR_DMA+0xec>
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80023bc:	d104      	bne.n	80023c8 <I2C_Slave_ISR_DMA+0xec>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80023be:	68b9      	ldr	r1, [r7, #8]
 80023c0:	68f8      	ldr	r0, [r7, #12]
 80023c2:	f000 fc07 	bl	8002bd4 <I2C_ITListenCplt>
 80023c6:	e048      	b.n	800245a <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	2b29      	cmp	r3, #41	; 0x29
 80023d2:	d10e      	bne.n	80023f2 <I2C_Slave_ISR_DMA+0x116>
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80023da:	d00a      	beq.n	80023f2 <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2210      	movs	r2, #16
 80023e2:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80023e4:	68f8      	ldr	r0, [r7, #12]
 80023e6:	f000 fd42 	bl	8002e6e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80023ea:	68f8      	ldr	r0, [r7, #12]
 80023ec:	f000 f9bf 	bl	800276e <I2C_ITSlaveSeqCplt>
 80023f0:	e033      	b.n	800245a <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2210      	movs	r2, #16
 80023f8:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80023fa:	e034      	b.n	8002466 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2210      	movs	r2, #16
 8002402:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002408:	f043 0204 	orr.w	r2, r3, #4
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002416:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d003      	beq.n	8002426 <I2C_Slave_ISR_DMA+0x14a>
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002424:	d11f      	bne.n	8002466 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002426:	7dfb      	ldrb	r3, [r7, #23]
 8002428:	2b21      	cmp	r3, #33	; 0x21
 800242a:	d002      	beq.n	8002432 <I2C_Slave_ISR_DMA+0x156>
 800242c:	7dfb      	ldrb	r3, [r7, #23]
 800242e:	2b29      	cmp	r3, #41	; 0x29
 8002430:	d103      	bne.n	800243a <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2221      	movs	r2, #33	; 0x21
 8002436:	631a      	str	r2, [r3, #48]	; 0x30
 8002438:	e008      	b.n	800244c <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800243a:	7dfb      	ldrb	r3, [r7, #23]
 800243c:	2b22      	cmp	r3, #34	; 0x22
 800243e:	d002      	beq.n	8002446 <I2C_Slave_ISR_DMA+0x16a>
 8002440:	7dfb      	ldrb	r3, [r7, #23]
 8002442:	2b2a      	cmp	r3, #42	; 0x2a
 8002444:	d102      	bne.n	800244c <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2222      	movs	r2, #34	; 0x22
 800244a:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002450:	4619      	mov	r1, r3
 8002452:	68f8      	ldr	r0, [r7, #12]
 8002454:	f000 fc14 	bl	8002c80 <I2C_ITError>
      if (treatdmanack == 1U)
 8002458:	e005      	b.n	8002466 <I2C_Slave_ISR_DMA+0x18a>
 800245a:	e004      	b.n	8002466 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2210      	movs	r2, #16
 8002462:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002464:	e011      	b.n	800248a <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8002466:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002468:	e00f      	b.n	800248a <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	08db      	lsrs	r3, r3, #3
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	2b00      	cmp	r3, #0
 8002474:	d009      	beq.n	800248a <I2C_Slave_ISR_DMA+0x1ae>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	08db      	lsrs	r3, r3, #3
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b00      	cmp	r3, #0
 8002480:	d003      	beq.n	800248a <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8002482:	68b9      	ldr	r1, [r7, #8]
 8002484:	68f8      	ldr	r0, [r7, #12]
 8002486:	f000 f8b1 	bl	80025ec <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002492:	2300      	movs	r3, #0
}
 8002494:	4618      	mov	r0, r3
 8002496:	3720      	adds	r7, #32
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af02      	add	r7, sp, #8
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	4608      	mov	r0, r1
 80024a6:	4611      	mov	r1, r2
 80024a8:	461a      	mov	r2, r3
 80024aa:	4603      	mov	r3, r0
 80024ac:	817b      	strh	r3, [r7, #10]
 80024ae:	460b      	mov	r3, r1
 80024b0:	813b      	strh	r3, [r7, #8]
 80024b2:	4613      	mov	r3, r2
 80024b4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80024b6:	88fb      	ldrh	r3, [r7, #6]
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	8979      	ldrh	r1, [r7, #10]
 80024bc:	4b20      	ldr	r3, [pc, #128]	; (8002540 <I2C_RequestMemoryWrite+0xa4>)
 80024be:	9300      	str	r3, [sp, #0]
 80024c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024c4:	68f8      	ldr	r0, [r7, #12]
 80024c6:	f000 fe37 	bl	8003138 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024ca:	69fa      	ldr	r2, [r7, #28]
 80024cc:	69b9      	ldr	r1, [r7, #24]
 80024ce:	68f8      	ldr	r0, [r7, #12]
 80024d0:	f000 fd4f 	bl	8002f72 <I2C_WaitOnTXISFlagUntilTimeout>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e02c      	b.n	8002538 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80024de:	88fb      	ldrh	r3, [r7, #6]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d105      	bne.n	80024f0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80024e4:	893b      	ldrh	r3, [r7, #8]
 80024e6:	b2da      	uxtb	r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	629a      	str	r2, [r3, #40]	; 0x28
 80024ee:	e015      	b.n	800251c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80024f0:	893b      	ldrh	r3, [r7, #8]
 80024f2:	0a1b      	lsrs	r3, r3, #8
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	b2da      	uxtb	r2, r3
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024fe:	69fa      	ldr	r2, [r7, #28]
 8002500:	69b9      	ldr	r1, [r7, #24]
 8002502:	68f8      	ldr	r0, [r7, #12]
 8002504:	f000 fd35 	bl	8002f72 <I2C_WaitOnTXISFlagUntilTimeout>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e012      	b.n	8002538 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002512:	893b      	ldrh	r3, [r7, #8]
 8002514:	b2da      	uxtb	r2, r3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	9300      	str	r3, [sp, #0]
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	2200      	movs	r2, #0
 8002524:	2180      	movs	r1, #128	; 0x80
 8002526:	68f8      	ldr	r0, [r7, #12]
 8002528:	f000 fce3 	bl	8002ef2 <I2C_WaitOnFlagUntilTimeout>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e000      	b.n	8002538 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002536:	2300      	movs	r3, #0
}
 8002538:	4618      	mov	r0, r3
 800253a:	3710      	adds	r7, #16
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	80002000 	.word	0x80002000

08002544 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b086      	sub	sp, #24
 8002548:	af02      	add	r7, sp, #8
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	4608      	mov	r0, r1
 800254e:	4611      	mov	r1, r2
 8002550:	461a      	mov	r2, r3
 8002552:	4603      	mov	r3, r0
 8002554:	817b      	strh	r3, [r7, #10]
 8002556:	460b      	mov	r3, r1
 8002558:	813b      	strh	r3, [r7, #8]
 800255a:	4613      	mov	r3, r2
 800255c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800255e:	88fb      	ldrh	r3, [r7, #6]
 8002560:	b2da      	uxtb	r2, r3
 8002562:	8979      	ldrh	r1, [r7, #10]
 8002564:	4b20      	ldr	r3, [pc, #128]	; (80025e8 <I2C_RequestMemoryRead+0xa4>)
 8002566:	9300      	str	r3, [sp, #0]
 8002568:	2300      	movs	r3, #0
 800256a:	68f8      	ldr	r0, [r7, #12]
 800256c:	f000 fde4 	bl	8003138 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002570:	69fa      	ldr	r2, [r7, #28]
 8002572:	69b9      	ldr	r1, [r7, #24]
 8002574:	68f8      	ldr	r0, [r7, #12]
 8002576:	f000 fcfc 	bl	8002f72 <I2C_WaitOnTXISFlagUntilTimeout>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e02c      	b.n	80025de <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002584:	88fb      	ldrh	r3, [r7, #6]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d105      	bne.n	8002596 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800258a:	893b      	ldrh	r3, [r7, #8]
 800258c:	b2da      	uxtb	r2, r3
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	629a      	str	r2, [r3, #40]	; 0x28
 8002594:	e015      	b.n	80025c2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002596:	893b      	ldrh	r3, [r7, #8]
 8002598:	0a1b      	lsrs	r3, r3, #8
 800259a:	b29b      	uxth	r3, r3
 800259c:	b2da      	uxtb	r2, r3
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025a4:	69fa      	ldr	r2, [r7, #28]
 80025a6:	69b9      	ldr	r1, [r7, #24]
 80025a8:	68f8      	ldr	r0, [r7, #12]
 80025aa:	f000 fce2 	bl	8002f72 <I2C_WaitOnTXISFlagUntilTimeout>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e012      	b.n	80025de <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80025b8:	893b      	ldrh	r3, [r7, #8]
 80025ba:	b2da      	uxtb	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	9300      	str	r3, [sp, #0]
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	2200      	movs	r2, #0
 80025ca:	2140      	movs	r1, #64	; 0x40
 80025cc:	68f8      	ldr	r0, [r7, #12]
 80025ce:	f000 fc90 	bl	8002ef2 <I2C_WaitOnFlagUntilTimeout>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e000      	b.n	80025de <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3710      	adds	r7, #16
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	80002000 	.word	0x80002000

080025ec <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002602:	2b28      	cmp	r3, #40	; 0x28
 8002604:	d16a      	bne.n	80026dc <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	0c1b      	lsrs	r3, r3, #16
 800260e:	b2db      	uxtb	r3, r3
 8002610:	f003 0301 	and.w	r3, r3, #1
 8002614:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	0c1b      	lsrs	r3, r3, #16
 800261e:	b29b      	uxth	r3, r3
 8002620:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002624:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	b29b      	uxth	r3, r3
 800262e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002632:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	b29b      	uxth	r3, r3
 800263c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002640:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	2b02      	cmp	r3, #2
 8002648:	d138      	bne.n	80026bc <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800264a:	897b      	ldrh	r3, [r7, #10]
 800264c:	09db      	lsrs	r3, r3, #7
 800264e:	b29a      	uxth	r2, r3
 8002650:	89bb      	ldrh	r3, [r7, #12]
 8002652:	4053      	eors	r3, r2
 8002654:	b29b      	uxth	r3, r3
 8002656:	f003 0306 	and.w	r3, r3, #6
 800265a:	2b00      	cmp	r3, #0
 800265c:	d11c      	bne.n	8002698 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800265e:	897b      	ldrh	r3, [r7, #10]
 8002660:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002666:	1c5a      	adds	r2, r3, #1
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002670:	2b02      	cmp	r3, #2
 8002672:	d13b      	bne.n	80026ec <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2208      	movs	r2, #8
 8002680:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800268a:	89ba      	ldrh	r2, [r7, #12]
 800268c:	7bfb      	ldrb	r3, [r7, #15]
 800268e:	4619      	mov	r1, r3
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f7ff fac5 	bl	8001c20 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002696:	e029      	b.n	80026ec <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002698:	893b      	ldrh	r3, [r7, #8]
 800269a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800269c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f000 fddb 	bl	800325c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80026ae:	89ba      	ldrh	r2, [r7, #12]
 80026b0:	7bfb      	ldrb	r3, [r7, #15]
 80026b2:	4619      	mov	r1, r3
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f7ff fab3 	bl	8001c20 <HAL_I2C_AddrCallback>
}
 80026ba:	e017      	b.n	80026ec <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80026bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 fdcb 	bl	800325c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80026ce:	89ba      	ldrh	r2, [r7, #12]
 80026d0:	7bfb      	ldrb	r3, [r7, #15]
 80026d2:	4619      	mov	r1, r3
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f7ff faa3 	bl	8001c20 <HAL_I2C_AddrCallback>
}
 80026da:	e007      	b.n	80026ec <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2208      	movs	r2, #8
 80026e2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80026ec:	bf00      	nop
 80026ee:	3710      	adds	r7, #16
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800270a:	b2db      	uxtb	r3, r3
 800270c:	2b21      	cmp	r3, #33	; 0x21
 800270e:	d115      	bne.n	800273c <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2220      	movs	r2, #32
 8002714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2211      	movs	r2, #17
 800271c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002724:	2101      	movs	r1, #1
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 fd98 	bl	800325c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f7ff fa4b 	bl	8001bd0 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800273a:	e014      	b.n	8002766 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2220      	movs	r2, #32
 8002740:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2212      	movs	r2, #18
 8002748:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002750:	2102      	movs	r1, #2
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 fd82 	bl	800325c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f7ff fa3f 	bl	8001be4 <HAL_I2C_MasterRxCpltCallback>
}
 8002766:	bf00      	nop
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	b084      	sub	sp, #16
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	0b9b      	lsrs	r3, r3, #14
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	2b00      	cmp	r3, #0
 8002790:	d008      	beq.n	80027a4 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80027a0:	601a      	str	r2, [r3, #0]
 80027a2:	e00d      	b.n	80027c0 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	0bdb      	lsrs	r3, r3, #15
 80027a8:	f003 0301 	and.w	r3, r3, #1
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d007      	beq.n	80027c0 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027be:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	2b29      	cmp	r3, #41	; 0x29
 80027ca:	d112      	bne.n	80027f2 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2228      	movs	r2, #40	; 0x28
 80027d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2221      	movs	r2, #33	; 0x21
 80027d8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80027da:	2101      	movs	r1, #1
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f000 fd3d 	bl	800325c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f7ff fa04 	bl	8001bf8 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80027f0:	e017      	b.n	8002822 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b2a      	cmp	r3, #42	; 0x2a
 80027fc:	d111      	bne.n	8002822 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2228      	movs	r2, #40	; 0x28
 8002802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2222      	movs	r2, #34	; 0x22
 800280a:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800280c:	2102      	movs	r1, #2
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 fd24 	bl	800325c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f7ff f9f5 	bl	8001c0c <HAL_I2C_SlaveRxCpltCallback>
}
 8002822:	bf00      	nop
 8002824:	3710      	adds	r7, #16
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
	...

0800282c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b086      	sub	sp, #24
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2220      	movs	r2, #32
 8002840:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b21      	cmp	r3, #33	; 0x21
 800284c:	d107      	bne.n	800285e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800284e:	2101      	movs	r1, #1
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f000 fd03 	bl	800325c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2211      	movs	r2, #17
 800285a:	631a      	str	r2, [r3, #48]	; 0x30
 800285c:	e00c      	b.n	8002878 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b22      	cmp	r3, #34	; 0x22
 8002868:	d106      	bne.n	8002878 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800286a:	2102      	movs	r1, #2
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f000 fcf5 	bl	800325c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2212      	movs	r2, #18
 8002876:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	6859      	ldr	r1, [r3, #4]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	4b4d      	ldr	r3, [pc, #308]	; (80029b8 <I2C_ITMasterCplt+0x18c>)
 8002884:	400b      	ands	r3, r1
 8002886:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a4a      	ldr	r2, [pc, #296]	; (80029bc <I2C_ITMasterCplt+0x190>)
 8002892:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	091b      	lsrs	r3, r3, #4
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	2b00      	cmp	r3, #0
 800289e:	d009      	beq.n	80028b4 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2210      	movs	r2, #16
 80028a6:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ac:	f043 0204 	orr.w	r2, r3, #4
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	2b60      	cmp	r3, #96	; 0x60
 80028be:	d10b      	bne.n	80028d8 <I2C_ITMasterCplt+0xac>
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	089b      	lsrs	r3, r3, #2
 80028c4:	f003 0301 	and.w	r3, r3, #1
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d005      	beq.n	80028d8 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80028d6:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f000 fac8 	bl	8002e6e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e2:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	2b60      	cmp	r3, #96	; 0x60
 80028ee:	d002      	beq.n	80028f6 <I2C_ITMasterCplt+0xca>
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d006      	beq.n	8002904 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fa:	4619      	mov	r1, r3
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f000 f9bf 	bl	8002c80 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002902:	e054      	b.n	80029ae <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800290a:	b2db      	uxtb	r3, r3
 800290c:	2b21      	cmp	r3, #33	; 0x21
 800290e:	d124      	bne.n	800295a <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2220      	movs	r2, #32
 8002914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002924:	b2db      	uxtb	r3, r3
 8002926:	2b40      	cmp	r3, #64	; 0x40
 8002928:	d10b      	bne.n	8002942 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f7ff f988 	bl	8001c50 <HAL_I2C_MemTxCpltCallback>
}
 8002940:	e035      	b.n	80029ae <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f7ff f93c 	bl	8001bd0 <HAL_I2C_MasterTxCpltCallback>
}
 8002958:	e029      	b.n	80029ae <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b22      	cmp	r3, #34	; 0x22
 8002964:	d123      	bne.n	80029ae <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2220      	movs	r2, #32
 800296a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800297a:	b2db      	uxtb	r3, r3
 800297c:	2b40      	cmp	r3, #64	; 0x40
 800297e:	d10b      	bne.n	8002998 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f7ff f967 	bl	8001c64 <HAL_I2C_MemRxCpltCallback>
}
 8002996:	e00a      	b.n	80029ae <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f7ff f91b 	bl	8001be4 <HAL_I2C_MasterRxCpltCallback>
}
 80029ae:	bf00      	nop
 80029b0:	3718      	adds	r7, #24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	fe00e800 	.word	0xfe00e800
 80029bc:	ffff0000 	.word	0xffff0000

080029c0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b086      	sub	sp, #24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029dc:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2220      	movs	r2, #32
 80029e4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80029e6:	7bfb      	ldrb	r3, [r7, #15]
 80029e8:	2b21      	cmp	r3, #33	; 0x21
 80029ea:	d002      	beq.n	80029f2 <I2C_ITSlaveCplt+0x32>
 80029ec:	7bfb      	ldrb	r3, [r7, #15]
 80029ee:	2b29      	cmp	r3, #41	; 0x29
 80029f0:	d108      	bne.n	8002a04 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80029f2:	f248 0101 	movw	r1, #32769	; 0x8001
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 fc30 	bl	800325c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2221      	movs	r2, #33	; 0x21
 8002a00:	631a      	str	r2, [r3, #48]	; 0x30
 8002a02:	e00d      	b.n	8002a20 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002a04:	7bfb      	ldrb	r3, [r7, #15]
 8002a06:	2b22      	cmp	r3, #34	; 0x22
 8002a08:	d002      	beq.n	8002a10 <I2C_ITSlaveCplt+0x50>
 8002a0a:	7bfb      	ldrb	r3, [r7, #15]
 8002a0c:	2b2a      	cmp	r3, #42	; 0x2a
 8002a0e:	d107      	bne.n	8002a20 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002a10:	f248 0102 	movw	r1, #32770	; 0x8002
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f000 fc21 	bl	800325c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2222      	movs	r2, #34	; 0x22
 8002a1e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	685a      	ldr	r2, [r3, #4]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a2e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	6859      	ldr	r1, [r3, #4]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	4b64      	ldr	r3, [pc, #400]	; (8002bcc <I2C_ITSlaveCplt+0x20c>)
 8002a3c:	400b      	ands	r3, r1
 8002a3e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f000 fa14 	bl	8002e6e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	0b9b      	lsrs	r3, r3, #14
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d013      	beq.n	8002a7a <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002a60:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d020      	beq.n	8002aac <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a78:	e018      	b.n	8002aac <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	0bdb      	lsrs	r3, r3, #15
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d012      	beq.n	8002aac <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a94:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d006      	beq.n	8002aac <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	089b      	lsrs	r3, r3, #2
 8002ab0:	f003 0301 	and.w	r3, r3, #1
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d020      	beq.n	8002afa <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	f023 0304 	bic.w	r3, r3, #4
 8002abe:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aca:	b2d2      	uxtb	r2, r2
 8002acc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad2:	1c5a      	adds	r2, r3, #1
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d00c      	beq.n	8002afa <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	3b01      	subs	r3, #1
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d005      	beq.n	8002b10 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b08:	f043 0204 	orr.w	r2, r3, #4
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d010      	beq.n	8002b48 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f000 f8a7 	bl	8002c80 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b28      	cmp	r3, #40	; 0x28
 8002b3c:	d141      	bne.n	8002bc2 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002b3e:	6979      	ldr	r1, [r7, #20]
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f000 f847 	bl	8002bd4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002b46:	e03c      	b.n	8002bc2 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b50:	d014      	beq.n	8002b7c <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f7ff fe0b 	bl	800276e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4a1d      	ldr	r2, [pc, #116]	; (8002bd0 <I2C_ITSlaveCplt+0x210>)
 8002b5c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2220      	movs	r2, #32
 8002b62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f7ff f861 	bl	8001c3c <HAL_I2C_ListenCpltCallback>
}
 8002b7a:	e022      	b.n	8002bc2 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	2b22      	cmp	r3, #34	; 0x22
 8002b86:	d10e      	bne.n	8002ba6 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2220      	movs	r2, #32
 8002b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f7ff f834 	bl	8001c0c <HAL_I2C_SlaveRxCpltCallback>
}
 8002ba4:	e00d      	b.n	8002bc2 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2220      	movs	r2, #32
 8002baa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f7ff f81b 	bl	8001bf8 <HAL_I2C_SlaveTxCpltCallback>
}
 8002bc2:	bf00      	nop
 8002bc4:	3718      	adds	r7, #24
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	fe00e800 	.word	0xfe00e800
 8002bd0:	ffff0000 	.word	0xffff0000

08002bd4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a26      	ldr	r2, [pc, #152]	; (8002c7c <I2C_ITListenCplt+0xa8>)
 8002be2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2220      	movs	r2, #32
 8002bee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	089b      	lsrs	r3, r3, #2
 8002c04:	f003 0301 	and.w	r3, r3, #1
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d022      	beq.n	8002c52 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c16:	b2d2      	uxtb	r2, r2
 8002c18:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1e:	1c5a      	adds	r2, r3, #1
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d012      	beq.n	8002c52 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c30:	3b01      	subs	r3, #1
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	b29a      	uxth	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4a:	f043 0204 	orr.w	r2, r3, #4
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002c52:	f248 0103 	movw	r1, #32771	; 0x8003
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 fb00 	bl	800325c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2210      	movs	r2, #16
 8002c62:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f7fe ffe5 	bl	8001c3c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002c72:	bf00      	nop
 8002c74:	3708      	adds	r7, #8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	ffff0000 	.word	0xffff0000

08002c80 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a5d      	ldr	r2, [pc, #372]	; (8002e14 <I2C_ITError+0x194>)
 8002c9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	431a      	orrs	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002cb2:	7bfb      	ldrb	r3, [r7, #15]
 8002cb4:	2b28      	cmp	r3, #40	; 0x28
 8002cb6:	d005      	beq.n	8002cc4 <I2C_ITError+0x44>
 8002cb8:	7bfb      	ldrb	r3, [r7, #15]
 8002cba:	2b29      	cmp	r3, #41	; 0x29
 8002cbc:	d002      	beq.n	8002cc4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002cbe:	7bfb      	ldrb	r3, [r7, #15]
 8002cc0:	2b2a      	cmp	r3, #42	; 0x2a
 8002cc2:	d10b      	bne.n	8002cdc <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002cc4:	2103      	movs	r1, #3
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 fac8 	bl	800325c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2228      	movs	r2, #40	; 0x28
 8002cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a50      	ldr	r2, [pc, #320]	; (8002e18 <I2C_ITError+0x198>)
 8002cd8:	635a      	str	r2, [r3, #52]	; 0x34
 8002cda:	e011      	b.n	8002d00 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002cdc:	f248 0103 	movw	r1, #32771	; 0x8003
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 fabb 	bl	800325c <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b60      	cmp	r3, #96	; 0x60
 8002cf0:	d003      	beq.n	8002cfa <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2220      	movs	r2, #32
 8002cf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d04:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d039      	beq.n	8002d82 <I2C_ITError+0x102>
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	2b11      	cmp	r3, #17
 8002d12:	d002      	beq.n	8002d1a <I2C_ITError+0x9a>
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	2b21      	cmp	r3, #33	; 0x21
 8002d18:	d133      	bne.n	8002d82 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d28:	d107      	bne.n	8002d3a <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002d38:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7fe fa16 	bl	8001170 <HAL_DMA_GetState>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d017      	beq.n	8002d7a <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d4e:	4a33      	ldr	r2, [pc, #204]	; (8002e1c <I2C_ITError+0x19c>)
 8002d50:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7fe f9c5 	bl	80010ee <HAL_DMA_Abort_IT>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d04d      	beq.n	8002e06 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d74:	4610      	mov	r0, r2
 8002d76:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002d78:	e045      	b.n	8002e06 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 f850 	bl	8002e20 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002d80:	e041      	b.n	8002e06 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d039      	beq.n	8002dfe <I2C_ITError+0x17e>
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	2b12      	cmp	r3, #18
 8002d8e:	d002      	beq.n	8002d96 <I2C_ITError+0x116>
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	2b22      	cmp	r3, #34	; 0x22
 8002d94:	d133      	bne.n	8002dfe <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002da0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002da4:	d107      	bne.n	8002db6 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002db4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7fe f9d8 	bl	8001170 <HAL_DMA_GetState>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d017      	beq.n	8002df6 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dca:	4a14      	ldr	r2, [pc, #80]	; (8002e1c <I2C_ITError+0x19c>)
 8002dcc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7fe f987 	bl	80010ee <HAL_DMA_Abort_IT>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d011      	beq.n	8002e0a <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002df0:	4610      	mov	r0, r2
 8002df2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002df4:	e009      	b.n	8002e0a <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 f812 	bl	8002e20 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002dfc:	e005      	b.n	8002e0a <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 f80e 	bl	8002e20 <I2C_TreatErrorCallback>
  }
}
 8002e04:	e002      	b.n	8002e0c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002e06:	bf00      	nop
 8002e08:	e000      	b.n	8002e0c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002e0a:	bf00      	nop
}
 8002e0c:	bf00      	nop
 8002e0e:	3710      	adds	r7, #16
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	ffff0000 	.word	0xffff0000
 8002e18:	08001ef1 	.word	0x08001ef1
 8002e1c:	08002eb7 	.word	0x08002eb7

08002e20 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	2b60      	cmp	r3, #96	; 0x60
 8002e32:	d10e      	bne.n	8002e52 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2220      	movs	r2, #32
 8002e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f7fe ff1e 	bl	8001c8c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002e50:	e009      	b.n	8002e66 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f7fe ff09 	bl	8001c78 <HAL_I2C_ErrorCallback>
}
 8002e66:	bf00      	nop
 8002e68:	3708      	adds	r7, #8
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	b083      	sub	sp, #12
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d103      	bne.n	8002e8c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d007      	beq.n	8002eaa <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	699a      	ldr	r2, [r3, #24]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f042 0201 	orr.w	r2, r2, #1
 8002ea8:	619a      	str	r2, [r3, #24]
  }
}
 8002eaa:	bf00      	nop
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr

08002eb6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b084      	sub	sp, #16
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d003      	beq.n	8002ed4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d003      	beq.n	8002ee4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8002ee4:	68f8      	ldr	r0, [r7, #12]
 8002ee6:	f7ff ff9b 	bl	8002e20 <I2C_TreatErrorCallback>
}
 8002eea:	bf00      	nop
 8002eec:	3710      	adds	r7, #16
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	b084      	sub	sp, #16
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	60f8      	str	r0, [r7, #12]
 8002efa:	60b9      	str	r1, [r7, #8]
 8002efc:	603b      	str	r3, [r7, #0]
 8002efe:	4613      	mov	r3, r2
 8002f00:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f02:	e022      	b.n	8002f4a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f0a:	d01e      	beq.n	8002f4a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f0c:	f7fd ff70 	bl	8000df0 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	683a      	ldr	r2, [r7, #0]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d302      	bcc.n	8002f22 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d113      	bne.n	8002f4a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f26:	f043 0220 	orr.w	r2, r3, #32
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2220      	movs	r2, #32
 8002f32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e00f      	b.n	8002f6a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	699a      	ldr	r2, [r3, #24]
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	4013      	ands	r3, r2
 8002f54:	68ba      	ldr	r2, [r7, #8]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	bf0c      	ite	eq
 8002f5a:	2301      	moveq	r3, #1
 8002f5c:	2300      	movne	r3, #0
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	461a      	mov	r2, r3
 8002f62:	79fb      	ldrb	r3, [r7, #7]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d0cd      	beq.n	8002f04 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b084      	sub	sp, #16
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	60f8      	str	r0, [r7, #12]
 8002f7a:	60b9      	str	r1, [r7, #8]
 8002f7c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f7e:	e02c      	b.n	8002fda <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	68b9      	ldr	r1, [r7, #8]
 8002f84:	68f8      	ldr	r0, [r7, #12]
 8002f86:	f000 f871 	bl	800306c <I2C_IsAcknowledgeFailed>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d001      	beq.n	8002f94 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e02a      	b.n	8002fea <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f9a:	d01e      	beq.n	8002fda <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f9c:	f7fd ff28 	bl	8000df0 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	68ba      	ldr	r2, [r7, #8]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d302      	bcc.n	8002fb2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d113      	bne.n	8002fda <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb6:	f043 0220 	orr.w	r2, r3, #32
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2220      	movs	r2, #32
 8002fc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e007      	b.n	8002fea <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	f003 0302 	and.w	r3, r3, #2
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d1cb      	bne.n	8002f80 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3710      	adds	r7, #16
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b084      	sub	sp, #16
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	60f8      	str	r0, [r7, #12]
 8002ffa:	60b9      	str	r1, [r7, #8]
 8002ffc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ffe:	e028      	b.n	8003052 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	68b9      	ldr	r1, [r7, #8]
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	f000 f831 	bl	800306c <I2C_IsAcknowledgeFailed>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d001      	beq.n	8003014 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e026      	b.n	8003062 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003014:	f7fd feec 	bl	8000df0 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	68ba      	ldr	r2, [r7, #8]
 8003020:	429a      	cmp	r2, r3
 8003022:	d302      	bcc.n	800302a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d113      	bne.n	8003052 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800302e:	f043 0220 	orr.w	r2, r3, #32
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2220      	movs	r2, #32
 800303a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e007      	b.n	8003062 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	f003 0320 	and.w	r3, r3, #32
 800305c:	2b20      	cmp	r3, #32
 800305e:	d1cf      	bne.n	8003000 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
	...

0800306c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	f003 0310 	and.w	r3, r3, #16
 8003082:	2b10      	cmp	r3, #16
 8003084:	d151      	bne.n	800312a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003086:	e022      	b.n	80030ce <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800308e:	d01e      	beq.n	80030ce <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003090:	f7fd feae 	bl	8000df0 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	68ba      	ldr	r2, [r7, #8]
 800309c:	429a      	cmp	r2, r3
 800309e:	d302      	bcc.n	80030a6 <I2C_IsAcknowledgeFailed+0x3a>
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d113      	bne.n	80030ce <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030aa:	f043 0220 	orr.w	r2, r3, #32
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2220      	movs	r2, #32
 80030b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e02e      	b.n	800312c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	f003 0320 	and.w	r3, r3, #32
 80030d8:	2b20      	cmp	r3, #32
 80030da:	d1d5      	bne.n	8003088 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2210      	movs	r2, #16
 80030e2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2220      	movs	r2, #32
 80030ea:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80030ec:	68f8      	ldr	r0, [r7, #12]
 80030ee:	f7ff febe 	bl	8002e6e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	6859      	ldr	r1, [r3, #4]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	4b0d      	ldr	r3, [pc, #52]	; (8003134 <I2C_IsAcknowledgeFailed+0xc8>)
 80030fe:	400b      	ands	r3, r1
 8003100:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003106:	f043 0204 	orr.w	r2, r3, #4
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2220      	movs	r2, #32
 8003112:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e000      	b.n	800312c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800312a:	2300      	movs	r3, #0
}
 800312c:	4618      	mov	r0, r3
 800312e:	3710      	adds	r7, #16
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	fe00e800 	.word	0xfe00e800

08003138 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003138:	b480      	push	{r7}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	607b      	str	r3, [r7, #4]
 8003142:	460b      	mov	r3, r1
 8003144:	817b      	strh	r3, [r7, #10]
 8003146:	4613      	mov	r3, r2
 8003148:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	685a      	ldr	r2, [r3, #4]
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	0d5b      	lsrs	r3, r3, #21
 8003154:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003158:	4b0d      	ldr	r3, [pc, #52]	; (8003190 <I2C_TransferConfig+0x58>)
 800315a:	430b      	orrs	r3, r1
 800315c:	43db      	mvns	r3, r3
 800315e:	ea02 0103 	and.w	r1, r2, r3
 8003162:	897b      	ldrh	r3, [r7, #10]
 8003164:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003168:	7a7b      	ldrb	r3, [r7, #9]
 800316a:	041b      	lsls	r3, r3, #16
 800316c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003170:	431a      	orrs	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	431a      	orrs	r2, r3
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	431a      	orrs	r2, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	430a      	orrs	r2, r1
 8003180:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003182:	bf00      	nop
 8003184:	3714      	adds	r7, #20
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	03ff63ff 	.word	0x03ff63ff

08003194 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003194:	b480      	push	{r7}
 8003196:	b085      	sub	sp, #20
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	460b      	mov	r3, r1
 800319e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80031a0:	2300      	movs	r3, #0
 80031a2:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031a8:	4a2a      	ldr	r2, [pc, #168]	; (8003254 <I2C_Enable_IRQ+0xc0>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d004      	beq.n	80031b8 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80031b2:	4a29      	ldr	r2, [pc, #164]	; (8003258 <I2C_Enable_IRQ+0xc4>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d11d      	bne.n	80031f4 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80031b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	da03      	bge.n	80031c8 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80031c6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80031c8:	887b      	ldrh	r3, [r7, #2]
 80031ca:	2b10      	cmp	r3, #16
 80031cc:	d103      	bne.n	80031d6 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80031d4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80031d6:	887b      	ldrh	r3, [r7, #2]
 80031d8:	2b20      	cmp	r3, #32
 80031da:	d103      	bne.n	80031e4 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80031e2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80031e4:	887b      	ldrh	r3, [r7, #2]
 80031e6:	2b40      	cmp	r3, #64	; 0x40
 80031e8:	d125      	bne.n	8003236 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031f0:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80031f2:	e020      	b.n	8003236 <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80031f4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	da03      	bge.n	8003204 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003202:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003204:	887b      	ldrh	r3, [r7, #2]
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	2b00      	cmp	r3, #0
 800320c:	d003      	beq.n	8003216 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8003214:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003216:	887b      	ldrh	r3, [r7, #2]
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d003      	beq.n	8003228 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8003226:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003228:	887b      	ldrh	r3, [r7, #2]
 800322a:	2b20      	cmp	r3, #32
 800322c:	d103      	bne.n	8003236 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f043 0320 	orr.w	r3, r3, #32
 8003234:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	6819      	ldr	r1, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68fa      	ldr	r2, [r7, #12]
 8003242:	430a      	orrs	r2, r1
 8003244:	601a      	str	r2, [r3, #0]
}
 8003246:	bf00      	nop
 8003248:	3714      	adds	r7, #20
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	080020f7 	.word	0x080020f7
 8003258:	080022dd 	.word	0x080022dd

0800325c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	460b      	mov	r3, r1
 8003266:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003268:	2300      	movs	r3, #0
 800326a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800326c:	887b      	ldrh	r3, [r7, #2]
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00f      	beq.n	8003296 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800327c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003284:	b2db      	uxtb	r3, r3
 8003286:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800328a:	2b28      	cmp	r3, #40	; 0x28
 800328c:	d003      	beq.n	8003296 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003294:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003296:	887b      	ldrh	r3, [r7, #2]
 8003298:	f003 0302 	and.w	r3, r3, #2
 800329c:	2b00      	cmp	r3, #0
 800329e:	d00f      	beq.n	80032c0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80032a6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80032b4:	2b28      	cmp	r3, #40	; 0x28
 80032b6:	d003      	beq.n	80032c0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80032be:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80032c0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	da03      	bge.n	80032d0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80032ce:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80032d0:	887b      	ldrh	r3, [r7, #2]
 80032d2:	2b10      	cmp	r3, #16
 80032d4:	d103      	bne.n	80032de <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80032dc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80032de:	887b      	ldrh	r3, [r7, #2]
 80032e0:	2b20      	cmp	r3, #32
 80032e2:	d103      	bne.n	80032ec <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f043 0320 	orr.w	r3, r3, #32
 80032ea:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80032ec:	887b      	ldrh	r3, [r7, #2]
 80032ee:	2b40      	cmp	r3, #64	; 0x40
 80032f0:	d103      	bne.n	80032fa <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032f8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	6819      	ldr	r1, [r3, #0]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	43da      	mvns	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	400a      	ands	r2, r1
 800330a:	601a      	str	r2, [r3, #0]
}
 800330c:	bf00      	nop
 800330e:	3714      	adds	r7, #20
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b20      	cmp	r3, #32
 800332c:	d138      	bne.n	80033a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003334:	2b01      	cmp	r3, #1
 8003336:	d101      	bne.n	800333c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003338:	2302      	movs	r3, #2
 800333a:	e032      	b.n	80033a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2224      	movs	r2, #36	; 0x24
 8003348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f022 0201 	bic.w	r2, r2, #1
 800335a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800336a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	6819      	ldr	r1, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	683a      	ldr	r2, [r7, #0]
 8003378:	430a      	orrs	r2, r1
 800337a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f042 0201 	orr.w	r2, r2, #1
 800338a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2220      	movs	r2, #32
 8003390:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800339c:	2300      	movs	r3, #0
 800339e:	e000      	b.n	80033a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80033a0:	2302      	movs	r3, #2
  }
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr

080033ae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80033ae:	b480      	push	{r7}
 80033b0:	b085      	sub	sp, #20
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
 80033b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	2b20      	cmp	r3, #32
 80033c2:	d139      	bne.n	8003438 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d101      	bne.n	80033d2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80033ce:	2302      	movs	r3, #2
 80033d0:	e033      	b.n	800343a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2201      	movs	r2, #1
 80033d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2224      	movs	r2, #36	; 0x24
 80033de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f022 0201 	bic.w	r2, r2, #1
 80033f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003400:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	021b      	lsls	r3, r3, #8
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	4313      	orrs	r3, r2
 800340a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f042 0201 	orr.w	r2, r2, #1
 8003422:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2220      	movs	r2, #32
 8003428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003434:	2300      	movs	r3, #0
 8003436:	e000      	b.n	800343a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003438:	2302      	movs	r3, #2
  }
}
 800343a:	4618      	mov	r0, r3
 800343c:	3714      	adds	r7, #20
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
	...

08003448 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003448:	b480      	push	{r7}
 800344a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800344c:	4b04      	ldr	r3, [pc, #16]	; (8003460 <HAL_PWREx_GetVoltageRange+0x18>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003454:	4618      	mov	r0, r3
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	40007000 	.word	0x40007000

08003464 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003472:	d130      	bne.n	80034d6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003474:	4b23      	ldr	r3, [pc, #140]	; (8003504 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800347c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003480:	d038      	beq.n	80034f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003482:	4b20      	ldr	r3, [pc, #128]	; (8003504 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800348a:	4a1e      	ldr	r2, [pc, #120]	; (8003504 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800348c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003490:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003492:	4b1d      	ldr	r3, [pc, #116]	; (8003508 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2232      	movs	r2, #50	; 0x32
 8003498:	fb02 f303 	mul.w	r3, r2, r3
 800349c:	4a1b      	ldr	r2, [pc, #108]	; (800350c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800349e:	fba2 2303 	umull	r2, r3, r2, r3
 80034a2:	0c9b      	lsrs	r3, r3, #18
 80034a4:	3301      	adds	r3, #1
 80034a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034a8:	e002      	b.n	80034b0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	3b01      	subs	r3, #1
 80034ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034b0:	4b14      	ldr	r3, [pc, #80]	; (8003504 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034b2:	695b      	ldr	r3, [r3, #20]
 80034b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034bc:	d102      	bne.n	80034c4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d1f2      	bne.n	80034aa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80034c4:	4b0f      	ldr	r3, [pc, #60]	; (8003504 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034c6:	695b      	ldr	r3, [r3, #20]
 80034c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034d0:	d110      	bne.n	80034f4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e00f      	b.n	80034f6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80034d6:	4b0b      	ldr	r3, [pc, #44]	; (8003504 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80034de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034e2:	d007      	beq.n	80034f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80034e4:	4b07      	ldr	r3, [pc, #28]	; (8003504 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80034ec:	4a05      	ldr	r2, [pc, #20]	; (8003504 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034f2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3714      	adds	r7, #20
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	40007000 	.word	0x40007000
 8003508:	20000000 	.word	0x20000000
 800350c:	431bde83 	.word	0x431bde83

08003510 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b088      	sub	sp, #32
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d102      	bne.n	8003524 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	f000 bc11 	b.w	8003d46 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003524:	4ba0      	ldr	r3, [pc, #640]	; (80037a8 <HAL_RCC_OscConfig+0x298>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f003 030c 	and.w	r3, r3, #12
 800352c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800352e:	4b9e      	ldr	r3, [pc, #632]	; (80037a8 <HAL_RCC_OscConfig+0x298>)
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	f003 0303 	and.w	r3, r3, #3
 8003536:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0310 	and.w	r3, r3, #16
 8003540:	2b00      	cmp	r3, #0
 8003542:	f000 80e4 	beq.w	800370e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d007      	beq.n	800355c <HAL_RCC_OscConfig+0x4c>
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	2b0c      	cmp	r3, #12
 8003550:	f040 808b 	bne.w	800366a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	2b01      	cmp	r3, #1
 8003558:	f040 8087 	bne.w	800366a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800355c:	4b92      	ldr	r3, [pc, #584]	; (80037a8 <HAL_RCC_OscConfig+0x298>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d005      	beq.n	8003574 <HAL_RCC_OscConfig+0x64>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d101      	bne.n	8003574 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e3e8      	b.n	8003d46 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a1a      	ldr	r2, [r3, #32]
 8003578:	4b8b      	ldr	r3, [pc, #556]	; (80037a8 <HAL_RCC_OscConfig+0x298>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0308 	and.w	r3, r3, #8
 8003580:	2b00      	cmp	r3, #0
 8003582:	d004      	beq.n	800358e <HAL_RCC_OscConfig+0x7e>
 8003584:	4b88      	ldr	r3, [pc, #544]	; (80037a8 <HAL_RCC_OscConfig+0x298>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800358c:	e005      	b.n	800359a <HAL_RCC_OscConfig+0x8a>
 800358e:	4b86      	ldr	r3, [pc, #536]	; (80037a8 <HAL_RCC_OscConfig+0x298>)
 8003590:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003594:	091b      	lsrs	r3, r3, #4
 8003596:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800359a:	4293      	cmp	r3, r2
 800359c:	d223      	bcs.n	80035e6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a1b      	ldr	r3, [r3, #32]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f000 fd7a 	bl	800409c <RCC_SetFlashLatencyFromMSIRange>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e3c9      	b.n	8003d46 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035b2:	4b7d      	ldr	r3, [pc, #500]	; (80037a8 <HAL_RCC_OscConfig+0x298>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a7c      	ldr	r2, [pc, #496]	; (80037a8 <HAL_RCC_OscConfig+0x298>)
 80035b8:	f043 0308 	orr.w	r3, r3, #8
 80035bc:	6013      	str	r3, [r2, #0]
 80035be:	4b7a      	ldr	r3, [pc, #488]	; (80037a8 <HAL_RCC_OscConfig+0x298>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	4977      	ldr	r1, [pc, #476]	; (80037a8 <HAL_RCC_OscConfig+0x298>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035d0:	4b75      	ldr	r3, [pc, #468]	; (80037a8 <HAL_RCC_OscConfig+0x298>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	69db      	ldr	r3, [r3, #28]
 80035dc:	021b      	lsls	r3, r3, #8
 80035de:	4972      	ldr	r1, [pc, #456]	; (80037a8 <HAL_RCC_OscConfig+0x298>)
 80035e0:	4313      	orrs	r3, r2
 80035e2:	604b      	str	r3, [r1, #4]
 80035e4:	e025      	b.n	8003632 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035e6:	4b70      	ldr	r3, [pc, #448]	; (80037a8 <HAL_RCC_OscConfig+0x298>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a6f      	ldr	r2, [pc, #444]	; (80037a8 <HAL_RCC_OscConfig+0x298>)
 80035ec:	f043 0308 	orr.w	r3, r3, #8
 80035f0:	6013      	str	r3, [r2, #0]
 80035f2:	4b6d      	ldr	r3, [pc, #436]	; (80037a8 <HAL_RCC_OscConfig+0x298>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a1b      	ldr	r3, [r3, #32]
 80035fe:	496a      	ldr	r1, [pc, #424]	; (80037a8 <HAL_RCC_OscConfig+0x298>)
 8003600:	4313      	orrs	r3, r2
 8003602:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003604:	4b68      	ldr	r3, [pc, #416]	; (80037a8 <HAL_RCC_OscConfig+0x298>)
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	69db      	ldr	r3, [r3, #28]
 8003610:	021b      	lsls	r3, r3, #8
 8003612:	4965      	ldr	r1, [pc, #404]	; (80037a8 <HAL_RCC_OscConfig+0x298>)
 8003614:	4313      	orrs	r3, r2
 8003616:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d109      	bne.n	8003632 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a1b      	ldr	r3, [r3, #32]
 8003622:	4618      	mov	r0, r3
 8003624:	f000 fd3a 	bl	800409c <RCC_SetFlashLatencyFromMSIRange>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d001      	beq.n	8003632 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e389      	b.n	8003d46 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003632:	f000 fc6f 	bl	8003f14 <HAL_RCC_GetSysClockFreq>
 8003636:	4602      	mov	r2, r0
 8003638:	4b5b      	ldr	r3, [pc, #364]	; (80037a8 <HAL_RCC_OscConfig+0x298>)
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	091b      	lsrs	r3, r3, #4
 800363e:	f003 030f 	and.w	r3, r3, #15
 8003642:	495a      	ldr	r1, [pc, #360]	; (80037ac <HAL_RCC_OscConfig+0x29c>)
 8003644:	5ccb      	ldrb	r3, [r1, r3]
 8003646:	f003 031f 	and.w	r3, r3, #31
 800364a:	fa22 f303 	lsr.w	r3, r2, r3
 800364e:	4a58      	ldr	r2, [pc, #352]	; (80037b0 <HAL_RCC_OscConfig+0x2a0>)
 8003650:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003652:	4b58      	ldr	r3, [pc, #352]	; (80037b4 <HAL_RCC_OscConfig+0x2a4>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4618      	mov	r0, r3
 8003658:	f7fd fb7a 	bl	8000d50 <HAL_InitTick>
 800365c:	4603      	mov	r3, r0
 800365e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003660:	7bfb      	ldrb	r3, [r7, #15]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d052      	beq.n	800370c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003666:	7bfb      	ldrb	r3, [r7, #15]
 8003668:	e36d      	b.n	8003d46 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d032      	beq.n	80036d8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003672:	4b4d      	ldr	r3, [pc, #308]	; (80037a8 <HAL_RCC_OscConfig+0x298>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a4c      	ldr	r2, [pc, #304]	; (80037a8 <HAL_RCC_OscConfig+0x298>)
 8003678:	f043 0301 	orr.w	r3, r3, #1
 800367c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800367e:	f7fd fbb7 	bl	8000df0 <HAL_GetTick>
 8003682:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003684:	e008      	b.n	8003698 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003686:	f7fd fbb3 	bl	8000df0 <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	2b02      	cmp	r3, #2
 8003692:	d901      	bls.n	8003698 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e356      	b.n	8003d46 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003698:	4b43      	ldr	r3, [pc, #268]	; (80037a8 <HAL_RCC_OscConfig+0x298>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0302 	and.w	r3, r3, #2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d0f0      	beq.n	8003686 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036a4:	4b40      	ldr	r3, [pc, #256]	; (80037a8 <HAL_RCC_OscConfig+0x298>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a3f      	ldr	r2, [pc, #252]	; (80037a8 <HAL_RCC_OscConfig+0x298>)
 80036aa:	f043 0308 	orr.w	r3, r3, #8
 80036ae:	6013      	str	r3, [r2, #0]
 80036b0:	4b3d      	ldr	r3, [pc, #244]	; (80037a8 <HAL_RCC_OscConfig+0x298>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a1b      	ldr	r3, [r3, #32]
 80036bc:	493a      	ldr	r1, [pc, #232]	; (80037a8 <HAL_RCC_OscConfig+0x298>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036c2:	4b39      	ldr	r3, [pc, #228]	; (80037a8 <HAL_RCC_OscConfig+0x298>)
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	69db      	ldr	r3, [r3, #28]
 80036ce:	021b      	lsls	r3, r3, #8
 80036d0:	4935      	ldr	r1, [pc, #212]	; (80037a8 <HAL_RCC_OscConfig+0x298>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	604b      	str	r3, [r1, #4]
 80036d6:	e01a      	b.n	800370e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80036d8:	4b33      	ldr	r3, [pc, #204]	; (80037a8 <HAL_RCC_OscConfig+0x298>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a32      	ldr	r2, [pc, #200]	; (80037a8 <HAL_RCC_OscConfig+0x298>)
 80036de:	f023 0301 	bic.w	r3, r3, #1
 80036e2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80036e4:	f7fd fb84 	bl	8000df0 <HAL_GetTick>
 80036e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80036ea:	e008      	b.n	80036fe <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036ec:	f7fd fb80 	bl	8000df0 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e323      	b.n	8003d46 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80036fe:	4b2a      	ldr	r3, [pc, #168]	; (80037a8 <HAL_RCC_OscConfig+0x298>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1f0      	bne.n	80036ec <HAL_RCC_OscConfig+0x1dc>
 800370a:	e000      	b.n	800370e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800370c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	2b00      	cmp	r3, #0
 8003718:	d073      	beq.n	8003802 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	2b08      	cmp	r3, #8
 800371e:	d005      	beq.n	800372c <HAL_RCC_OscConfig+0x21c>
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	2b0c      	cmp	r3, #12
 8003724:	d10e      	bne.n	8003744 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	2b03      	cmp	r3, #3
 800372a:	d10b      	bne.n	8003744 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800372c:	4b1e      	ldr	r3, [pc, #120]	; (80037a8 <HAL_RCC_OscConfig+0x298>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d063      	beq.n	8003800 <HAL_RCC_OscConfig+0x2f0>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d15f      	bne.n	8003800 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e300      	b.n	8003d46 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800374c:	d106      	bne.n	800375c <HAL_RCC_OscConfig+0x24c>
 800374e:	4b16      	ldr	r3, [pc, #88]	; (80037a8 <HAL_RCC_OscConfig+0x298>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a15      	ldr	r2, [pc, #84]	; (80037a8 <HAL_RCC_OscConfig+0x298>)
 8003754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003758:	6013      	str	r3, [r2, #0]
 800375a:	e01d      	b.n	8003798 <HAL_RCC_OscConfig+0x288>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003764:	d10c      	bne.n	8003780 <HAL_RCC_OscConfig+0x270>
 8003766:	4b10      	ldr	r3, [pc, #64]	; (80037a8 <HAL_RCC_OscConfig+0x298>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a0f      	ldr	r2, [pc, #60]	; (80037a8 <HAL_RCC_OscConfig+0x298>)
 800376c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003770:	6013      	str	r3, [r2, #0]
 8003772:	4b0d      	ldr	r3, [pc, #52]	; (80037a8 <HAL_RCC_OscConfig+0x298>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a0c      	ldr	r2, [pc, #48]	; (80037a8 <HAL_RCC_OscConfig+0x298>)
 8003778:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800377c:	6013      	str	r3, [r2, #0]
 800377e:	e00b      	b.n	8003798 <HAL_RCC_OscConfig+0x288>
 8003780:	4b09      	ldr	r3, [pc, #36]	; (80037a8 <HAL_RCC_OscConfig+0x298>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a08      	ldr	r2, [pc, #32]	; (80037a8 <HAL_RCC_OscConfig+0x298>)
 8003786:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800378a:	6013      	str	r3, [r2, #0]
 800378c:	4b06      	ldr	r3, [pc, #24]	; (80037a8 <HAL_RCC_OscConfig+0x298>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a05      	ldr	r2, [pc, #20]	; (80037a8 <HAL_RCC_OscConfig+0x298>)
 8003792:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003796:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d01b      	beq.n	80037d8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a0:	f7fd fb26 	bl	8000df0 <HAL_GetTick>
 80037a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037a6:	e010      	b.n	80037ca <HAL_RCC_OscConfig+0x2ba>
 80037a8:	40021000 	.word	0x40021000
 80037ac:	08009468 	.word	0x08009468
 80037b0:	20000000 	.word	0x20000000
 80037b4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037b8:	f7fd fb1a 	bl	8000df0 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b64      	cmp	r3, #100	; 0x64
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e2bd      	b.n	8003d46 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037ca:	4baf      	ldr	r3, [pc, #700]	; (8003a88 <HAL_RCC_OscConfig+0x578>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d0f0      	beq.n	80037b8 <HAL_RCC_OscConfig+0x2a8>
 80037d6:	e014      	b.n	8003802 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d8:	f7fd fb0a 	bl	8000df0 <HAL_GetTick>
 80037dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037de:	e008      	b.n	80037f2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037e0:	f7fd fb06 	bl	8000df0 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b64      	cmp	r3, #100	; 0x64
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e2a9      	b.n	8003d46 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037f2:	4ba5      	ldr	r3, [pc, #660]	; (8003a88 <HAL_RCC_OscConfig+0x578>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d1f0      	bne.n	80037e0 <HAL_RCC_OscConfig+0x2d0>
 80037fe:	e000      	b.n	8003802 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003800:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0302 	and.w	r3, r3, #2
 800380a:	2b00      	cmp	r3, #0
 800380c:	d060      	beq.n	80038d0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	2b04      	cmp	r3, #4
 8003812:	d005      	beq.n	8003820 <HAL_RCC_OscConfig+0x310>
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	2b0c      	cmp	r3, #12
 8003818:	d119      	bne.n	800384e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	2b02      	cmp	r3, #2
 800381e:	d116      	bne.n	800384e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003820:	4b99      	ldr	r3, [pc, #612]	; (8003a88 <HAL_RCC_OscConfig+0x578>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003828:	2b00      	cmp	r3, #0
 800382a:	d005      	beq.n	8003838 <HAL_RCC_OscConfig+0x328>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d101      	bne.n	8003838 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e286      	b.n	8003d46 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003838:	4b93      	ldr	r3, [pc, #588]	; (8003a88 <HAL_RCC_OscConfig+0x578>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	061b      	lsls	r3, r3, #24
 8003846:	4990      	ldr	r1, [pc, #576]	; (8003a88 <HAL_RCC_OscConfig+0x578>)
 8003848:	4313      	orrs	r3, r2
 800384a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800384c:	e040      	b.n	80038d0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d023      	beq.n	800389e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003856:	4b8c      	ldr	r3, [pc, #560]	; (8003a88 <HAL_RCC_OscConfig+0x578>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a8b      	ldr	r2, [pc, #556]	; (8003a88 <HAL_RCC_OscConfig+0x578>)
 800385c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003860:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003862:	f7fd fac5 	bl	8000df0 <HAL_GetTick>
 8003866:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003868:	e008      	b.n	800387c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800386a:	f7fd fac1 	bl	8000df0 <HAL_GetTick>
 800386e:	4602      	mov	r2, r0
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	2b02      	cmp	r3, #2
 8003876:	d901      	bls.n	800387c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003878:	2303      	movs	r3, #3
 800387a:	e264      	b.n	8003d46 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800387c:	4b82      	ldr	r3, [pc, #520]	; (8003a88 <HAL_RCC_OscConfig+0x578>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003884:	2b00      	cmp	r3, #0
 8003886:	d0f0      	beq.n	800386a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003888:	4b7f      	ldr	r3, [pc, #508]	; (8003a88 <HAL_RCC_OscConfig+0x578>)
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	061b      	lsls	r3, r3, #24
 8003896:	497c      	ldr	r1, [pc, #496]	; (8003a88 <HAL_RCC_OscConfig+0x578>)
 8003898:	4313      	orrs	r3, r2
 800389a:	604b      	str	r3, [r1, #4]
 800389c:	e018      	b.n	80038d0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800389e:	4b7a      	ldr	r3, [pc, #488]	; (8003a88 <HAL_RCC_OscConfig+0x578>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a79      	ldr	r2, [pc, #484]	; (8003a88 <HAL_RCC_OscConfig+0x578>)
 80038a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038aa:	f7fd faa1 	bl	8000df0 <HAL_GetTick>
 80038ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038b0:	e008      	b.n	80038c4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038b2:	f7fd fa9d 	bl	8000df0 <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d901      	bls.n	80038c4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e240      	b.n	8003d46 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038c4:	4b70      	ldr	r3, [pc, #448]	; (8003a88 <HAL_RCC_OscConfig+0x578>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d1f0      	bne.n	80038b2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0308 	and.w	r3, r3, #8
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d03c      	beq.n	8003956 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	695b      	ldr	r3, [r3, #20]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d01c      	beq.n	800391e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038e4:	4b68      	ldr	r3, [pc, #416]	; (8003a88 <HAL_RCC_OscConfig+0x578>)
 80038e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038ea:	4a67      	ldr	r2, [pc, #412]	; (8003a88 <HAL_RCC_OscConfig+0x578>)
 80038ec:	f043 0301 	orr.w	r3, r3, #1
 80038f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f4:	f7fd fa7c 	bl	8000df0 <HAL_GetTick>
 80038f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038fa:	e008      	b.n	800390e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038fc:	f7fd fa78 	bl	8000df0 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	2b02      	cmp	r3, #2
 8003908:	d901      	bls.n	800390e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e21b      	b.n	8003d46 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800390e:	4b5e      	ldr	r3, [pc, #376]	; (8003a88 <HAL_RCC_OscConfig+0x578>)
 8003910:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003914:	f003 0302 	and.w	r3, r3, #2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d0ef      	beq.n	80038fc <HAL_RCC_OscConfig+0x3ec>
 800391c:	e01b      	b.n	8003956 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800391e:	4b5a      	ldr	r3, [pc, #360]	; (8003a88 <HAL_RCC_OscConfig+0x578>)
 8003920:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003924:	4a58      	ldr	r2, [pc, #352]	; (8003a88 <HAL_RCC_OscConfig+0x578>)
 8003926:	f023 0301 	bic.w	r3, r3, #1
 800392a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800392e:	f7fd fa5f 	bl	8000df0 <HAL_GetTick>
 8003932:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003934:	e008      	b.n	8003948 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003936:	f7fd fa5b 	bl	8000df0 <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	2b02      	cmp	r3, #2
 8003942:	d901      	bls.n	8003948 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e1fe      	b.n	8003d46 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003948:	4b4f      	ldr	r3, [pc, #316]	; (8003a88 <HAL_RCC_OscConfig+0x578>)
 800394a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1ef      	bne.n	8003936 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0304 	and.w	r3, r3, #4
 800395e:	2b00      	cmp	r3, #0
 8003960:	f000 80a6 	beq.w	8003ab0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003964:	2300      	movs	r3, #0
 8003966:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003968:	4b47      	ldr	r3, [pc, #284]	; (8003a88 <HAL_RCC_OscConfig+0x578>)
 800396a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800396c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d10d      	bne.n	8003990 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003974:	4b44      	ldr	r3, [pc, #272]	; (8003a88 <HAL_RCC_OscConfig+0x578>)
 8003976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003978:	4a43      	ldr	r2, [pc, #268]	; (8003a88 <HAL_RCC_OscConfig+0x578>)
 800397a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800397e:	6593      	str	r3, [r2, #88]	; 0x58
 8003980:	4b41      	ldr	r3, [pc, #260]	; (8003a88 <HAL_RCC_OscConfig+0x578>)
 8003982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003988:	60bb      	str	r3, [r7, #8]
 800398a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800398c:	2301      	movs	r3, #1
 800398e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003990:	4b3e      	ldr	r3, [pc, #248]	; (8003a8c <HAL_RCC_OscConfig+0x57c>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003998:	2b00      	cmp	r3, #0
 800399a:	d118      	bne.n	80039ce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800399c:	4b3b      	ldr	r3, [pc, #236]	; (8003a8c <HAL_RCC_OscConfig+0x57c>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a3a      	ldr	r2, [pc, #232]	; (8003a8c <HAL_RCC_OscConfig+0x57c>)
 80039a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039a8:	f7fd fa22 	bl	8000df0 <HAL_GetTick>
 80039ac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039ae:	e008      	b.n	80039c2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039b0:	f7fd fa1e 	bl	8000df0 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e1c1      	b.n	8003d46 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039c2:	4b32      	ldr	r3, [pc, #200]	; (8003a8c <HAL_RCC_OscConfig+0x57c>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d0f0      	beq.n	80039b0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d108      	bne.n	80039e8 <HAL_RCC_OscConfig+0x4d8>
 80039d6:	4b2c      	ldr	r3, [pc, #176]	; (8003a88 <HAL_RCC_OscConfig+0x578>)
 80039d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039dc:	4a2a      	ldr	r2, [pc, #168]	; (8003a88 <HAL_RCC_OscConfig+0x578>)
 80039de:	f043 0301 	orr.w	r3, r3, #1
 80039e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039e6:	e024      	b.n	8003a32 <HAL_RCC_OscConfig+0x522>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	2b05      	cmp	r3, #5
 80039ee:	d110      	bne.n	8003a12 <HAL_RCC_OscConfig+0x502>
 80039f0:	4b25      	ldr	r3, [pc, #148]	; (8003a88 <HAL_RCC_OscConfig+0x578>)
 80039f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f6:	4a24      	ldr	r2, [pc, #144]	; (8003a88 <HAL_RCC_OscConfig+0x578>)
 80039f8:	f043 0304 	orr.w	r3, r3, #4
 80039fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a00:	4b21      	ldr	r3, [pc, #132]	; (8003a88 <HAL_RCC_OscConfig+0x578>)
 8003a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a06:	4a20      	ldr	r2, [pc, #128]	; (8003a88 <HAL_RCC_OscConfig+0x578>)
 8003a08:	f043 0301 	orr.w	r3, r3, #1
 8003a0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a10:	e00f      	b.n	8003a32 <HAL_RCC_OscConfig+0x522>
 8003a12:	4b1d      	ldr	r3, [pc, #116]	; (8003a88 <HAL_RCC_OscConfig+0x578>)
 8003a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a18:	4a1b      	ldr	r2, [pc, #108]	; (8003a88 <HAL_RCC_OscConfig+0x578>)
 8003a1a:	f023 0301 	bic.w	r3, r3, #1
 8003a1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a22:	4b19      	ldr	r3, [pc, #100]	; (8003a88 <HAL_RCC_OscConfig+0x578>)
 8003a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a28:	4a17      	ldr	r2, [pc, #92]	; (8003a88 <HAL_RCC_OscConfig+0x578>)
 8003a2a:	f023 0304 	bic.w	r3, r3, #4
 8003a2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d016      	beq.n	8003a68 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a3a:	f7fd f9d9 	bl	8000df0 <HAL_GetTick>
 8003a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a40:	e00a      	b.n	8003a58 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a42:	f7fd f9d5 	bl	8000df0 <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d901      	bls.n	8003a58 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	e176      	b.n	8003d46 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a58:	4b0b      	ldr	r3, [pc, #44]	; (8003a88 <HAL_RCC_OscConfig+0x578>)
 8003a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d0ed      	beq.n	8003a42 <HAL_RCC_OscConfig+0x532>
 8003a66:	e01a      	b.n	8003a9e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a68:	f7fd f9c2 	bl	8000df0 <HAL_GetTick>
 8003a6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a6e:	e00f      	b.n	8003a90 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a70:	f7fd f9be 	bl	8000df0 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d906      	bls.n	8003a90 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e15f      	b.n	8003d46 <HAL_RCC_OscConfig+0x836>
 8003a86:	bf00      	nop
 8003a88:	40021000 	.word	0x40021000
 8003a8c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a90:	4baa      	ldr	r3, [pc, #680]	; (8003d3c <HAL_RCC_OscConfig+0x82c>)
 8003a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a96:	f003 0302 	and.w	r3, r3, #2
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d1e8      	bne.n	8003a70 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a9e:	7ffb      	ldrb	r3, [r7, #31]
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d105      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aa4:	4ba5      	ldr	r3, [pc, #660]	; (8003d3c <HAL_RCC_OscConfig+0x82c>)
 8003aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa8:	4aa4      	ldr	r2, [pc, #656]	; (8003d3c <HAL_RCC_OscConfig+0x82c>)
 8003aaa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003aae:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0320 	and.w	r3, r3, #32
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d03c      	beq.n	8003b36 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d01c      	beq.n	8003afe <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ac4:	4b9d      	ldr	r3, [pc, #628]	; (8003d3c <HAL_RCC_OscConfig+0x82c>)
 8003ac6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003aca:	4a9c      	ldr	r2, [pc, #624]	; (8003d3c <HAL_RCC_OscConfig+0x82c>)
 8003acc:	f043 0301 	orr.w	r3, r3, #1
 8003ad0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ad4:	f7fd f98c 	bl	8000df0 <HAL_GetTick>
 8003ad8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003ada:	e008      	b.n	8003aee <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003adc:	f7fd f988 	bl	8000df0 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e12b      	b.n	8003d46 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003aee:	4b93      	ldr	r3, [pc, #588]	; (8003d3c <HAL_RCC_OscConfig+0x82c>)
 8003af0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003af4:	f003 0302 	and.w	r3, r3, #2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d0ef      	beq.n	8003adc <HAL_RCC_OscConfig+0x5cc>
 8003afc:	e01b      	b.n	8003b36 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003afe:	4b8f      	ldr	r3, [pc, #572]	; (8003d3c <HAL_RCC_OscConfig+0x82c>)
 8003b00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b04:	4a8d      	ldr	r2, [pc, #564]	; (8003d3c <HAL_RCC_OscConfig+0x82c>)
 8003b06:	f023 0301 	bic.w	r3, r3, #1
 8003b0a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b0e:	f7fd f96f 	bl	8000df0 <HAL_GetTick>
 8003b12:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b14:	e008      	b.n	8003b28 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b16:	f7fd f96b 	bl	8000df0 <HAL_GetTick>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d901      	bls.n	8003b28 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e10e      	b.n	8003d46 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b28:	4b84      	ldr	r3, [pc, #528]	; (8003d3c <HAL_RCC_OscConfig+0x82c>)
 8003b2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b2e:	f003 0302 	and.w	r3, r3, #2
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1ef      	bne.n	8003b16 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	f000 8102 	beq.w	8003d44 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	f040 80c5 	bne.w	8003cd4 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003b4a:	4b7c      	ldr	r3, [pc, #496]	; (8003d3c <HAL_RCC_OscConfig+0x82c>)
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	f003 0203 	and.w	r2, r3, #3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d12c      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d123      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b7a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d11b      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d113      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b9a:	085b      	lsrs	r3, r3, #1
 8003b9c:	3b01      	subs	r3, #1
 8003b9e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d109      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bae:	085b      	lsrs	r3, r3, #1
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d067      	beq.n	8003c88 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	2b0c      	cmp	r3, #12
 8003bbc:	d062      	beq.n	8003c84 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003bbe:	4b5f      	ldr	r3, [pc, #380]	; (8003d3c <HAL_RCC_OscConfig+0x82c>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d001      	beq.n	8003bce <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e0bb      	b.n	8003d46 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003bce:	4b5b      	ldr	r3, [pc, #364]	; (8003d3c <HAL_RCC_OscConfig+0x82c>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a5a      	ldr	r2, [pc, #360]	; (8003d3c <HAL_RCC_OscConfig+0x82c>)
 8003bd4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bd8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003bda:	f7fd f909 	bl	8000df0 <HAL_GetTick>
 8003bde:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003be0:	e008      	b.n	8003bf4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003be2:	f7fd f905 	bl	8000df0 <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d901      	bls.n	8003bf4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e0a8      	b.n	8003d46 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bf4:	4b51      	ldr	r3, [pc, #324]	; (8003d3c <HAL_RCC_OscConfig+0x82c>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d1f0      	bne.n	8003be2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c00:	4b4e      	ldr	r3, [pc, #312]	; (8003d3c <HAL_RCC_OscConfig+0x82c>)
 8003c02:	68da      	ldr	r2, [r3, #12]
 8003c04:	4b4e      	ldr	r3, [pc, #312]	; (8003d40 <HAL_RCC_OscConfig+0x830>)
 8003c06:	4013      	ands	r3, r2
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003c10:	3a01      	subs	r2, #1
 8003c12:	0112      	lsls	r2, r2, #4
 8003c14:	4311      	orrs	r1, r2
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c1a:	0212      	lsls	r2, r2, #8
 8003c1c:	4311      	orrs	r1, r2
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003c22:	0852      	lsrs	r2, r2, #1
 8003c24:	3a01      	subs	r2, #1
 8003c26:	0552      	lsls	r2, r2, #21
 8003c28:	4311      	orrs	r1, r2
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003c2e:	0852      	lsrs	r2, r2, #1
 8003c30:	3a01      	subs	r2, #1
 8003c32:	0652      	lsls	r2, r2, #25
 8003c34:	4311      	orrs	r1, r2
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c3a:	06d2      	lsls	r2, r2, #27
 8003c3c:	430a      	orrs	r2, r1
 8003c3e:	493f      	ldr	r1, [pc, #252]	; (8003d3c <HAL_RCC_OscConfig+0x82c>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003c44:	4b3d      	ldr	r3, [pc, #244]	; (8003d3c <HAL_RCC_OscConfig+0x82c>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a3c      	ldr	r2, [pc, #240]	; (8003d3c <HAL_RCC_OscConfig+0x82c>)
 8003c4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c4e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c50:	4b3a      	ldr	r3, [pc, #232]	; (8003d3c <HAL_RCC_OscConfig+0x82c>)
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	4a39      	ldr	r2, [pc, #228]	; (8003d3c <HAL_RCC_OscConfig+0x82c>)
 8003c56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c5a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c5c:	f7fd f8c8 	bl	8000df0 <HAL_GetTick>
 8003c60:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c62:	e008      	b.n	8003c76 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c64:	f7fd f8c4 	bl	8000df0 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e067      	b.n	8003d46 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c76:	4b31      	ldr	r3, [pc, #196]	; (8003d3c <HAL_RCC_OscConfig+0x82c>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d0f0      	beq.n	8003c64 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c82:	e05f      	b.n	8003d44 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e05e      	b.n	8003d46 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c88:	4b2c      	ldr	r3, [pc, #176]	; (8003d3c <HAL_RCC_OscConfig+0x82c>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d157      	bne.n	8003d44 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003c94:	4b29      	ldr	r3, [pc, #164]	; (8003d3c <HAL_RCC_OscConfig+0x82c>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a28      	ldr	r2, [pc, #160]	; (8003d3c <HAL_RCC_OscConfig+0x82c>)
 8003c9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c9e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ca0:	4b26      	ldr	r3, [pc, #152]	; (8003d3c <HAL_RCC_OscConfig+0x82c>)
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	4a25      	ldr	r2, [pc, #148]	; (8003d3c <HAL_RCC_OscConfig+0x82c>)
 8003ca6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003caa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003cac:	f7fd f8a0 	bl	8000df0 <HAL_GetTick>
 8003cb0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cb2:	e008      	b.n	8003cc6 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cb4:	f7fd f89c 	bl	8000df0 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e03f      	b.n	8003d46 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cc6:	4b1d      	ldr	r3, [pc, #116]	; (8003d3c <HAL_RCC_OscConfig+0x82c>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d0f0      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x7a4>
 8003cd2:	e037      	b.n	8003d44 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	2b0c      	cmp	r3, #12
 8003cd8:	d02d      	beq.n	8003d36 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cda:	4b18      	ldr	r3, [pc, #96]	; (8003d3c <HAL_RCC_OscConfig+0x82c>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a17      	ldr	r2, [pc, #92]	; (8003d3c <HAL_RCC_OscConfig+0x82c>)
 8003ce0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ce4:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ce6:	4b15      	ldr	r3, [pc, #84]	; (8003d3c <HAL_RCC_OscConfig+0x82c>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d105      	bne.n	8003cfe <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003cf2:	4b12      	ldr	r3, [pc, #72]	; (8003d3c <HAL_RCC_OscConfig+0x82c>)
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	4a11      	ldr	r2, [pc, #68]	; (8003d3c <HAL_RCC_OscConfig+0x82c>)
 8003cf8:	f023 0303 	bic.w	r3, r3, #3
 8003cfc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003cfe:	4b0f      	ldr	r3, [pc, #60]	; (8003d3c <HAL_RCC_OscConfig+0x82c>)
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	4a0e      	ldr	r2, [pc, #56]	; (8003d3c <HAL_RCC_OscConfig+0x82c>)
 8003d04:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003d08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d0c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d0e:	f7fd f86f 	bl	8000df0 <HAL_GetTick>
 8003d12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d14:	e008      	b.n	8003d28 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d16:	f7fd f86b 	bl	8000df0 <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d901      	bls.n	8003d28 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e00e      	b.n	8003d46 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d28:	4b04      	ldr	r3, [pc, #16]	; (8003d3c <HAL_RCC_OscConfig+0x82c>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d1f0      	bne.n	8003d16 <HAL_RCC_OscConfig+0x806>
 8003d34:	e006      	b.n	8003d44 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e005      	b.n	8003d46 <HAL_RCC_OscConfig+0x836>
 8003d3a:	bf00      	nop
 8003d3c:	40021000 	.word	0x40021000
 8003d40:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3720      	adds	r7, #32
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop

08003d50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d101      	bne.n	8003d64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e0c8      	b.n	8003ef6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d64:	4b66      	ldr	r3, [pc, #408]	; (8003f00 <HAL_RCC_ClockConfig+0x1b0>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0307 	and.w	r3, r3, #7
 8003d6c:	683a      	ldr	r2, [r7, #0]
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d910      	bls.n	8003d94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d72:	4b63      	ldr	r3, [pc, #396]	; (8003f00 <HAL_RCC_ClockConfig+0x1b0>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f023 0207 	bic.w	r2, r3, #7
 8003d7a:	4961      	ldr	r1, [pc, #388]	; (8003f00 <HAL_RCC_ClockConfig+0x1b0>)
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d82:	4b5f      	ldr	r3, [pc, #380]	; (8003f00 <HAL_RCC_ClockConfig+0x1b0>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0307 	and.w	r3, r3, #7
 8003d8a:	683a      	ldr	r2, [r7, #0]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d001      	beq.n	8003d94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e0b0      	b.n	8003ef6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0301 	and.w	r3, r3, #1
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d04c      	beq.n	8003e3a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	2b03      	cmp	r3, #3
 8003da6:	d107      	bne.n	8003db8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003da8:	4b56      	ldr	r3, [pc, #344]	; (8003f04 <HAL_RCC_ClockConfig+0x1b4>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d121      	bne.n	8003df8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e09e      	b.n	8003ef6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d107      	bne.n	8003dd0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dc0:	4b50      	ldr	r3, [pc, #320]	; (8003f04 <HAL_RCC_ClockConfig+0x1b4>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d115      	bne.n	8003df8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e092      	b.n	8003ef6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d107      	bne.n	8003de8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003dd8:	4b4a      	ldr	r3, [pc, #296]	; (8003f04 <HAL_RCC_ClockConfig+0x1b4>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0302 	and.w	r3, r3, #2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d109      	bne.n	8003df8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e086      	b.n	8003ef6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003de8:	4b46      	ldr	r3, [pc, #280]	; (8003f04 <HAL_RCC_ClockConfig+0x1b4>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d101      	bne.n	8003df8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e07e      	b.n	8003ef6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003df8:	4b42      	ldr	r3, [pc, #264]	; (8003f04 <HAL_RCC_ClockConfig+0x1b4>)
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f023 0203 	bic.w	r2, r3, #3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	493f      	ldr	r1, [pc, #252]	; (8003f04 <HAL_RCC_ClockConfig+0x1b4>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e0a:	f7fc fff1 	bl	8000df0 <HAL_GetTick>
 8003e0e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e10:	e00a      	b.n	8003e28 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e12:	f7fc ffed 	bl	8000df0 <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d901      	bls.n	8003e28 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003e24:	2303      	movs	r3, #3
 8003e26:	e066      	b.n	8003ef6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e28:	4b36      	ldr	r3, [pc, #216]	; (8003f04 <HAL_RCC_ClockConfig+0x1b4>)
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f003 020c 	and.w	r2, r3, #12
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d1eb      	bne.n	8003e12 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0302 	and.w	r3, r3, #2
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d008      	beq.n	8003e58 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e46:	4b2f      	ldr	r3, [pc, #188]	; (8003f04 <HAL_RCC_ClockConfig+0x1b4>)
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	492c      	ldr	r1, [pc, #176]	; (8003f04 <HAL_RCC_ClockConfig+0x1b4>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e58:	4b29      	ldr	r3, [pc, #164]	; (8003f00 <HAL_RCC_ClockConfig+0x1b0>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0307 	and.w	r3, r3, #7
 8003e60:	683a      	ldr	r2, [r7, #0]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d210      	bcs.n	8003e88 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e66:	4b26      	ldr	r3, [pc, #152]	; (8003f00 <HAL_RCC_ClockConfig+0x1b0>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f023 0207 	bic.w	r2, r3, #7
 8003e6e:	4924      	ldr	r1, [pc, #144]	; (8003f00 <HAL_RCC_ClockConfig+0x1b0>)
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e76:	4b22      	ldr	r3, [pc, #136]	; (8003f00 <HAL_RCC_ClockConfig+0x1b0>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0307 	and.w	r3, r3, #7
 8003e7e:	683a      	ldr	r2, [r7, #0]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d001      	beq.n	8003e88 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e036      	b.n	8003ef6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0304 	and.w	r3, r3, #4
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d008      	beq.n	8003ea6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e94:	4b1b      	ldr	r3, [pc, #108]	; (8003f04 <HAL_RCC_ClockConfig+0x1b4>)
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	4918      	ldr	r1, [pc, #96]	; (8003f04 <HAL_RCC_ClockConfig+0x1b4>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0308 	and.w	r3, r3, #8
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d009      	beq.n	8003ec6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003eb2:	4b14      	ldr	r3, [pc, #80]	; (8003f04 <HAL_RCC_ClockConfig+0x1b4>)
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	00db      	lsls	r3, r3, #3
 8003ec0:	4910      	ldr	r1, [pc, #64]	; (8003f04 <HAL_RCC_ClockConfig+0x1b4>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ec6:	f000 f825 	bl	8003f14 <HAL_RCC_GetSysClockFreq>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	4b0d      	ldr	r3, [pc, #52]	; (8003f04 <HAL_RCC_ClockConfig+0x1b4>)
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	091b      	lsrs	r3, r3, #4
 8003ed2:	f003 030f 	and.w	r3, r3, #15
 8003ed6:	490c      	ldr	r1, [pc, #48]	; (8003f08 <HAL_RCC_ClockConfig+0x1b8>)
 8003ed8:	5ccb      	ldrb	r3, [r1, r3]
 8003eda:	f003 031f 	and.w	r3, r3, #31
 8003ede:	fa22 f303 	lsr.w	r3, r2, r3
 8003ee2:	4a0a      	ldr	r2, [pc, #40]	; (8003f0c <HAL_RCC_ClockConfig+0x1bc>)
 8003ee4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003ee6:	4b0a      	ldr	r3, [pc, #40]	; (8003f10 <HAL_RCC_ClockConfig+0x1c0>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7fc ff30 	bl	8000d50 <HAL_InitTick>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	72fb      	strb	r3, [r7, #11]

  return status;
 8003ef4:	7afb      	ldrb	r3, [r7, #11]
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3710      	adds	r7, #16
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	40022000 	.word	0x40022000
 8003f04:	40021000 	.word	0x40021000
 8003f08:	08009468 	.word	0x08009468
 8003f0c:	20000000 	.word	0x20000000
 8003f10:	20000004 	.word	0x20000004

08003f14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b089      	sub	sp, #36	; 0x24
 8003f18:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	61fb      	str	r3, [r7, #28]
 8003f1e:	2300      	movs	r3, #0
 8003f20:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f22:	4b3e      	ldr	r3, [pc, #248]	; (800401c <HAL_RCC_GetSysClockFreq+0x108>)
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f003 030c 	and.w	r3, r3, #12
 8003f2a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f2c:	4b3b      	ldr	r3, [pc, #236]	; (800401c <HAL_RCC_GetSysClockFreq+0x108>)
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	f003 0303 	and.w	r3, r3, #3
 8003f34:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d005      	beq.n	8003f48 <HAL_RCC_GetSysClockFreq+0x34>
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	2b0c      	cmp	r3, #12
 8003f40:	d121      	bne.n	8003f86 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d11e      	bne.n	8003f86 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003f48:	4b34      	ldr	r3, [pc, #208]	; (800401c <HAL_RCC_GetSysClockFreq+0x108>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0308 	and.w	r3, r3, #8
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d107      	bne.n	8003f64 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003f54:	4b31      	ldr	r3, [pc, #196]	; (800401c <HAL_RCC_GetSysClockFreq+0x108>)
 8003f56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f5a:	0a1b      	lsrs	r3, r3, #8
 8003f5c:	f003 030f 	and.w	r3, r3, #15
 8003f60:	61fb      	str	r3, [r7, #28]
 8003f62:	e005      	b.n	8003f70 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003f64:	4b2d      	ldr	r3, [pc, #180]	; (800401c <HAL_RCC_GetSysClockFreq+0x108>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	091b      	lsrs	r3, r3, #4
 8003f6a:	f003 030f 	and.w	r3, r3, #15
 8003f6e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003f70:	4a2b      	ldr	r2, [pc, #172]	; (8004020 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f78:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d10d      	bne.n	8003f9c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f84:	e00a      	b.n	8003f9c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	2b04      	cmp	r3, #4
 8003f8a:	d102      	bne.n	8003f92 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003f8c:	4b25      	ldr	r3, [pc, #148]	; (8004024 <HAL_RCC_GetSysClockFreq+0x110>)
 8003f8e:	61bb      	str	r3, [r7, #24]
 8003f90:	e004      	b.n	8003f9c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	2b08      	cmp	r3, #8
 8003f96:	d101      	bne.n	8003f9c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003f98:	4b23      	ldr	r3, [pc, #140]	; (8004028 <HAL_RCC_GetSysClockFreq+0x114>)
 8003f9a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	2b0c      	cmp	r3, #12
 8003fa0:	d134      	bne.n	800400c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003fa2:	4b1e      	ldr	r3, [pc, #120]	; (800401c <HAL_RCC_GetSysClockFreq+0x108>)
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	f003 0303 	and.w	r3, r3, #3
 8003faa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d003      	beq.n	8003fba <HAL_RCC_GetSysClockFreq+0xa6>
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	2b03      	cmp	r3, #3
 8003fb6:	d003      	beq.n	8003fc0 <HAL_RCC_GetSysClockFreq+0xac>
 8003fb8:	e005      	b.n	8003fc6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003fba:	4b1a      	ldr	r3, [pc, #104]	; (8004024 <HAL_RCC_GetSysClockFreq+0x110>)
 8003fbc:	617b      	str	r3, [r7, #20]
      break;
 8003fbe:	e005      	b.n	8003fcc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003fc0:	4b19      	ldr	r3, [pc, #100]	; (8004028 <HAL_RCC_GetSysClockFreq+0x114>)
 8003fc2:	617b      	str	r3, [r7, #20]
      break;
 8003fc4:	e002      	b.n	8003fcc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	617b      	str	r3, [r7, #20]
      break;
 8003fca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003fcc:	4b13      	ldr	r3, [pc, #76]	; (800401c <HAL_RCC_GetSysClockFreq+0x108>)
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	091b      	lsrs	r3, r3, #4
 8003fd2:	f003 0307 	and.w	r3, r3, #7
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003fda:	4b10      	ldr	r3, [pc, #64]	; (800401c <HAL_RCC_GetSysClockFreq+0x108>)
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	0a1b      	lsrs	r3, r3, #8
 8003fe0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fe4:	697a      	ldr	r2, [r7, #20]
 8003fe6:	fb02 f203 	mul.w	r2, r2, r3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ff0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ff2:	4b0a      	ldr	r3, [pc, #40]	; (800401c <HAL_RCC_GetSysClockFreq+0x108>)
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	0e5b      	lsrs	r3, r3, #25
 8003ff8:	f003 0303 	and.w	r3, r3, #3
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	005b      	lsls	r3, r3, #1
 8004000:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	fbb2 f3f3 	udiv	r3, r2, r3
 800400a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800400c:	69bb      	ldr	r3, [r7, #24]
}
 800400e:	4618      	mov	r0, r3
 8004010:	3724      	adds	r7, #36	; 0x24
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr
 800401a:	bf00      	nop
 800401c:	40021000 	.word	0x40021000
 8004020:	08009480 	.word	0x08009480
 8004024:	00f42400 	.word	0x00f42400
 8004028:	01312d00 	.word	0x01312d00

0800402c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800402c:	b480      	push	{r7}
 800402e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004030:	4b03      	ldr	r3, [pc, #12]	; (8004040 <HAL_RCC_GetHCLKFreq+0x14>)
 8004032:	681b      	ldr	r3, [r3, #0]
}
 8004034:	4618      	mov	r0, r3
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	20000000 	.word	0x20000000

08004044 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004048:	f7ff fff0 	bl	800402c <HAL_RCC_GetHCLKFreq>
 800404c:	4602      	mov	r2, r0
 800404e:	4b06      	ldr	r3, [pc, #24]	; (8004068 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	0a1b      	lsrs	r3, r3, #8
 8004054:	f003 0307 	and.w	r3, r3, #7
 8004058:	4904      	ldr	r1, [pc, #16]	; (800406c <HAL_RCC_GetPCLK1Freq+0x28>)
 800405a:	5ccb      	ldrb	r3, [r1, r3]
 800405c:	f003 031f 	and.w	r3, r3, #31
 8004060:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004064:	4618      	mov	r0, r3
 8004066:	bd80      	pop	{r7, pc}
 8004068:	40021000 	.word	0x40021000
 800406c:	08009478 	.word	0x08009478

08004070 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004074:	f7ff ffda 	bl	800402c <HAL_RCC_GetHCLKFreq>
 8004078:	4602      	mov	r2, r0
 800407a:	4b06      	ldr	r3, [pc, #24]	; (8004094 <HAL_RCC_GetPCLK2Freq+0x24>)
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	0adb      	lsrs	r3, r3, #11
 8004080:	f003 0307 	and.w	r3, r3, #7
 8004084:	4904      	ldr	r1, [pc, #16]	; (8004098 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004086:	5ccb      	ldrb	r3, [r1, r3]
 8004088:	f003 031f 	and.w	r3, r3, #31
 800408c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004090:	4618      	mov	r0, r3
 8004092:	bd80      	pop	{r7, pc}
 8004094:	40021000 	.word	0x40021000
 8004098:	08009478 	.word	0x08009478

0800409c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b086      	sub	sp, #24
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80040a4:	2300      	movs	r3, #0
 80040a6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80040a8:	4b2a      	ldr	r3, [pc, #168]	; (8004154 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d003      	beq.n	80040bc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80040b4:	f7ff f9c8 	bl	8003448 <HAL_PWREx_GetVoltageRange>
 80040b8:	6178      	str	r0, [r7, #20]
 80040ba:	e014      	b.n	80040e6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80040bc:	4b25      	ldr	r3, [pc, #148]	; (8004154 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040c0:	4a24      	ldr	r2, [pc, #144]	; (8004154 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040c6:	6593      	str	r3, [r2, #88]	; 0x58
 80040c8:	4b22      	ldr	r3, [pc, #136]	; (8004154 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040d0:	60fb      	str	r3, [r7, #12]
 80040d2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80040d4:	f7ff f9b8 	bl	8003448 <HAL_PWREx_GetVoltageRange>
 80040d8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80040da:	4b1e      	ldr	r3, [pc, #120]	; (8004154 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040de:	4a1d      	ldr	r2, [pc, #116]	; (8004154 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040e4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040ec:	d10b      	bne.n	8004106 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2b80      	cmp	r3, #128	; 0x80
 80040f2:	d919      	bls.n	8004128 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2ba0      	cmp	r3, #160	; 0xa0
 80040f8:	d902      	bls.n	8004100 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80040fa:	2302      	movs	r3, #2
 80040fc:	613b      	str	r3, [r7, #16]
 80040fe:	e013      	b.n	8004128 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004100:	2301      	movs	r3, #1
 8004102:	613b      	str	r3, [r7, #16]
 8004104:	e010      	b.n	8004128 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2b80      	cmp	r3, #128	; 0x80
 800410a:	d902      	bls.n	8004112 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800410c:	2303      	movs	r3, #3
 800410e:	613b      	str	r3, [r7, #16]
 8004110:	e00a      	b.n	8004128 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2b80      	cmp	r3, #128	; 0x80
 8004116:	d102      	bne.n	800411e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004118:	2302      	movs	r3, #2
 800411a:	613b      	str	r3, [r7, #16]
 800411c:	e004      	b.n	8004128 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2b70      	cmp	r3, #112	; 0x70
 8004122:	d101      	bne.n	8004128 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004124:	2301      	movs	r3, #1
 8004126:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004128:	4b0b      	ldr	r3, [pc, #44]	; (8004158 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f023 0207 	bic.w	r2, r3, #7
 8004130:	4909      	ldr	r1, [pc, #36]	; (8004158 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	4313      	orrs	r3, r2
 8004136:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004138:	4b07      	ldr	r3, [pc, #28]	; (8004158 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0307 	and.w	r3, r3, #7
 8004140:	693a      	ldr	r2, [r7, #16]
 8004142:	429a      	cmp	r2, r3
 8004144:	d001      	beq.n	800414a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e000      	b.n	800414c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	3718      	adds	r7, #24
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	40021000 	.word	0x40021000
 8004158:	40022000 	.word	0x40022000

0800415c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b086      	sub	sp, #24
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004164:	2300      	movs	r3, #0
 8004166:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004168:	2300      	movs	r3, #0
 800416a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004174:	2b00      	cmp	r3, #0
 8004176:	d031      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800417c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004180:	d01a      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004182:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004186:	d814      	bhi.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004188:	2b00      	cmp	r3, #0
 800418a:	d009      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800418c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004190:	d10f      	bne.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004192:	4b5d      	ldr	r3, [pc, #372]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	4a5c      	ldr	r2, [pc, #368]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800419c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800419e:	e00c      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	3304      	adds	r3, #4
 80041a4:	2100      	movs	r1, #0
 80041a6:	4618      	mov	r0, r3
 80041a8:	f000 fa12 	bl	80045d0 <RCCEx_PLLSAI1_Config>
 80041ac:	4603      	mov	r3, r0
 80041ae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041b0:	e003      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	74fb      	strb	r3, [r7, #19]
      break;
 80041b6:	e000      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80041b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041ba:	7cfb      	ldrb	r3, [r7, #19]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d10b      	bne.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80041c0:	4b51      	ldr	r3, [pc, #324]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041ce:	494e      	ldr	r1, [pc, #312]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80041d6:	e001      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041d8:	7cfb      	ldrb	r3, [r7, #19]
 80041da:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	f000 809e 	beq.w	8004326 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041ea:	2300      	movs	r3, #0
 80041ec:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80041ee:	4b46      	ldr	r3, [pc, #280]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d101      	bne.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80041fa:	2301      	movs	r3, #1
 80041fc:	e000      	b.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80041fe:	2300      	movs	r3, #0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00d      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004204:	4b40      	ldr	r3, [pc, #256]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004208:	4a3f      	ldr	r2, [pc, #252]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800420a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800420e:	6593      	str	r3, [r2, #88]	; 0x58
 8004210:	4b3d      	ldr	r3, [pc, #244]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004214:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004218:	60bb      	str	r3, [r7, #8]
 800421a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800421c:	2301      	movs	r3, #1
 800421e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004220:	4b3a      	ldr	r3, [pc, #232]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a39      	ldr	r2, [pc, #228]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004226:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800422a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800422c:	f7fc fde0 	bl	8000df0 <HAL_GetTick>
 8004230:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004232:	e009      	b.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004234:	f7fc fddc 	bl	8000df0 <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	2b02      	cmp	r3, #2
 8004240:	d902      	bls.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	74fb      	strb	r3, [r7, #19]
        break;
 8004246:	e005      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004248:	4b30      	ldr	r3, [pc, #192]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004250:	2b00      	cmp	r3, #0
 8004252:	d0ef      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004254:	7cfb      	ldrb	r3, [r7, #19]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d15a      	bne.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800425a:	4b2b      	ldr	r3, [pc, #172]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800425c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004260:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004264:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d01e      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004270:	697a      	ldr	r2, [r7, #20]
 8004272:	429a      	cmp	r2, r3
 8004274:	d019      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004276:	4b24      	ldr	r3, [pc, #144]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004278:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800427c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004280:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004282:	4b21      	ldr	r3, [pc, #132]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004288:	4a1f      	ldr	r2, [pc, #124]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800428a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800428e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004292:	4b1d      	ldr	r3, [pc, #116]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004298:	4a1b      	ldr	r2, [pc, #108]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800429a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800429e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80042a2:	4a19      	ldr	r2, [pc, #100]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	f003 0301 	and.w	r3, r3, #1
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d016      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b4:	f7fc fd9c 	bl	8000df0 <HAL_GetTick>
 80042b8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042ba:	e00b      	b.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042bc:	f7fc fd98 	bl	8000df0 <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d902      	bls.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	74fb      	strb	r3, [r7, #19]
            break;
 80042d2:	e006      	b.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042d4:	4b0c      	ldr	r3, [pc, #48]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d0ec      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80042e2:	7cfb      	ldrb	r3, [r7, #19]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d10b      	bne.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042e8:	4b07      	ldr	r3, [pc, #28]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042f6:	4904      	ldr	r1, [pc, #16]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80042fe:	e009      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004300:	7cfb      	ldrb	r3, [r7, #19]
 8004302:	74bb      	strb	r3, [r7, #18]
 8004304:	e006      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004306:	bf00      	nop
 8004308:	40021000 	.word	0x40021000
 800430c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004310:	7cfb      	ldrb	r3, [r7, #19]
 8004312:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004314:	7c7b      	ldrb	r3, [r7, #17]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d105      	bne.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800431a:	4bac      	ldr	r3, [pc, #688]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800431c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800431e:	4aab      	ldr	r2, [pc, #684]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004320:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004324:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0301 	and.w	r3, r3, #1
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00a      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004332:	4ba6      	ldr	r3, [pc, #664]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004338:	f023 0203 	bic.w	r2, r3, #3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a1b      	ldr	r3, [r3, #32]
 8004340:	49a2      	ldr	r1, [pc, #648]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004342:	4313      	orrs	r3, r2
 8004344:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0302 	and.w	r3, r3, #2
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00a      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004354:	4b9d      	ldr	r3, [pc, #628]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800435a:	f023 020c 	bic.w	r2, r3, #12
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004362:	499a      	ldr	r1, [pc, #616]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004364:	4313      	orrs	r3, r2
 8004366:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0304 	and.w	r3, r3, #4
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00a      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004376:	4b95      	ldr	r3, [pc, #596]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800437c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004384:	4991      	ldr	r1, [pc, #580]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004386:	4313      	orrs	r3, r2
 8004388:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0308 	and.w	r3, r3, #8
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00a      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004398:	4b8c      	ldr	r3, [pc, #560]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800439a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800439e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a6:	4989      	ldr	r1, [pc, #548]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80043a8:	4313      	orrs	r3, r2
 80043aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0320 	and.w	r3, r3, #32
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00a      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80043ba:	4b84      	ldr	r3, [pc, #528]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80043bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c8:	4980      	ldr	r1, [pc, #512]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d00a      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043dc:	4b7b      	ldr	r3, [pc, #492]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80043de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043e2:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ea:	4978      	ldr	r1, [pc, #480]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00a      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80043fe:	4b73      	ldr	r3, [pc, #460]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004404:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800440c:	496f      	ldr	r1, [pc, #444]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800440e:	4313      	orrs	r3, r2
 8004410:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800441c:	2b00      	cmp	r3, #0
 800441e:	d00a      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004420:	4b6a      	ldr	r3, [pc, #424]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004426:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800442e:	4967      	ldr	r1, [pc, #412]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004430:	4313      	orrs	r3, r2
 8004432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00a      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004442:	4b62      	ldr	r3, [pc, #392]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004448:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004450:	495e      	ldr	r1, [pc, #376]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004452:	4313      	orrs	r3, r2
 8004454:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00a      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004464:	4b59      	ldr	r3, [pc, #356]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800446a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004472:	4956      	ldr	r1, [pc, #344]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004474:	4313      	orrs	r3, r2
 8004476:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00a      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004486:	4b51      	ldr	r3, [pc, #324]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004488:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800448c:	f023 0203 	bic.w	r2, r3, #3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004494:	494d      	ldr	r1, [pc, #308]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004496:	4313      	orrs	r3, r2
 8004498:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d028      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80044a8:	4b48      	ldr	r3, [pc, #288]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80044aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044b6:	4945      	ldr	r1, [pc, #276]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80044b8:	4313      	orrs	r3, r2
 80044ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044c6:	d106      	bne.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044c8:	4b40      	ldr	r3, [pc, #256]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	4a3f      	ldr	r2, [pc, #252]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80044ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044d2:	60d3      	str	r3, [r2, #12]
 80044d4:	e011      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044de:	d10c      	bne.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	3304      	adds	r3, #4
 80044e4:	2101      	movs	r1, #1
 80044e6:	4618      	mov	r0, r3
 80044e8:	f000 f872 	bl	80045d0 <RCCEx_PLLSAI1_Config>
 80044ec:	4603      	mov	r3, r0
 80044ee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80044f0:	7cfb      	ldrb	r3, [r7, #19]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* set overall return value */
        status = ret;
 80044f6:	7cfb      	ldrb	r3, [r7, #19]
 80044f8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d028      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004506:	4b31      	ldr	r3, [pc, #196]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800450c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004514:	492d      	ldr	r1, [pc, #180]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004516:	4313      	orrs	r3, r2
 8004518:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004520:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004524:	d106      	bne.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004526:	4b29      	ldr	r3, [pc, #164]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	4a28      	ldr	r2, [pc, #160]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800452c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004530:	60d3      	str	r3, [r2, #12]
 8004532:	e011      	b.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004538:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800453c:	d10c      	bne.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	3304      	adds	r3, #4
 8004542:	2101      	movs	r1, #1
 8004544:	4618      	mov	r0, r3
 8004546:	f000 f843 	bl	80045d0 <RCCEx_PLLSAI1_Config>
 800454a:	4603      	mov	r3, r0
 800454c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800454e:	7cfb      	ldrb	r3, [r7, #19]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d001      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8004554:	7cfb      	ldrb	r3, [r7, #19]
 8004556:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d01c      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004564:	4b19      	ldr	r3, [pc, #100]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800456a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004572:	4916      	ldr	r1, [pc, #88]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004574:	4313      	orrs	r3, r2
 8004576:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800457e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004582:	d10c      	bne.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	3304      	adds	r3, #4
 8004588:	2102      	movs	r1, #2
 800458a:	4618      	mov	r0, r3
 800458c:	f000 f820 	bl	80045d0 <RCCEx_PLLSAI1_Config>
 8004590:	4603      	mov	r3, r0
 8004592:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004594:	7cfb      	ldrb	r3, [r7, #19]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d001      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x442>
      {
        /* set overall return value */
        status = ret;
 800459a:	7cfb      	ldrb	r3, [r7, #19]
 800459c:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00a      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x464>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80045aa:	4b08      	ldr	r3, [pc, #32]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80045ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045b8:	4904      	ldr	r1, [pc, #16]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80045c0:	7cbb      	ldrb	r3, [r7, #18]
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3718      	adds	r7, #24
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	40021000 	.word	0x40021000

080045d0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045da:	2300      	movs	r3, #0
 80045dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80045de:	4b74      	ldr	r3, [pc, #464]	; (80047b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	f003 0303 	and.w	r3, r3, #3
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d018      	beq.n	800461c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80045ea:	4b71      	ldr	r3, [pc, #452]	; (80047b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	f003 0203 	and.w	r2, r3, #3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d10d      	bne.n	8004616 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
       ||
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d009      	beq.n	8004616 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004602:	4b6b      	ldr	r3, [pc, #428]	; (80047b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	091b      	lsrs	r3, r3, #4
 8004608:	f003 0307 	and.w	r3, r3, #7
 800460c:	1c5a      	adds	r2, r3, #1
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	685b      	ldr	r3, [r3, #4]
       ||
 8004612:	429a      	cmp	r2, r3
 8004614:	d047      	beq.n	80046a6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	73fb      	strb	r3, [r7, #15]
 800461a:	e044      	b.n	80046a6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2b03      	cmp	r3, #3
 8004622:	d018      	beq.n	8004656 <RCCEx_PLLSAI1_Config+0x86>
 8004624:	2b03      	cmp	r3, #3
 8004626:	d825      	bhi.n	8004674 <RCCEx_PLLSAI1_Config+0xa4>
 8004628:	2b01      	cmp	r3, #1
 800462a:	d002      	beq.n	8004632 <RCCEx_PLLSAI1_Config+0x62>
 800462c:	2b02      	cmp	r3, #2
 800462e:	d009      	beq.n	8004644 <RCCEx_PLLSAI1_Config+0x74>
 8004630:	e020      	b.n	8004674 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004632:	4b5f      	ldr	r3, [pc, #380]	; (80047b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	2b00      	cmp	r3, #0
 800463c:	d11d      	bne.n	800467a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004642:	e01a      	b.n	800467a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004644:	4b5a      	ldr	r3, [pc, #360]	; (80047b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800464c:	2b00      	cmp	r3, #0
 800464e:	d116      	bne.n	800467e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004654:	e013      	b.n	800467e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004656:	4b56      	ldr	r3, [pc, #344]	; (80047b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d10f      	bne.n	8004682 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004662:	4b53      	ldr	r3, [pc, #332]	; (80047b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d109      	bne.n	8004682 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004672:	e006      	b.n	8004682 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	73fb      	strb	r3, [r7, #15]
      break;
 8004678:	e004      	b.n	8004684 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800467a:	bf00      	nop
 800467c:	e002      	b.n	8004684 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800467e:	bf00      	nop
 8004680:	e000      	b.n	8004684 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004682:	bf00      	nop
    }

    if(status == HAL_OK)
 8004684:	7bfb      	ldrb	r3, [r7, #15]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d10d      	bne.n	80046a6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800468a:	4b49      	ldr	r3, [pc, #292]	; (80047b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6819      	ldr	r1, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	3b01      	subs	r3, #1
 800469c:	011b      	lsls	r3, r3, #4
 800469e:	430b      	orrs	r3, r1
 80046a0:	4943      	ldr	r1, [pc, #268]	; (80047b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80046a6:	7bfb      	ldrb	r3, [r7, #15]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d17c      	bne.n	80047a6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80046ac:	4b40      	ldr	r3, [pc, #256]	; (80047b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a3f      	ldr	r2, [pc, #252]	; (80047b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80046b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046b8:	f7fc fb9a 	bl	8000df0 <HAL_GetTick>
 80046bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80046be:	e009      	b.n	80046d4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80046c0:	f7fc fb96 	bl	8000df0 <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d902      	bls.n	80046d4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	73fb      	strb	r3, [r7, #15]
        break;
 80046d2:	e005      	b.n	80046e0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80046d4:	4b36      	ldr	r3, [pc, #216]	; (80047b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d1ef      	bne.n	80046c0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80046e0:	7bfb      	ldrb	r3, [r7, #15]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d15f      	bne.n	80047a6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d110      	bne.n	800470e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80046ec:	4b30      	ldr	r3, [pc, #192]	; (80047b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80046f4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	6892      	ldr	r2, [r2, #8]
 80046fc:	0211      	lsls	r1, r2, #8
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	68d2      	ldr	r2, [r2, #12]
 8004702:	06d2      	lsls	r2, r2, #27
 8004704:	430a      	orrs	r2, r1
 8004706:	492a      	ldr	r1, [pc, #168]	; (80047b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004708:	4313      	orrs	r3, r2
 800470a:	610b      	str	r3, [r1, #16]
 800470c:	e027      	b.n	800475e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d112      	bne.n	800473a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004714:	4b26      	ldr	r3, [pc, #152]	; (80047b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004716:	691b      	ldr	r3, [r3, #16]
 8004718:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800471c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	6892      	ldr	r2, [r2, #8]
 8004724:	0211      	lsls	r1, r2, #8
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	6912      	ldr	r2, [r2, #16]
 800472a:	0852      	lsrs	r2, r2, #1
 800472c:	3a01      	subs	r2, #1
 800472e:	0552      	lsls	r2, r2, #21
 8004730:	430a      	orrs	r2, r1
 8004732:	491f      	ldr	r1, [pc, #124]	; (80047b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004734:	4313      	orrs	r3, r2
 8004736:	610b      	str	r3, [r1, #16]
 8004738:	e011      	b.n	800475e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800473a:	4b1d      	ldr	r3, [pc, #116]	; (80047b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004742:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	6892      	ldr	r2, [r2, #8]
 800474a:	0211      	lsls	r1, r2, #8
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	6952      	ldr	r2, [r2, #20]
 8004750:	0852      	lsrs	r2, r2, #1
 8004752:	3a01      	subs	r2, #1
 8004754:	0652      	lsls	r2, r2, #25
 8004756:	430a      	orrs	r2, r1
 8004758:	4915      	ldr	r1, [pc, #84]	; (80047b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800475a:	4313      	orrs	r3, r2
 800475c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800475e:	4b14      	ldr	r3, [pc, #80]	; (80047b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a13      	ldr	r2, [pc, #76]	; (80047b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004764:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004768:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800476a:	f7fc fb41 	bl	8000df0 <HAL_GetTick>
 800476e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004770:	e009      	b.n	8004786 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004772:	f7fc fb3d 	bl	8000df0 <HAL_GetTick>
 8004776:	4602      	mov	r2, r0
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	2b02      	cmp	r3, #2
 800477e:	d902      	bls.n	8004786 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	73fb      	strb	r3, [r7, #15]
          break;
 8004784:	e005      	b.n	8004792 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004786:	4b0a      	ldr	r3, [pc, #40]	; (80047b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d0ef      	beq.n	8004772 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004792:	7bfb      	ldrb	r3, [r7, #15]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d106      	bne.n	80047a6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004798:	4b05      	ldr	r3, [pc, #20]	; (80047b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800479a:	691a      	ldr	r2, [r3, #16]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	4903      	ldr	r1, [pc, #12]	; (80047b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047a2:	4313      	orrs	r3, r2
 80047a4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80047a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3710      	adds	r7, #16
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	40021000 	.word	0x40021000

080047b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d101      	bne.n	80047c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e049      	b.n	800485a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d106      	bne.n	80047e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f7fc f9be 	bl	8000b5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2202      	movs	r2, #2
 80047e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	3304      	adds	r3, #4
 80047f0:	4619      	mov	r1, r3
 80047f2:	4610      	mov	r0, r2
 80047f4:	f000 f9e4 	bl	8004bc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	3708      	adds	r7, #8
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
	...

08004864 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004864:	b480      	push	{r7}
 8004866:	b085      	sub	sp, #20
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004872:	b2db      	uxtb	r3, r3
 8004874:	2b01      	cmp	r3, #1
 8004876:	d001      	beq.n	800487c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e040      	b.n	80048fe <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2202      	movs	r2, #2
 8004880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68da      	ldr	r2, [r3, #12]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f042 0201 	orr.w	r2, r2, #1
 8004892:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a1c      	ldr	r2, [pc, #112]	; (800490c <HAL_TIM_Base_Start_IT+0xa8>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d00e      	beq.n	80048bc <HAL_TIM_Base_Start_IT+0x58>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048a6:	d009      	beq.n	80048bc <HAL_TIM_Base_Start_IT+0x58>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a18      	ldr	r2, [pc, #96]	; (8004910 <HAL_TIM_Base_Start_IT+0xac>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d004      	beq.n	80048bc <HAL_TIM_Base_Start_IT+0x58>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a17      	ldr	r2, [pc, #92]	; (8004914 <HAL_TIM_Base_Start_IT+0xb0>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d115      	bne.n	80048e8 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	689a      	ldr	r2, [r3, #8]
 80048c2:	4b15      	ldr	r3, [pc, #84]	; (8004918 <HAL_TIM_Base_Start_IT+0xb4>)
 80048c4:	4013      	ands	r3, r2
 80048c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2b06      	cmp	r3, #6
 80048cc:	d015      	beq.n	80048fa <HAL_TIM_Base_Start_IT+0x96>
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048d4:	d011      	beq.n	80048fa <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f042 0201 	orr.w	r2, r2, #1
 80048e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048e6:	e008      	b.n	80048fa <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f042 0201 	orr.w	r2, r2, #1
 80048f6:	601a      	str	r2, [r3, #0]
 80048f8:	e000      	b.n	80048fc <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048fa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3714      	adds	r7, #20
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	40012c00 	.word	0x40012c00
 8004910:	40000400 	.word	0x40000400
 8004914:	40014000 	.word	0x40014000
 8004918:	00010007 	.word	0x00010007

0800491c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b082      	sub	sp, #8
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	2b02      	cmp	r3, #2
 8004930:	d122      	bne.n	8004978 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	f003 0302 	and.w	r3, r3, #2
 800493c:	2b02      	cmp	r3, #2
 800493e:	d11b      	bne.n	8004978 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f06f 0202 	mvn.w	r2, #2
 8004948:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2201      	movs	r2, #1
 800494e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	699b      	ldr	r3, [r3, #24]
 8004956:	f003 0303 	and.w	r3, r3, #3
 800495a:	2b00      	cmp	r3, #0
 800495c:	d003      	beq.n	8004966 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 f90f 	bl	8004b82 <HAL_TIM_IC_CaptureCallback>
 8004964:	e005      	b.n	8004972 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 f901 	bl	8004b6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f000 f912 	bl	8004b96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	f003 0304 	and.w	r3, r3, #4
 8004982:	2b04      	cmp	r3, #4
 8004984:	d122      	bne.n	80049cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	f003 0304 	and.w	r3, r3, #4
 8004990:	2b04      	cmp	r3, #4
 8004992:	d11b      	bne.n	80049cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f06f 0204 	mvn.w	r2, #4
 800499c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2202      	movs	r2, #2
 80049a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	699b      	ldr	r3, [r3, #24]
 80049aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d003      	beq.n	80049ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 f8e5 	bl	8004b82 <HAL_TIM_IC_CaptureCallback>
 80049b8:	e005      	b.n	80049c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 f8d7 	bl	8004b6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f000 f8e8 	bl	8004b96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	f003 0308 	and.w	r3, r3, #8
 80049d6:	2b08      	cmp	r3, #8
 80049d8:	d122      	bne.n	8004a20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	f003 0308 	and.w	r3, r3, #8
 80049e4:	2b08      	cmp	r3, #8
 80049e6:	d11b      	bne.n	8004a20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f06f 0208 	mvn.w	r2, #8
 80049f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2204      	movs	r2, #4
 80049f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	69db      	ldr	r3, [r3, #28]
 80049fe:	f003 0303 	and.w	r3, r3, #3
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d003      	beq.n	8004a0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 f8bb 	bl	8004b82 <HAL_TIM_IC_CaptureCallback>
 8004a0c:	e005      	b.n	8004a1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 f8ad 	bl	8004b6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f000 f8be 	bl	8004b96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	f003 0310 	and.w	r3, r3, #16
 8004a2a:	2b10      	cmp	r3, #16
 8004a2c:	d122      	bne.n	8004a74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	f003 0310 	and.w	r3, r3, #16
 8004a38:	2b10      	cmp	r3, #16
 8004a3a:	d11b      	bne.n	8004a74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f06f 0210 	mvn.w	r2, #16
 8004a44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2208      	movs	r2, #8
 8004a4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	69db      	ldr	r3, [r3, #28]
 8004a52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d003      	beq.n	8004a62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 f891 	bl	8004b82 <HAL_TIM_IC_CaptureCallback>
 8004a60:	e005      	b.n	8004a6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 f883 	bl	8004b6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 f894 	bl	8004b96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	f003 0301 	and.w	r3, r3, #1
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d10e      	bne.n	8004aa0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	f003 0301 	and.w	r3, r3, #1
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d107      	bne.n	8004aa0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f06f 0201 	mvn.w	r2, #1
 8004a98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 f85d 	bl	8004b5a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aaa:	2b80      	cmp	r3, #128	; 0x80
 8004aac:	d10e      	bne.n	8004acc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ab8:	2b80      	cmp	r3, #128	; 0x80
 8004aba:	d107      	bne.n	8004acc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ac4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 f8f2 	bl	8004cb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ad6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ada:	d10e      	bne.n	8004afa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ae6:	2b80      	cmp	r3, #128	; 0x80
 8004ae8:	d107      	bne.n	8004afa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004af2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 f8e5 	bl	8004cc4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b04:	2b40      	cmp	r3, #64	; 0x40
 8004b06:	d10e      	bne.n	8004b26 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b12:	2b40      	cmp	r3, #64	; 0x40
 8004b14:	d107      	bne.n	8004b26 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f000 f842 	bl	8004baa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	f003 0320 	and.w	r3, r3, #32
 8004b30:	2b20      	cmp	r3, #32
 8004b32:	d10e      	bne.n	8004b52 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	f003 0320 	and.w	r3, r3, #32
 8004b3e:	2b20      	cmp	r3, #32
 8004b40:	d107      	bne.n	8004b52 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f06f 0220 	mvn.w	r2, #32
 8004b4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f000 f8a5 	bl	8004c9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b52:	bf00      	nop
 8004b54:	3708      	adds	r7, #8
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}

08004b5a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b5a:	b480      	push	{r7}
 8004b5c:	b083      	sub	sp, #12
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004b62:	bf00      	nop
 8004b64:	370c      	adds	r7, #12
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr

08004b6e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b6e:	b480      	push	{r7}
 8004b70:	b083      	sub	sp, #12
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b76:	bf00      	nop
 8004b78:	370c      	adds	r7, #12
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr

08004b82 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b82:	b480      	push	{r7}
 8004b84:	b083      	sub	sp, #12
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b8a:	bf00      	nop
 8004b8c:	370c      	adds	r7, #12
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr

08004b96 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b96:	b480      	push	{r7}
 8004b98:	b083      	sub	sp, #12
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b9e:	bf00      	nop
 8004ba0:	370c      	adds	r7, #12
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr

08004baa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004baa:	b480      	push	{r7}
 8004bac:	b083      	sub	sp, #12
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004bb2:	bf00      	nop
 8004bb4:	370c      	adds	r7, #12
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
	...

08004bc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b085      	sub	sp, #20
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4a2e      	ldr	r2, [pc, #184]	; (8004c8c <TIM_Base_SetConfig+0xcc>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d007      	beq.n	8004be8 <TIM_Base_SetConfig+0x28>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bde:	d003      	beq.n	8004be8 <TIM_Base_SetConfig+0x28>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a2b      	ldr	r2, [pc, #172]	; (8004c90 <TIM_Base_SetConfig+0xd0>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d108      	bne.n	8004bfa <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	68fa      	ldr	r2, [r7, #12]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a23      	ldr	r2, [pc, #140]	; (8004c8c <TIM_Base_SetConfig+0xcc>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d00f      	beq.n	8004c22 <TIM_Base_SetConfig+0x62>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c08:	d00b      	beq.n	8004c22 <TIM_Base_SetConfig+0x62>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a20      	ldr	r2, [pc, #128]	; (8004c90 <TIM_Base_SetConfig+0xd0>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d007      	beq.n	8004c22 <TIM_Base_SetConfig+0x62>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a1f      	ldr	r2, [pc, #124]	; (8004c94 <TIM_Base_SetConfig+0xd4>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d003      	beq.n	8004c22 <TIM_Base_SetConfig+0x62>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a1e      	ldr	r2, [pc, #120]	; (8004c98 <TIM_Base_SetConfig+0xd8>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d108      	bne.n	8004c34 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	689a      	ldr	r2, [r3, #8]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4a0c      	ldr	r2, [pc, #48]	; (8004c8c <TIM_Base_SetConfig+0xcc>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d007      	beq.n	8004c70 <TIM_Base_SetConfig+0xb0>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	4a0c      	ldr	r2, [pc, #48]	; (8004c94 <TIM_Base_SetConfig+0xd4>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d003      	beq.n	8004c70 <TIM_Base_SetConfig+0xb0>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4a0b      	ldr	r2, [pc, #44]	; (8004c98 <TIM_Base_SetConfig+0xd8>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d103      	bne.n	8004c78 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	691a      	ldr	r2, [r3, #16]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	615a      	str	r2, [r3, #20]
}
 8004c7e:	bf00      	nop
 8004c80:	3714      	adds	r7, #20
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop
 8004c8c:	40012c00 	.word	0x40012c00
 8004c90:	40000400 	.word	0x40000400
 8004c94:	40014000 	.word	0x40014000
 8004c98:	40014400 	.word	0x40014400

08004c9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ca4:	bf00      	nop
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004cb8:	bf00      	nop
 8004cba:	370c      	adds	r7, #12
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr

08004cc4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004ccc:	bf00      	nop
 8004cce:	370c      	adds	r7, #12
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d101      	bne.n	8004cea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e040      	b.n	8004d6c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d106      	bne.n	8004d00 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f7fb ff84 	bl	8000c08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2224      	movs	r2, #36	; 0x24
 8004d04:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f022 0201 	bic.w	r2, r2, #1
 8004d14:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 faaa 	bl	8005270 <UART_SetConfig>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d101      	bne.n	8004d26 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e022      	b.n	8004d6c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d002      	beq.n	8004d34 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 fcfa 	bl	8005728 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	685a      	ldr	r2, [r3, #4]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	689a      	ldr	r2, [r3, #8]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f042 0201 	orr.w	r2, r2, #1
 8004d62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f000 fd81 	bl	800586c <UART_CheckIdleState>
 8004d6a:	4603      	mov	r3, r0
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3708      	adds	r7, #8
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b085      	sub	sp, #20
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	4613      	mov	r3, r2
 8004d80:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d86:	2b20      	cmp	r3, #32
 8004d88:	d145      	bne.n	8004e16 <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d002      	beq.n	8004d96 <HAL_UART_Transmit_IT+0x22>
 8004d90:	88fb      	ldrh	r3, [r7, #6]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d101      	bne.n	8004d9a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e03e      	b.n	8004e18 <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d101      	bne.n	8004da8 <HAL_UART_Transmit_IT+0x34>
 8004da4:	2302      	movs	r3, #2
 8004da6:	e037      	b.n	8004e18 <HAL_UART_Transmit_IT+0xa4>
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	68ba      	ldr	r2, [r7, #8]
 8004db4:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	88fa      	ldrh	r2, [r7, #6]
 8004dba:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	88fa      	ldrh	r2, [r7, #6]
 8004dc2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2221      	movs	r2, #33	; 0x21
 8004dd8:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004de2:	d107      	bne.n	8004df4 <HAL_UART_Transmit_IT+0x80>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d103      	bne.n	8004df4 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	4a0d      	ldr	r2, [pc, #52]	; (8004e24 <HAL_UART_Transmit_IT+0xb0>)
 8004df0:	669a      	str	r2, [r3, #104]	; 0x68
 8004df2:	e002      	b.n	8004dfa <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	4a0c      	ldr	r2, [pc, #48]	; (8004e28 <HAL_UART_Transmit_IT+0xb4>)
 8004df8:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004e10:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8004e12:	2300      	movs	r3, #0
 8004e14:	e000      	b.n	8004e18 <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 8004e16:	2302      	movs	r3, #2
  }
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3714      	adds	r7, #20
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr
 8004e24:	08005af5 	.word	0x08005af5
 8004e28:	08005a81 	.word	0x08005a81

08004e2c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b088      	sub	sp, #32
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	69db      	ldr	r3, [r3, #28]
 8004e3a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004e4c:	69fa      	ldr	r2, [r7, #28]
 8004e4e:	f640 030f 	movw	r3, #2063	; 0x80f
 8004e52:	4013      	ands	r3, r2
 8004e54:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d113      	bne.n	8004e84 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	f003 0320 	and.w	r3, r3, #32
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d00e      	beq.n	8004e84 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	f003 0320 	and.w	r3, r3, #32
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d009      	beq.n	8004e84 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	f000 81ce 	beq.w	8005216 <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	4798      	blx	r3
      }
      return;
 8004e82:	e1c8      	b.n	8005216 <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	f000 80e3 	beq.w	8005052 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	f003 0301 	and.w	r3, r3, #1
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d105      	bne.n	8004ea2 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004e96:	69ba      	ldr	r2, [r7, #24]
 8004e98:	4ba6      	ldr	r3, [pc, #664]	; (8005134 <HAL_UART_IRQHandler+0x308>)
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	f000 80d8 	beq.w	8005052 <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	f003 0301 	and.w	r3, r3, #1
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d010      	beq.n	8004ece <HAL_UART_IRQHandler+0xa2>
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00b      	beq.n	8004ece <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ec4:	f043 0201 	orr.w	r2, r3, #1
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	f003 0302 	and.w	r3, r3, #2
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d010      	beq.n	8004efa <HAL_UART_IRQHandler+0xce>
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	f003 0301 	and.w	r3, r3, #1
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d00b      	beq.n	8004efa <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2202      	movs	r2, #2
 8004ee8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ef0:	f043 0204 	orr.w	r2, r3, #4
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	f003 0304 	and.w	r3, r3, #4
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d010      	beq.n	8004f26 <HAL_UART_IRQHandler+0xfa>
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	f003 0301 	and.w	r3, r3, #1
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00b      	beq.n	8004f26 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	2204      	movs	r2, #4
 8004f14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f1c:	f043 0202 	orr.w	r2, r3, #2
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	f003 0308 	and.w	r3, r3, #8
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d015      	beq.n	8004f5c <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	f003 0320 	and.w	r3, r3, #32
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d104      	bne.n	8004f44 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d00b      	beq.n	8004f5c <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2208      	movs	r2, #8
 8004f4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f52:	f043 0208 	orr.w	r2, r3, #8
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d011      	beq.n	8004f8a <HAL_UART_IRQHandler+0x15e>
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d00c      	beq.n	8004f8a <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f80:	f043 0220 	orr.w	r2, r3, #32
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	f000 8142 	beq.w	800521a <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	f003 0320 	and.w	r3, r3, #32
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d00c      	beq.n	8004fba <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	f003 0320 	and.w	r3, r3, #32
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d007      	beq.n	8004fba <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d003      	beq.n	8004fba <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fc0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fcc:	2b40      	cmp	r3, #64	; 0x40
 8004fce:	d004      	beq.n	8004fda <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d031      	beq.n	800503e <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 fd0b 	bl	80059f6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fea:	2b40      	cmp	r3, #64	; 0x40
 8004fec:	d123      	bne.n	8005036 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	689a      	ldr	r2, [r3, #8]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ffc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005002:	2b00      	cmp	r3, #0
 8005004:	d013      	beq.n	800502e <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800500a:	4a4b      	ldr	r2, [pc, #300]	; (8005138 <HAL_UART_IRQHandler+0x30c>)
 800500c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005012:	4618      	mov	r0, r3
 8005014:	f7fc f86b 	bl	80010ee <HAL_DMA_Abort_IT>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d017      	beq.n	800504e <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005028:	4610      	mov	r0, r2
 800502a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800502c:	e00f      	b.n	800504e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 f908 	bl	8005244 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005034:	e00b      	b.n	800504e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 f904 	bl	8005244 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800503c:	e007      	b.n	800504e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 f900 	bl	8005244 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800504c:	e0e5      	b.n	800521a <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800504e:	bf00      	nop
    return;
 8005050:	e0e3      	b.n	800521a <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005056:	2b01      	cmp	r3, #1
 8005058:	f040 80a9 	bne.w	80051ae <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	f003 0310 	and.w	r3, r3, #16
 8005062:	2b00      	cmp	r3, #0
 8005064:	f000 80a3 	beq.w	80051ae <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	f003 0310 	and.w	r3, r3, #16
 800506e:	2b00      	cmp	r3, #0
 8005070:	f000 809d 	beq.w	80051ae <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2210      	movs	r2, #16
 800507a:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005086:	2b40      	cmp	r3, #64	; 0x40
 8005088:	d158      	bne.n	800513c <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8005094:	893b      	ldrh	r3, [r7, #8]
 8005096:	2b00      	cmp	r3, #0
 8005098:	f000 80c1 	beq.w	800521e <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80050a2:	893a      	ldrh	r2, [r7, #8]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	f080 80ba 	bcs.w	800521e <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	893a      	ldrh	r2, [r7, #8]
 80050ae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0320 	and.w	r3, r3, #32
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d12a      	bne.n	8005118 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80050d0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	689a      	ldr	r2, [r3, #8]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f022 0201 	bic.w	r2, r2, #1
 80050e0:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	689a      	ldr	r2, [r3, #8]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050f0:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2220      	movs	r2, #32
 80050f6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f022 0210 	bic.w	r2, r2, #16
 800510c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005112:	4618      	mov	r0, r3
 8005114:	f7fb ffad 	bl	8001072 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005124:	b29b      	uxth	r3, r3
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	b29b      	uxth	r3, r3
 800512a:	4619      	mov	r1, r3
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f000 f893 	bl	8005258 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005132:	e074      	b.n	800521e <HAL_UART_IRQHandler+0x3f2>
 8005134:	04000120 	.word	0x04000120
 8005138:	08005a55 	.word	0x08005a55
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005148:	b29b      	uxth	r3, r3
 800514a:	1ad3      	subs	r3, r2, r3
 800514c:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005154:	b29b      	uxth	r3, r3
 8005156:	2b00      	cmp	r3, #0
 8005158:	d063      	beq.n	8005222 <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 800515a:	897b      	ldrh	r3, [r7, #10]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d060      	beq.n	8005222 <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800516e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	689a      	ldr	r2, [r3, #8]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f022 0201 	bic.w	r2, r2, #1
 800517e:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2220      	movs	r2, #32
 8005184:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f022 0210 	bic.w	r2, r2, #16
 80051a0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80051a2:	897b      	ldrh	r3, [r7, #10]
 80051a4:	4619      	mov	r1, r3
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 f856 	bl	8005258 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80051ac:	e039      	b.n	8005222 <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d00d      	beq.n	80051d4 <HAL_UART_IRQHandler+0x3a8>
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d008      	beq.n	80051d4 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80051ca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f000 fce8 	bl	8005ba2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80051d2:	e029      	b.n	8005228 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00d      	beq.n	80051fa <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d008      	beq.n	80051fa <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d01a      	beq.n	8005226 <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	4798      	blx	r3
    }
    return;
 80051f8:	e015      	b.n	8005226 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005200:	2b00      	cmp	r3, #0
 8005202:	d011      	beq.n	8005228 <HAL_UART_IRQHandler+0x3fc>
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800520a:	2b00      	cmp	r3, #0
 800520c:	d00c      	beq.n	8005228 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 fcae 	bl	8005b70 <UART_EndTransmit_IT>
    return;
 8005214:	e008      	b.n	8005228 <HAL_UART_IRQHandler+0x3fc>
      return;
 8005216:	bf00      	nop
 8005218:	e006      	b.n	8005228 <HAL_UART_IRQHandler+0x3fc>
    return;
 800521a:	bf00      	nop
 800521c:	e004      	b.n	8005228 <HAL_UART_IRQHandler+0x3fc>
      return;
 800521e:	bf00      	nop
 8005220:	e002      	b.n	8005228 <HAL_UART_IRQHandler+0x3fc>
      return;
 8005222:	bf00      	nop
 8005224:	e000      	b.n	8005228 <HAL_UART_IRQHandler+0x3fc>
    return;
 8005226:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005228:	3720      	adds	r7, #32
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop

08005230 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005238:	bf00      	nop
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800524c:	bf00      	nop
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	460b      	mov	r3, r1
 8005262:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005264:	bf00      	nop
 8005266:	370c      	adds	r7, #12
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005270:	b5b0      	push	{r4, r5, r7, lr}
 8005272:	b088      	sub	sp, #32
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005278:	2300      	movs	r3, #0
 800527a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	689a      	ldr	r2, [r3, #8]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	431a      	orrs	r2, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	431a      	orrs	r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	69db      	ldr	r3, [r3, #28]
 8005290:	4313      	orrs	r3, r2
 8005292:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	4ba4      	ldr	r3, [pc, #656]	; (800552c <UART_SetConfig+0x2bc>)
 800529c:	4013      	ands	r3, r2
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	6812      	ldr	r2, [r2, #0]
 80052a2:	69f9      	ldr	r1, [r7, #28]
 80052a4:	430b      	orrs	r3, r1
 80052a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	68da      	ldr	r2, [r3, #12]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	430a      	orrs	r2, r1
 80052bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	699b      	ldr	r3, [r3, #24]
 80052c2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a99      	ldr	r2, [pc, #612]	; (8005530 <UART_SetConfig+0x2c0>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d004      	beq.n	80052d8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a1b      	ldr	r3, [r3, #32]
 80052d2:	69fa      	ldr	r2, [r7, #28]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	69fa      	ldr	r2, [r7, #28]
 80052e8:	430a      	orrs	r2, r1
 80052ea:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a90      	ldr	r2, [pc, #576]	; (8005534 <UART_SetConfig+0x2c4>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d121      	bne.n	800533a <UART_SetConfig+0xca>
 80052f6:	4b90      	ldr	r3, [pc, #576]	; (8005538 <UART_SetConfig+0x2c8>)
 80052f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052fc:	f003 0303 	and.w	r3, r3, #3
 8005300:	2b03      	cmp	r3, #3
 8005302:	d817      	bhi.n	8005334 <UART_SetConfig+0xc4>
 8005304:	a201      	add	r2, pc, #4	; (adr r2, 800530c <UART_SetConfig+0x9c>)
 8005306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800530a:	bf00      	nop
 800530c:	0800531d 	.word	0x0800531d
 8005310:	08005329 	.word	0x08005329
 8005314:	08005323 	.word	0x08005323
 8005318:	0800532f 	.word	0x0800532f
 800531c:	2301      	movs	r3, #1
 800531e:	76fb      	strb	r3, [r7, #27]
 8005320:	e0bc      	b.n	800549c <UART_SetConfig+0x22c>
 8005322:	2302      	movs	r3, #2
 8005324:	76fb      	strb	r3, [r7, #27]
 8005326:	e0b9      	b.n	800549c <UART_SetConfig+0x22c>
 8005328:	2304      	movs	r3, #4
 800532a:	76fb      	strb	r3, [r7, #27]
 800532c:	e0b6      	b.n	800549c <UART_SetConfig+0x22c>
 800532e:	2308      	movs	r3, #8
 8005330:	76fb      	strb	r3, [r7, #27]
 8005332:	e0b3      	b.n	800549c <UART_SetConfig+0x22c>
 8005334:	2310      	movs	r3, #16
 8005336:	76fb      	strb	r3, [r7, #27]
 8005338:	e0b0      	b.n	800549c <UART_SetConfig+0x22c>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a7f      	ldr	r2, [pc, #508]	; (800553c <UART_SetConfig+0x2cc>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d132      	bne.n	80053aa <UART_SetConfig+0x13a>
 8005344:	4b7c      	ldr	r3, [pc, #496]	; (8005538 <UART_SetConfig+0x2c8>)
 8005346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800534a:	f003 030c 	and.w	r3, r3, #12
 800534e:	2b0c      	cmp	r3, #12
 8005350:	d828      	bhi.n	80053a4 <UART_SetConfig+0x134>
 8005352:	a201      	add	r2, pc, #4	; (adr r2, 8005358 <UART_SetConfig+0xe8>)
 8005354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005358:	0800538d 	.word	0x0800538d
 800535c:	080053a5 	.word	0x080053a5
 8005360:	080053a5 	.word	0x080053a5
 8005364:	080053a5 	.word	0x080053a5
 8005368:	08005399 	.word	0x08005399
 800536c:	080053a5 	.word	0x080053a5
 8005370:	080053a5 	.word	0x080053a5
 8005374:	080053a5 	.word	0x080053a5
 8005378:	08005393 	.word	0x08005393
 800537c:	080053a5 	.word	0x080053a5
 8005380:	080053a5 	.word	0x080053a5
 8005384:	080053a5 	.word	0x080053a5
 8005388:	0800539f 	.word	0x0800539f
 800538c:	2300      	movs	r3, #0
 800538e:	76fb      	strb	r3, [r7, #27]
 8005390:	e084      	b.n	800549c <UART_SetConfig+0x22c>
 8005392:	2302      	movs	r3, #2
 8005394:	76fb      	strb	r3, [r7, #27]
 8005396:	e081      	b.n	800549c <UART_SetConfig+0x22c>
 8005398:	2304      	movs	r3, #4
 800539a:	76fb      	strb	r3, [r7, #27]
 800539c:	e07e      	b.n	800549c <UART_SetConfig+0x22c>
 800539e:	2308      	movs	r3, #8
 80053a0:	76fb      	strb	r3, [r7, #27]
 80053a2:	e07b      	b.n	800549c <UART_SetConfig+0x22c>
 80053a4:	2310      	movs	r3, #16
 80053a6:	76fb      	strb	r3, [r7, #27]
 80053a8:	e078      	b.n	800549c <UART_SetConfig+0x22c>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a64      	ldr	r2, [pc, #400]	; (8005540 <UART_SetConfig+0x2d0>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d120      	bne.n	80053f6 <UART_SetConfig+0x186>
 80053b4:	4b60      	ldr	r3, [pc, #384]	; (8005538 <UART_SetConfig+0x2c8>)
 80053b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ba:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80053be:	2b30      	cmp	r3, #48	; 0x30
 80053c0:	d013      	beq.n	80053ea <UART_SetConfig+0x17a>
 80053c2:	2b30      	cmp	r3, #48	; 0x30
 80053c4:	d814      	bhi.n	80053f0 <UART_SetConfig+0x180>
 80053c6:	2b20      	cmp	r3, #32
 80053c8:	d009      	beq.n	80053de <UART_SetConfig+0x16e>
 80053ca:	2b20      	cmp	r3, #32
 80053cc:	d810      	bhi.n	80053f0 <UART_SetConfig+0x180>
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d002      	beq.n	80053d8 <UART_SetConfig+0x168>
 80053d2:	2b10      	cmp	r3, #16
 80053d4:	d006      	beq.n	80053e4 <UART_SetConfig+0x174>
 80053d6:	e00b      	b.n	80053f0 <UART_SetConfig+0x180>
 80053d8:	2300      	movs	r3, #0
 80053da:	76fb      	strb	r3, [r7, #27]
 80053dc:	e05e      	b.n	800549c <UART_SetConfig+0x22c>
 80053de:	2302      	movs	r3, #2
 80053e0:	76fb      	strb	r3, [r7, #27]
 80053e2:	e05b      	b.n	800549c <UART_SetConfig+0x22c>
 80053e4:	2304      	movs	r3, #4
 80053e6:	76fb      	strb	r3, [r7, #27]
 80053e8:	e058      	b.n	800549c <UART_SetConfig+0x22c>
 80053ea:	2308      	movs	r3, #8
 80053ec:	76fb      	strb	r3, [r7, #27]
 80053ee:	e055      	b.n	800549c <UART_SetConfig+0x22c>
 80053f0:	2310      	movs	r3, #16
 80053f2:	76fb      	strb	r3, [r7, #27]
 80053f4:	e052      	b.n	800549c <UART_SetConfig+0x22c>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a52      	ldr	r2, [pc, #328]	; (8005544 <UART_SetConfig+0x2d4>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d120      	bne.n	8005442 <UART_SetConfig+0x1d2>
 8005400:	4b4d      	ldr	r3, [pc, #308]	; (8005538 <UART_SetConfig+0x2c8>)
 8005402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005406:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800540a:	2bc0      	cmp	r3, #192	; 0xc0
 800540c:	d013      	beq.n	8005436 <UART_SetConfig+0x1c6>
 800540e:	2bc0      	cmp	r3, #192	; 0xc0
 8005410:	d814      	bhi.n	800543c <UART_SetConfig+0x1cc>
 8005412:	2b80      	cmp	r3, #128	; 0x80
 8005414:	d009      	beq.n	800542a <UART_SetConfig+0x1ba>
 8005416:	2b80      	cmp	r3, #128	; 0x80
 8005418:	d810      	bhi.n	800543c <UART_SetConfig+0x1cc>
 800541a:	2b00      	cmp	r3, #0
 800541c:	d002      	beq.n	8005424 <UART_SetConfig+0x1b4>
 800541e:	2b40      	cmp	r3, #64	; 0x40
 8005420:	d006      	beq.n	8005430 <UART_SetConfig+0x1c0>
 8005422:	e00b      	b.n	800543c <UART_SetConfig+0x1cc>
 8005424:	2300      	movs	r3, #0
 8005426:	76fb      	strb	r3, [r7, #27]
 8005428:	e038      	b.n	800549c <UART_SetConfig+0x22c>
 800542a:	2302      	movs	r3, #2
 800542c:	76fb      	strb	r3, [r7, #27]
 800542e:	e035      	b.n	800549c <UART_SetConfig+0x22c>
 8005430:	2304      	movs	r3, #4
 8005432:	76fb      	strb	r3, [r7, #27]
 8005434:	e032      	b.n	800549c <UART_SetConfig+0x22c>
 8005436:	2308      	movs	r3, #8
 8005438:	76fb      	strb	r3, [r7, #27]
 800543a:	e02f      	b.n	800549c <UART_SetConfig+0x22c>
 800543c:	2310      	movs	r3, #16
 800543e:	76fb      	strb	r3, [r7, #27]
 8005440:	e02c      	b.n	800549c <UART_SetConfig+0x22c>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a3a      	ldr	r2, [pc, #232]	; (8005530 <UART_SetConfig+0x2c0>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d125      	bne.n	8005498 <UART_SetConfig+0x228>
 800544c:	4b3a      	ldr	r3, [pc, #232]	; (8005538 <UART_SetConfig+0x2c8>)
 800544e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005452:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005456:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800545a:	d017      	beq.n	800548c <UART_SetConfig+0x21c>
 800545c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005460:	d817      	bhi.n	8005492 <UART_SetConfig+0x222>
 8005462:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005466:	d00b      	beq.n	8005480 <UART_SetConfig+0x210>
 8005468:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800546c:	d811      	bhi.n	8005492 <UART_SetConfig+0x222>
 800546e:	2b00      	cmp	r3, #0
 8005470:	d003      	beq.n	800547a <UART_SetConfig+0x20a>
 8005472:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005476:	d006      	beq.n	8005486 <UART_SetConfig+0x216>
 8005478:	e00b      	b.n	8005492 <UART_SetConfig+0x222>
 800547a:	2300      	movs	r3, #0
 800547c:	76fb      	strb	r3, [r7, #27]
 800547e:	e00d      	b.n	800549c <UART_SetConfig+0x22c>
 8005480:	2302      	movs	r3, #2
 8005482:	76fb      	strb	r3, [r7, #27]
 8005484:	e00a      	b.n	800549c <UART_SetConfig+0x22c>
 8005486:	2304      	movs	r3, #4
 8005488:	76fb      	strb	r3, [r7, #27]
 800548a:	e007      	b.n	800549c <UART_SetConfig+0x22c>
 800548c:	2308      	movs	r3, #8
 800548e:	76fb      	strb	r3, [r7, #27]
 8005490:	e004      	b.n	800549c <UART_SetConfig+0x22c>
 8005492:	2310      	movs	r3, #16
 8005494:	76fb      	strb	r3, [r7, #27]
 8005496:	e001      	b.n	800549c <UART_SetConfig+0x22c>
 8005498:	2310      	movs	r3, #16
 800549a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a23      	ldr	r2, [pc, #140]	; (8005530 <UART_SetConfig+0x2c0>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	f040 8084 	bne.w	80055b0 <UART_SetConfig+0x340>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80054a8:	7efb      	ldrb	r3, [r7, #27]
 80054aa:	2b08      	cmp	r3, #8
 80054ac:	d823      	bhi.n	80054f6 <UART_SetConfig+0x286>
 80054ae:	a201      	add	r2, pc, #4	; (adr r2, 80054b4 <UART_SetConfig+0x244>)
 80054b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b4:	080054d9 	.word	0x080054d9
 80054b8:	080054f7 	.word	0x080054f7
 80054bc:	080054e1 	.word	0x080054e1
 80054c0:	080054f7 	.word	0x080054f7
 80054c4:	080054e7 	.word	0x080054e7
 80054c8:	080054f7 	.word	0x080054f7
 80054cc:	080054f7 	.word	0x080054f7
 80054d0:	080054f7 	.word	0x080054f7
 80054d4:	080054ef 	.word	0x080054ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054d8:	f7fe fdb4 	bl	8004044 <HAL_RCC_GetPCLK1Freq>
 80054dc:	6178      	str	r0, [r7, #20]
        break;
 80054de:	e00f      	b.n	8005500 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054e0:	4b19      	ldr	r3, [pc, #100]	; (8005548 <UART_SetConfig+0x2d8>)
 80054e2:	617b      	str	r3, [r7, #20]
        break;
 80054e4:	e00c      	b.n	8005500 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054e6:	f7fe fd15 	bl	8003f14 <HAL_RCC_GetSysClockFreq>
 80054ea:	6178      	str	r0, [r7, #20]
        break;
 80054ec:	e008      	b.n	8005500 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054f2:	617b      	str	r3, [r7, #20]
        break;
 80054f4:	e004      	b.n	8005500 <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 80054f6:	2300      	movs	r3, #0
 80054f8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	76bb      	strb	r3, [r7, #26]
        break;
 80054fe:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	2b00      	cmp	r3, #0
 8005504:	f000 8102 	beq.w	800570c <UART_SetConfig+0x49c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	685a      	ldr	r2, [r3, #4]
 800550c:	4613      	mov	r3, r2
 800550e:	005b      	lsls	r3, r3, #1
 8005510:	4413      	add	r3, r2
 8005512:	697a      	ldr	r2, [r7, #20]
 8005514:	429a      	cmp	r2, r3
 8005516:	d305      	bcc.n	8005524 <UART_SetConfig+0x2b4>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800551e:	697a      	ldr	r2, [r7, #20]
 8005520:	429a      	cmp	r2, r3
 8005522:	d913      	bls.n	800554c <UART_SetConfig+0x2dc>
      {
        ret = HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	76bb      	strb	r3, [r7, #26]
 8005528:	e0f0      	b.n	800570c <UART_SetConfig+0x49c>
 800552a:	bf00      	nop
 800552c:	efff69f3 	.word	0xefff69f3
 8005530:	40008000 	.word	0x40008000
 8005534:	40013800 	.word	0x40013800
 8005538:	40021000 	.word	0x40021000
 800553c:	40004400 	.word	0x40004400
 8005540:	40004800 	.word	0x40004800
 8005544:	40004c00 	.word	0x40004c00
 8005548:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	4618      	mov	r0, r3
 8005550:	f04f 0100 	mov.w	r1, #0
 8005554:	f04f 0200 	mov.w	r2, #0
 8005558:	f04f 0300 	mov.w	r3, #0
 800555c:	020b      	lsls	r3, r1, #8
 800555e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005562:	0202      	lsls	r2, r0, #8
 8005564:	6879      	ldr	r1, [r7, #4]
 8005566:	6849      	ldr	r1, [r1, #4]
 8005568:	0849      	lsrs	r1, r1, #1
 800556a:	4608      	mov	r0, r1
 800556c:	f04f 0100 	mov.w	r1, #0
 8005570:	1814      	adds	r4, r2, r0
 8005572:	eb43 0501 	adc.w	r5, r3, r1
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	461a      	mov	r2, r3
 800557c:	f04f 0300 	mov.w	r3, #0
 8005580:	4620      	mov	r0, r4
 8005582:	4629      	mov	r1, r5
 8005584:	f7fa fe2c 	bl	80001e0 <__aeabi_uldivmod>
 8005588:	4602      	mov	r2, r0
 800558a:	460b      	mov	r3, r1
 800558c:	4613      	mov	r3, r2
 800558e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005596:	d308      	bcc.n	80055aa <UART_SetConfig+0x33a>
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800559e:	d204      	bcs.n	80055aa <UART_SetConfig+0x33a>
        {
          huart->Instance->BRR = usartdiv;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	693a      	ldr	r2, [r7, #16]
 80055a6:	60da      	str	r2, [r3, #12]
 80055a8:	e0b0      	b.n	800570c <UART_SetConfig+0x49c>
        }
        else
        {
          ret = HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	76bb      	strb	r3, [r7, #26]
 80055ae:	e0ad      	b.n	800570c <UART_SetConfig+0x49c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	69db      	ldr	r3, [r3, #28]
 80055b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055b8:	d15c      	bne.n	8005674 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 80055ba:	7efb      	ldrb	r3, [r7, #27]
 80055bc:	2b08      	cmp	r3, #8
 80055be:	d828      	bhi.n	8005612 <UART_SetConfig+0x3a2>
 80055c0:	a201      	add	r2, pc, #4	; (adr r2, 80055c8 <UART_SetConfig+0x358>)
 80055c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055c6:	bf00      	nop
 80055c8:	080055ed 	.word	0x080055ed
 80055cc:	080055f5 	.word	0x080055f5
 80055d0:	080055fd 	.word	0x080055fd
 80055d4:	08005613 	.word	0x08005613
 80055d8:	08005603 	.word	0x08005603
 80055dc:	08005613 	.word	0x08005613
 80055e0:	08005613 	.word	0x08005613
 80055e4:	08005613 	.word	0x08005613
 80055e8:	0800560b 	.word	0x0800560b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055ec:	f7fe fd2a 	bl	8004044 <HAL_RCC_GetPCLK1Freq>
 80055f0:	6178      	str	r0, [r7, #20]
        break;
 80055f2:	e013      	b.n	800561c <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055f4:	f7fe fd3c 	bl	8004070 <HAL_RCC_GetPCLK2Freq>
 80055f8:	6178      	str	r0, [r7, #20]
        break;
 80055fa:	e00f      	b.n	800561c <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055fc:	4b49      	ldr	r3, [pc, #292]	; (8005724 <UART_SetConfig+0x4b4>)
 80055fe:	617b      	str	r3, [r7, #20]
        break;
 8005600:	e00c      	b.n	800561c <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005602:	f7fe fc87 	bl	8003f14 <HAL_RCC_GetSysClockFreq>
 8005606:	6178      	str	r0, [r7, #20]
        break;
 8005608:	e008      	b.n	800561c <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800560a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800560e:	617b      	str	r3, [r7, #20]
        break;
 8005610:	e004      	b.n	800561c <UART_SetConfig+0x3ac>
      default:
        pclk = 0U;
 8005612:	2300      	movs	r3, #0
 8005614:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	76bb      	strb	r3, [r7, #26]
        break;
 800561a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d074      	beq.n	800570c <UART_SetConfig+0x49c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	005a      	lsls	r2, r3, #1
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	085b      	lsrs	r3, r3, #1
 800562c:	441a      	add	r2, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	fbb2 f3f3 	udiv	r3, r2, r3
 8005636:	b29b      	uxth	r3, r3
 8005638:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	2b0f      	cmp	r3, #15
 800563e:	d916      	bls.n	800566e <UART_SetConfig+0x3fe>
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005646:	d212      	bcs.n	800566e <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	b29b      	uxth	r3, r3
 800564c:	f023 030f 	bic.w	r3, r3, #15
 8005650:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	085b      	lsrs	r3, r3, #1
 8005656:	b29b      	uxth	r3, r3
 8005658:	f003 0307 	and.w	r3, r3, #7
 800565c:	b29a      	uxth	r2, r3
 800565e:	89fb      	ldrh	r3, [r7, #14]
 8005660:	4313      	orrs	r3, r2
 8005662:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	89fa      	ldrh	r2, [r7, #14]
 800566a:	60da      	str	r2, [r3, #12]
 800566c:	e04e      	b.n	800570c <UART_SetConfig+0x49c>
      }
      else
      {
        ret = HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	76bb      	strb	r3, [r7, #26]
 8005672:	e04b      	b.n	800570c <UART_SetConfig+0x49c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005674:	7efb      	ldrb	r3, [r7, #27]
 8005676:	2b08      	cmp	r3, #8
 8005678:	d827      	bhi.n	80056ca <UART_SetConfig+0x45a>
 800567a:	a201      	add	r2, pc, #4	; (adr r2, 8005680 <UART_SetConfig+0x410>)
 800567c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005680:	080056a5 	.word	0x080056a5
 8005684:	080056ad 	.word	0x080056ad
 8005688:	080056b5 	.word	0x080056b5
 800568c:	080056cb 	.word	0x080056cb
 8005690:	080056bb 	.word	0x080056bb
 8005694:	080056cb 	.word	0x080056cb
 8005698:	080056cb 	.word	0x080056cb
 800569c:	080056cb 	.word	0x080056cb
 80056a0:	080056c3 	.word	0x080056c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056a4:	f7fe fcce 	bl	8004044 <HAL_RCC_GetPCLK1Freq>
 80056a8:	6178      	str	r0, [r7, #20]
        break;
 80056aa:	e013      	b.n	80056d4 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056ac:	f7fe fce0 	bl	8004070 <HAL_RCC_GetPCLK2Freq>
 80056b0:	6178      	str	r0, [r7, #20]
        break;
 80056b2:	e00f      	b.n	80056d4 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056b4:	4b1b      	ldr	r3, [pc, #108]	; (8005724 <UART_SetConfig+0x4b4>)
 80056b6:	617b      	str	r3, [r7, #20]
        break;
 80056b8:	e00c      	b.n	80056d4 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056ba:	f7fe fc2b 	bl	8003f14 <HAL_RCC_GetSysClockFreq>
 80056be:	6178      	str	r0, [r7, #20]
        break;
 80056c0:	e008      	b.n	80056d4 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056c6:	617b      	str	r3, [r7, #20]
        break;
 80056c8:	e004      	b.n	80056d4 <UART_SetConfig+0x464>
      default:
        pclk = 0U;
 80056ca:	2300      	movs	r3, #0
 80056cc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	76bb      	strb	r3, [r7, #26]
        break;
 80056d2:	bf00      	nop
    }

    if (pclk != 0U)
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d018      	beq.n	800570c <UART_SetConfig+0x49c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	085a      	lsrs	r2, r3, #1
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	441a      	add	r2, r3
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	2b0f      	cmp	r3, #15
 80056f4:	d908      	bls.n	8005708 <UART_SetConfig+0x498>
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056fc:	d204      	bcs.n	8005708 <UART_SetConfig+0x498>
      {
        huart->Instance->BRR = usartdiv;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	693a      	ldr	r2, [r7, #16]
 8005704:	60da      	str	r2, [r3, #12]
 8005706:	e001      	b.n	800570c <UART_SetConfig+0x49c>
      }
      else
      {
        ret = HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005718:	7ebb      	ldrb	r3, [r7, #26]
}
 800571a:	4618      	mov	r0, r3
 800571c:	3720      	adds	r7, #32
 800571e:	46bd      	mov	sp, r7
 8005720:	bdb0      	pop	{r4, r5, r7, pc}
 8005722:	bf00      	nop
 8005724:	00f42400 	.word	0x00f42400

08005728 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005734:	f003 0301 	and.w	r3, r3, #1
 8005738:	2b00      	cmp	r3, #0
 800573a:	d00a      	beq.n	8005752 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	430a      	orrs	r2, r1
 8005750:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005756:	f003 0302 	and.w	r3, r3, #2
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00a      	beq.n	8005774 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	430a      	orrs	r2, r1
 8005772:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005778:	f003 0304 	and.w	r3, r3, #4
 800577c:	2b00      	cmp	r3, #0
 800577e:	d00a      	beq.n	8005796 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	430a      	orrs	r2, r1
 8005794:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579a:	f003 0308 	and.w	r3, r3, #8
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d00a      	beq.n	80057b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	430a      	orrs	r2, r1
 80057b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057bc:	f003 0310 	and.w	r3, r3, #16
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d00a      	beq.n	80057da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	430a      	orrs	r2, r1
 80057d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057de:	f003 0320 	and.w	r3, r3, #32
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d00a      	beq.n	80057fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	430a      	orrs	r2, r1
 80057fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005804:	2b00      	cmp	r3, #0
 8005806:	d01a      	beq.n	800583e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	430a      	orrs	r2, r1
 800581c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005822:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005826:	d10a      	bne.n	800583e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	430a      	orrs	r2, r1
 800583c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005846:	2b00      	cmp	r3, #0
 8005848:	d00a      	beq.n	8005860 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	430a      	orrs	r2, r1
 800585e:	605a      	str	r2, [r3, #4]
  }
}
 8005860:	bf00      	nop
 8005862:	370c      	adds	r7, #12
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr

0800586c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b086      	sub	sp, #24
 8005870:	af02      	add	r7, sp, #8
 8005872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800587c:	f7fb fab8 	bl	8000df0 <HAL_GetTick>
 8005880:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 0308 	and.w	r3, r3, #8
 800588c:	2b08      	cmp	r3, #8
 800588e:	d10e      	bne.n	80058ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005890:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005894:	9300      	str	r3, [sp, #0]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2200      	movs	r2, #0
 800589a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f000 f82d 	bl	80058fe <UART_WaitOnFlagUntilTimeout>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d001      	beq.n	80058ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058aa:	2303      	movs	r3, #3
 80058ac:	e023      	b.n	80058f6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 0304 	and.w	r3, r3, #4
 80058b8:	2b04      	cmp	r3, #4
 80058ba:	d10e      	bne.n	80058da <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80058c0:	9300      	str	r3, [sp, #0]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f000 f817 	bl	80058fe <UART_WaitOnFlagUntilTimeout>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d001      	beq.n	80058da <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058d6:	2303      	movs	r3, #3
 80058d8:	e00d      	b.n	80058f6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2220      	movs	r2, #32
 80058de:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2220      	movs	r2, #32
 80058e4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3710      	adds	r7, #16
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}

080058fe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80058fe:	b580      	push	{r7, lr}
 8005900:	b084      	sub	sp, #16
 8005902:	af00      	add	r7, sp, #0
 8005904:	60f8      	str	r0, [r7, #12]
 8005906:	60b9      	str	r1, [r7, #8]
 8005908:	603b      	str	r3, [r7, #0]
 800590a:	4613      	mov	r3, r2
 800590c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800590e:	e05e      	b.n	80059ce <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005916:	d05a      	beq.n	80059ce <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005918:	f7fb fa6a 	bl	8000df0 <HAL_GetTick>
 800591c:	4602      	mov	r2, r0
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	69ba      	ldr	r2, [r7, #24]
 8005924:	429a      	cmp	r2, r3
 8005926:	d302      	bcc.n	800592e <UART_WaitOnFlagUntilTimeout+0x30>
 8005928:	69bb      	ldr	r3, [r7, #24]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d11b      	bne.n	8005966 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800593c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	689a      	ldr	r2, [r3, #8]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f022 0201 	bic.w	r2, r2, #1
 800594c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2220      	movs	r2, #32
 8005952:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2220      	movs	r2, #32
 8005958:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2200      	movs	r2, #0
 800595e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005962:	2303      	movs	r3, #3
 8005964:	e043      	b.n	80059ee <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 0304 	and.w	r3, r3, #4
 8005970:	2b00      	cmp	r3, #0
 8005972:	d02c      	beq.n	80059ce <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	69db      	ldr	r3, [r3, #28]
 800597a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800597e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005982:	d124      	bne.n	80059ce <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800598c:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800599c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	689a      	ldr	r2, [r3, #8]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f022 0201 	bic.w	r2, r2, #1
 80059ac:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2220      	movs	r2, #32
 80059b2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2220      	movs	r2, #32
 80059b8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2220      	movs	r2, #32
 80059be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	e00f      	b.n	80059ee <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	69da      	ldr	r2, [r3, #28]
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	4013      	ands	r3, r2
 80059d8:	68ba      	ldr	r2, [r7, #8]
 80059da:	429a      	cmp	r2, r3
 80059dc:	bf0c      	ite	eq
 80059de:	2301      	moveq	r3, #1
 80059e0:	2300      	movne	r3, #0
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	461a      	mov	r2, r3
 80059e6:	79fb      	ldrb	r3, [r7, #7]
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d091      	beq.n	8005910 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059ec:	2300      	movs	r3, #0
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3710      	adds	r7, #16
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}

080059f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059f6:	b480      	push	{r7}
 80059f8:	b083      	sub	sp, #12
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005a0c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	689a      	ldr	r2, [r3, #8]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f022 0201 	bic.w	r2, r2, #1
 8005a1c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d107      	bne.n	8005a36 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f022 0210 	bic.w	r2, r2, #16
 8005a34:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2220      	movs	r2, #32
 8005a3a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005a48:	bf00      	nop
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a60:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2200      	movs	r2, #0
 8005a66:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a72:	68f8      	ldr	r0, [r7, #12]
 8005a74:	f7ff fbe6 	bl	8005244 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a78:	bf00      	nop
 8005a7a:	3710      	adds	r7, #16
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a8c:	2b21      	cmp	r3, #33	; 0x21
 8005a8e:	d12b      	bne.n	8005ae8 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d110      	bne.n	8005abe <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005aaa:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005aba:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005abc:	e014      	b.n	8005ae8 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ac2:	781a      	ldrb	r2, [r3, #0]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	b292      	uxth	r2, r2
 8005aca:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ad0:	1c5a      	adds	r2, r3, #1
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	3b01      	subs	r3, #1
 8005ae0:	b29a      	uxth	r2, r3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005ae8:	bf00      	nop
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b085      	sub	sp, #20
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b00:	2b21      	cmp	r3, #33	; 0x21
 8005b02:	d12f      	bne.n	8005b64 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d110      	bne.n	8005b32 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b1e:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b2e:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005b30:	e018      	b.n	8005b64 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b36:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	881a      	ldrh	r2, [r3, #0]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b44:	b292      	uxth	r2, r2
 8005b46:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b4c:	1c9a      	adds	r2, r3, #2
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	3b01      	subs	r3, #1
 8005b5c:	b29a      	uxth	r2, r3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005b64:	bf00      	nop
 8005b66:	3714      	adds	r7, #20
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr

08005b70 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b082      	sub	sp, #8
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b86:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2220      	movs	r2, #32
 8005b8c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f7ff fb4b 	bl	8005230 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b9a:	bf00      	nop
 8005b9c:	3708      	adds	r7, #8
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005ba2:	b480      	push	{r7}
 8005ba4:	b083      	sub	sp, #12
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005baa:	bf00      	nop
 8005bac:	370c      	adds	r7, #12
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr
	...

08005bb8 <__NVIC_SetPriority>:
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	6039      	str	r1, [r7, #0]
 8005bc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	db0a      	blt.n	8005be2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	b2da      	uxtb	r2, r3
 8005bd0:	490c      	ldr	r1, [pc, #48]	; (8005c04 <__NVIC_SetPriority+0x4c>)
 8005bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bd6:	0112      	lsls	r2, r2, #4
 8005bd8:	b2d2      	uxtb	r2, r2
 8005bda:	440b      	add	r3, r1
 8005bdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005be0:	e00a      	b.n	8005bf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	b2da      	uxtb	r2, r3
 8005be6:	4908      	ldr	r1, [pc, #32]	; (8005c08 <__NVIC_SetPriority+0x50>)
 8005be8:	79fb      	ldrb	r3, [r7, #7]
 8005bea:	f003 030f 	and.w	r3, r3, #15
 8005bee:	3b04      	subs	r3, #4
 8005bf0:	0112      	lsls	r2, r2, #4
 8005bf2:	b2d2      	uxtb	r2, r2
 8005bf4:	440b      	add	r3, r1
 8005bf6:	761a      	strb	r2, [r3, #24]
}
 8005bf8:	bf00      	nop
 8005bfa:	370c      	adds	r7, #12
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr
 8005c04:	e000e100 	.word	0xe000e100
 8005c08:	e000ed00 	.word	0xe000ed00

08005c0c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005c10:	2100      	movs	r1, #0
 8005c12:	f06f 0004 	mvn.w	r0, #4
 8005c16:	f7ff ffcf 	bl	8005bb8 <__NVIC_SetPriority>
#endif
}
 8005c1a:	bf00      	nop
 8005c1c:	bd80      	pop	{r7, pc}
	...

08005c20 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c26:	f3ef 8305 	mrs	r3, IPSR
 8005c2a:	603b      	str	r3, [r7, #0]
  return(result);
 8005c2c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d003      	beq.n	8005c3a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005c32:	f06f 0305 	mvn.w	r3, #5
 8005c36:	607b      	str	r3, [r7, #4]
 8005c38:	e00c      	b.n	8005c54 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005c3a:	4b0a      	ldr	r3, [pc, #40]	; (8005c64 <osKernelInitialize+0x44>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d105      	bne.n	8005c4e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005c42:	4b08      	ldr	r3, [pc, #32]	; (8005c64 <osKernelInitialize+0x44>)
 8005c44:	2201      	movs	r2, #1
 8005c46:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	607b      	str	r3, [r7, #4]
 8005c4c:	e002      	b.n	8005c54 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c52:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005c54:	687b      	ldr	r3, [r7, #4]
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	370c      	adds	r7, #12
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr
 8005c62:	bf00      	nop
 8005c64:	20000038 	.word	0x20000038

08005c68 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b082      	sub	sp, #8
 8005c6c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c6e:	f3ef 8305 	mrs	r3, IPSR
 8005c72:	603b      	str	r3, [r7, #0]
  return(result);
 8005c74:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d003      	beq.n	8005c82 <osKernelStart+0x1a>
    stat = osErrorISR;
 8005c7a:	f06f 0305 	mvn.w	r3, #5
 8005c7e:	607b      	str	r3, [r7, #4]
 8005c80:	e010      	b.n	8005ca4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005c82:	4b0b      	ldr	r3, [pc, #44]	; (8005cb0 <osKernelStart+0x48>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d109      	bne.n	8005c9e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005c8a:	f7ff ffbf 	bl	8005c0c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005c8e:	4b08      	ldr	r3, [pc, #32]	; (8005cb0 <osKernelStart+0x48>)
 8005c90:	2202      	movs	r2, #2
 8005c92:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005c94:	f001 fa52 	bl	800713c <vTaskStartScheduler>
      stat = osOK;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	607b      	str	r3, [r7, #4]
 8005c9c:	e002      	b.n	8005ca4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8005ca2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005ca4:	687b      	ldr	r3, [r7, #4]
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3708      	adds	r7, #8
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	20000038 	.word	0x20000038

08005cb4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b08e      	sub	sp, #56	; 0x38
 8005cb8:	af04      	add	r7, sp, #16
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	60b9      	str	r1, [r7, #8]
 8005cbe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cc4:	f3ef 8305 	mrs	r3, IPSR
 8005cc8:	617b      	str	r3, [r7, #20]
  return(result);
 8005cca:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d17e      	bne.n	8005dce <osThreadNew+0x11a>
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d07b      	beq.n	8005dce <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005cd6:	2380      	movs	r3, #128	; 0x80
 8005cd8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005cda:	2318      	movs	r3, #24
 8005cdc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ce6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d045      	beq.n	8005d7a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d002      	beq.n	8005cfc <osThreadNew+0x48>
        name = attr->name;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	699b      	ldr	r3, [r3, #24]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d002      	beq.n	8005d0a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	699b      	ldr	r3, [r3, #24]
 8005d08:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d008      	beq.n	8005d22 <osThreadNew+0x6e>
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	2b38      	cmp	r3, #56	; 0x38
 8005d14:	d805      	bhi.n	8005d22 <osThreadNew+0x6e>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	f003 0301 	and.w	r3, r3, #1
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d001      	beq.n	8005d26 <osThreadNew+0x72>
        return (NULL);
 8005d22:	2300      	movs	r3, #0
 8005d24:	e054      	b.n	8005dd0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	695b      	ldr	r3, [r3, #20]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d003      	beq.n	8005d36 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	695b      	ldr	r3, [r3, #20]
 8005d32:	089b      	lsrs	r3, r3, #2
 8005d34:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d00e      	beq.n	8005d5c <osThreadNew+0xa8>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	68db      	ldr	r3, [r3, #12]
 8005d42:	2b5f      	cmp	r3, #95	; 0x5f
 8005d44:	d90a      	bls.n	8005d5c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d006      	beq.n	8005d5c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	695b      	ldr	r3, [r3, #20]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d002      	beq.n	8005d5c <osThreadNew+0xa8>
        mem = 1;
 8005d56:	2301      	movs	r3, #1
 8005d58:	61bb      	str	r3, [r7, #24]
 8005d5a:	e010      	b.n	8005d7e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d10c      	bne.n	8005d7e <osThreadNew+0xca>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d108      	bne.n	8005d7e <osThreadNew+0xca>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	691b      	ldr	r3, [r3, #16]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d104      	bne.n	8005d7e <osThreadNew+0xca>
          mem = 0;
 8005d74:	2300      	movs	r3, #0
 8005d76:	61bb      	str	r3, [r7, #24]
 8005d78:	e001      	b.n	8005d7e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d110      	bne.n	8005da6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005d8c:	9202      	str	r2, [sp, #8]
 8005d8e:	9301      	str	r3, [sp, #4]
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	9300      	str	r3, [sp, #0]
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	6a3a      	ldr	r2, [r7, #32]
 8005d98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d9a:	68f8      	ldr	r0, [r7, #12]
 8005d9c:	f000 fff6 	bl	8006d8c <xTaskCreateStatic>
 8005da0:	4603      	mov	r3, r0
 8005da2:	613b      	str	r3, [r7, #16]
 8005da4:	e013      	b.n	8005dce <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005da6:	69bb      	ldr	r3, [r7, #24]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d110      	bne.n	8005dce <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005dac:	6a3b      	ldr	r3, [r7, #32]
 8005dae:	b29a      	uxth	r2, r3
 8005db0:	f107 0310 	add.w	r3, r7, #16
 8005db4:	9301      	str	r3, [sp, #4]
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	9300      	str	r3, [sp, #0]
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005dbe:	68f8      	ldr	r0, [r7, #12]
 8005dc0:	f001 f841 	bl	8006e46 <xTaskCreate>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d001      	beq.n	8005dce <osThreadNew+0x11a>
            hTask = NULL;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005dce:	693b      	ldr	r3, [r7, #16]
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3728      	adds	r7, #40	; 0x28
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005de0:	f3ef 8305 	mrs	r3, IPSR
 8005de4:	60bb      	str	r3, [r7, #8]
  return(result);
 8005de6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d003      	beq.n	8005df4 <osDelay+0x1c>
    stat = osErrorISR;
 8005dec:	f06f 0305 	mvn.w	r3, #5
 8005df0:	60fb      	str	r3, [r7, #12]
 8005df2:	e007      	b.n	8005e04 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005df4:	2300      	movs	r3, #0
 8005df6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d002      	beq.n	8005e04 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f001 f968 	bl	80070d4 <vTaskDelay>
    }
  }

  return (stat);
 8005e04:	68fb      	ldr	r3, [r7, #12]
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3710      	adds	r7, #16
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
	...

08005e10 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005e10:	b480      	push	{r7}
 8005e12:	b085      	sub	sp, #20
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	60b9      	str	r1, [r7, #8]
 8005e1a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	4a07      	ldr	r2, [pc, #28]	; (8005e3c <vApplicationGetIdleTaskMemory+0x2c>)
 8005e20:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	4a06      	ldr	r2, [pc, #24]	; (8005e40 <vApplicationGetIdleTaskMemory+0x30>)
 8005e26:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2280      	movs	r2, #128	; 0x80
 8005e2c:	601a      	str	r2, [r3, #0]
}
 8005e2e:	bf00      	nop
 8005e30:	3714      	adds	r7, #20
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr
 8005e3a:	bf00      	nop
 8005e3c:	2000003c 	.word	0x2000003c
 8005e40:	2000009c 	.word	0x2000009c

08005e44 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005e44:	b480      	push	{r7}
 8005e46:	b085      	sub	sp, #20
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	4a07      	ldr	r2, [pc, #28]	; (8005e70 <vApplicationGetTimerTaskMemory+0x2c>)
 8005e54:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	4a06      	ldr	r2, [pc, #24]	; (8005e74 <vApplicationGetTimerTaskMemory+0x30>)
 8005e5a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e62:	601a      	str	r2, [r3, #0]
}
 8005e64:	bf00      	nop
 8005e66:	3714      	adds	r7, #20
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr
 8005e70:	2000029c 	.word	0x2000029c
 8005e74:	200002fc 	.word	0x200002fc

08005e78 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b083      	sub	sp, #12
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f103 0208 	add.w	r2, r3, #8
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8005e90:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f103 0208 	add.w	r2, r3, #8
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f103 0208 	add.w	r2, r3, #8
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005eac:	bf00      	nop
 8005eae:	370c      	adds	r7, #12
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005ec6:	bf00      	nop
 8005ec8:	370c      	adds	r7, #12
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr

08005ed2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005ed2:	b480      	push	{r7}
 8005ed4:	b085      	sub	sp, #20
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	6078      	str	r0, [r7, #4]
 8005eda:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	689a      	ldr	r2, [r3, #8]
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	683a      	ldr	r2, [r7, #0]
 8005ef6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	683a      	ldr	r2, [r7, #0]
 8005efc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	1c5a      	adds	r2, r3, #1
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	601a      	str	r2, [r3, #0]
}
 8005f0e:	bf00      	nop
 8005f10:	3714      	adds	r7, #20
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr

08005f1a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f1a:	b480      	push	{r7}
 8005f1c:	b085      	sub	sp, #20
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
 8005f22:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f30:	d103      	bne.n	8005f3a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	691b      	ldr	r3, [r3, #16]
 8005f36:	60fb      	str	r3, [r7, #12]
 8005f38:	e00c      	b.n	8005f54 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	3308      	adds	r3, #8
 8005f3e:	60fb      	str	r3, [r7, #12]
 8005f40:	e002      	b.n	8005f48 <vListInsert+0x2e>
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	60fb      	str	r3, [r7, #12]
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	68ba      	ldr	r2, [r7, #8]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d2f6      	bcs.n	8005f42 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	685a      	ldr	r2, [r3, #4]
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	683a      	ldr	r2, [r7, #0]
 8005f62:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	683a      	ldr	r2, [r7, #0]
 8005f6e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	1c5a      	adds	r2, r3, #1
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	601a      	str	r2, [r3, #0]
}
 8005f80:	bf00      	nop
 8005f82:	3714      	adds	r7, #20
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b085      	sub	sp, #20
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	691b      	ldr	r3, [r3, #16]
 8005f98:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	6892      	ldr	r2, [r2, #8]
 8005fa2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	6852      	ldr	r2, [r2, #4]
 8005fac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d103      	bne.n	8005fc0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	689a      	ldr	r2, [r3, #8]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	1e5a      	subs	r2, r3, #1
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3714      	adds	r7, #20
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b084      	sub	sp, #16
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d10a      	bne.n	800600a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff8:	f383 8811 	msr	BASEPRI, r3
 8005ffc:	f3bf 8f6f 	isb	sy
 8006000:	f3bf 8f4f 	dsb	sy
 8006004:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006006:	bf00      	nop
 8006008:	e7fe      	b.n	8006008 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800600a:	f002 fb53 	bl	80086b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006016:	68f9      	ldr	r1, [r7, #12]
 8006018:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800601a:	fb01 f303 	mul.w	r3, r1, r3
 800601e:	441a      	add	r2, r3
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2200      	movs	r2, #0
 8006028:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800603a:	3b01      	subs	r3, #1
 800603c:	68f9      	ldr	r1, [r7, #12]
 800603e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006040:	fb01 f303 	mul.w	r3, r1, r3
 8006044:	441a      	add	r2, r3
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	22ff      	movs	r2, #255	; 0xff
 800604e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	22ff      	movs	r2, #255	; 0xff
 8006056:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d114      	bne.n	800608a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d01a      	beq.n	800609e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	3310      	adds	r3, #16
 800606c:	4618      	mov	r0, r3
 800606e:	f001 fb0b 	bl	8007688 <xTaskRemoveFromEventList>
 8006072:	4603      	mov	r3, r0
 8006074:	2b00      	cmp	r3, #0
 8006076:	d012      	beq.n	800609e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006078:	4b0c      	ldr	r3, [pc, #48]	; (80060ac <xQueueGenericReset+0xcc>)
 800607a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800607e:	601a      	str	r2, [r3, #0]
 8006080:	f3bf 8f4f 	dsb	sy
 8006084:	f3bf 8f6f 	isb	sy
 8006088:	e009      	b.n	800609e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	3310      	adds	r3, #16
 800608e:	4618      	mov	r0, r3
 8006090:	f7ff fef2 	bl	8005e78 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	3324      	adds	r3, #36	; 0x24
 8006098:	4618      	mov	r0, r3
 800609a:	f7ff feed 	bl	8005e78 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800609e:	f002 fb39 	bl	8008714 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80060a2:	2301      	movs	r3, #1
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3710      	adds	r7, #16
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}
 80060ac:	e000ed04 	.word	0xe000ed04

080060b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b08e      	sub	sp, #56	; 0x38
 80060b4:	af02      	add	r7, sp, #8
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	60b9      	str	r1, [r7, #8]
 80060ba:	607a      	str	r2, [r7, #4]
 80060bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d10a      	bne.n	80060da <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80060c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c8:	f383 8811 	msr	BASEPRI, r3
 80060cc:	f3bf 8f6f 	isb	sy
 80060d0:	f3bf 8f4f 	dsb	sy
 80060d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80060d6:	bf00      	nop
 80060d8:	e7fe      	b.n	80060d8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d10a      	bne.n	80060f6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80060e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e4:	f383 8811 	msr	BASEPRI, r3
 80060e8:	f3bf 8f6f 	isb	sy
 80060ec:	f3bf 8f4f 	dsb	sy
 80060f0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80060f2:	bf00      	nop
 80060f4:	e7fe      	b.n	80060f4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d002      	beq.n	8006102 <xQueueGenericCreateStatic+0x52>
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d001      	beq.n	8006106 <xQueueGenericCreateStatic+0x56>
 8006102:	2301      	movs	r3, #1
 8006104:	e000      	b.n	8006108 <xQueueGenericCreateStatic+0x58>
 8006106:	2300      	movs	r3, #0
 8006108:	2b00      	cmp	r3, #0
 800610a:	d10a      	bne.n	8006122 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800610c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006110:	f383 8811 	msr	BASEPRI, r3
 8006114:	f3bf 8f6f 	isb	sy
 8006118:	f3bf 8f4f 	dsb	sy
 800611c:	623b      	str	r3, [r7, #32]
}
 800611e:	bf00      	nop
 8006120:	e7fe      	b.n	8006120 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d102      	bne.n	800612e <xQueueGenericCreateStatic+0x7e>
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d101      	bne.n	8006132 <xQueueGenericCreateStatic+0x82>
 800612e:	2301      	movs	r3, #1
 8006130:	e000      	b.n	8006134 <xQueueGenericCreateStatic+0x84>
 8006132:	2300      	movs	r3, #0
 8006134:	2b00      	cmp	r3, #0
 8006136:	d10a      	bne.n	800614e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800613c:	f383 8811 	msr	BASEPRI, r3
 8006140:	f3bf 8f6f 	isb	sy
 8006144:	f3bf 8f4f 	dsb	sy
 8006148:	61fb      	str	r3, [r7, #28]
}
 800614a:	bf00      	nop
 800614c:	e7fe      	b.n	800614c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800614e:	2350      	movs	r3, #80	; 0x50
 8006150:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	2b50      	cmp	r3, #80	; 0x50
 8006156:	d00a      	beq.n	800616e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800615c:	f383 8811 	msr	BASEPRI, r3
 8006160:	f3bf 8f6f 	isb	sy
 8006164:	f3bf 8f4f 	dsb	sy
 8006168:	61bb      	str	r3, [r7, #24]
}
 800616a:	bf00      	nop
 800616c:	e7fe      	b.n	800616c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800616e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006176:	2b00      	cmp	r3, #0
 8006178:	d00d      	beq.n	8006196 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800617a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800617c:	2201      	movs	r2, #1
 800617e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006182:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006188:	9300      	str	r3, [sp, #0]
 800618a:	4613      	mov	r3, r2
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	68b9      	ldr	r1, [r7, #8]
 8006190:	68f8      	ldr	r0, [r7, #12]
 8006192:	f000 f83f 	bl	8006214 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006198:	4618      	mov	r0, r3
 800619a:	3730      	adds	r7, #48	; 0x30
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b08a      	sub	sp, #40	; 0x28
 80061a4:	af02      	add	r7, sp, #8
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	60b9      	str	r1, [r7, #8]
 80061aa:	4613      	mov	r3, r2
 80061ac:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d10a      	bne.n	80061ca <xQueueGenericCreate+0x2a>
	__asm volatile
 80061b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b8:	f383 8811 	msr	BASEPRI, r3
 80061bc:	f3bf 8f6f 	isb	sy
 80061c0:	f3bf 8f4f 	dsb	sy
 80061c4:	613b      	str	r3, [r7, #16]
}
 80061c6:	bf00      	nop
 80061c8:	e7fe      	b.n	80061c8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	68ba      	ldr	r2, [r7, #8]
 80061ce:	fb02 f303 	mul.w	r3, r2, r3
 80061d2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	3350      	adds	r3, #80	; 0x50
 80061d8:	4618      	mov	r0, r3
 80061da:	f002 fb8d 	bl	80088f8 <pvPortMalloc>
 80061de:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d011      	beq.n	800620a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	3350      	adds	r3, #80	; 0x50
 80061ee:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80061f0:	69bb      	ldr	r3, [r7, #24]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80061f8:	79fa      	ldrb	r2, [r7, #7]
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	9300      	str	r3, [sp, #0]
 80061fe:	4613      	mov	r3, r2
 8006200:	697a      	ldr	r2, [r7, #20]
 8006202:	68b9      	ldr	r1, [r7, #8]
 8006204:	68f8      	ldr	r0, [r7, #12]
 8006206:	f000 f805 	bl	8006214 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800620a:	69bb      	ldr	r3, [r7, #24]
	}
 800620c:	4618      	mov	r0, r3
 800620e:	3720      	adds	r7, #32
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b084      	sub	sp, #16
 8006218:	af00      	add	r7, sp, #0
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	60b9      	str	r1, [r7, #8]
 800621e:	607a      	str	r2, [r7, #4]
 8006220:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d103      	bne.n	8006230 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	69ba      	ldr	r2, [r7, #24]
 800622c:	601a      	str	r2, [r3, #0]
 800622e:	e002      	b.n	8006236 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	68fa      	ldr	r2, [r7, #12]
 800623a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800623c:	69bb      	ldr	r3, [r7, #24]
 800623e:	68ba      	ldr	r2, [r7, #8]
 8006240:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006242:	2101      	movs	r1, #1
 8006244:	69b8      	ldr	r0, [r7, #24]
 8006246:	f7ff fecb 	bl	8005fe0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	78fa      	ldrb	r2, [r7, #3]
 800624e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006252:	bf00      	nop
 8006254:	3710      	adds	r7, #16
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
	...

0800625c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b08e      	sub	sp, #56	; 0x38
 8006260:	af00      	add	r7, sp, #0
 8006262:	60f8      	str	r0, [r7, #12]
 8006264:	60b9      	str	r1, [r7, #8]
 8006266:	607a      	str	r2, [r7, #4]
 8006268:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800626a:	2300      	movs	r3, #0
 800626c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006274:	2b00      	cmp	r3, #0
 8006276:	d10a      	bne.n	800628e <xQueueGenericSend+0x32>
	__asm volatile
 8006278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800627c:	f383 8811 	msr	BASEPRI, r3
 8006280:	f3bf 8f6f 	isb	sy
 8006284:	f3bf 8f4f 	dsb	sy
 8006288:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800628a:	bf00      	nop
 800628c:	e7fe      	b.n	800628c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d103      	bne.n	800629c <xQueueGenericSend+0x40>
 8006294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006298:	2b00      	cmp	r3, #0
 800629a:	d101      	bne.n	80062a0 <xQueueGenericSend+0x44>
 800629c:	2301      	movs	r3, #1
 800629e:	e000      	b.n	80062a2 <xQueueGenericSend+0x46>
 80062a0:	2300      	movs	r3, #0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d10a      	bne.n	80062bc <xQueueGenericSend+0x60>
	__asm volatile
 80062a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062aa:	f383 8811 	msr	BASEPRI, r3
 80062ae:	f3bf 8f6f 	isb	sy
 80062b2:	f3bf 8f4f 	dsb	sy
 80062b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80062b8:	bf00      	nop
 80062ba:	e7fe      	b.n	80062ba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	2b02      	cmp	r3, #2
 80062c0:	d103      	bne.n	80062ca <xQueueGenericSend+0x6e>
 80062c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d101      	bne.n	80062ce <xQueueGenericSend+0x72>
 80062ca:	2301      	movs	r3, #1
 80062cc:	e000      	b.n	80062d0 <xQueueGenericSend+0x74>
 80062ce:	2300      	movs	r3, #0
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d10a      	bne.n	80062ea <xQueueGenericSend+0x8e>
	__asm volatile
 80062d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d8:	f383 8811 	msr	BASEPRI, r3
 80062dc:	f3bf 8f6f 	isb	sy
 80062e0:	f3bf 8f4f 	dsb	sy
 80062e4:	623b      	str	r3, [r7, #32]
}
 80062e6:	bf00      	nop
 80062e8:	e7fe      	b.n	80062e8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80062ea:	f001 fb8b 	bl	8007a04 <xTaskGetSchedulerState>
 80062ee:	4603      	mov	r3, r0
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d102      	bne.n	80062fa <xQueueGenericSend+0x9e>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d101      	bne.n	80062fe <xQueueGenericSend+0xa2>
 80062fa:	2301      	movs	r3, #1
 80062fc:	e000      	b.n	8006300 <xQueueGenericSend+0xa4>
 80062fe:	2300      	movs	r3, #0
 8006300:	2b00      	cmp	r3, #0
 8006302:	d10a      	bne.n	800631a <xQueueGenericSend+0xbe>
	__asm volatile
 8006304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006308:	f383 8811 	msr	BASEPRI, r3
 800630c:	f3bf 8f6f 	isb	sy
 8006310:	f3bf 8f4f 	dsb	sy
 8006314:	61fb      	str	r3, [r7, #28]
}
 8006316:	bf00      	nop
 8006318:	e7fe      	b.n	8006318 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800631a:	f002 f9cb 	bl	80086b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800631e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006320:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006326:	429a      	cmp	r2, r3
 8006328:	d302      	bcc.n	8006330 <xQueueGenericSend+0xd4>
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	2b02      	cmp	r3, #2
 800632e:	d129      	bne.n	8006384 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006330:	683a      	ldr	r2, [r7, #0]
 8006332:	68b9      	ldr	r1, [r7, #8]
 8006334:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006336:	f000 fbbb 	bl	8006ab0 <prvCopyDataToQueue>
 800633a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800633c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800633e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006340:	2b00      	cmp	r3, #0
 8006342:	d010      	beq.n	8006366 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006346:	3324      	adds	r3, #36	; 0x24
 8006348:	4618      	mov	r0, r3
 800634a:	f001 f99d 	bl	8007688 <xTaskRemoveFromEventList>
 800634e:	4603      	mov	r3, r0
 8006350:	2b00      	cmp	r3, #0
 8006352:	d013      	beq.n	800637c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006354:	4b3f      	ldr	r3, [pc, #252]	; (8006454 <xQueueGenericSend+0x1f8>)
 8006356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800635a:	601a      	str	r2, [r3, #0]
 800635c:	f3bf 8f4f 	dsb	sy
 8006360:	f3bf 8f6f 	isb	sy
 8006364:	e00a      	b.n	800637c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006368:	2b00      	cmp	r3, #0
 800636a:	d007      	beq.n	800637c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800636c:	4b39      	ldr	r3, [pc, #228]	; (8006454 <xQueueGenericSend+0x1f8>)
 800636e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006372:	601a      	str	r2, [r3, #0]
 8006374:	f3bf 8f4f 	dsb	sy
 8006378:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800637c:	f002 f9ca 	bl	8008714 <vPortExitCritical>
				return pdPASS;
 8006380:	2301      	movs	r3, #1
 8006382:	e063      	b.n	800644c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d103      	bne.n	8006392 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800638a:	f002 f9c3 	bl	8008714 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800638e:	2300      	movs	r3, #0
 8006390:	e05c      	b.n	800644c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006394:	2b00      	cmp	r3, #0
 8006396:	d106      	bne.n	80063a6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006398:	f107 0314 	add.w	r3, r7, #20
 800639c:	4618      	mov	r0, r3
 800639e:	f001 f9d7 	bl	8007750 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80063a2:	2301      	movs	r3, #1
 80063a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80063a6:	f002 f9b5 	bl	8008714 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80063aa:	f000 ff2f 	bl	800720c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80063ae:	f002 f981 	bl	80086b4 <vPortEnterCritical>
 80063b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80063b8:	b25b      	sxtb	r3, r3
 80063ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063be:	d103      	bne.n	80063c8 <xQueueGenericSend+0x16c>
 80063c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c2:	2200      	movs	r2, #0
 80063c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063ce:	b25b      	sxtb	r3, r3
 80063d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063d4:	d103      	bne.n	80063de <xQueueGenericSend+0x182>
 80063d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d8:	2200      	movs	r2, #0
 80063da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063de:	f002 f999 	bl	8008714 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80063e2:	1d3a      	adds	r2, r7, #4
 80063e4:	f107 0314 	add.w	r3, r7, #20
 80063e8:	4611      	mov	r1, r2
 80063ea:	4618      	mov	r0, r3
 80063ec:	f001 f9c6 	bl	800777c <xTaskCheckForTimeOut>
 80063f0:	4603      	mov	r3, r0
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d124      	bne.n	8006440 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80063f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80063f8:	f000 fc52 	bl	8006ca0 <prvIsQueueFull>
 80063fc:	4603      	mov	r3, r0
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d018      	beq.n	8006434 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006404:	3310      	adds	r3, #16
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	4611      	mov	r1, r2
 800640a:	4618      	mov	r0, r3
 800640c:	f001 f8ec 	bl	80075e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006410:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006412:	f000 fbdd 	bl	8006bd0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006416:	f000 ff07 	bl	8007228 <xTaskResumeAll>
 800641a:	4603      	mov	r3, r0
 800641c:	2b00      	cmp	r3, #0
 800641e:	f47f af7c 	bne.w	800631a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006422:	4b0c      	ldr	r3, [pc, #48]	; (8006454 <xQueueGenericSend+0x1f8>)
 8006424:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006428:	601a      	str	r2, [r3, #0]
 800642a:	f3bf 8f4f 	dsb	sy
 800642e:	f3bf 8f6f 	isb	sy
 8006432:	e772      	b.n	800631a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006434:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006436:	f000 fbcb 	bl	8006bd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800643a:	f000 fef5 	bl	8007228 <xTaskResumeAll>
 800643e:	e76c      	b.n	800631a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006440:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006442:	f000 fbc5 	bl	8006bd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006446:	f000 feef 	bl	8007228 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800644a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800644c:	4618      	mov	r0, r3
 800644e:	3738      	adds	r7, #56	; 0x38
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}
 8006454:	e000ed04 	.word	0xe000ed04

08006458 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b090      	sub	sp, #64	; 0x40
 800645c:	af00      	add	r7, sp, #0
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	607a      	str	r2, [r7, #4]
 8006464:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800646a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800646c:	2b00      	cmp	r3, #0
 800646e:	d10a      	bne.n	8006486 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006474:	f383 8811 	msr	BASEPRI, r3
 8006478:	f3bf 8f6f 	isb	sy
 800647c:	f3bf 8f4f 	dsb	sy
 8006480:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006482:	bf00      	nop
 8006484:	e7fe      	b.n	8006484 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d103      	bne.n	8006494 <xQueueGenericSendFromISR+0x3c>
 800648c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800648e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006490:	2b00      	cmp	r3, #0
 8006492:	d101      	bne.n	8006498 <xQueueGenericSendFromISR+0x40>
 8006494:	2301      	movs	r3, #1
 8006496:	e000      	b.n	800649a <xQueueGenericSendFromISR+0x42>
 8006498:	2300      	movs	r3, #0
 800649a:	2b00      	cmp	r3, #0
 800649c:	d10a      	bne.n	80064b4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800649e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a2:	f383 8811 	msr	BASEPRI, r3
 80064a6:	f3bf 8f6f 	isb	sy
 80064aa:	f3bf 8f4f 	dsb	sy
 80064ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 80064b0:	bf00      	nop
 80064b2:	e7fe      	b.n	80064b2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	2b02      	cmp	r3, #2
 80064b8:	d103      	bne.n	80064c2 <xQueueGenericSendFromISR+0x6a>
 80064ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d101      	bne.n	80064c6 <xQueueGenericSendFromISR+0x6e>
 80064c2:	2301      	movs	r3, #1
 80064c4:	e000      	b.n	80064c8 <xQueueGenericSendFromISR+0x70>
 80064c6:	2300      	movs	r3, #0
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d10a      	bne.n	80064e2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80064cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d0:	f383 8811 	msr	BASEPRI, r3
 80064d4:	f3bf 8f6f 	isb	sy
 80064d8:	f3bf 8f4f 	dsb	sy
 80064dc:	623b      	str	r3, [r7, #32]
}
 80064de:	bf00      	nop
 80064e0:	e7fe      	b.n	80064e0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80064e2:	f002 f9c9 	bl	8008878 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80064e6:	f3ef 8211 	mrs	r2, BASEPRI
 80064ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ee:	f383 8811 	msr	BASEPRI, r3
 80064f2:	f3bf 8f6f 	isb	sy
 80064f6:	f3bf 8f4f 	dsb	sy
 80064fa:	61fa      	str	r2, [r7, #28]
 80064fc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80064fe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006500:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006504:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800650a:	429a      	cmp	r2, r3
 800650c:	d302      	bcc.n	8006514 <xQueueGenericSendFromISR+0xbc>
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	2b02      	cmp	r3, #2
 8006512:	d12f      	bne.n	8006574 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006516:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800651a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800651e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006522:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006524:	683a      	ldr	r2, [r7, #0]
 8006526:	68b9      	ldr	r1, [r7, #8]
 8006528:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800652a:	f000 fac1 	bl	8006ab0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800652e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006536:	d112      	bne.n	800655e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800653a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653c:	2b00      	cmp	r3, #0
 800653e:	d016      	beq.n	800656e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006542:	3324      	adds	r3, #36	; 0x24
 8006544:	4618      	mov	r0, r3
 8006546:	f001 f89f 	bl	8007688 <xTaskRemoveFromEventList>
 800654a:	4603      	mov	r3, r0
 800654c:	2b00      	cmp	r3, #0
 800654e:	d00e      	beq.n	800656e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d00b      	beq.n	800656e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2201      	movs	r2, #1
 800655a:	601a      	str	r2, [r3, #0]
 800655c:	e007      	b.n	800656e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800655e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006562:	3301      	adds	r3, #1
 8006564:	b2db      	uxtb	r3, r3
 8006566:	b25a      	sxtb	r2, r3
 8006568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800656a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800656e:	2301      	movs	r3, #1
 8006570:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006572:	e001      	b.n	8006578 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006574:	2300      	movs	r3, #0
 8006576:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800657a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006582:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006586:	4618      	mov	r0, r3
 8006588:	3740      	adds	r7, #64	; 0x40
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}

0800658e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800658e:	b580      	push	{r7, lr}
 8006590:	b08e      	sub	sp, #56	; 0x38
 8006592:	af00      	add	r7, sp, #0
 8006594:	6078      	str	r0, [r7, #4]
 8006596:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800659c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d10a      	bne.n	80065b8 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80065a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a6:	f383 8811 	msr	BASEPRI, r3
 80065aa:	f3bf 8f6f 	isb	sy
 80065ae:	f3bf 8f4f 	dsb	sy
 80065b2:	623b      	str	r3, [r7, #32]
}
 80065b4:	bf00      	nop
 80065b6:	e7fe      	b.n	80065b6 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80065b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d00a      	beq.n	80065d6 <xQueueGiveFromISR+0x48>
	__asm volatile
 80065c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c4:	f383 8811 	msr	BASEPRI, r3
 80065c8:	f3bf 8f6f 	isb	sy
 80065cc:	f3bf 8f4f 	dsb	sy
 80065d0:	61fb      	str	r3, [r7, #28]
}
 80065d2:	bf00      	nop
 80065d4:	e7fe      	b.n	80065d4 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80065d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d103      	bne.n	80065e6 <xQueueGiveFromISR+0x58>
 80065de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d101      	bne.n	80065ea <xQueueGiveFromISR+0x5c>
 80065e6:	2301      	movs	r3, #1
 80065e8:	e000      	b.n	80065ec <xQueueGiveFromISR+0x5e>
 80065ea:	2300      	movs	r3, #0
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d10a      	bne.n	8006606 <xQueueGiveFromISR+0x78>
	__asm volatile
 80065f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f4:	f383 8811 	msr	BASEPRI, r3
 80065f8:	f3bf 8f6f 	isb	sy
 80065fc:	f3bf 8f4f 	dsb	sy
 8006600:	61bb      	str	r3, [r7, #24]
}
 8006602:	bf00      	nop
 8006604:	e7fe      	b.n	8006604 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006606:	f002 f937 	bl	8008878 <vPortValidateInterruptPriority>
	__asm volatile
 800660a:	f3ef 8211 	mrs	r2, BASEPRI
 800660e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006612:	f383 8811 	msr	BASEPRI, r3
 8006616:	f3bf 8f6f 	isb	sy
 800661a:	f3bf 8f4f 	dsb	sy
 800661e:	617a      	str	r2, [r7, #20]
 8006620:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006622:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006624:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800662a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800662c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800662e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006630:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006632:	429a      	cmp	r2, r3
 8006634:	d22b      	bcs.n	800668e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006638:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800663c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006642:	1c5a      	adds	r2, r3, #1
 8006644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006646:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006648:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800664c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006650:	d112      	bne.n	8006678 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006656:	2b00      	cmp	r3, #0
 8006658:	d016      	beq.n	8006688 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800665a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800665c:	3324      	adds	r3, #36	; 0x24
 800665e:	4618      	mov	r0, r3
 8006660:	f001 f812 	bl	8007688 <xTaskRemoveFromEventList>
 8006664:	4603      	mov	r3, r0
 8006666:	2b00      	cmp	r3, #0
 8006668:	d00e      	beq.n	8006688 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d00b      	beq.n	8006688 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	2201      	movs	r2, #1
 8006674:	601a      	str	r2, [r3, #0]
 8006676:	e007      	b.n	8006688 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006678:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800667c:	3301      	adds	r3, #1
 800667e:	b2db      	uxtb	r3, r3
 8006680:	b25a      	sxtb	r2, r3
 8006682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006684:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006688:	2301      	movs	r3, #1
 800668a:	637b      	str	r3, [r7, #52]	; 0x34
 800668c:	e001      	b.n	8006692 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800668e:	2300      	movs	r3, #0
 8006690:	637b      	str	r3, [r7, #52]	; 0x34
 8006692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006694:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f383 8811 	msr	BASEPRI, r3
}
 800669c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800669e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3738      	adds	r7, #56	; 0x38
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b08c      	sub	sp, #48	; 0x30
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	60b9      	str	r1, [r7, #8]
 80066b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80066b4:	2300      	movs	r3, #0
 80066b6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80066bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d10a      	bne.n	80066d8 <xQueueReceive+0x30>
	__asm volatile
 80066c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c6:	f383 8811 	msr	BASEPRI, r3
 80066ca:	f3bf 8f6f 	isb	sy
 80066ce:	f3bf 8f4f 	dsb	sy
 80066d2:	623b      	str	r3, [r7, #32]
}
 80066d4:	bf00      	nop
 80066d6:	e7fe      	b.n	80066d6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d103      	bne.n	80066e6 <xQueueReceive+0x3e>
 80066de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d101      	bne.n	80066ea <xQueueReceive+0x42>
 80066e6:	2301      	movs	r3, #1
 80066e8:	e000      	b.n	80066ec <xQueueReceive+0x44>
 80066ea:	2300      	movs	r3, #0
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d10a      	bne.n	8006706 <xQueueReceive+0x5e>
	__asm volatile
 80066f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f4:	f383 8811 	msr	BASEPRI, r3
 80066f8:	f3bf 8f6f 	isb	sy
 80066fc:	f3bf 8f4f 	dsb	sy
 8006700:	61fb      	str	r3, [r7, #28]
}
 8006702:	bf00      	nop
 8006704:	e7fe      	b.n	8006704 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006706:	f001 f97d 	bl	8007a04 <xTaskGetSchedulerState>
 800670a:	4603      	mov	r3, r0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d102      	bne.n	8006716 <xQueueReceive+0x6e>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d101      	bne.n	800671a <xQueueReceive+0x72>
 8006716:	2301      	movs	r3, #1
 8006718:	e000      	b.n	800671c <xQueueReceive+0x74>
 800671a:	2300      	movs	r3, #0
 800671c:	2b00      	cmp	r3, #0
 800671e:	d10a      	bne.n	8006736 <xQueueReceive+0x8e>
	__asm volatile
 8006720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006724:	f383 8811 	msr	BASEPRI, r3
 8006728:	f3bf 8f6f 	isb	sy
 800672c:	f3bf 8f4f 	dsb	sy
 8006730:	61bb      	str	r3, [r7, #24]
}
 8006732:	bf00      	nop
 8006734:	e7fe      	b.n	8006734 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006736:	f001 ffbd 	bl	80086b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800673a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800673c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800673e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006742:	2b00      	cmp	r3, #0
 8006744:	d01f      	beq.n	8006786 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006746:	68b9      	ldr	r1, [r7, #8]
 8006748:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800674a:	f000 fa1b 	bl	8006b84 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800674e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006750:	1e5a      	subs	r2, r3, #1
 8006752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006754:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006758:	691b      	ldr	r3, [r3, #16]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d00f      	beq.n	800677e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800675e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006760:	3310      	adds	r3, #16
 8006762:	4618      	mov	r0, r3
 8006764:	f000 ff90 	bl	8007688 <xTaskRemoveFromEventList>
 8006768:	4603      	mov	r3, r0
 800676a:	2b00      	cmp	r3, #0
 800676c:	d007      	beq.n	800677e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800676e:	4b3d      	ldr	r3, [pc, #244]	; (8006864 <xQueueReceive+0x1bc>)
 8006770:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006774:	601a      	str	r2, [r3, #0]
 8006776:	f3bf 8f4f 	dsb	sy
 800677a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800677e:	f001 ffc9 	bl	8008714 <vPortExitCritical>
				return pdPASS;
 8006782:	2301      	movs	r3, #1
 8006784:	e069      	b.n	800685a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d103      	bne.n	8006794 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800678c:	f001 ffc2 	bl	8008714 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006790:	2300      	movs	r3, #0
 8006792:	e062      	b.n	800685a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006796:	2b00      	cmp	r3, #0
 8006798:	d106      	bne.n	80067a8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800679a:	f107 0310 	add.w	r3, r7, #16
 800679e:	4618      	mov	r0, r3
 80067a0:	f000 ffd6 	bl	8007750 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80067a4:	2301      	movs	r3, #1
 80067a6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80067a8:	f001 ffb4 	bl	8008714 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80067ac:	f000 fd2e 	bl	800720c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80067b0:	f001 ff80 	bl	80086b4 <vPortEnterCritical>
 80067b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067ba:	b25b      	sxtb	r3, r3
 80067bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067c0:	d103      	bne.n	80067ca <xQueueReceive+0x122>
 80067c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c4:	2200      	movs	r2, #0
 80067c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067d0:	b25b      	sxtb	r3, r3
 80067d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d6:	d103      	bne.n	80067e0 <xQueueReceive+0x138>
 80067d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067da:	2200      	movs	r2, #0
 80067dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067e0:	f001 ff98 	bl	8008714 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80067e4:	1d3a      	adds	r2, r7, #4
 80067e6:	f107 0310 	add.w	r3, r7, #16
 80067ea:	4611      	mov	r1, r2
 80067ec:	4618      	mov	r0, r3
 80067ee:	f000 ffc5 	bl	800777c <xTaskCheckForTimeOut>
 80067f2:	4603      	mov	r3, r0
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d123      	bne.n	8006840 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80067f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067fa:	f000 fa3b 	bl	8006c74 <prvIsQueueEmpty>
 80067fe:	4603      	mov	r3, r0
 8006800:	2b00      	cmp	r3, #0
 8006802:	d017      	beq.n	8006834 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006806:	3324      	adds	r3, #36	; 0x24
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	4611      	mov	r1, r2
 800680c:	4618      	mov	r0, r3
 800680e:	f000 feeb 	bl	80075e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006812:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006814:	f000 f9dc 	bl	8006bd0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006818:	f000 fd06 	bl	8007228 <xTaskResumeAll>
 800681c:	4603      	mov	r3, r0
 800681e:	2b00      	cmp	r3, #0
 8006820:	d189      	bne.n	8006736 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006822:	4b10      	ldr	r3, [pc, #64]	; (8006864 <xQueueReceive+0x1bc>)
 8006824:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006828:	601a      	str	r2, [r3, #0]
 800682a:	f3bf 8f4f 	dsb	sy
 800682e:	f3bf 8f6f 	isb	sy
 8006832:	e780      	b.n	8006736 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006834:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006836:	f000 f9cb 	bl	8006bd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800683a:	f000 fcf5 	bl	8007228 <xTaskResumeAll>
 800683e:	e77a      	b.n	8006736 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006840:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006842:	f000 f9c5 	bl	8006bd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006846:	f000 fcef 	bl	8007228 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800684a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800684c:	f000 fa12 	bl	8006c74 <prvIsQueueEmpty>
 8006850:	4603      	mov	r3, r0
 8006852:	2b00      	cmp	r3, #0
 8006854:	f43f af6f 	beq.w	8006736 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006858:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800685a:	4618      	mov	r0, r3
 800685c:	3730      	adds	r7, #48	; 0x30
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}
 8006862:	bf00      	nop
 8006864:	e000ed04 	.word	0xe000ed04

08006868 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b08e      	sub	sp, #56	; 0x38
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006872:	2300      	movs	r3, #0
 8006874:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800687a:	2300      	movs	r3, #0
 800687c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800687e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006880:	2b00      	cmp	r3, #0
 8006882:	d10a      	bne.n	800689a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006888:	f383 8811 	msr	BASEPRI, r3
 800688c:	f3bf 8f6f 	isb	sy
 8006890:	f3bf 8f4f 	dsb	sy
 8006894:	623b      	str	r3, [r7, #32]
}
 8006896:	bf00      	nop
 8006898:	e7fe      	b.n	8006898 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800689a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800689c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d00a      	beq.n	80068b8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80068a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a6:	f383 8811 	msr	BASEPRI, r3
 80068aa:	f3bf 8f6f 	isb	sy
 80068ae:	f3bf 8f4f 	dsb	sy
 80068b2:	61fb      	str	r3, [r7, #28]
}
 80068b4:	bf00      	nop
 80068b6:	e7fe      	b.n	80068b6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80068b8:	f001 f8a4 	bl	8007a04 <xTaskGetSchedulerState>
 80068bc:	4603      	mov	r3, r0
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d102      	bne.n	80068c8 <xQueueSemaphoreTake+0x60>
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d101      	bne.n	80068cc <xQueueSemaphoreTake+0x64>
 80068c8:	2301      	movs	r3, #1
 80068ca:	e000      	b.n	80068ce <xQueueSemaphoreTake+0x66>
 80068cc:	2300      	movs	r3, #0
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d10a      	bne.n	80068e8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80068d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d6:	f383 8811 	msr	BASEPRI, r3
 80068da:	f3bf 8f6f 	isb	sy
 80068de:	f3bf 8f4f 	dsb	sy
 80068e2:	61bb      	str	r3, [r7, #24]
}
 80068e4:	bf00      	nop
 80068e6:	e7fe      	b.n	80068e6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80068e8:	f001 fee4 	bl	80086b4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80068ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80068f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d024      	beq.n	8006942 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80068f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068fa:	1e5a      	subs	r2, r3, #1
 80068fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068fe:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d104      	bne.n	8006912 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006908:	f001 f9f2 	bl	8007cf0 <pvTaskIncrementMutexHeldCount>
 800690c:	4602      	mov	r2, r0
 800690e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006910:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006914:	691b      	ldr	r3, [r3, #16]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d00f      	beq.n	800693a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800691a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800691c:	3310      	adds	r3, #16
 800691e:	4618      	mov	r0, r3
 8006920:	f000 feb2 	bl	8007688 <xTaskRemoveFromEventList>
 8006924:	4603      	mov	r3, r0
 8006926:	2b00      	cmp	r3, #0
 8006928:	d007      	beq.n	800693a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800692a:	4b54      	ldr	r3, [pc, #336]	; (8006a7c <xQueueSemaphoreTake+0x214>)
 800692c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006930:	601a      	str	r2, [r3, #0]
 8006932:	f3bf 8f4f 	dsb	sy
 8006936:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800693a:	f001 feeb 	bl	8008714 <vPortExitCritical>
				return pdPASS;
 800693e:	2301      	movs	r3, #1
 8006940:	e097      	b.n	8006a72 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d111      	bne.n	800696c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800694a:	2b00      	cmp	r3, #0
 800694c:	d00a      	beq.n	8006964 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800694e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006952:	f383 8811 	msr	BASEPRI, r3
 8006956:	f3bf 8f6f 	isb	sy
 800695a:	f3bf 8f4f 	dsb	sy
 800695e:	617b      	str	r3, [r7, #20]
}
 8006960:	bf00      	nop
 8006962:	e7fe      	b.n	8006962 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006964:	f001 fed6 	bl	8008714 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006968:	2300      	movs	r3, #0
 800696a:	e082      	b.n	8006a72 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800696c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800696e:	2b00      	cmp	r3, #0
 8006970:	d106      	bne.n	8006980 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006972:	f107 030c 	add.w	r3, r7, #12
 8006976:	4618      	mov	r0, r3
 8006978:	f000 feea 	bl	8007750 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800697c:	2301      	movs	r3, #1
 800697e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006980:	f001 fec8 	bl	8008714 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006984:	f000 fc42 	bl	800720c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006988:	f001 fe94 	bl	80086b4 <vPortEnterCritical>
 800698c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800698e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006992:	b25b      	sxtb	r3, r3
 8006994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006998:	d103      	bne.n	80069a2 <xQueueSemaphoreTake+0x13a>
 800699a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800699c:	2200      	movs	r2, #0
 800699e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069a8:	b25b      	sxtb	r3, r3
 80069aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ae:	d103      	bne.n	80069b8 <xQueueSemaphoreTake+0x150>
 80069b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b2:	2200      	movs	r2, #0
 80069b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069b8:	f001 feac 	bl	8008714 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80069bc:	463a      	mov	r2, r7
 80069be:	f107 030c 	add.w	r3, r7, #12
 80069c2:	4611      	mov	r1, r2
 80069c4:	4618      	mov	r0, r3
 80069c6:	f000 fed9 	bl	800777c <xTaskCheckForTimeOut>
 80069ca:	4603      	mov	r3, r0
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d132      	bne.n	8006a36 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80069d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80069d2:	f000 f94f 	bl	8006c74 <prvIsQueueEmpty>
 80069d6:	4603      	mov	r3, r0
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d026      	beq.n	8006a2a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80069dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d109      	bne.n	80069f8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80069e4:	f001 fe66 	bl	80086b4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80069e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	4618      	mov	r0, r3
 80069ee:	f001 f827 	bl	8007a40 <xTaskPriorityInherit>
 80069f2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80069f4:	f001 fe8e 	bl	8008714 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80069f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069fa:	3324      	adds	r3, #36	; 0x24
 80069fc:	683a      	ldr	r2, [r7, #0]
 80069fe:	4611      	mov	r1, r2
 8006a00:	4618      	mov	r0, r3
 8006a02:	f000 fdf1 	bl	80075e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006a06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a08:	f000 f8e2 	bl	8006bd0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006a0c:	f000 fc0c 	bl	8007228 <xTaskResumeAll>
 8006a10:	4603      	mov	r3, r0
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	f47f af68 	bne.w	80068e8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006a18:	4b18      	ldr	r3, [pc, #96]	; (8006a7c <xQueueSemaphoreTake+0x214>)
 8006a1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a1e:	601a      	str	r2, [r3, #0]
 8006a20:	f3bf 8f4f 	dsb	sy
 8006a24:	f3bf 8f6f 	isb	sy
 8006a28:	e75e      	b.n	80068e8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006a2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a2c:	f000 f8d0 	bl	8006bd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006a30:	f000 fbfa 	bl	8007228 <xTaskResumeAll>
 8006a34:	e758      	b.n	80068e8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006a36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a38:	f000 f8ca 	bl	8006bd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006a3c:	f000 fbf4 	bl	8007228 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a42:	f000 f917 	bl	8006c74 <prvIsQueueEmpty>
 8006a46:	4603      	mov	r3, r0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	f43f af4d 	beq.w	80068e8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d00d      	beq.n	8006a70 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006a54:	f001 fe2e 	bl	80086b4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006a58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a5a:	f000 f811 	bl	8006a80 <prvGetDisinheritPriorityAfterTimeout>
 8006a5e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a62:	689b      	ldr	r3, [r3, #8]
 8006a64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006a66:	4618      	mov	r0, r3
 8006a68:	f001 f8c0 	bl	8007bec <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006a6c:	f001 fe52 	bl	8008714 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006a70:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3738      	adds	r7, #56	; 0x38
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
 8006a7a:	bf00      	nop
 8006a7c:	e000ed04 	.word	0xe000ed04

08006a80 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006a80:	b480      	push	{r7}
 8006a82:	b085      	sub	sp, #20
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d006      	beq.n	8006a9e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006a9a:	60fb      	str	r3, [r7, #12]
 8006a9c:	e001      	b.n	8006aa2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
	}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3714      	adds	r7, #20
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr

08006ab0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b086      	sub	sp, #24
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	60f8      	str	r0, [r7, #12]
 8006ab8:	60b9      	str	r1, [r7, #8]
 8006aba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006abc:	2300      	movs	r3, #0
 8006abe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d10d      	bne.n	8006aea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d14d      	bne.n	8006b72 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	4618      	mov	r0, r3
 8006adc:	f001 f818 	bl	8007b10 <xTaskPriorityDisinherit>
 8006ae0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	609a      	str	r2, [r3, #8]
 8006ae8:	e043      	b.n	8006b72 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d119      	bne.n	8006b24 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	6858      	ldr	r0, [r3, #4]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af8:	461a      	mov	r2, r3
 8006afa:	68b9      	ldr	r1, [r7, #8]
 8006afc:	f002 fc54 	bl	80093a8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	685a      	ldr	r2, [r3, #4]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b08:	441a      	add	r2, r3
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	685a      	ldr	r2, [r3, #4]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d32b      	bcc.n	8006b72 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681a      	ldr	r2, [r3, #0]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	605a      	str	r2, [r3, #4]
 8006b22:	e026      	b.n	8006b72 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	68d8      	ldr	r0, [r3, #12]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	68b9      	ldr	r1, [r7, #8]
 8006b30:	f002 fc3a 	bl	80093a8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	68da      	ldr	r2, [r3, #12]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b3c:	425b      	negs	r3, r3
 8006b3e:	441a      	add	r2, r3
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	68da      	ldr	r2, [r3, #12]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d207      	bcs.n	8006b60 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	689a      	ldr	r2, [r3, #8]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b58:	425b      	negs	r3, r3
 8006b5a:	441a      	add	r2, r3
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2b02      	cmp	r3, #2
 8006b64:	d105      	bne.n	8006b72 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d002      	beq.n	8006b72 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	3b01      	subs	r3, #1
 8006b70:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	1c5a      	adds	r2, r3, #1
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006b7a:	697b      	ldr	r3, [r7, #20]
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3718      	adds	r7, #24
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b082      	sub	sp, #8
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d018      	beq.n	8006bc8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	68da      	ldr	r2, [r3, #12]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b9e:	441a      	add	r2, r3
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	68da      	ldr	r2, [r3, #12]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d303      	bcc.n	8006bb8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	68d9      	ldr	r1, [r3, #12]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	6838      	ldr	r0, [r7, #0]
 8006bc4:	f002 fbf0 	bl	80093a8 <memcpy>
	}
}
 8006bc8:	bf00      	nop
 8006bca:	3708      	adds	r7, #8
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}

08006bd0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b084      	sub	sp, #16
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006bd8:	f001 fd6c 	bl	80086b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006be2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006be4:	e011      	b.n	8006c0a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d012      	beq.n	8006c14 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	3324      	adds	r3, #36	; 0x24
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f000 fd48 	bl	8007688 <xTaskRemoveFromEventList>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d001      	beq.n	8006c02 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006bfe:	f000 fe1f 	bl	8007840 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006c02:	7bfb      	ldrb	r3, [r7, #15]
 8006c04:	3b01      	subs	r3, #1
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006c0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	dce9      	bgt.n	8006be6 <prvUnlockQueue+0x16>
 8006c12:	e000      	b.n	8006c16 <prvUnlockQueue+0x46>
					break;
 8006c14:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	22ff      	movs	r2, #255	; 0xff
 8006c1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006c1e:	f001 fd79 	bl	8008714 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006c22:	f001 fd47 	bl	80086b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c2c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006c2e:	e011      	b.n	8006c54 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	691b      	ldr	r3, [r3, #16]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d012      	beq.n	8006c5e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	3310      	adds	r3, #16
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f000 fd23 	bl	8007688 <xTaskRemoveFromEventList>
 8006c42:	4603      	mov	r3, r0
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d001      	beq.n	8006c4c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006c48:	f000 fdfa 	bl	8007840 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006c4c:	7bbb      	ldrb	r3, [r7, #14]
 8006c4e:	3b01      	subs	r3, #1
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006c54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	dce9      	bgt.n	8006c30 <prvUnlockQueue+0x60>
 8006c5c:	e000      	b.n	8006c60 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006c5e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	22ff      	movs	r2, #255	; 0xff
 8006c64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006c68:	f001 fd54 	bl	8008714 <vPortExitCritical>
}
 8006c6c:	bf00      	nop
 8006c6e:	3710      	adds	r7, #16
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b084      	sub	sp, #16
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006c7c:	f001 fd1a 	bl	80086b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d102      	bne.n	8006c8e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	60fb      	str	r3, [r7, #12]
 8006c8c:	e001      	b.n	8006c92 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006c92:	f001 fd3f 	bl	8008714 <vPortExitCritical>

	return xReturn;
 8006c96:	68fb      	ldr	r3, [r7, #12]
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3710      	adds	r7, #16
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ca8:	f001 fd04 	bl	80086b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d102      	bne.n	8006cbe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	60fb      	str	r3, [r7, #12]
 8006cbc:	e001      	b.n	8006cc2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006cc2:	f001 fd27 	bl	8008714 <vPortExitCritical>

	return xReturn;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3710      	adds	r7, #16
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}

08006cd0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b085      	sub	sp, #20
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006cda:	2300      	movs	r3, #0
 8006cdc:	60fb      	str	r3, [r7, #12]
 8006cde:	e014      	b.n	8006d0a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006ce0:	4a0f      	ldr	r2, [pc, #60]	; (8006d20 <vQueueAddToRegistry+0x50>)
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d10b      	bne.n	8006d04 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006cec:	490c      	ldr	r1, [pc, #48]	; (8006d20 <vQueueAddToRegistry+0x50>)
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	683a      	ldr	r2, [r7, #0]
 8006cf2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006cf6:	4a0a      	ldr	r2, [pc, #40]	; (8006d20 <vQueueAddToRegistry+0x50>)
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	00db      	lsls	r3, r3, #3
 8006cfc:	4413      	add	r3, r2
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006d02:	e006      	b.n	8006d12 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	3301      	adds	r3, #1
 8006d08:	60fb      	str	r3, [r7, #12]
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2b07      	cmp	r3, #7
 8006d0e:	d9e7      	bls.n	8006ce0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006d10:	bf00      	nop
 8006d12:	bf00      	nop
 8006d14:	3714      	adds	r7, #20
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr
 8006d1e:	bf00      	nop
 8006d20:	20001a6c 	.word	0x20001a6c

08006d24 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b086      	sub	sp, #24
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	60f8      	str	r0, [r7, #12]
 8006d2c:	60b9      	str	r1, [r7, #8]
 8006d2e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006d34:	f001 fcbe 	bl	80086b4 <vPortEnterCritical>
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d3e:	b25b      	sxtb	r3, r3
 8006d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d44:	d103      	bne.n	8006d4e <vQueueWaitForMessageRestricted+0x2a>
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d54:	b25b      	sxtb	r3, r3
 8006d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d5a:	d103      	bne.n	8006d64 <vQueueWaitForMessageRestricted+0x40>
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d64:	f001 fcd6 	bl	8008714 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d106      	bne.n	8006d7e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	3324      	adds	r3, #36	; 0x24
 8006d74:	687a      	ldr	r2, [r7, #4]
 8006d76:	68b9      	ldr	r1, [r7, #8]
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f000 fc59 	bl	8007630 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006d7e:	6978      	ldr	r0, [r7, #20]
 8006d80:	f7ff ff26 	bl	8006bd0 <prvUnlockQueue>
	}
 8006d84:	bf00      	nop
 8006d86:	3718      	adds	r7, #24
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b08e      	sub	sp, #56	; 0x38
 8006d90:	af04      	add	r7, sp, #16
 8006d92:	60f8      	str	r0, [r7, #12]
 8006d94:	60b9      	str	r1, [r7, #8]
 8006d96:	607a      	str	r2, [r7, #4]
 8006d98:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d10a      	bne.n	8006db6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da4:	f383 8811 	msr	BASEPRI, r3
 8006da8:	f3bf 8f6f 	isb	sy
 8006dac:	f3bf 8f4f 	dsb	sy
 8006db0:	623b      	str	r3, [r7, #32]
}
 8006db2:	bf00      	nop
 8006db4:	e7fe      	b.n	8006db4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d10a      	bne.n	8006dd2 <xTaskCreateStatic+0x46>
	__asm volatile
 8006dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc0:	f383 8811 	msr	BASEPRI, r3
 8006dc4:	f3bf 8f6f 	isb	sy
 8006dc8:	f3bf 8f4f 	dsb	sy
 8006dcc:	61fb      	str	r3, [r7, #28]
}
 8006dce:	bf00      	nop
 8006dd0:	e7fe      	b.n	8006dd0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006dd2:	2360      	movs	r3, #96	; 0x60
 8006dd4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	2b60      	cmp	r3, #96	; 0x60
 8006dda:	d00a      	beq.n	8006df2 <xTaskCreateStatic+0x66>
	__asm volatile
 8006ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de0:	f383 8811 	msr	BASEPRI, r3
 8006de4:	f3bf 8f6f 	isb	sy
 8006de8:	f3bf 8f4f 	dsb	sy
 8006dec:	61bb      	str	r3, [r7, #24]
}
 8006dee:	bf00      	nop
 8006df0:	e7fe      	b.n	8006df0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006df2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d01e      	beq.n	8006e38 <xTaskCreateStatic+0xac>
 8006dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d01b      	beq.n	8006e38 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e02:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e08:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0c:	2202      	movs	r2, #2
 8006e0e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006e12:	2300      	movs	r3, #0
 8006e14:	9303      	str	r3, [sp, #12]
 8006e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e18:	9302      	str	r3, [sp, #8]
 8006e1a:	f107 0314 	add.w	r3, r7, #20
 8006e1e:	9301      	str	r3, [sp, #4]
 8006e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e22:	9300      	str	r3, [sp, #0]
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	68b9      	ldr	r1, [r7, #8]
 8006e2a:	68f8      	ldr	r0, [r7, #12]
 8006e2c:	f000 f850 	bl	8006ed0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006e30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006e32:	f000 f8df 	bl	8006ff4 <prvAddNewTaskToReadyList>
 8006e36:	e001      	b.n	8006e3c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006e3c:	697b      	ldr	r3, [r7, #20]
	}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3728      	adds	r7, #40	; 0x28
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}

08006e46 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006e46:	b580      	push	{r7, lr}
 8006e48:	b08c      	sub	sp, #48	; 0x30
 8006e4a:	af04      	add	r7, sp, #16
 8006e4c:	60f8      	str	r0, [r7, #12]
 8006e4e:	60b9      	str	r1, [r7, #8]
 8006e50:	603b      	str	r3, [r7, #0]
 8006e52:	4613      	mov	r3, r2
 8006e54:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006e56:	88fb      	ldrh	r3, [r7, #6]
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f001 fd4c 	bl	80088f8 <pvPortMalloc>
 8006e60:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d00e      	beq.n	8006e86 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006e68:	2060      	movs	r0, #96	; 0x60
 8006e6a:	f001 fd45 	bl	80088f8 <pvPortMalloc>
 8006e6e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006e70:	69fb      	ldr	r3, [r7, #28]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d003      	beq.n	8006e7e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006e76:	69fb      	ldr	r3, [r7, #28]
 8006e78:	697a      	ldr	r2, [r7, #20]
 8006e7a:	631a      	str	r2, [r3, #48]	; 0x30
 8006e7c:	e005      	b.n	8006e8a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006e7e:	6978      	ldr	r0, [r7, #20]
 8006e80:	f001 fe06 	bl	8008a90 <vPortFree>
 8006e84:	e001      	b.n	8006e8a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006e86:	2300      	movs	r3, #0
 8006e88:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006e8a:	69fb      	ldr	r3, [r7, #28]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d017      	beq.n	8006ec0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006e90:	69fb      	ldr	r3, [r7, #28]
 8006e92:	2200      	movs	r2, #0
 8006e94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006e98:	88fa      	ldrh	r2, [r7, #6]
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	9303      	str	r3, [sp, #12]
 8006e9e:	69fb      	ldr	r3, [r7, #28]
 8006ea0:	9302      	str	r3, [sp, #8]
 8006ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea4:	9301      	str	r3, [sp, #4]
 8006ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea8:	9300      	str	r3, [sp, #0]
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	68b9      	ldr	r1, [r7, #8]
 8006eae:	68f8      	ldr	r0, [r7, #12]
 8006eb0:	f000 f80e 	bl	8006ed0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006eb4:	69f8      	ldr	r0, [r7, #28]
 8006eb6:	f000 f89d 	bl	8006ff4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	61bb      	str	r3, [r7, #24]
 8006ebe:	e002      	b.n	8006ec6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8006ec4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006ec6:	69bb      	ldr	r3, [r7, #24]
	}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3720      	adds	r7, #32
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}

08006ed0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b088      	sub	sp, #32
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	60f8      	str	r0, [r7, #12]
 8006ed8:	60b9      	str	r1, [r7, #8]
 8006eda:	607a      	str	r2, [r7, #4]
 8006edc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	461a      	mov	r2, r3
 8006ee8:	21a5      	movs	r1, #165	; 0xa5
 8006eea:	f002 fa6b 	bl	80093c4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006ef8:	3b01      	subs	r3, #1
 8006efa:	009b      	lsls	r3, r3, #2
 8006efc:	4413      	add	r3, r2
 8006efe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006f00:	69bb      	ldr	r3, [r7, #24]
 8006f02:	f023 0307 	bic.w	r3, r3, #7
 8006f06:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006f08:	69bb      	ldr	r3, [r7, #24]
 8006f0a:	f003 0307 	and.w	r3, r3, #7
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d00a      	beq.n	8006f28 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f16:	f383 8811 	msr	BASEPRI, r3
 8006f1a:	f3bf 8f6f 	isb	sy
 8006f1e:	f3bf 8f4f 	dsb	sy
 8006f22:	617b      	str	r3, [r7, #20]
}
 8006f24:	bf00      	nop
 8006f26:	e7fe      	b.n	8006f26 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d01f      	beq.n	8006f6e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006f2e:	2300      	movs	r3, #0
 8006f30:	61fb      	str	r3, [r7, #28]
 8006f32:	e012      	b.n	8006f5a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006f34:	68ba      	ldr	r2, [r7, #8]
 8006f36:	69fb      	ldr	r3, [r7, #28]
 8006f38:	4413      	add	r3, r2
 8006f3a:	7819      	ldrb	r1, [r3, #0]
 8006f3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f3e:	69fb      	ldr	r3, [r7, #28]
 8006f40:	4413      	add	r3, r2
 8006f42:	3334      	adds	r3, #52	; 0x34
 8006f44:	460a      	mov	r2, r1
 8006f46:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006f48:	68ba      	ldr	r2, [r7, #8]
 8006f4a:	69fb      	ldr	r3, [r7, #28]
 8006f4c:	4413      	add	r3, r2
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d006      	beq.n	8006f62 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006f54:	69fb      	ldr	r3, [r7, #28]
 8006f56:	3301      	adds	r3, #1
 8006f58:	61fb      	str	r3, [r7, #28]
 8006f5a:	69fb      	ldr	r3, [r7, #28]
 8006f5c:	2b0f      	cmp	r3, #15
 8006f5e:	d9e9      	bls.n	8006f34 <prvInitialiseNewTask+0x64>
 8006f60:	e000      	b.n	8006f64 <prvInitialiseNewTask+0x94>
			{
				break;
 8006f62:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f66:	2200      	movs	r2, #0
 8006f68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006f6c:	e003      	b.n	8006f76 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f70:	2200      	movs	r2, #0
 8006f72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f78:	2b37      	cmp	r3, #55	; 0x37
 8006f7a:	d901      	bls.n	8006f80 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006f7c:	2337      	movs	r3, #55	; 0x37
 8006f7e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f84:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f8a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f8e:	2200      	movs	r2, #0
 8006f90:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f94:	3304      	adds	r3, #4
 8006f96:	4618      	mov	r0, r3
 8006f98:	f7fe ff8e 	bl	8005eb8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f9e:	3318      	adds	r3, #24
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f7fe ff89 	bl	8005eb8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006faa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fba:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8006fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fca:	2200      	movs	r2, #0
 8006fcc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006fd0:	683a      	ldr	r2, [r7, #0]
 8006fd2:	68f9      	ldr	r1, [r7, #12]
 8006fd4:	69b8      	ldr	r0, [r7, #24]
 8006fd6:	f001 fa41 	bl	800845c <pxPortInitialiseStack>
 8006fda:	4602      	mov	r2, r0
 8006fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fde:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d002      	beq.n	8006fec <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fea:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006fec:	bf00      	nop
 8006fee:	3720      	adds	r7, #32
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b082      	sub	sp, #8
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006ffc:	f001 fb5a 	bl	80086b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007000:	4b2d      	ldr	r3, [pc, #180]	; (80070b8 <prvAddNewTaskToReadyList+0xc4>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	3301      	adds	r3, #1
 8007006:	4a2c      	ldr	r2, [pc, #176]	; (80070b8 <prvAddNewTaskToReadyList+0xc4>)
 8007008:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800700a:	4b2c      	ldr	r3, [pc, #176]	; (80070bc <prvAddNewTaskToReadyList+0xc8>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d109      	bne.n	8007026 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007012:	4a2a      	ldr	r2, [pc, #168]	; (80070bc <prvAddNewTaskToReadyList+0xc8>)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007018:	4b27      	ldr	r3, [pc, #156]	; (80070b8 <prvAddNewTaskToReadyList+0xc4>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	2b01      	cmp	r3, #1
 800701e:	d110      	bne.n	8007042 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007020:	f000 fc32 	bl	8007888 <prvInitialiseTaskLists>
 8007024:	e00d      	b.n	8007042 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007026:	4b26      	ldr	r3, [pc, #152]	; (80070c0 <prvAddNewTaskToReadyList+0xcc>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d109      	bne.n	8007042 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800702e:	4b23      	ldr	r3, [pc, #140]	; (80070bc <prvAddNewTaskToReadyList+0xc8>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007038:	429a      	cmp	r2, r3
 800703a:	d802      	bhi.n	8007042 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800703c:	4a1f      	ldr	r2, [pc, #124]	; (80070bc <prvAddNewTaskToReadyList+0xc8>)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007042:	4b20      	ldr	r3, [pc, #128]	; (80070c4 <prvAddNewTaskToReadyList+0xd0>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	3301      	adds	r3, #1
 8007048:	4a1e      	ldr	r2, [pc, #120]	; (80070c4 <prvAddNewTaskToReadyList+0xd0>)
 800704a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800704c:	4b1d      	ldr	r3, [pc, #116]	; (80070c4 <prvAddNewTaskToReadyList+0xd0>)
 800704e:	681a      	ldr	r2, [r3, #0]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007058:	4b1b      	ldr	r3, [pc, #108]	; (80070c8 <prvAddNewTaskToReadyList+0xd4>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	429a      	cmp	r2, r3
 800705e:	d903      	bls.n	8007068 <prvAddNewTaskToReadyList+0x74>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007064:	4a18      	ldr	r2, [pc, #96]	; (80070c8 <prvAddNewTaskToReadyList+0xd4>)
 8007066:	6013      	str	r3, [r2, #0]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800706c:	4613      	mov	r3, r2
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	4413      	add	r3, r2
 8007072:	009b      	lsls	r3, r3, #2
 8007074:	4a15      	ldr	r2, [pc, #84]	; (80070cc <prvAddNewTaskToReadyList+0xd8>)
 8007076:	441a      	add	r2, r3
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	3304      	adds	r3, #4
 800707c:	4619      	mov	r1, r3
 800707e:	4610      	mov	r0, r2
 8007080:	f7fe ff27 	bl	8005ed2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007084:	f001 fb46 	bl	8008714 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007088:	4b0d      	ldr	r3, [pc, #52]	; (80070c0 <prvAddNewTaskToReadyList+0xcc>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d00e      	beq.n	80070ae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007090:	4b0a      	ldr	r3, [pc, #40]	; (80070bc <prvAddNewTaskToReadyList+0xc8>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800709a:	429a      	cmp	r2, r3
 800709c:	d207      	bcs.n	80070ae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800709e:	4b0c      	ldr	r3, [pc, #48]	; (80070d0 <prvAddNewTaskToReadyList+0xdc>)
 80070a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070a4:	601a      	str	r2, [r3, #0]
 80070a6:	f3bf 8f4f 	dsb	sy
 80070aa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80070ae:	bf00      	nop
 80070b0:	3708      	adds	r7, #8
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
 80070b6:	bf00      	nop
 80070b8:	20000bd0 	.word	0x20000bd0
 80070bc:	200006fc 	.word	0x200006fc
 80070c0:	20000bdc 	.word	0x20000bdc
 80070c4:	20000bec 	.word	0x20000bec
 80070c8:	20000bd8 	.word	0x20000bd8
 80070cc:	20000700 	.word	0x20000700
 80070d0:	e000ed04 	.word	0xe000ed04

080070d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b084      	sub	sp, #16
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80070dc:	2300      	movs	r3, #0
 80070de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d017      	beq.n	8007116 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80070e6:	4b13      	ldr	r3, [pc, #76]	; (8007134 <vTaskDelay+0x60>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d00a      	beq.n	8007104 <vTaskDelay+0x30>
	__asm volatile
 80070ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f2:	f383 8811 	msr	BASEPRI, r3
 80070f6:	f3bf 8f6f 	isb	sy
 80070fa:	f3bf 8f4f 	dsb	sy
 80070fe:	60bb      	str	r3, [r7, #8]
}
 8007100:	bf00      	nop
 8007102:	e7fe      	b.n	8007102 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007104:	f000 f882 	bl	800720c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007108:	2100      	movs	r1, #0
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 fe04 	bl	8007d18 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007110:	f000 f88a 	bl	8007228 <xTaskResumeAll>
 8007114:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d107      	bne.n	800712c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800711c:	4b06      	ldr	r3, [pc, #24]	; (8007138 <vTaskDelay+0x64>)
 800711e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007122:	601a      	str	r2, [r3, #0]
 8007124:	f3bf 8f4f 	dsb	sy
 8007128:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800712c:	bf00      	nop
 800712e:	3710      	adds	r7, #16
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}
 8007134:	20000bf8 	.word	0x20000bf8
 8007138:	e000ed04 	.word	0xe000ed04

0800713c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b08a      	sub	sp, #40	; 0x28
 8007140:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007142:	2300      	movs	r3, #0
 8007144:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007146:	2300      	movs	r3, #0
 8007148:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800714a:	463a      	mov	r2, r7
 800714c:	1d39      	adds	r1, r7, #4
 800714e:	f107 0308 	add.w	r3, r7, #8
 8007152:	4618      	mov	r0, r3
 8007154:	f7fe fe5c 	bl	8005e10 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007158:	6839      	ldr	r1, [r7, #0]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	68ba      	ldr	r2, [r7, #8]
 800715e:	9202      	str	r2, [sp, #8]
 8007160:	9301      	str	r3, [sp, #4]
 8007162:	2300      	movs	r3, #0
 8007164:	9300      	str	r3, [sp, #0]
 8007166:	2300      	movs	r3, #0
 8007168:	460a      	mov	r2, r1
 800716a:	4922      	ldr	r1, [pc, #136]	; (80071f4 <vTaskStartScheduler+0xb8>)
 800716c:	4822      	ldr	r0, [pc, #136]	; (80071f8 <vTaskStartScheduler+0xbc>)
 800716e:	f7ff fe0d 	bl	8006d8c <xTaskCreateStatic>
 8007172:	4603      	mov	r3, r0
 8007174:	4a21      	ldr	r2, [pc, #132]	; (80071fc <vTaskStartScheduler+0xc0>)
 8007176:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007178:	4b20      	ldr	r3, [pc, #128]	; (80071fc <vTaskStartScheduler+0xc0>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d002      	beq.n	8007186 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007180:	2301      	movs	r3, #1
 8007182:	617b      	str	r3, [r7, #20]
 8007184:	e001      	b.n	800718a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007186:	2300      	movs	r3, #0
 8007188:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	2b01      	cmp	r3, #1
 800718e:	d102      	bne.n	8007196 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007190:	f000 fe16 	bl	8007dc0 <xTimerCreateTimerTask>
 8007194:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	2b01      	cmp	r3, #1
 800719a:	d118      	bne.n	80071ce <vTaskStartScheduler+0x92>
	__asm volatile
 800719c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a0:	f383 8811 	msr	BASEPRI, r3
 80071a4:	f3bf 8f6f 	isb	sy
 80071a8:	f3bf 8f4f 	dsb	sy
 80071ac:	613b      	str	r3, [r7, #16]
}
 80071ae:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80071b0:	4b13      	ldr	r3, [pc, #76]	; (8007200 <vTaskStartScheduler+0xc4>)
 80071b2:	f04f 32ff 	mov.w	r2, #4294967295
 80071b6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80071b8:	4b12      	ldr	r3, [pc, #72]	; (8007204 <vTaskStartScheduler+0xc8>)
 80071ba:	2201      	movs	r2, #1
 80071bc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80071be:	4b12      	ldr	r3, [pc, #72]	; (8007208 <vTaskStartScheduler+0xcc>)
 80071c0:	2200      	movs	r2, #0
 80071c2:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80071c4:	f7f9 fbb6 	bl	8000934 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80071c8:	f001 f9d2 	bl	8008570 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80071cc:	e00e      	b.n	80071ec <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071d4:	d10a      	bne.n	80071ec <vTaskStartScheduler+0xb0>
	__asm volatile
 80071d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071da:	f383 8811 	msr	BASEPRI, r3
 80071de:	f3bf 8f6f 	isb	sy
 80071e2:	f3bf 8f4f 	dsb	sy
 80071e6:	60fb      	str	r3, [r7, #12]
}
 80071e8:	bf00      	nop
 80071ea:	e7fe      	b.n	80071ea <vTaskStartScheduler+0xae>
}
 80071ec:	bf00      	nop
 80071ee:	3718      	adds	r7, #24
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}
 80071f4:	08009404 	.word	0x08009404
 80071f8:	08007859 	.word	0x08007859
 80071fc:	20000bf4 	.word	0x20000bf4
 8007200:	20000bf0 	.word	0x20000bf0
 8007204:	20000bdc 	.word	0x20000bdc
 8007208:	20000bd4 	.word	0x20000bd4

0800720c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800720c:	b480      	push	{r7}
 800720e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007210:	4b04      	ldr	r3, [pc, #16]	; (8007224 <vTaskSuspendAll+0x18>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	3301      	adds	r3, #1
 8007216:	4a03      	ldr	r2, [pc, #12]	; (8007224 <vTaskSuspendAll+0x18>)
 8007218:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800721a:	bf00      	nop
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr
 8007224:	20000bf8 	.word	0x20000bf8

08007228 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b084      	sub	sp, #16
 800722c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800722e:	2300      	movs	r3, #0
 8007230:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007232:	2300      	movs	r3, #0
 8007234:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007236:	4b42      	ldr	r3, [pc, #264]	; (8007340 <xTaskResumeAll+0x118>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d10a      	bne.n	8007254 <xTaskResumeAll+0x2c>
	__asm volatile
 800723e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007242:	f383 8811 	msr	BASEPRI, r3
 8007246:	f3bf 8f6f 	isb	sy
 800724a:	f3bf 8f4f 	dsb	sy
 800724e:	603b      	str	r3, [r7, #0]
}
 8007250:	bf00      	nop
 8007252:	e7fe      	b.n	8007252 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007254:	f001 fa2e 	bl	80086b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007258:	4b39      	ldr	r3, [pc, #228]	; (8007340 <xTaskResumeAll+0x118>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	3b01      	subs	r3, #1
 800725e:	4a38      	ldr	r2, [pc, #224]	; (8007340 <xTaskResumeAll+0x118>)
 8007260:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007262:	4b37      	ldr	r3, [pc, #220]	; (8007340 <xTaskResumeAll+0x118>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d162      	bne.n	8007330 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800726a:	4b36      	ldr	r3, [pc, #216]	; (8007344 <xTaskResumeAll+0x11c>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d05e      	beq.n	8007330 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007272:	e02f      	b.n	80072d4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007274:	4b34      	ldr	r3, [pc, #208]	; (8007348 <xTaskResumeAll+0x120>)
 8007276:	68db      	ldr	r3, [r3, #12]
 8007278:	68db      	ldr	r3, [r3, #12]
 800727a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	3318      	adds	r3, #24
 8007280:	4618      	mov	r0, r3
 8007282:	f7fe fe83 	bl	8005f8c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	3304      	adds	r3, #4
 800728a:	4618      	mov	r0, r3
 800728c:	f7fe fe7e 	bl	8005f8c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007294:	4b2d      	ldr	r3, [pc, #180]	; (800734c <xTaskResumeAll+0x124>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	429a      	cmp	r2, r3
 800729a:	d903      	bls.n	80072a4 <xTaskResumeAll+0x7c>
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a0:	4a2a      	ldr	r2, [pc, #168]	; (800734c <xTaskResumeAll+0x124>)
 80072a2:	6013      	str	r3, [r2, #0]
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072a8:	4613      	mov	r3, r2
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	4413      	add	r3, r2
 80072ae:	009b      	lsls	r3, r3, #2
 80072b0:	4a27      	ldr	r2, [pc, #156]	; (8007350 <xTaskResumeAll+0x128>)
 80072b2:	441a      	add	r2, r3
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	3304      	adds	r3, #4
 80072b8:	4619      	mov	r1, r3
 80072ba:	4610      	mov	r0, r2
 80072bc:	f7fe fe09 	bl	8005ed2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072c4:	4b23      	ldr	r3, [pc, #140]	; (8007354 <xTaskResumeAll+0x12c>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d302      	bcc.n	80072d4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80072ce:	4b22      	ldr	r3, [pc, #136]	; (8007358 <xTaskResumeAll+0x130>)
 80072d0:	2201      	movs	r2, #1
 80072d2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80072d4:	4b1c      	ldr	r3, [pc, #112]	; (8007348 <xTaskResumeAll+0x120>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d1cb      	bne.n	8007274 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d001      	beq.n	80072e6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80072e2:	f000 fb6f 	bl	80079c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80072e6:	4b1d      	ldr	r3, [pc, #116]	; (800735c <xTaskResumeAll+0x134>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d010      	beq.n	8007314 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80072f2:	f000 f847 	bl	8007384 <xTaskIncrementTick>
 80072f6:	4603      	mov	r3, r0
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d002      	beq.n	8007302 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80072fc:	4b16      	ldr	r3, [pc, #88]	; (8007358 <xTaskResumeAll+0x130>)
 80072fe:	2201      	movs	r2, #1
 8007300:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	3b01      	subs	r3, #1
 8007306:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d1f1      	bne.n	80072f2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800730e:	4b13      	ldr	r3, [pc, #76]	; (800735c <xTaskResumeAll+0x134>)
 8007310:	2200      	movs	r2, #0
 8007312:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007314:	4b10      	ldr	r3, [pc, #64]	; (8007358 <xTaskResumeAll+0x130>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d009      	beq.n	8007330 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800731c:	2301      	movs	r3, #1
 800731e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007320:	4b0f      	ldr	r3, [pc, #60]	; (8007360 <xTaskResumeAll+0x138>)
 8007322:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007326:	601a      	str	r2, [r3, #0]
 8007328:	f3bf 8f4f 	dsb	sy
 800732c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007330:	f001 f9f0 	bl	8008714 <vPortExitCritical>

	return xAlreadyYielded;
 8007334:	68bb      	ldr	r3, [r7, #8]
}
 8007336:	4618      	mov	r0, r3
 8007338:	3710      	adds	r7, #16
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}
 800733e:	bf00      	nop
 8007340:	20000bf8 	.word	0x20000bf8
 8007344:	20000bd0 	.word	0x20000bd0
 8007348:	20000b90 	.word	0x20000b90
 800734c:	20000bd8 	.word	0x20000bd8
 8007350:	20000700 	.word	0x20000700
 8007354:	200006fc 	.word	0x200006fc
 8007358:	20000be4 	.word	0x20000be4
 800735c:	20000be0 	.word	0x20000be0
 8007360:	e000ed04 	.word	0xe000ed04

08007364 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007364:	b480      	push	{r7}
 8007366:	b083      	sub	sp, #12
 8007368:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800736a:	4b05      	ldr	r3, [pc, #20]	; (8007380 <xTaskGetTickCount+0x1c>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007370:	687b      	ldr	r3, [r7, #4]
}
 8007372:	4618      	mov	r0, r3
 8007374:	370c      	adds	r7, #12
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr
 800737e:	bf00      	nop
 8007380:	20000bd4 	.word	0x20000bd4

08007384 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b086      	sub	sp, #24
 8007388:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800738a:	2300      	movs	r3, #0
 800738c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800738e:	4b4f      	ldr	r3, [pc, #316]	; (80074cc <xTaskIncrementTick+0x148>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	2b00      	cmp	r3, #0
 8007394:	f040 808f 	bne.w	80074b6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007398:	4b4d      	ldr	r3, [pc, #308]	; (80074d0 <xTaskIncrementTick+0x14c>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	3301      	adds	r3, #1
 800739e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80073a0:	4a4b      	ldr	r2, [pc, #300]	; (80074d0 <xTaskIncrementTick+0x14c>)
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d120      	bne.n	80073ee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80073ac:	4b49      	ldr	r3, [pc, #292]	; (80074d4 <xTaskIncrementTick+0x150>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d00a      	beq.n	80073cc <xTaskIncrementTick+0x48>
	__asm volatile
 80073b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ba:	f383 8811 	msr	BASEPRI, r3
 80073be:	f3bf 8f6f 	isb	sy
 80073c2:	f3bf 8f4f 	dsb	sy
 80073c6:	603b      	str	r3, [r7, #0]
}
 80073c8:	bf00      	nop
 80073ca:	e7fe      	b.n	80073ca <xTaskIncrementTick+0x46>
 80073cc:	4b41      	ldr	r3, [pc, #260]	; (80074d4 <xTaskIncrementTick+0x150>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	60fb      	str	r3, [r7, #12]
 80073d2:	4b41      	ldr	r3, [pc, #260]	; (80074d8 <xTaskIncrementTick+0x154>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a3f      	ldr	r2, [pc, #252]	; (80074d4 <xTaskIncrementTick+0x150>)
 80073d8:	6013      	str	r3, [r2, #0]
 80073da:	4a3f      	ldr	r2, [pc, #252]	; (80074d8 <xTaskIncrementTick+0x154>)
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	6013      	str	r3, [r2, #0]
 80073e0:	4b3e      	ldr	r3, [pc, #248]	; (80074dc <xTaskIncrementTick+0x158>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	3301      	adds	r3, #1
 80073e6:	4a3d      	ldr	r2, [pc, #244]	; (80074dc <xTaskIncrementTick+0x158>)
 80073e8:	6013      	str	r3, [r2, #0]
 80073ea:	f000 faeb 	bl	80079c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80073ee:	4b3c      	ldr	r3, [pc, #240]	; (80074e0 <xTaskIncrementTick+0x15c>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	693a      	ldr	r2, [r7, #16]
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d349      	bcc.n	800748c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80073f8:	4b36      	ldr	r3, [pc, #216]	; (80074d4 <xTaskIncrementTick+0x150>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d104      	bne.n	800740c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007402:	4b37      	ldr	r3, [pc, #220]	; (80074e0 <xTaskIncrementTick+0x15c>)
 8007404:	f04f 32ff 	mov.w	r2, #4294967295
 8007408:	601a      	str	r2, [r3, #0]
					break;
 800740a:	e03f      	b.n	800748c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800740c:	4b31      	ldr	r3, [pc, #196]	; (80074d4 <xTaskIncrementTick+0x150>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	68db      	ldr	r3, [r3, #12]
 8007412:	68db      	ldr	r3, [r3, #12]
 8007414:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800741c:	693a      	ldr	r2, [r7, #16]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	429a      	cmp	r2, r3
 8007422:	d203      	bcs.n	800742c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007424:	4a2e      	ldr	r2, [pc, #184]	; (80074e0 <xTaskIncrementTick+0x15c>)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800742a:	e02f      	b.n	800748c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	3304      	adds	r3, #4
 8007430:	4618      	mov	r0, r3
 8007432:	f7fe fdab 	bl	8005f8c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800743a:	2b00      	cmp	r3, #0
 800743c:	d004      	beq.n	8007448 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	3318      	adds	r3, #24
 8007442:	4618      	mov	r0, r3
 8007444:	f7fe fda2 	bl	8005f8c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800744c:	4b25      	ldr	r3, [pc, #148]	; (80074e4 <xTaskIncrementTick+0x160>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	429a      	cmp	r2, r3
 8007452:	d903      	bls.n	800745c <xTaskIncrementTick+0xd8>
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007458:	4a22      	ldr	r2, [pc, #136]	; (80074e4 <xTaskIncrementTick+0x160>)
 800745a:	6013      	str	r3, [r2, #0]
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007460:	4613      	mov	r3, r2
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	4413      	add	r3, r2
 8007466:	009b      	lsls	r3, r3, #2
 8007468:	4a1f      	ldr	r2, [pc, #124]	; (80074e8 <xTaskIncrementTick+0x164>)
 800746a:	441a      	add	r2, r3
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	3304      	adds	r3, #4
 8007470:	4619      	mov	r1, r3
 8007472:	4610      	mov	r0, r2
 8007474:	f7fe fd2d 	bl	8005ed2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800747c:	4b1b      	ldr	r3, [pc, #108]	; (80074ec <xTaskIncrementTick+0x168>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007482:	429a      	cmp	r2, r3
 8007484:	d3b8      	bcc.n	80073f8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007486:	2301      	movs	r3, #1
 8007488:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800748a:	e7b5      	b.n	80073f8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800748c:	4b17      	ldr	r3, [pc, #92]	; (80074ec <xTaskIncrementTick+0x168>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007492:	4915      	ldr	r1, [pc, #84]	; (80074e8 <xTaskIncrementTick+0x164>)
 8007494:	4613      	mov	r3, r2
 8007496:	009b      	lsls	r3, r3, #2
 8007498:	4413      	add	r3, r2
 800749a:	009b      	lsls	r3, r3, #2
 800749c:	440b      	add	r3, r1
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d901      	bls.n	80074a8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80074a4:	2301      	movs	r3, #1
 80074a6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80074a8:	4b11      	ldr	r3, [pc, #68]	; (80074f0 <xTaskIncrementTick+0x16c>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d007      	beq.n	80074c0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80074b0:	2301      	movs	r3, #1
 80074b2:	617b      	str	r3, [r7, #20]
 80074b4:	e004      	b.n	80074c0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80074b6:	4b0f      	ldr	r3, [pc, #60]	; (80074f4 <xTaskIncrementTick+0x170>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	3301      	adds	r3, #1
 80074bc:	4a0d      	ldr	r2, [pc, #52]	; (80074f4 <xTaskIncrementTick+0x170>)
 80074be:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80074c0:	697b      	ldr	r3, [r7, #20]
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3718      	adds	r7, #24
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}
 80074ca:	bf00      	nop
 80074cc:	20000bf8 	.word	0x20000bf8
 80074d0:	20000bd4 	.word	0x20000bd4
 80074d4:	20000b88 	.word	0x20000b88
 80074d8:	20000b8c 	.word	0x20000b8c
 80074dc:	20000be8 	.word	0x20000be8
 80074e0:	20000bf0 	.word	0x20000bf0
 80074e4:	20000bd8 	.word	0x20000bd8
 80074e8:	20000700 	.word	0x20000700
 80074ec:	200006fc 	.word	0x200006fc
 80074f0:	20000be4 	.word	0x20000be4
 80074f4:	20000be0 	.word	0x20000be0

080074f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b084      	sub	sp, #16
 80074fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80074fe:	4b33      	ldr	r3, [pc, #204]	; (80075cc <vTaskSwitchContext+0xd4>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d003      	beq.n	800750e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007506:	4b32      	ldr	r3, [pc, #200]	; (80075d0 <vTaskSwitchContext+0xd8>)
 8007508:	2201      	movs	r2, #1
 800750a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800750c:	e05a      	b.n	80075c4 <vTaskSwitchContext+0xcc>
		xYieldPending = pdFALSE;
 800750e:	4b30      	ldr	r3, [pc, #192]	; (80075d0 <vTaskSwitchContext+0xd8>)
 8007510:	2200      	movs	r2, #0
 8007512:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8007514:	f7f9 fa1c 	bl	8000950 <getRunTimeCounterValue>
 8007518:	4603      	mov	r3, r0
 800751a:	4a2e      	ldr	r2, [pc, #184]	; (80075d4 <vTaskSwitchContext+0xdc>)
 800751c:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800751e:	4b2d      	ldr	r3, [pc, #180]	; (80075d4 <vTaskSwitchContext+0xdc>)
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	4b2d      	ldr	r3, [pc, #180]	; (80075d8 <vTaskSwitchContext+0xe0>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	429a      	cmp	r2, r3
 8007528:	d909      	bls.n	800753e <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800752a:	4b2c      	ldr	r3, [pc, #176]	; (80075dc <vTaskSwitchContext+0xe4>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007530:	4a28      	ldr	r2, [pc, #160]	; (80075d4 <vTaskSwitchContext+0xdc>)
 8007532:	6810      	ldr	r0, [r2, #0]
 8007534:	4a28      	ldr	r2, [pc, #160]	; (80075d8 <vTaskSwitchContext+0xe0>)
 8007536:	6812      	ldr	r2, [r2, #0]
 8007538:	1a82      	subs	r2, r0, r2
 800753a:	440a      	add	r2, r1
 800753c:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800753e:	4b25      	ldr	r3, [pc, #148]	; (80075d4 <vTaskSwitchContext+0xdc>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a25      	ldr	r2, [pc, #148]	; (80075d8 <vTaskSwitchContext+0xe0>)
 8007544:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007546:	4b26      	ldr	r3, [pc, #152]	; (80075e0 <vTaskSwitchContext+0xe8>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	60fb      	str	r3, [r7, #12]
 800754c:	e010      	b.n	8007570 <vTaskSwitchContext+0x78>
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d10a      	bne.n	800756a <vTaskSwitchContext+0x72>
	__asm volatile
 8007554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007558:	f383 8811 	msr	BASEPRI, r3
 800755c:	f3bf 8f6f 	isb	sy
 8007560:	f3bf 8f4f 	dsb	sy
 8007564:	607b      	str	r3, [r7, #4]
}
 8007566:	bf00      	nop
 8007568:	e7fe      	b.n	8007568 <vTaskSwitchContext+0x70>
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	3b01      	subs	r3, #1
 800756e:	60fb      	str	r3, [r7, #12]
 8007570:	491c      	ldr	r1, [pc, #112]	; (80075e4 <vTaskSwitchContext+0xec>)
 8007572:	68fa      	ldr	r2, [r7, #12]
 8007574:	4613      	mov	r3, r2
 8007576:	009b      	lsls	r3, r3, #2
 8007578:	4413      	add	r3, r2
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	440b      	add	r3, r1
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d0e4      	beq.n	800754e <vTaskSwitchContext+0x56>
 8007584:	68fa      	ldr	r2, [r7, #12]
 8007586:	4613      	mov	r3, r2
 8007588:	009b      	lsls	r3, r3, #2
 800758a:	4413      	add	r3, r2
 800758c:	009b      	lsls	r3, r3, #2
 800758e:	4a15      	ldr	r2, [pc, #84]	; (80075e4 <vTaskSwitchContext+0xec>)
 8007590:	4413      	add	r3, r2
 8007592:	60bb      	str	r3, [r7, #8]
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	685a      	ldr	r2, [r3, #4]
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	605a      	str	r2, [r3, #4]
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	685a      	ldr	r2, [r3, #4]
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	3308      	adds	r3, #8
 80075a6:	429a      	cmp	r2, r3
 80075a8:	d104      	bne.n	80075b4 <vTaskSwitchContext+0xbc>
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	685a      	ldr	r2, [r3, #4]
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	605a      	str	r2, [r3, #4]
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	68db      	ldr	r3, [r3, #12]
 80075ba:	4a08      	ldr	r2, [pc, #32]	; (80075dc <vTaskSwitchContext+0xe4>)
 80075bc:	6013      	str	r3, [r2, #0]
 80075be:	4a08      	ldr	r2, [pc, #32]	; (80075e0 <vTaskSwitchContext+0xe8>)
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	6013      	str	r3, [r2, #0]
}
 80075c4:	bf00      	nop
 80075c6:	3710      	adds	r7, #16
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}
 80075cc:	20000bf8 	.word	0x20000bf8
 80075d0:	20000be4 	.word	0x20000be4
 80075d4:	20000c00 	.word	0x20000c00
 80075d8:	20000bfc 	.word	0x20000bfc
 80075dc:	200006fc 	.word	0x200006fc
 80075e0:	20000bd8 	.word	0x20000bd8
 80075e4:	20000700 	.word	0x20000700

080075e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b084      	sub	sp, #16
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d10a      	bne.n	800760e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80075f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075fc:	f383 8811 	msr	BASEPRI, r3
 8007600:	f3bf 8f6f 	isb	sy
 8007604:	f3bf 8f4f 	dsb	sy
 8007608:	60fb      	str	r3, [r7, #12]
}
 800760a:	bf00      	nop
 800760c:	e7fe      	b.n	800760c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800760e:	4b07      	ldr	r3, [pc, #28]	; (800762c <vTaskPlaceOnEventList+0x44>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	3318      	adds	r3, #24
 8007614:	4619      	mov	r1, r3
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f7fe fc7f 	bl	8005f1a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800761c:	2101      	movs	r1, #1
 800761e:	6838      	ldr	r0, [r7, #0]
 8007620:	f000 fb7a 	bl	8007d18 <prvAddCurrentTaskToDelayedList>
}
 8007624:	bf00      	nop
 8007626:	3710      	adds	r7, #16
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}
 800762c:	200006fc 	.word	0x200006fc

08007630 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007630:	b580      	push	{r7, lr}
 8007632:	b086      	sub	sp, #24
 8007634:	af00      	add	r7, sp, #0
 8007636:	60f8      	str	r0, [r7, #12]
 8007638:	60b9      	str	r1, [r7, #8]
 800763a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d10a      	bne.n	8007658 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007646:	f383 8811 	msr	BASEPRI, r3
 800764a:	f3bf 8f6f 	isb	sy
 800764e:	f3bf 8f4f 	dsb	sy
 8007652:	617b      	str	r3, [r7, #20]
}
 8007654:	bf00      	nop
 8007656:	e7fe      	b.n	8007656 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007658:	4b0a      	ldr	r3, [pc, #40]	; (8007684 <vTaskPlaceOnEventListRestricted+0x54>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	3318      	adds	r3, #24
 800765e:	4619      	mov	r1, r3
 8007660:	68f8      	ldr	r0, [r7, #12]
 8007662:	f7fe fc36 	bl	8005ed2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d002      	beq.n	8007672 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800766c:	f04f 33ff 	mov.w	r3, #4294967295
 8007670:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007672:	6879      	ldr	r1, [r7, #4]
 8007674:	68b8      	ldr	r0, [r7, #8]
 8007676:	f000 fb4f 	bl	8007d18 <prvAddCurrentTaskToDelayedList>
	}
 800767a:	bf00      	nop
 800767c:	3718      	adds	r7, #24
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}
 8007682:	bf00      	nop
 8007684:	200006fc 	.word	0x200006fc

08007688 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b086      	sub	sp, #24
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	68db      	ldr	r3, [r3, #12]
 8007694:	68db      	ldr	r3, [r3, #12]
 8007696:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d10a      	bne.n	80076b4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800769e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a2:	f383 8811 	msr	BASEPRI, r3
 80076a6:	f3bf 8f6f 	isb	sy
 80076aa:	f3bf 8f4f 	dsb	sy
 80076ae:	60fb      	str	r3, [r7, #12]
}
 80076b0:	bf00      	nop
 80076b2:	e7fe      	b.n	80076b2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	3318      	adds	r3, #24
 80076b8:	4618      	mov	r0, r3
 80076ba:	f7fe fc67 	bl	8005f8c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076be:	4b1e      	ldr	r3, [pc, #120]	; (8007738 <xTaskRemoveFromEventList+0xb0>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d11d      	bne.n	8007702 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	3304      	adds	r3, #4
 80076ca:	4618      	mov	r0, r3
 80076cc:	f7fe fc5e 	bl	8005f8c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076d4:	4b19      	ldr	r3, [pc, #100]	; (800773c <xTaskRemoveFromEventList+0xb4>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	429a      	cmp	r2, r3
 80076da:	d903      	bls.n	80076e4 <xTaskRemoveFromEventList+0x5c>
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e0:	4a16      	ldr	r2, [pc, #88]	; (800773c <xTaskRemoveFromEventList+0xb4>)
 80076e2:	6013      	str	r3, [r2, #0]
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076e8:	4613      	mov	r3, r2
 80076ea:	009b      	lsls	r3, r3, #2
 80076ec:	4413      	add	r3, r2
 80076ee:	009b      	lsls	r3, r3, #2
 80076f0:	4a13      	ldr	r2, [pc, #76]	; (8007740 <xTaskRemoveFromEventList+0xb8>)
 80076f2:	441a      	add	r2, r3
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	3304      	adds	r3, #4
 80076f8:	4619      	mov	r1, r3
 80076fa:	4610      	mov	r0, r2
 80076fc:	f7fe fbe9 	bl	8005ed2 <vListInsertEnd>
 8007700:	e005      	b.n	800770e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	3318      	adds	r3, #24
 8007706:	4619      	mov	r1, r3
 8007708:	480e      	ldr	r0, [pc, #56]	; (8007744 <xTaskRemoveFromEventList+0xbc>)
 800770a:	f7fe fbe2 	bl	8005ed2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007712:	4b0d      	ldr	r3, [pc, #52]	; (8007748 <xTaskRemoveFromEventList+0xc0>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007718:	429a      	cmp	r2, r3
 800771a:	d905      	bls.n	8007728 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800771c:	2301      	movs	r3, #1
 800771e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007720:	4b0a      	ldr	r3, [pc, #40]	; (800774c <xTaskRemoveFromEventList+0xc4>)
 8007722:	2201      	movs	r2, #1
 8007724:	601a      	str	r2, [r3, #0]
 8007726:	e001      	b.n	800772c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007728:	2300      	movs	r3, #0
 800772a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800772c:	697b      	ldr	r3, [r7, #20]
}
 800772e:	4618      	mov	r0, r3
 8007730:	3718      	adds	r7, #24
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
 8007736:	bf00      	nop
 8007738:	20000bf8 	.word	0x20000bf8
 800773c:	20000bd8 	.word	0x20000bd8
 8007740:	20000700 	.word	0x20000700
 8007744:	20000b90 	.word	0x20000b90
 8007748:	200006fc 	.word	0x200006fc
 800774c:	20000be4 	.word	0x20000be4

08007750 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007750:	b480      	push	{r7}
 8007752:	b083      	sub	sp, #12
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007758:	4b06      	ldr	r3, [pc, #24]	; (8007774 <vTaskInternalSetTimeOutState+0x24>)
 800775a:	681a      	ldr	r2, [r3, #0]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007760:	4b05      	ldr	r3, [pc, #20]	; (8007778 <vTaskInternalSetTimeOutState+0x28>)
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	605a      	str	r2, [r3, #4]
}
 8007768:	bf00      	nop
 800776a:	370c      	adds	r7, #12
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr
 8007774:	20000be8 	.word	0x20000be8
 8007778:	20000bd4 	.word	0x20000bd4

0800777c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b088      	sub	sp, #32
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d10a      	bne.n	80077a2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800778c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007790:	f383 8811 	msr	BASEPRI, r3
 8007794:	f3bf 8f6f 	isb	sy
 8007798:	f3bf 8f4f 	dsb	sy
 800779c:	613b      	str	r3, [r7, #16]
}
 800779e:	bf00      	nop
 80077a0:	e7fe      	b.n	80077a0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d10a      	bne.n	80077be <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80077a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ac:	f383 8811 	msr	BASEPRI, r3
 80077b0:	f3bf 8f6f 	isb	sy
 80077b4:	f3bf 8f4f 	dsb	sy
 80077b8:	60fb      	str	r3, [r7, #12]
}
 80077ba:	bf00      	nop
 80077bc:	e7fe      	b.n	80077bc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80077be:	f000 ff79 	bl	80086b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80077c2:	4b1d      	ldr	r3, [pc, #116]	; (8007838 <xTaskCheckForTimeOut+0xbc>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	69ba      	ldr	r2, [r7, #24]
 80077ce:	1ad3      	subs	r3, r2, r3
 80077d0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077da:	d102      	bne.n	80077e2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80077dc:	2300      	movs	r3, #0
 80077de:	61fb      	str	r3, [r7, #28]
 80077e0:	e023      	b.n	800782a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681a      	ldr	r2, [r3, #0]
 80077e6:	4b15      	ldr	r3, [pc, #84]	; (800783c <xTaskCheckForTimeOut+0xc0>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d007      	beq.n	80077fe <xTaskCheckForTimeOut+0x82>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	69ba      	ldr	r2, [r7, #24]
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d302      	bcc.n	80077fe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80077f8:	2301      	movs	r3, #1
 80077fa:	61fb      	str	r3, [r7, #28]
 80077fc:	e015      	b.n	800782a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	697a      	ldr	r2, [r7, #20]
 8007804:	429a      	cmp	r2, r3
 8007806:	d20b      	bcs.n	8007820 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	681a      	ldr	r2, [r3, #0]
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	1ad2      	subs	r2, r2, r3
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f7ff ff9b 	bl	8007750 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800781a:	2300      	movs	r3, #0
 800781c:	61fb      	str	r3, [r7, #28]
 800781e:	e004      	b.n	800782a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	2200      	movs	r2, #0
 8007824:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007826:	2301      	movs	r3, #1
 8007828:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800782a:	f000 ff73 	bl	8008714 <vPortExitCritical>

	return xReturn;
 800782e:	69fb      	ldr	r3, [r7, #28]
}
 8007830:	4618      	mov	r0, r3
 8007832:	3720      	adds	r7, #32
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}
 8007838:	20000bd4 	.word	0x20000bd4
 800783c:	20000be8 	.word	0x20000be8

08007840 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007840:	b480      	push	{r7}
 8007842:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007844:	4b03      	ldr	r3, [pc, #12]	; (8007854 <vTaskMissedYield+0x14>)
 8007846:	2201      	movs	r2, #1
 8007848:	601a      	str	r2, [r3, #0]
}
 800784a:	bf00      	nop
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr
 8007854:	20000be4 	.word	0x20000be4

08007858 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b082      	sub	sp, #8
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007860:	f000 f852 	bl	8007908 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007864:	4b06      	ldr	r3, [pc, #24]	; (8007880 <prvIdleTask+0x28>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	2b01      	cmp	r3, #1
 800786a:	d9f9      	bls.n	8007860 <prvIdleTask+0x8>
			{
				taskYIELD();
 800786c:	4b05      	ldr	r3, [pc, #20]	; (8007884 <prvIdleTask+0x2c>)
 800786e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007872:	601a      	str	r2, [r3, #0]
 8007874:	f3bf 8f4f 	dsb	sy
 8007878:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800787c:	e7f0      	b.n	8007860 <prvIdleTask+0x8>
 800787e:	bf00      	nop
 8007880:	20000700 	.word	0x20000700
 8007884:	e000ed04 	.word	0xe000ed04

08007888 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b082      	sub	sp, #8
 800788c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800788e:	2300      	movs	r3, #0
 8007890:	607b      	str	r3, [r7, #4]
 8007892:	e00c      	b.n	80078ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007894:	687a      	ldr	r2, [r7, #4]
 8007896:	4613      	mov	r3, r2
 8007898:	009b      	lsls	r3, r3, #2
 800789a:	4413      	add	r3, r2
 800789c:	009b      	lsls	r3, r3, #2
 800789e:	4a12      	ldr	r2, [pc, #72]	; (80078e8 <prvInitialiseTaskLists+0x60>)
 80078a0:	4413      	add	r3, r2
 80078a2:	4618      	mov	r0, r3
 80078a4:	f7fe fae8 	bl	8005e78 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	3301      	adds	r3, #1
 80078ac:	607b      	str	r3, [r7, #4]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2b37      	cmp	r3, #55	; 0x37
 80078b2:	d9ef      	bls.n	8007894 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80078b4:	480d      	ldr	r0, [pc, #52]	; (80078ec <prvInitialiseTaskLists+0x64>)
 80078b6:	f7fe fadf 	bl	8005e78 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80078ba:	480d      	ldr	r0, [pc, #52]	; (80078f0 <prvInitialiseTaskLists+0x68>)
 80078bc:	f7fe fadc 	bl	8005e78 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80078c0:	480c      	ldr	r0, [pc, #48]	; (80078f4 <prvInitialiseTaskLists+0x6c>)
 80078c2:	f7fe fad9 	bl	8005e78 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80078c6:	480c      	ldr	r0, [pc, #48]	; (80078f8 <prvInitialiseTaskLists+0x70>)
 80078c8:	f7fe fad6 	bl	8005e78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80078cc:	480b      	ldr	r0, [pc, #44]	; (80078fc <prvInitialiseTaskLists+0x74>)
 80078ce:	f7fe fad3 	bl	8005e78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80078d2:	4b0b      	ldr	r3, [pc, #44]	; (8007900 <prvInitialiseTaskLists+0x78>)
 80078d4:	4a05      	ldr	r2, [pc, #20]	; (80078ec <prvInitialiseTaskLists+0x64>)
 80078d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80078d8:	4b0a      	ldr	r3, [pc, #40]	; (8007904 <prvInitialiseTaskLists+0x7c>)
 80078da:	4a05      	ldr	r2, [pc, #20]	; (80078f0 <prvInitialiseTaskLists+0x68>)
 80078dc:	601a      	str	r2, [r3, #0]
}
 80078de:	bf00      	nop
 80078e0:	3708      	adds	r7, #8
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}
 80078e6:	bf00      	nop
 80078e8:	20000700 	.word	0x20000700
 80078ec:	20000b60 	.word	0x20000b60
 80078f0:	20000b74 	.word	0x20000b74
 80078f4:	20000b90 	.word	0x20000b90
 80078f8:	20000ba4 	.word	0x20000ba4
 80078fc:	20000bbc 	.word	0x20000bbc
 8007900:	20000b88 	.word	0x20000b88
 8007904:	20000b8c 	.word	0x20000b8c

08007908 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b082      	sub	sp, #8
 800790c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800790e:	e019      	b.n	8007944 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007910:	f000 fed0 	bl	80086b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007914:	4b10      	ldr	r3, [pc, #64]	; (8007958 <prvCheckTasksWaitingTermination+0x50>)
 8007916:	68db      	ldr	r3, [r3, #12]
 8007918:	68db      	ldr	r3, [r3, #12]
 800791a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	3304      	adds	r3, #4
 8007920:	4618      	mov	r0, r3
 8007922:	f7fe fb33 	bl	8005f8c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007926:	4b0d      	ldr	r3, [pc, #52]	; (800795c <prvCheckTasksWaitingTermination+0x54>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	3b01      	subs	r3, #1
 800792c:	4a0b      	ldr	r2, [pc, #44]	; (800795c <prvCheckTasksWaitingTermination+0x54>)
 800792e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007930:	4b0b      	ldr	r3, [pc, #44]	; (8007960 <prvCheckTasksWaitingTermination+0x58>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	3b01      	subs	r3, #1
 8007936:	4a0a      	ldr	r2, [pc, #40]	; (8007960 <prvCheckTasksWaitingTermination+0x58>)
 8007938:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800793a:	f000 feeb 	bl	8008714 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 f810 	bl	8007964 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007944:	4b06      	ldr	r3, [pc, #24]	; (8007960 <prvCheckTasksWaitingTermination+0x58>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d1e1      	bne.n	8007910 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800794c:	bf00      	nop
 800794e:	bf00      	nop
 8007950:	3708      	adds	r7, #8
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}
 8007956:	bf00      	nop
 8007958:	20000ba4 	.word	0x20000ba4
 800795c:	20000bd0 	.word	0x20000bd0
 8007960:	20000bb8 	.word	0x20000bb8

08007964 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007964:	b580      	push	{r7, lr}
 8007966:	b084      	sub	sp, #16
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007972:	2b00      	cmp	r3, #0
 8007974:	d108      	bne.n	8007988 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800797a:	4618      	mov	r0, r3
 800797c:	f001 f888 	bl	8008a90 <vPortFree>
				vPortFree( pxTCB );
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f001 f885 	bl	8008a90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007986:	e018      	b.n	80079ba <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800798e:	2b01      	cmp	r3, #1
 8007990:	d103      	bne.n	800799a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f001 f87c 	bl	8008a90 <vPortFree>
	}
 8007998:	e00f      	b.n	80079ba <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80079a0:	2b02      	cmp	r3, #2
 80079a2:	d00a      	beq.n	80079ba <prvDeleteTCB+0x56>
	__asm volatile
 80079a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a8:	f383 8811 	msr	BASEPRI, r3
 80079ac:	f3bf 8f6f 	isb	sy
 80079b0:	f3bf 8f4f 	dsb	sy
 80079b4:	60fb      	str	r3, [r7, #12]
}
 80079b6:	bf00      	nop
 80079b8:	e7fe      	b.n	80079b8 <prvDeleteTCB+0x54>
	}
 80079ba:	bf00      	nop
 80079bc:	3710      	adds	r7, #16
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}
	...

080079c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80079c4:	b480      	push	{r7}
 80079c6:	b083      	sub	sp, #12
 80079c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80079ca:	4b0c      	ldr	r3, [pc, #48]	; (80079fc <prvResetNextTaskUnblockTime+0x38>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d104      	bne.n	80079de <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80079d4:	4b0a      	ldr	r3, [pc, #40]	; (8007a00 <prvResetNextTaskUnblockTime+0x3c>)
 80079d6:	f04f 32ff 	mov.w	r2, #4294967295
 80079da:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80079dc:	e008      	b.n	80079f0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079de:	4b07      	ldr	r3, [pc, #28]	; (80079fc <prvResetNextTaskUnblockTime+0x38>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	68db      	ldr	r3, [r3, #12]
 80079e4:	68db      	ldr	r3, [r3, #12]
 80079e6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	4a04      	ldr	r2, [pc, #16]	; (8007a00 <prvResetNextTaskUnblockTime+0x3c>)
 80079ee:	6013      	str	r3, [r2, #0]
}
 80079f0:	bf00      	nop
 80079f2:	370c      	adds	r7, #12
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr
 80079fc:	20000b88 	.word	0x20000b88
 8007a00:	20000bf0 	.word	0x20000bf0

08007a04 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007a04:	b480      	push	{r7}
 8007a06:	b083      	sub	sp, #12
 8007a08:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007a0a:	4b0b      	ldr	r3, [pc, #44]	; (8007a38 <xTaskGetSchedulerState+0x34>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d102      	bne.n	8007a18 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007a12:	2301      	movs	r3, #1
 8007a14:	607b      	str	r3, [r7, #4]
 8007a16:	e008      	b.n	8007a2a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a18:	4b08      	ldr	r3, [pc, #32]	; (8007a3c <xTaskGetSchedulerState+0x38>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d102      	bne.n	8007a26 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007a20:	2302      	movs	r3, #2
 8007a22:	607b      	str	r3, [r7, #4]
 8007a24:	e001      	b.n	8007a2a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007a26:	2300      	movs	r3, #0
 8007a28:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007a2a:	687b      	ldr	r3, [r7, #4]
	}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	370c      	adds	r7, #12
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr
 8007a38:	20000bdc 	.word	0x20000bdc
 8007a3c:	20000bf8 	.word	0x20000bf8

08007a40 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b084      	sub	sp, #16
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d051      	beq.n	8007afa <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a5a:	4b2a      	ldr	r3, [pc, #168]	; (8007b04 <xTaskPriorityInherit+0xc4>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d241      	bcs.n	8007ae8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	699b      	ldr	r3, [r3, #24]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	db06      	blt.n	8007a7a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a6c:	4b25      	ldr	r3, [pc, #148]	; (8007b04 <xTaskPriorityInherit+0xc4>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a72:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	6959      	ldr	r1, [r3, #20]
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a82:	4613      	mov	r3, r2
 8007a84:	009b      	lsls	r3, r3, #2
 8007a86:	4413      	add	r3, r2
 8007a88:	009b      	lsls	r3, r3, #2
 8007a8a:	4a1f      	ldr	r2, [pc, #124]	; (8007b08 <xTaskPriorityInherit+0xc8>)
 8007a8c:	4413      	add	r3, r2
 8007a8e:	4299      	cmp	r1, r3
 8007a90:	d122      	bne.n	8007ad8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	3304      	adds	r3, #4
 8007a96:	4618      	mov	r0, r3
 8007a98:	f7fe fa78 	bl	8005f8c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007a9c:	4b19      	ldr	r3, [pc, #100]	; (8007b04 <xTaskPriorityInherit+0xc4>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aaa:	4b18      	ldr	r3, [pc, #96]	; (8007b0c <xTaskPriorityInherit+0xcc>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	d903      	bls.n	8007aba <xTaskPriorityInherit+0x7a>
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab6:	4a15      	ldr	r2, [pc, #84]	; (8007b0c <xTaskPriorityInherit+0xcc>)
 8007ab8:	6013      	str	r3, [r2, #0]
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007abe:	4613      	mov	r3, r2
 8007ac0:	009b      	lsls	r3, r3, #2
 8007ac2:	4413      	add	r3, r2
 8007ac4:	009b      	lsls	r3, r3, #2
 8007ac6:	4a10      	ldr	r2, [pc, #64]	; (8007b08 <xTaskPriorityInherit+0xc8>)
 8007ac8:	441a      	add	r2, r3
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	3304      	adds	r3, #4
 8007ace:	4619      	mov	r1, r3
 8007ad0:	4610      	mov	r0, r2
 8007ad2:	f7fe f9fe 	bl	8005ed2 <vListInsertEnd>
 8007ad6:	e004      	b.n	8007ae2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007ad8:	4b0a      	ldr	r3, [pc, #40]	; (8007b04 <xTaskPriorityInherit+0xc4>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	60fb      	str	r3, [r7, #12]
 8007ae6:	e008      	b.n	8007afa <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007aec:	4b05      	ldr	r3, [pc, #20]	; (8007b04 <xTaskPriorityInherit+0xc4>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af2:	429a      	cmp	r2, r3
 8007af4:	d201      	bcs.n	8007afa <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007af6:	2301      	movs	r3, #1
 8007af8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007afa:	68fb      	ldr	r3, [r7, #12]
	}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3710      	adds	r7, #16
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}
 8007b04:	200006fc 	.word	0x200006fc
 8007b08:	20000700 	.word	0x20000700
 8007b0c:	20000bd8 	.word	0x20000bd8

08007b10 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b086      	sub	sp, #24
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d056      	beq.n	8007bd4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007b26:	4b2e      	ldr	r3, [pc, #184]	; (8007be0 <xTaskPriorityDisinherit+0xd0>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	693a      	ldr	r2, [r7, #16]
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d00a      	beq.n	8007b46 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b34:	f383 8811 	msr	BASEPRI, r3
 8007b38:	f3bf 8f6f 	isb	sy
 8007b3c:	f3bf 8f4f 	dsb	sy
 8007b40:	60fb      	str	r3, [r7, #12]
}
 8007b42:	bf00      	nop
 8007b44:	e7fe      	b.n	8007b44 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d10a      	bne.n	8007b64 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b52:	f383 8811 	msr	BASEPRI, r3
 8007b56:	f3bf 8f6f 	isb	sy
 8007b5a:	f3bf 8f4f 	dsb	sy
 8007b5e:	60bb      	str	r3, [r7, #8]
}
 8007b60:	bf00      	nop
 8007b62:	e7fe      	b.n	8007b62 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b68:	1e5a      	subs	r2, r3, #1
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d02c      	beq.n	8007bd4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d128      	bne.n	8007bd4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	3304      	adds	r3, #4
 8007b86:	4618      	mov	r0, r3
 8007b88:	f7fe fa00 	bl	8005f8c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b98:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ba4:	4b0f      	ldr	r3, [pc, #60]	; (8007be4 <xTaskPriorityDisinherit+0xd4>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	d903      	bls.n	8007bb4 <xTaskPriorityDisinherit+0xa4>
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb0:	4a0c      	ldr	r2, [pc, #48]	; (8007be4 <xTaskPriorityDisinherit+0xd4>)
 8007bb2:	6013      	str	r3, [r2, #0]
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bb8:	4613      	mov	r3, r2
 8007bba:	009b      	lsls	r3, r3, #2
 8007bbc:	4413      	add	r3, r2
 8007bbe:	009b      	lsls	r3, r3, #2
 8007bc0:	4a09      	ldr	r2, [pc, #36]	; (8007be8 <xTaskPriorityDisinherit+0xd8>)
 8007bc2:	441a      	add	r2, r3
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	3304      	adds	r3, #4
 8007bc8:	4619      	mov	r1, r3
 8007bca:	4610      	mov	r0, r2
 8007bcc:	f7fe f981 	bl	8005ed2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007bd4:	697b      	ldr	r3, [r7, #20]
	}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3718      	adds	r7, #24
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}
 8007bde:	bf00      	nop
 8007be0:	200006fc 	.word	0x200006fc
 8007be4:	20000bd8 	.word	0x20000bd8
 8007be8:	20000700 	.word	0x20000700

08007bec <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b088      	sub	sp, #32
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d06a      	beq.n	8007cda <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007c04:	69bb      	ldr	r3, [r7, #24]
 8007c06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d10a      	bne.n	8007c22 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c10:	f383 8811 	msr	BASEPRI, r3
 8007c14:	f3bf 8f6f 	isb	sy
 8007c18:	f3bf 8f4f 	dsb	sy
 8007c1c:	60fb      	str	r3, [r7, #12]
}
 8007c1e:	bf00      	nop
 8007c20:	e7fe      	b.n	8007c20 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007c22:	69bb      	ldr	r3, [r7, #24]
 8007c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c26:	683a      	ldr	r2, [r7, #0]
 8007c28:	429a      	cmp	r2, r3
 8007c2a:	d902      	bls.n	8007c32 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	61fb      	str	r3, [r7, #28]
 8007c30:	e002      	b.n	8007c38 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007c32:	69bb      	ldr	r3, [r7, #24]
 8007c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c36:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007c38:	69bb      	ldr	r3, [r7, #24]
 8007c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c3c:	69fa      	ldr	r2, [r7, #28]
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d04b      	beq.n	8007cda <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007c42:	69bb      	ldr	r3, [r7, #24]
 8007c44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c46:	697a      	ldr	r2, [r7, #20]
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	d146      	bne.n	8007cda <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007c4c:	4b25      	ldr	r3, [pc, #148]	; (8007ce4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	69ba      	ldr	r2, [r7, #24]
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d10a      	bne.n	8007c6c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c5a:	f383 8811 	msr	BASEPRI, r3
 8007c5e:	f3bf 8f6f 	isb	sy
 8007c62:	f3bf 8f4f 	dsb	sy
 8007c66:	60bb      	str	r3, [r7, #8]
}
 8007c68:	bf00      	nop
 8007c6a:	e7fe      	b.n	8007c6a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007c6c:	69bb      	ldr	r3, [r7, #24]
 8007c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c70:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007c72:	69bb      	ldr	r3, [r7, #24]
 8007c74:	69fa      	ldr	r2, [r7, #28]
 8007c76:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007c78:	69bb      	ldr	r3, [r7, #24]
 8007c7a:	699b      	ldr	r3, [r3, #24]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	db04      	blt.n	8007c8a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c80:	69fb      	ldr	r3, [r7, #28]
 8007c82:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007c86:	69bb      	ldr	r3, [r7, #24]
 8007c88:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007c8a:	69bb      	ldr	r3, [r7, #24]
 8007c8c:	6959      	ldr	r1, [r3, #20]
 8007c8e:	693a      	ldr	r2, [r7, #16]
 8007c90:	4613      	mov	r3, r2
 8007c92:	009b      	lsls	r3, r3, #2
 8007c94:	4413      	add	r3, r2
 8007c96:	009b      	lsls	r3, r3, #2
 8007c98:	4a13      	ldr	r2, [pc, #76]	; (8007ce8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007c9a:	4413      	add	r3, r2
 8007c9c:	4299      	cmp	r1, r3
 8007c9e:	d11c      	bne.n	8007cda <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ca0:	69bb      	ldr	r3, [r7, #24]
 8007ca2:	3304      	adds	r3, #4
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f7fe f971 	bl	8005f8c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007caa:	69bb      	ldr	r3, [r7, #24]
 8007cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cae:	4b0f      	ldr	r3, [pc, #60]	; (8007cec <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	429a      	cmp	r2, r3
 8007cb4:	d903      	bls.n	8007cbe <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8007cb6:	69bb      	ldr	r3, [r7, #24]
 8007cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cba:	4a0c      	ldr	r2, [pc, #48]	; (8007cec <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007cbc:	6013      	str	r3, [r2, #0]
 8007cbe:	69bb      	ldr	r3, [r7, #24]
 8007cc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cc2:	4613      	mov	r3, r2
 8007cc4:	009b      	lsls	r3, r3, #2
 8007cc6:	4413      	add	r3, r2
 8007cc8:	009b      	lsls	r3, r3, #2
 8007cca:	4a07      	ldr	r2, [pc, #28]	; (8007ce8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007ccc:	441a      	add	r2, r3
 8007cce:	69bb      	ldr	r3, [r7, #24]
 8007cd0:	3304      	adds	r3, #4
 8007cd2:	4619      	mov	r1, r3
 8007cd4:	4610      	mov	r0, r2
 8007cd6:	f7fe f8fc 	bl	8005ed2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007cda:	bf00      	nop
 8007cdc:	3720      	adds	r7, #32
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
 8007ce2:	bf00      	nop
 8007ce4:	200006fc 	.word	0x200006fc
 8007ce8:	20000700 	.word	0x20000700
 8007cec:	20000bd8 	.word	0x20000bd8

08007cf0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007cf0:	b480      	push	{r7}
 8007cf2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007cf4:	4b07      	ldr	r3, [pc, #28]	; (8007d14 <pvTaskIncrementMutexHeldCount+0x24>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d004      	beq.n	8007d06 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007cfc:	4b05      	ldr	r3, [pc, #20]	; (8007d14 <pvTaskIncrementMutexHeldCount+0x24>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007d02:	3201      	adds	r2, #1
 8007d04:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8007d06:	4b03      	ldr	r3, [pc, #12]	; (8007d14 <pvTaskIncrementMutexHeldCount+0x24>)
 8007d08:	681b      	ldr	r3, [r3, #0]
	}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr
 8007d14:	200006fc 	.word	0x200006fc

08007d18 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b084      	sub	sp, #16
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007d22:	4b21      	ldr	r3, [pc, #132]	; (8007da8 <prvAddCurrentTaskToDelayedList+0x90>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d28:	4b20      	ldr	r3, [pc, #128]	; (8007dac <prvAddCurrentTaskToDelayedList+0x94>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	3304      	adds	r3, #4
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f7fe f92c 	bl	8005f8c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d3a:	d10a      	bne.n	8007d52 <prvAddCurrentTaskToDelayedList+0x3a>
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d007      	beq.n	8007d52 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d42:	4b1a      	ldr	r3, [pc, #104]	; (8007dac <prvAddCurrentTaskToDelayedList+0x94>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	3304      	adds	r3, #4
 8007d48:	4619      	mov	r1, r3
 8007d4a:	4819      	ldr	r0, [pc, #100]	; (8007db0 <prvAddCurrentTaskToDelayedList+0x98>)
 8007d4c:	f7fe f8c1 	bl	8005ed2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007d50:	e026      	b.n	8007da0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007d52:	68fa      	ldr	r2, [r7, #12]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	4413      	add	r3, r2
 8007d58:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007d5a:	4b14      	ldr	r3, [pc, #80]	; (8007dac <prvAddCurrentTaskToDelayedList+0x94>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	68ba      	ldr	r2, [r7, #8]
 8007d60:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007d62:	68ba      	ldr	r2, [r7, #8]
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d209      	bcs.n	8007d7e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d6a:	4b12      	ldr	r3, [pc, #72]	; (8007db4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007d6c:	681a      	ldr	r2, [r3, #0]
 8007d6e:	4b0f      	ldr	r3, [pc, #60]	; (8007dac <prvAddCurrentTaskToDelayedList+0x94>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	3304      	adds	r3, #4
 8007d74:	4619      	mov	r1, r3
 8007d76:	4610      	mov	r0, r2
 8007d78:	f7fe f8cf 	bl	8005f1a <vListInsert>
}
 8007d7c:	e010      	b.n	8007da0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d7e:	4b0e      	ldr	r3, [pc, #56]	; (8007db8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	4b0a      	ldr	r3, [pc, #40]	; (8007dac <prvAddCurrentTaskToDelayedList+0x94>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	3304      	adds	r3, #4
 8007d88:	4619      	mov	r1, r3
 8007d8a:	4610      	mov	r0, r2
 8007d8c:	f7fe f8c5 	bl	8005f1a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007d90:	4b0a      	ldr	r3, [pc, #40]	; (8007dbc <prvAddCurrentTaskToDelayedList+0xa4>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	68ba      	ldr	r2, [r7, #8]
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d202      	bcs.n	8007da0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007d9a:	4a08      	ldr	r2, [pc, #32]	; (8007dbc <prvAddCurrentTaskToDelayedList+0xa4>)
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	6013      	str	r3, [r2, #0]
}
 8007da0:	bf00      	nop
 8007da2:	3710      	adds	r7, #16
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}
 8007da8:	20000bd4 	.word	0x20000bd4
 8007dac:	200006fc 	.word	0x200006fc
 8007db0:	20000bbc 	.word	0x20000bbc
 8007db4:	20000b8c 	.word	0x20000b8c
 8007db8:	20000b88 	.word	0x20000b88
 8007dbc:	20000bf0 	.word	0x20000bf0

08007dc0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b08a      	sub	sp, #40	; 0x28
 8007dc4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007dca:	f000 fb07 	bl	80083dc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007dce:	4b1c      	ldr	r3, [pc, #112]	; (8007e40 <xTimerCreateTimerTask+0x80>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d021      	beq.n	8007e1a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007dde:	1d3a      	adds	r2, r7, #4
 8007de0:	f107 0108 	add.w	r1, r7, #8
 8007de4:	f107 030c 	add.w	r3, r7, #12
 8007de8:	4618      	mov	r0, r3
 8007dea:	f7fe f82b 	bl	8005e44 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007dee:	6879      	ldr	r1, [r7, #4]
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	68fa      	ldr	r2, [r7, #12]
 8007df4:	9202      	str	r2, [sp, #8]
 8007df6:	9301      	str	r3, [sp, #4]
 8007df8:	2302      	movs	r3, #2
 8007dfa:	9300      	str	r3, [sp, #0]
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	460a      	mov	r2, r1
 8007e00:	4910      	ldr	r1, [pc, #64]	; (8007e44 <xTimerCreateTimerTask+0x84>)
 8007e02:	4811      	ldr	r0, [pc, #68]	; (8007e48 <xTimerCreateTimerTask+0x88>)
 8007e04:	f7fe ffc2 	bl	8006d8c <xTaskCreateStatic>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	4a10      	ldr	r2, [pc, #64]	; (8007e4c <xTimerCreateTimerTask+0x8c>)
 8007e0c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007e0e:	4b0f      	ldr	r3, [pc, #60]	; (8007e4c <xTimerCreateTimerTask+0x8c>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d001      	beq.n	8007e1a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007e16:	2301      	movs	r3, #1
 8007e18:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d10a      	bne.n	8007e36 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e24:	f383 8811 	msr	BASEPRI, r3
 8007e28:	f3bf 8f6f 	isb	sy
 8007e2c:	f3bf 8f4f 	dsb	sy
 8007e30:	613b      	str	r3, [r7, #16]
}
 8007e32:	bf00      	nop
 8007e34:	e7fe      	b.n	8007e34 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007e36:	697b      	ldr	r3, [r7, #20]
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3718      	adds	r7, #24
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}
 8007e40:	20000c34 	.word	0x20000c34
 8007e44:	08009434 	.word	0x08009434
 8007e48:	08007f85 	.word	0x08007f85
 8007e4c:	20000c38 	.word	0x20000c38

08007e50 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b08a      	sub	sp, #40	; 0x28
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	60f8      	str	r0, [r7, #12]
 8007e58:	60b9      	str	r1, [r7, #8]
 8007e5a:	607a      	str	r2, [r7, #4]
 8007e5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d10a      	bne.n	8007e7e <xTimerGenericCommand+0x2e>
	__asm volatile
 8007e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e6c:	f383 8811 	msr	BASEPRI, r3
 8007e70:	f3bf 8f6f 	isb	sy
 8007e74:	f3bf 8f4f 	dsb	sy
 8007e78:	623b      	str	r3, [r7, #32]
}
 8007e7a:	bf00      	nop
 8007e7c:	e7fe      	b.n	8007e7c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007e7e:	4b1a      	ldr	r3, [pc, #104]	; (8007ee8 <xTimerGenericCommand+0x98>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d02a      	beq.n	8007edc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	2b05      	cmp	r3, #5
 8007e96:	dc18      	bgt.n	8007eca <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007e98:	f7ff fdb4 	bl	8007a04 <xTaskGetSchedulerState>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	2b02      	cmp	r3, #2
 8007ea0:	d109      	bne.n	8007eb6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007ea2:	4b11      	ldr	r3, [pc, #68]	; (8007ee8 <xTimerGenericCommand+0x98>)
 8007ea4:	6818      	ldr	r0, [r3, #0]
 8007ea6:	f107 0110 	add.w	r1, r7, #16
 8007eaa:	2300      	movs	r3, #0
 8007eac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007eae:	f7fe f9d5 	bl	800625c <xQueueGenericSend>
 8007eb2:	6278      	str	r0, [r7, #36]	; 0x24
 8007eb4:	e012      	b.n	8007edc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007eb6:	4b0c      	ldr	r3, [pc, #48]	; (8007ee8 <xTimerGenericCommand+0x98>)
 8007eb8:	6818      	ldr	r0, [r3, #0]
 8007eba:	f107 0110 	add.w	r1, r7, #16
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	f7fe f9cb 	bl	800625c <xQueueGenericSend>
 8007ec6:	6278      	str	r0, [r7, #36]	; 0x24
 8007ec8:	e008      	b.n	8007edc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007eca:	4b07      	ldr	r3, [pc, #28]	; (8007ee8 <xTimerGenericCommand+0x98>)
 8007ecc:	6818      	ldr	r0, [r3, #0]
 8007ece:	f107 0110 	add.w	r1, r7, #16
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	683a      	ldr	r2, [r7, #0]
 8007ed6:	f7fe fabf 	bl	8006458 <xQueueGenericSendFromISR>
 8007eda:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3728      	adds	r7, #40	; 0x28
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}
 8007ee6:	bf00      	nop
 8007ee8:	20000c34 	.word	0x20000c34

08007eec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b088      	sub	sp, #32
 8007ef0:	af02      	add	r7, sp, #8
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ef6:	4b22      	ldr	r3, [pc, #136]	; (8007f80 <prvProcessExpiredTimer+0x94>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	68db      	ldr	r3, [r3, #12]
 8007efc:	68db      	ldr	r3, [r3, #12]
 8007efe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	3304      	adds	r3, #4
 8007f04:	4618      	mov	r0, r3
 8007f06:	f7fe f841 	bl	8005f8c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f10:	f003 0304 	and.w	r3, r3, #4
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d022      	beq.n	8007f5e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	699a      	ldr	r2, [r3, #24]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	18d1      	adds	r1, r2, r3
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	683a      	ldr	r2, [r7, #0]
 8007f24:	6978      	ldr	r0, [r7, #20]
 8007f26:	f000 f8d1 	bl	80080cc <prvInsertTimerInActiveList>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d01f      	beq.n	8007f70 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007f30:	2300      	movs	r3, #0
 8007f32:	9300      	str	r3, [sp, #0]
 8007f34:	2300      	movs	r3, #0
 8007f36:	687a      	ldr	r2, [r7, #4]
 8007f38:	2100      	movs	r1, #0
 8007f3a:	6978      	ldr	r0, [r7, #20]
 8007f3c:	f7ff ff88 	bl	8007e50 <xTimerGenericCommand>
 8007f40:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d113      	bne.n	8007f70 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f4c:	f383 8811 	msr	BASEPRI, r3
 8007f50:	f3bf 8f6f 	isb	sy
 8007f54:	f3bf 8f4f 	dsb	sy
 8007f58:	60fb      	str	r3, [r7, #12]
}
 8007f5a:	bf00      	nop
 8007f5c:	e7fe      	b.n	8007f5c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f64:	f023 0301 	bic.w	r3, r3, #1
 8007f68:	b2da      	uxtb	r2, r3
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f70:	697b      	ldr	r3, [r7, #20]
 8007f72:	6a1b      	ldr	r3, [r3, #32]
 8007f74:	6978      	ldr	r0, [r7, #20]
 8007f76:	4798      	blx	r3
}
 8007f78:	bf00      	nop
 8007f7a:	3718      	adds	r7, #24
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}
 8007f80:	20000c2c 	.word	0x20000c2c

08007f84 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b084      	sub	sp, #16
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007f8c:	f107 0308 	add.w	r3, r7, #8
 8007f90:	4618      	mov	r0, r3
 8007f92:	f000 f857 	bl	8008044 <prvGetNextExpireTime>
 8007f96:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	68f8      	ldr	r0, [r7, #12]
 8007f9e:	f000 f803 	bl	8007fa8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007fa2:	f000 f8d5 	bl	8008150 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007fa6:	e7f1      	b.n	8007f8c <prvTimerTask+0x8>

08007fa8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b084      	sub	sp, #16
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
 8007fb0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007fb2:	f7ff f92b 	bl	800720c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007fb6:	f107 0308 	add.w	r3, r7, #8
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f000 f866 	bl	800808c <prvSampleTimeNow>
 8007fc0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d130      	bne.n	800802a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d10a      	bne.n	8007fe4 <prvProcessTimerOrBlockTask+0x3c>
 8007fce:	687a      	ldr	r2, [r7, #4]
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	429a      	cmp	r2, r3
 8007fd4:	d806      	bhi.n	8007fe4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007fd6:	f7ff f927 	bl	8007228 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007fda:	68f9      	ldr	r1, [r7, #12]
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f7ff ff85 	bl	8007eec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007fe2:	e024      	b.n	800802e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d008      	beq.n	8007ffc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007fea:	4b13      	ldr	r3, [pc, #76]	; (8008038 <prvProcessTimerOrBlockTask+0x90>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d101      	bne.n	8007ff8 <prvProcessTimerOrBlockTask+0x50>
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	e000      	b.n	8007ffa <prvProcessTimerOrBlockTask+0x52>
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007ffc:	4b0f      	ldr	r3, [pc, #60]	; (800803c <prvProcessTimerOrBlockTask+0x94>)
 8007ffe:	6818      	ldr	r0, [r3, #0]
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	1ad3      	subs	r3, r2, r3
 8008006:	683a      	ldr	r2, [r7, #0]
 8008008:	4619      	mov	r1, r3
 800800a:	f7fe fe8b 	bl	8006d24 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800800e:	f7ff f90b 	bl	8007228 <xTaskResumeAll>
 8008012:	4603      	mov	r3, r0
 8008014:	2b00      	cmp	r3, #0
 8008016:	d10a      	bne.n	800802e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008018:	4b09      	ldr	r3, [pc, #36]	; (8008040 <prvProcessTimerOrBlockTask+0x98>)
 800801a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800801e:	601a      	str	r2, [r3, #0]
 8008020:	f3bf 8f4f 	dsb	sy
 8008024:	f3bf 8f6f 	isb	sy
}
 8008028:	e001      	b.n	800802e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800802a:	f7ff f8fd 	bl	8007228 <xTaskResumeAll>
}
 800802e:	bf00      	nop
 8008030:	3710      	adds	r7, #16
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}
 8008036:	bf00      	nop
 8008038:	20000c30 	.word	0x20000c30
 800803c:	20000c34 	.word	0x20000c34
 8008040:	e000ed04 	.word	0xe000ed04

08008044 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008044:	b480      	push	{r7}
 8008046:	b085      	sub	sp, #20
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800804c:	4b0e      	ldr	r3, [pc, #56]	; (8008088 <prvGetNextExpireTime+0x44>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d101      	bne.n	800805a <prvGetNextExpireTime+0x16>
 8008056:	2201      	movs	r2, #1
 8008058:	e000      	b.n	800805c <prvGetNextExpireTime+0x18>
 800805a:	2200      	movs	r2, #0
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d105      	bne.n	8008074 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008068:	4b07      	ldr	r3, [pc, #28]	; (8008088 <prvGetNextExpireTime+0x44>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	68db      	ldr	r3, [r3, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	60fb      	str	r3, [r7, #12]
 8008072:	e001      	b.n	8008078 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008074:	2300      	movs	r3, #0
 8008076:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008078:	68fb      	ldr	r3, [r7, #12]
}
 800807a:	4618      	mov	r0, r3
 800807c:	3714      	adds	r7, #20
 800807e:	46bd      	mov	sp, r7
 8008080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008084:	4770      	bx	lr
 8008086:	bf00      	nop
 8008088:	20000c2c 	.word	0x20000c2c

0800808c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b084      	sub	sp, #16
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008094:	f7ff f966 	bl	8007364 <xTaskGetTickCount>
 8008098:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800809a:	4b0b      	ldr	r3, [pc, #44]	; (80080c8 <prvSampleTimeNow+0x3c>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	68fa      	ldr	r2, [r7, #12]
 80080a0:	429a      	cmp	r2, r3
 80080a2:	d205      	bcs.n	80080b0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80080a4:	f000 f936 	bl	8008314 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2201      	movs	r2, #1
 80080ac:	601a      	str	r2, [r3, #0]
 80080ae:	e002      	b.n	80080b6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2200      	movs	r2, #0
 80080b4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80080b6:	4a04      	ldr	r2, [pc, #16]	; (80080c8 <prvSampleTimeNow+0x3c>)
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80080bc:	68fb      	ldr	r3, [r7, #12]
}
 80080be:	4618      	mov	r0, r3
 80080c0:	3710      	adds	r7, #16
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}
 80080c6:	bf00      	nop
 80080c8:	20000c3c 	.word	0x20000c3c

080080cc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b086      	sub	sp, #24
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	60f8      	str	r0, [r7, #12]
 80080d4:	60b9      	str	r1, [r7, #8]
 80080d6:	607a      	str	r2, [r7, #4]
 80080d8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80080da:	2300      	movs	r3, #0
 80080dc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	68ba      	ldr	r2, [r7, #8]
 80080e2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	68fa      	ldr	r2, [r7, #12]
 80080e8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80080ea:	68ba      	ldr	r2, [r7, #8]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	429a      	cmp	r2, r3
 80080f0:	d812      	bhi.n	8008118 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080f2:	687a      	ldr	r2, [r7, #4]
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	1ad2      	subs	r2, r2, r3
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	699b      	ldr	r3, [r3, #24]
 80080fc:	429a      	cmp	r2, r3
 80080fe:	d302      	bcc.n	8008106 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008100:	2301      	movs	r3, #1
 8008102:	617b      	str	r3, [r7, #20]
 8008104:	e01b      	b.n	800813e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008106:	4b10      	ldr	r3, [pc, #64]	; (8008148 <prvInsertTimerInActiveList+0x7c>)
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	3304      	adds	r3, #4
 800810e:	4619      	mov	r1, r3
 8008110:	4610      	mov	r0, r2
 8008112:	f7fd ff02 	bl	8005f1a <vListInsert>
 8008116:	e012      	b.n	800813e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008118:	687a      	ldr	r2, [r7, #4]
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	429a      	cmp	r2, r3
 800811e:	d206      	bcs.n	800812e <prvInsertTimerInActiveList+0x62>
 8008120:	68ba      	ldr	r2, [r7, #8]
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	429a      	cmp	r2, r3
 8008126:	d302      	bcc.n	800812e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008128:	2301      	movs	r3, #1
 800812a:	617b      	str	r3, [r7, #20]
 800812c:	e007      	b.n	800813e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800812e:	4b07      	ldr	r3, [pc, #28]	; (800814c <prvInsertTimerInActiveList+0x80>)
 8008130:	681a      	ldr	r2, [r3, #0]
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	3304      	adds	r3, #4
 8008136:	4619      	mov	r1, r3
 8008138:	4610      	mov	r0, r2
 800813a:	f7fd feee 	bl	8005f1a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800813e:	697b      	ldr	r3, [r7, #20]
}
 8008140:	4618      	mov	r0, r3
 8008142:	3718      	adds	r7, #24
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}
 8008148:	20000c30 	.word	0x20000c30
 800814c:	20000c2c 	.word	0x20000c2c

08008150 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b08e      	sub	sp, #56	; 0x38
 8008154:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008156:	e0ca      	b.n	80082ee <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2b00      	cmp	r3, #0
 800815c:	da18      	bge.n	8008190 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800815e:	1d3b      	adds	r3, r7, #4
 8008160:	3304      	adds	r3, #4
 8008162:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008166:	2b00      	cmp	r3, #0
 8008168:	d10a      	bne.n	8008180 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800816a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800816e:	f383 8811 	msr	BASEPRI, r3
 8008172:	f3bf 8f6f 	isb	sy
 8008176:	f3bf 8f4f 	dsb	sy
 800817a:	61fb      	str	r3, [r7, #28]
}
 800817c:	bf00      	nop
 800817e:	e7fe      	b.n	800817e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008186:	6850      	ldr	r0, [r2, #4]
 8008188:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800818a:	6892      	ldr	r2, [r2, #8]
 800818c:	4611      	mov	r1, r2
 800818e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2b00      	cmp	r3, #0
 8008194:	f2c0 80aa 	blt.w	80082ec <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800819c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800819e:	695b      	ldr	r3, [r3, #20]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d004      	beq.n	80081ae <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80081a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081a6:	3304      	adds	r3, #4
 80081a8:	4618      	mov	r0, r3
 80081aa:	f7fd feef 	bl	8005f8c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80081ae:	463b      	mov	r3, r7
 80081b0:	4618      	mov	r0, r3
 80081b2:	f7ff ff6b 	bl	800808c <prvSampleTimeNow>
 80081b6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2b09      	cmp	r3, #9
 80081bc:	f200 8097 	bhi.w	80082ee <prvProcessReceivedCommands+0x19e>
 80081c0:	a201      	add	r2, pc, #4	; (adr r2, 80081c8 <prvProcessReceivedCommands+0x78>)
 80081c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081c6:	bf00      	nop
 80081c8:	080081f1 	.word	0x080081f1
 80081cc:	080081f1 	.word	0x080081f1
 80081d0:	080081f1 	.word	0x080081f1
 80081d4:	08008265 	.word	0x08008265
 80081d8:	08008279 	.word	0x08008279
 80081dc:	080082c3 	.word	0x080082c3
 80081e0:	080081f1 	.word	0x080081f1
 80081e4:	080081f1 	.word	0x080081f1
 80081e8:	08008265 	.word	0x08008265
 80081ec:	08008279 	.word	0x08008279
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80081f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80081f6:	f043 0301 	orr.w	r3, r3, #1
 80081fa:	b2da      	uxtb	r2, r3
 80081fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008202:	68ba      	ldr	r2, [r7, #8]
 8008204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008206:	699b      	ldr	r3, [r3, #24]
 8008208:	18d1      	adds	r1, r2, r3
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800820e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008210:	f7ff ff5c 	bl	80080cc <prvInsertTimerInActiveList>
 8008214:	4603      	mov	r3, r0
 8008216:	2b00      	cmp	r3, #0
 8008218:	d069      	beq.n	80082ee <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800821a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800821c:	6a1b      	ldr	r3, [r3, #32]
 800821e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008220:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008224:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008228:	f003 0304 	and.w	r3, r3, #4
 800822c:	2b00      	cmp	r3, #0
 800822e:	d05e      	beq.n	80082ee <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008230:	68ba      	ldr	r2, [r7, #8]
 8008232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008234:	699b      	ldr	r3, [r3, #24]
 8008236:	441a      	add	r2, r3
 8008238:	2300      	movs	r3, #0
 800823a:	9300      	str	r3, [sp, #0]
 800823c:	2300      	movs	r3, #0
 800823e:	2100      	movs	r1, #0
 8008240:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008242:	f7ff fe05 	bl	8007e50 <xTimerGenericCommand>
 8008246:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008248:	6a3b      	ldr	r3, [r7, #32]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d14f      	bne.n	80082ee <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800824e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008252:	f383 8811 	msr	BASEPRI, r3
 8008256:	f3bf 8f6f 	isb	sy
 800825a:	f3bf 8f4f 	dsb	sy
 800825e:	61bb      	str	r3, [r7, #24]
}
 8008260:	bf00      	nop
 8008262:	e7fe      	b.n	8008262 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008266:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800826a:	f023 0301 	bic.w	r3, r3, #1
 800826e:	b2da      	uxtb	r2, r3
 8008270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008272:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008276:	e03a      	b.n	80082ee <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800827a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800827e:	f043 0301 	orr.w	r3, r3, #1
 8008282:	b2da      	uxtb	r2, r3
 8008284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008286:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800828a:	68ba      	ldr	r2, [r7, #8]
 800828c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800828e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008292:	699b      	ldr	r3, [r3, #24]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d10a      	bne.n	80082ae <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800829c:	f383 8811 	msr	BASEPRI, r3
 80082a0:	f3bf 8f6f 	isb	sy
 80082a4:	f3bf 8f4f 	dsb	sy
 80082a8:	617b      	str	r3, [r7, #20]
}
 80082aa:	bf00      	nop
 80082ac:	e7fe      	b.n	80082ac <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80082ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b0:	699a      	ldr	r2, [r3, #24]
 80082b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b4:	18d1      	adds	r1, r2, r3
 80082b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082bc:	f7ff ff06 	bl	80080cc <prvInsertTimerInActiveList>
					break;
 80082c0:	e015      	b.n	80082ee <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80082c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80082c8:	f003 0302 	and.w	r3, r3, #2
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d103      	bne.n	80082d8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80082d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082d2:	f000 fbdd 	bl	8008a90 <vPortFree>
 80082d6:	e00a      	b.n	80082ee <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80082d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80082de:	f023 0301 	bic.w	r3, r3, #1
 80082e2:	b2da      	uxtb	r2, r3
 80082e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80082ea:	e000      	b.n	80082ee <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80082ec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80082ee:	4b08      	ldr	r3, [pc, #32]	; (8008310 <prvProcessReceivedCommands+0x1c0>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	1d39      	adds	r1, r7, #4
 80082f4:	2200      	movs	r2, #0
 80082f6:	4618      	mov	r0, r3
 80082f8:	f7fe f9d6 	bl	80066a8 <xQueueReceive>
 80082fc:	4603      	mov	r3, r0
 80082fe:	2b00      	cmp	r3, #0
 8008300:	f47f af2a 	bne.w	8008158 <prvProcessReceivedCommands+0x8>
	}
}
 8008304:	bf00      	nop
 8008306:	bf00      	nop
 8008308:	3730      	adds	r7, #48	; 0x30
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
 800830e:	bf00      	nop
 8008310:	20000c34 	.word	0x20000c34

08008314 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b088      	sub	sp, #32
 8008318:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800831a:	e048      	b.n	80083ae <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800831c:	4b2d      	ldr	r3, [pc, #180]	; (80083d4 <prvSwitchTimerLists+0xc0>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	68db      	ldr	r3, [r3, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008326:	4b2b      	ldr	r3, [pc, #172]	; (80083d4 <prvSwitchTimerLists+0xc0>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	68db      	ldr	r3, [r3, #12]
 800832c:	68db      	ldr	r3, [r3, #12]
 800832e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	3304      	adds	r3, #4
 8008334:	4618      	mov	r0, r3
 8008336:	f7fd fe29 	bl	8005f8c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	6a1b      	ldr	r3, [r3, #32]
 800833e:	68f8      	ldr	r0, [r7, #12]
 8008340:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008348:	f003 0304 	and.w	r3, r3, #4
 800834c:	2b00      	cmp	r3, #0
 800834e:	d02e      	beq.n	80083ae <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	699b      	ldr	r3, [r3, #24]
 8008354:	693a      	ldr	r2, [r7, #16]
 8008356:	4413      	add	r3, r2
 8008358:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800835a:	68ba      	ldr	r2, [r7, #8]
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	429a      	cmp	r2, r3
 8008360:	d90e      	bls.n	8008380 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	68ba      	ldr	r2, [r7, #8]
 8008366:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	68fa      	ldr	r2, [r7, #12]
 800836c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800836e:	4b19      	ldr	r3, [pc, #100]	; (80083d4 <prvSwitchTimerLists+0xc0>)
 8008370:	681a      	ldr	r2, [r3, #0]
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	3304      	adds	r3, #4
 8008376:	4619      	mov	r1, r3
 8008378:	4610      	mov	r0, r2
 800837a:	f7fd fdce 	bl	8005f1a <vListInsert>
 800837e:	e016      	b.n	80083ae <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008380:	2300      	movs	r3, #0
 8008382:	9300      	str	r3, [sp, #0]
 8008384:	2300      	movs	r3, #0
 8008386:	693a      	ldr	r2, [r7, #16]
 8008388:	2100      	movs	r1, #0
 800838a:	68f8      	ldr	r0, [r7, #12]
 800838c:	f7ff fd60 	bl	8007e50 <xTimerGenericCommand>
 8008390:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d10a      	bne.n	80083ae <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800839c:	f383 8811 	msr	BASEPRI, r3
 80083a0:	f3bf 8f6f 	isb	sy
 80083a4:	f3bf 8f4f 	dsb	sy
 80083a8:	603b      	str	r3, [r7, #0]
}
 80083aa:	bf00      	nop
 80083ac:	e7fe      	b.n	80083ac <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80083ae:	4b09      	ldr	r3, [pc, #36]	; (80083d4 <prvSwitchTimerLists+0xc0>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d1b1      	bne.n	800831c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80083b8:	4b06      	ldr	r3, [pc, #24]	; (80083d4 <prvSwitchTimerLists+0xc0>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80083be:	4b06      	ldr	r3, [pc, #24]	; (80083d8 <prvSwitchTimerLists+0xc4>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a04      	ldr	r2, [pc, #16]	; (80083d4 <prvSwitchTimerLists+0xc0>)
 80083c4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80083c6:	4a04      	ldr	r2, [pc, #16]	; (80083d8 <prvSwitchTimerLists+0xc4>)
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	6013      	str	r3, [r2, #0]
}
 80083cc:	bf00      	nop
 80083ce:	3718      	adds	r7, #24
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}
 80083d4:	20000c2c 	.word	0x20000c2c
 80083d8:	20000c30 	.word	0x20000c30

080083dc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b082      	sub	sp, #8
 80083e0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80083e2:	f000 f967 	bl	80086b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80083e6:	4b15      	ldr	r3, [pc, #84]	; (800843c <prvCheckForValidListAndQueue+0x60>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d120      	bne.n	8008430 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80083ee:	4814      	ldr	r0, [pc, #80]	; (8008440 <prvCheckForValidListAndQueue+0x64>)
 80083f0:	f7fd fd42 	bl	8005e78 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80083f4:	4813      	ldr	r0, [pc, #76]	; (8008444 <prvCheckForValidListAndQueue+0x68>)
 80083f6:	f7fd fd3f 	bl	8005e78 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80083fa:	4b13      	ldr	r3, [pc, #76]	; (8008448 <prvCheckForValidListAndQueue+0x6c>)
 80083fc:	4a10      	ldr	r2, [pc, #64]	; (8008440 <prvCheckForValidListAndQueue+0x64>)
 80083fe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008400:	4b12      	ldr	r3, [pc, #72]	; (800844c <prvCheckForValidListAndQueue+0x70>)
 8008402:	4a10      	ldr	r2, [pc, #64]	; (8008444 <prvCheckForValidListAndQueue+0x68>)
 8008404:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008406:	2300      	movs	r3, #0
 8008408:	9300      	str	r3, [sp, #0]
 800840a:	4b11      	ldr	r3, [pc, #68]	; (8008450 <prvCheckForValidListAndQueue+0x74>)
 800840c:	4a11      	ldr	r2, [pc, #68]	; (8008454 <prvCheckForValidListAndQueue+0x78>)
 800840e:	2110      	movs	r1, #16
 8008410:	200a      	movs	r0, #10
 8008412:	f7fd fe4d 	bl	80060b0 <xQueueGenericCreateStatic>
 8008416:	4603      	mov	r3, r0
 8008418:	4a08      	ldr	r2, [pc, #32]	; (800843c <prvCheckForValidListAndQueue+0x60>)
 800841a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800841c:	4b07      	ldr	r3, [pc, #28]	; (800843c <prvCheckForValidListAndQueue+0x60>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d005      	beq.n	8008430 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008424:	4b05      	ldr	r3, [pc, #20]	; (800843c <prvCheckForValidListAndQueue+0x60>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	490b      	ldr	r1, [pc, #44]	; (8008458 <prvCheckForValidListAndQueue+0x7c>)
 800842a:	4618      	mov	r0, r3
 800842c:	f7fe fc50 	bl	8006cd0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008430:	f000 f970 	bl	8008714 <vPortExitCritical>
}
 8008434:	bf00      	nop
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}
 800843a:	bf00      	nop
 800843c:	20000c34 	.word	0x20000c34
 8008440:	20000c04 	.word	0x20000c04
 8008444:	20000c18 	.word	0x20000c18
 8008448:	20000c2c 	.word	0x20000c2c
 800844c:	20000c30 	.word	0x20000c30
 8008450:	20000ce0 	.word	0x20000ce0
 8008454:	20000c40 	.word	0x20000c40
 8008458:	0800943c 	.word	0x0800943c

0800845c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800845c:	b480      	push	{r7}
 800845e:	b085      	sub	sp, #20
 8008460:	af00      	add	r7, sp, #0
 8008462:	60f8      	str	r0, [r7, #12]
 8008464:	60b9      	str	r1, [r7, #8]
 8008466:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	3b04      	subs	r3, #4
 800846c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008474:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	3b04      	subs	r3, #4
 800847a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	f023 0201 	bic.w	r2, r3, #1
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	3b04      	subs	r3, #4
 800848a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800848c:	4a0c      	ldr	r2, [pc, #48]	; (80084c0 <pxPortInitialiseStack+0x64>)
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	3b14      	subs	r3, #20
 8008496:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008498:	687a      	ldr	r2, [r7, #4]
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	3b04      	subs	r3, #4
 80084a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	f06f 0202 	mvn.w	r2, #2
 80084aa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	3b20      	subs	r3, #32
 80084b0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80084b2:	68fb      	ldr	r3, [r7, #12]
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3714      	adds	r7, #20
 80084b8:	46bd      	mov	sp, r7
 80084ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084be:	4770      	bx	lr
 80084c0:	080084c5 	.word	0x080084c5

080084c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80084c4:	b480      	push	{r7}
 80084c6:	b085      	sub	sp, #20
 80084c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80084ca:	2300      	movs	r3, #0
 80084cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80084ce:	4b12      	ldr	r3, [pc, #72]	; (8008518 <prvTaskExitError+0x54>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084d6:	d00a      	beq.n	80084ee <prvTaskExitError+0x2a>
	__asm volatile
 80084d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084dc:	f383 8811 	msr	BASEPRI, r3
 80084e0:	f3bf 8f6f 	isb	sy
 80084e4:	f3bf 8f4f 	dsb	sy
 80084e8:	60fb      	str	r3, [r7, #12]
}
 80084ea:	bf00      	nop
 80084ec:	e7fe      	b.n	80084ec <prvTaskExitError+0x28>
	__asm volatile
 80084ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f2:	f383 8811 	msr	BASEPRI, r3
 80084f6:	f3bf 8f6f 	isb	sy
 80084fa:	f3bf 8f4f 	dsb	sy
 80084fe:	60bb      	str	r3, [r7, #8]
}
 8008500:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008502:	bf00      	nop
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d0fc      	beq.n	8008504 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800850a:	bf00      	nop
 800850c:	bf00      	nop
 800850e:	3714      	adds	r7, #20
 8008510:	46bd      	mov	sp, r7
 8008512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008516:	4770      	bx	lr
 8008518:	2000000c 	.word	0x2000000c
 800851c:	00000000 	.word	0x00000000

08008520 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008520:	4b07      	ldr	r3, [pc, #28]	; (8008540 <pxCurrentTCBConst2>)
 8008522:	6819      	ldr	r1, [r3, #0]
 8008524:	6808      	ldr	r0, [r1, #0]
 8008526:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800852a:	f380 8809 	msr	PSP, r0
 800852e:	f3bf 8f6f 	isb	sy
 8008532:	f04f 0000 	mov.w	r0, #0
 8008536:	f380 8811 	msr	BASEPRI, r0
 800853a:	4770      	bx	lr
 800853c:	f3af 8000 	nop.w

08008540 <pxCurrentTCBConst2>:
 8008540:	200006fc 	.word	0x200006fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008544:	bf00      	nop
 8008546:	bf00      	nop

08008548 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008548:	4808      	ldr	r0, [pc, #32]	; (800856c <prvPortStartFirstTask+0x24>)
 800854a:	6800      	ldr	r0, [r0, #0]
 800854c:	6800      	ldr	r0, [r0, #0]
 800854e:	f380 8808 	msr	MSP, r0
 8008552:	f04f 0000 	mov.w	r0, #0
 8008556:	f380 8814 	msr	CONTROL, r0
 800855a:	b662      	cpsie	i
 800855c:	b661      	cpsie	f
 800855e:	f3bf 8f4f 	dsb	sy
 8008562:	f3bf 8f6f 	isb	sy
 8008566:	df00      	svc	0
 8008568:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800856a:	bf00      	nop
 800856c:	e000ed08 	.word	0xe000ed08

08008570 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b086      	sub	sp, #24
 8008574:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008576:	4b46      	ldr	r3, [pc, #280]	; (8008690 <xPortStartScheduler+0x120>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4a46      	ldr	r2, [pc, #280]	; (8008694 <xPortStartScheduler+0x124>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d10a      	bne.n	8008596 <xPortStartScheduler+0x26>
	__asm volatile
 8008580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008584:	f383 8811 	msr	BASEPRI, r3
 8008588:	f3bf 8f6f 	isb	sy
 800858c:	f3bf 8f4f 	dsb	sy
 8008590:	613b      	str	r3, [r7, #16]
}
 8008592:	bf00      	nop
 8008594:	e7fe      	b.n	8008594 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008596:	4b3e      	ldr	r3, [pc, #248]	; (8008690 <xPortStartScheduler+0x120>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a3f      	ldr	r2, [pc, #252]	; (8008698 <xPortStartScheduler+0x128>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d10a      	bne.n	80085b6 <xPortStartScheduler+0x46>
	__asm volatile
 80085a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a4:	f383 8811 	msr	BASEPRI, r3
 80085a8:	f3bf 8f6f 	isb	sy
 80085ac:	f3bf 8f4f 	dsb	sy
 80085b0:	60fb      	str	r3, [r7, #12]
}
 80085b2:	bf00      	nop
 80085b4:	e7fe      	b.n	80085b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80085b6:	4b39      	ldr	r3, [pc, #228]	; (800869c <xPortStartScheduler+0x12c>)
 80085b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	781b      	ldrb	r3, [r3, #0]
 80085be:	b2db      	uxtb	r3, r3
 80085c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	22ff      	movs	r2, #255	; 0xff
 80085c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	781b      	ldrb	r3, [r3, #0]
 80085cc:	b2db      	uxtb	r3, r3
 80085ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80085d0:	78fb      	ldrb	r3, [r7, #3]
 80085d2:	b2db      	uxtb	r3, r3
 80085d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80085d8:	b2da      	uxtb	r2, r3
 80085da:	4b31      	ldr	r3, [pc, #196]	; (80086a0 <xPortStartScheduler+0x130>)
 80085dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80085de:	4b31      	ldr	r3, [pc, #196]	; (80086a4 <xPortStartScheduler+0x134>)
 80085e0:	2207      	movs	r2, #7
 80085e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80085e4:	e009      	b.n	80085fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80085e6:	4b2f      	ldr	r3, [pc, #188]	; (80086a4 <xPortStartScheduler+0x134>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	3b01      	subs	r3, #1
 80085ec:	4a2d      	ldr	r2, [pc, #180]	; (80086a4 <xPortStartScheduler+0x134>)
 80085ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80085f0:	78fb      	ldrb	r3, [r7, #3]
 80085f2:	b2db      	uxtb	r3, r3
 80085f4:	005b      	lsls	r3, r3, #1
 80085f6:	b2db      	uxtb	r3, r3
 80085f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80085fa:	78fb      	ldrb	r3, [r7, #3]
 80085fc:	b2db      	uxtb	r3, r3
 80085fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008602:	2b80      	cmp	r3, #128	; 0x80
 8008604:	d0ef      	beq.n	80085e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008606:	4b27      	ldr	r3, [pc, #156]	; (80086a4 <xPortStartScheduler+0x134>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f1c3 0307 	rsb	r3, r3, #7
 800860e:	2b04      	cmp	r3, #4
 8008610:	d00a      	beq.n	8008628 <xPortStartScheduler+0xb8>
	__asm volatile
 8008612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008616:	f383 8811 	msr	BASEPRI, r3
 800861a:	f3bf 8f6f 	isb	sy
 800861e:	f3bf 8f4f 	dsb	sy
 8008622:	60bb      	str	r3, [r7, #8]
}
 8008624:	bf00      	nop
 8008626:	e7fe      	b.n	8008626 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008628:	4b1e      	ldr	r3, [pc, #120]	; (80086a4 <xPortStartScheduler+0x134>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	021b      	lsls	r3, r3, #8
 800862e:	4a1d      	ldr	r2, [pc, #116]	; (80086a4 <xPortStartScheduler+0x134>)
 8008630:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008632:	4b1c      	ldr	r3, [pc, #112]	; (80086a4 <xPortStartScheduler+0x134>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800863a:	4a1a      	ldr	r2, [pc, #104]	; (80086a4 <xPortStartScheduler+0x134>)
 800863c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	b2da      	uxtb	r2, r3
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008646:	4b18      	ldr	r3, [pc, #96]	; (80086a8 <xPortStartScheduler+0x138>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4a17      	ldr	r2, [pc, #92]	; (80086a8 <xPortStartScheduler+0x138>)
 800864c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008650:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008652:	4b15      	ldr	r3, [pc, #84]	; (80086a8 <xPortStartScheduler+0x138>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4a14      	ldr	r2, [pc, #80]	; (80086a8 <xPortStartScheduler+0x138>)
 8008658:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800865c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800865e:	f000 f8dd 	bl	800881c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008662:	4b12      	ldr	r3, [pc, #72]	; (80086ac <xPortStartScheduler+0x13c>)
 8008664:	2200      	movs	r2, #0
 8008666:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008668:	f000 f8fc 	bl	8008864 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800866c:	4b10      	ldr	r3, [pc, #64]	; (80086b0 <xPortStartScheduler+0x140>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4a0f      	ldr	r2, [pc, #60]	; (80086b0 <xPortStartScheduler+0x140>)
 8008672:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008676:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008678:	f7ff ff66 	bl	8008548 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800867c:	f7fe ff3c 	bl	80074f8 <vTaskSwitchContext>
	prvTaskExitError();
 8008680:	f7ff ff20 	bl	80084c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008684:	2300      	movs	r3, #0
}
 8008686:	4618      	mov	r0, r3
 8008688:	3718      	adds	r7, #24
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}
 800868e:	bf00      	nop
 8008690:	e000ed00 	.word	0xe000ed00
 8008694:	410fc271 	.word	0x410fc271
 8008698:	410fc270 	.word	0x410fc270
 800869c:	e000e400 	.word	0xe000e400
 80086a0:	20000d30 	.word	0x20000d30
 80086a4:	20000d34 	.word	0x20000d34
 80086a8:	e000ed20 	.word	0xe000ed20
 80086ac:	2000000c 	.word	0x2000000c
 80086b0:	e000ef34 	.word	0xe000ef34

080086b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80086b4:	b480      	push	{r7}
 80086b6:	b083      	sub	sp, #12
 80086b8:	af00      	add	r7, sp, #0
	__asm volatile
 80086ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086be:	f383 8811 	msr	BASEPRI, r3
 80086c2:	f3bf 8f6f 	isb	sy
 80086c6:	f3bf 8f4f 	dsb	sy
 80086ca:	607b      	str	r3, [r7, #4]
}
 80086cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80086ce:	4b0f      	ldr	r3, [pc, #60]	; (800870c <vPortEnterCritical+0x58>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	3301      	adds	r3, #1
 80086d4:	4a0d      	ldr	r2, [pc, #52]	; (800870c <vPortEnterCritical+0x58>)
 80086d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80086d8:	4b0c      	ldr	r3, [pc, #48]	; (800870c <vPortEnterCritical+0x58>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	2b01      	cmp	r3, #1
 80086de:	d10f      	bne.n	8008700 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80086e0:	4b0b      	ldr	r3, [pc, #44]	; (8008710 <vPortEnterCritical+0x5c>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	b2db      	uxtb	r3, r3
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d00a      	beq.n	8008700 <vPortEnterCritical+0x4c>
	__asm volatile
 80086ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ee:	f383 8811 	msr	BASEPRI, r3
 80086f2:	f3bf 8f6f 	isb	sy
 80086f6:	f3bf 8f4f 	dsb	sy
 80086fa:	603b      	str	r3, [r7, #0]
}
 80086fc:	bf00      	nop
 80086fe:	e7fe      	b.n	80086fe <vPortEnterCritical+0x4a>
	}
}
 8008700:	bf00      	nop
 8008702:	370c      	adds	r7, #12
 8008704:	46bd      	mov	sp, r7
 8008706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870a:	4770      	bx	lr
 800870c:	2000000c 	.word	0x2000000c
 8008710:	e000ed04 	.word	0xe000ed04

08008714 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008714:	b480      	push	{r7}
 8008716:	b083      	sub	sp, #12
 8008718:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800871a:	4b12      	ldr	r3, [pc, #72]	; (8008764 <vPortExitCritical+0x50>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d10a      	bne.n	8008738 <vPortExitCritical+0x24>
	__asm volatile
 8008722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008726:	f383 8811 	msr	BASEPRI, r3
 800872a:	f3bf 8f6f 	isb	sy
 800872e:	f3bf 8f4f 	dsb	sy
 8008732:	607b      	str	r3, [r7, #4]
}
 8008734:	bf00      	nop
 8008736:	e7fe      	b.n	8008736 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008738:	4b0a      	ldr	r3, [pc, #40]	; (8008764 <vPortExitCritical+0x50>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	3b01      	subs	r3, #1
 800873e:	4a09      	ldr	r2, [pc, #36]	; (8008764 <vPortExitCritical+0x50>)
 8008740:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008742:	4b08      	ldr	r3, [pc, #32]	; (8008764 <vPortExitCritical+0x50>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d105      	bne.n	8008756 <vPortExitCritical+0x42>
 800874a:	2300      	movs	r3, #0
 800874c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	f383 8811 	msr	BASEPRI, r3
}
 8008754:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008756:	bf00      	nop
 8008758:	370c      	adds	r7, #12
 800875a:	46bd      	mov	sp, r7
 800875c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008760:	4770      	bx	lr
 8008762:	bf00      	nop
 8008764:	2000000c 	.word	0x2000000c
	...

08008770 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008770:	f3ef 8009 	mrs	r0, PSP
 8008774:	f3bf 8f6f 	isb	sy
 8008778:	4b15      	ldr	r3, [pc, #84]	; (80087d0 <pxCurrentTCBConst>)
 800877a:	681a      	ldr	r2, [r3, #0]
 800877c:	f01e 0f10 	tst.w	lr, #16
 8008780:	bf08      	it	eq
 8008782:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008786:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800878a:	6010      	str	r0, [r2, #0]
 800878c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008790:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008794:	f380 8811 	msr	BASEPRI, r0
 8008798:	f3bf 8f4f 	dsb	sy
 800879c:	f3bf 8f6f 	isb	sy
 80087a0:	f7fe feaa 	bl	80074f8 <vTaskSwitchContext>
 80087a4:	f04f 0000 	mov.w	r0, #0
 80087a8:	f380 8811 	msr	BASEPRI, r0
 80087ac:	bc09      	pop	{r0, r3}
 80087ae:	6819      	ldr	r1, [r3, #0]
 80087b0:	6808      	ldr	r0, [r1, #0]
 80087b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087b6:	f01e 0f10 	tst.w	lr, #16
 80087ba:	bf08      	it	eq
 80087bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80087c0:	f380 8809 	msr	PSP, r0
 80087c4:	f3bf 8f6f 	isb	sy
 80087c8:	4770      	bx	lr
 80087ca:	bf00      	nop
 80087cc:	f3af 8000 	nop.w

080087d0 <pxCurrentTCBConst>:
 80087d0:	200006fc 	.word	0x200006fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80087d4:	bf00      	nop
 80087d6:	bf00      	nop

080087d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b082      	sub	sp, #8
 80087dc:	af00      	add	r7, sp, #0
	__asm volatile
 80087de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e2:	f383 8811 	msr	BASEPRI, r3
 80087e6:	f3bf 8f6f 	isb	sy
 80087ea:	f3bf 8f4f 	dsb	sy
 80087ee:	607b      	str	r3, [r7, #4]
}
 80087f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80087f2:	f7fe fdc7 	bl	8007384 <xTaskIncrementTick>
 80087f6:	4603      	mov	r3, r0
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d003      	beq.n	8008804 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80087fc:	4b06      	ldr	r3, [pc, #24]	; (8008818 <xPortSysTickHandler+0x40>)
 80087fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008802:	601a      	str	r2, [r3, #0]
 8008804:	2300      	movs	r3, #0
 8008806:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	f383 8811 	msr	BASEPRI, r3
}
 800880e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008810:	bf00      	nop
 8008812:	3708      	adds	r7, #8
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}
 8008818:	e000ed04 	.word	0xe000ed04

0800881c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800881c:	b480      	push	{r7}
 800881e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008820:	4b0b      	ldr	r3, [pc, #44]	; (8008850 <vPortSetupTimerInterrupt+0x34>)
 8008822:	2200      	movs	r2, #0
 8008824:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008826:	4b0b      	ldr	r3, [pc, #44]	; (8008854 <vPortSetupTimerInterrupt+0x38>)
 8008828:	2200      	movs	r2, #0
 800882a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800882c:	4b0a      	ldr	r3, [pc, #40]	; (8008858 <vPortSetupTimerInterrupt+0x3c>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a0a      	ldr	r2, [pc, #40]	; (800885c <vPortSetupTimerInterrupt+0x40>)
 8008832:	fba2 2303 	umull	r2, r3, r2, r3
 8008836:	099b      	lsrs	r3, r3, #6
 8008838:	4a09      	ldr	r2, [pc, #36]	; (8008860 <vPortSetupTimerInterrupt+0x44>)
 800883a:	3b01      	subs	r3, #1
 800883c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800883e:	4b04      	ldr	r3, [pc, #16]	; (8008850 <vPortSetupTimerInterrupt+0x34>)
 8008840:	2207      	movs	r2, #7
 8008842:	601a      	str	r2, [r3, #0]
}
 8008844:	bf00      	nop
 8008846:	46bd      	mov	sp, r7
 8008848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884c:	4770      	bx	lr
 800884e:	bf00      	nop
 8008850:	e000e010 	.word	0xe000e010
 8008854:	e000e018 	.word	0xe000e018
 8008858:	20000000 	.word	0x20000000
 800885c:	10624dd3 	.word	0x10624dd3
 8008860:	e000e014 	.word	0xe000e014

08008864 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008864:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008874 <vPortEnableVFP+0x10>
 8008868:	6801      	ldr	r1, [r0, #0]
 800886a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800886e:	6001      	str	r1, [r0, #0]
 8008870:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008872:	bf00      	nop
 8008874:	e000ed88 	.word	0xe000ed88

08008878 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008878:	b480      	push	{r7}
 800887a:	b085      	sub	sp, #20
 800887c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800887e:	f3ef 8305 	mrs	r3, IPSR
 8008882:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2b0f      	cmp	r3, #15
 8008888:	d914      	bls.n	80088b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800888a:	4a17      	ldr	r2, [pc, #92]	; (80088e8 <vPortValidateInterruptPriority+0x70>)
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	4413      	add	r3, r2
 8008890:	781b      	ldrb	r3, [r3, #0]
 8008892:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008894:	4b15      	ldr	r3, [pc, #84]	; (80088ec <vPortValidateInterruptPriority+0x74>)
 8008896:	781b      	ldrb	r3, [r3, #0]
 8008898:	7afa      	ldrb	r2, [r7, #11]
 800889a:	429a      	cmp	r2, r3
 800889c:	d20a      	bcs.n	80088b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800889e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a2:	f383 8811 	msr	BASEPRI, r3
 80088a6:	f3bf 8f6f 	isb	sy
 80088aa:	f3bf 8f4f 	dsb	sy
 80088ae:	607b      	str	r3, [r7, #4]
}
 80088b0:	bf00      	nop
 80088b2:	e7fe      	b.n	80088b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80088b4:	4b0e      	ldr	r3, [pc, #56]	; (80088f0 <vPortValidateInterruptPriority+0x78>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80088bc:	4b0d      	ldr	r3, [pc, #52]	; (80088f4 <vPortValidateInterruptPriority+0x7c>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	429a      	cmp	r2, r3
 80088c2:	d90a      	bls.n	80088da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80088c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c8:	f383 8811 	msr	BASEPRI, r3
 80088cc:	f3bf 8f6f 	isb	sy
 80088d0:	f3bf 8f4f 	dsb	sy
 80088d4:	603b      	str	r3, [r7, #0]
}
 80088d6:	bf00      	nop
 80088d8:	e7fe      	b.n	80088d8 <vPortValidateInterruptPriority+0x60>
	}
 80088da:	bf00      	nop
 80088dc:	3714      	adds	r7, #20
 80088de:	46bd      	mov	sp, r7
 80088e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e4:	4770      	bx	lr
 80088e6:	bf00      	nop
 80088e8:	e000e3f0 	.word	0xe000e3f0
 80088ec:	20000d30 	.word	0x20000d30
 80088f0:	e000ed0c 	.word	0xe000ed0c
 80088f4:	20000d34 	.word	0x20000d34

080088f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b08a      	sub	sp, #40	; 0x28
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008900:	2300      	movs	r3, #0
 8008902:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008904:	f7fe fc82 	bl	800720c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008908:	4b5b      	ldr	r3, [pc, #364]	; (8008a78 <pvPortMalloc+0x180>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d101      	bne.n	8008914 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008910:	f000 f920 	bl	8008b54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008914:	4b59      	ldr	r3, [pc, #356]	; (8008a7c <pvPortMalloc+0x184>)
 8008916:	681a      	ldr	r2, [r3, #0]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	4013      	ands	r3, r2
 800891c:	2b00      	cmp	r3, #0
 800891e:	f040 8093 	bne.w	8008a48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d01d      	beq.n	8008964 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008928:	2208      	movs	r2, #8
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	4413      	add	r3, r2
 800892e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f003 0307 	and.w	r3, r3, #7
 8008936:	2b00      	cmp	r3, #0
 8008938:	d014      	beq.n	8008964 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f023 0307 	bic.w	r3, r3, #7
 8008940:	3308      	adds	r3, #8
 8008942:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f003 0307 	and.w	r3, r3, #7
 800894a:	2b00      	cmp	r3, #0
 800894c:	d00a      	beq.n	8008964 <pvPortMalloc+0x6c>
	__asm volatile
 800894e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008952:	f383 8811 	msr	BASEPRI, r3
 8008956:	f3bf 8f6f 	isb	sy
 800895a:	f3bf 8f4f 	dsb	sy
 800895e:	617b      	str	r3, [r7, #20]
}
 8008960:	bf00      	nop
 8008962:	e7fe      	b.n	8008962 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d06e      	beq.n	8008a48 <pvPortMalloc+0x150>
 800896a:	4b45      	ldr	r3, [pc, #276]	; (8008a80 <pvPortMalloc+0x188>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	687a      	ldr	r2, [r7, #4]
 8008970:	429a      	cmp	r2, r3
 8008972:	d869      	bhi.n	8008a48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008974:	4b43      	ldr	r3, [pc, #268]	; (8008a84 <pvPortMalloc+0x18c>)
 8008976:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008978:	4b42      	ldr	r3, [pc, #264]	; (8008a84 <pvPortMalloc+0x18c>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800897e:	e004      	b.n	800898a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008982:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800898a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800898c:	685b      	ldr	r3, [r3, #4]
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	429a      	cmp	r2, r3
 8008992:	d903      	bls.n	800899c <pvPortMalloc+0xa4>
 8008994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d1f1      	bne.n	8008980 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800899c:	4b36      	ldr	r3, [pc, #216]	; (8008a78 <pvPortMalloc+0x180>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d050      	beq.n	8008a48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80089a6:	6a3b      	ldr	r3, [r7, #32]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	2208      	movs	r2, #8
 80089ac:	4413      	add	r3, r2
 80089ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80089b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b2:	681a      	ldr	r2, [r3, #0]
 80089b4:	6a3b      	ldr	r3, [r7, #32]
 80089b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80089b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ba:	685a      	ldr	r2, [r3, #4]
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	1ad2      	subs	r2, r2, r3
 80089c0:	2308      	movs	r3, #8
 80089c2:	005b      	lsls	r3, r3, #1
 80089c4:	429a      	cmp	r2, r3
 80089c6:	d91f      	bls.n	8008a08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80089c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	4413      	add	r3, r2
 80089ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80089d0:	69bb      	ldr	r3, [r7, #24]
 80089d2:	f003 0307 	and.w	r3, r3, #7
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d00a      	beq.n	80089f0 <pvPortMalloc+0xf8>
	__asm volatile
 80089da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089de:	f383 8811 	msr	BASEPRI, r3
 80089e2:	f3bf 8f6f 	isb	sy
 80089e6:	f3bf 8f4f 	dsb	sy
 80089ea:	613b      	str	r3, [r7, #16]
}
 80089ec:	bf00      	nop
 80089ee:	e7fe      	b.n	80089ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80089f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f2:	685a      	ldr	r2, [r3, #4]
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	1ad2      	subs	r2, r2, r3
 80089f8:	69bb      	ldr	r3, [r7, #24]
 80089fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80089fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089fe:	687a      	ldr	r2, [r7, #4]
 8008a00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008a02:	69b8      	ldr	r0, [r7, #24]
 8008a04:	f000 f908 	bl	8008c18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008a08:	4b1d      	ldr	r3, [pc, #116]	; (8008a80 <pvPortMalloc+0x188>)
 8008a0a:	681a      	ldr	r2, [r3, #0]
 8008a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	1ad3      	subs	r3, r2, r3
 8008a12:	4a1b      	ldr	r2, [pc, #108]	; (8008a80 <pvPortMalloc+0x188>)
 8008a14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008a16:	4b1a      	ldr	r3, [pc, #104]	; (8008a80 <pvPortMalloc+0x188>)
 8008a18:	681a      	ldr	r2, [r3, #0]
 8008a1a:	4b1b      	ldr	r3, [pc, #108]	; (8008a88 <pvPortMalloc+0x190>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	429a      	cmp	r2, r3
 8008a20:	d203      	bcs.n	8008a2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008a22:	4b17      	ldr	r3, [pc, #92]	; (8008a80 <pvPortMalloc+0x188>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4a18      	ldr	r2, [pc, #96]	; (8008a88 <pvPortMalloc+0x190>)
 8008a28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a2c:	685a      	ldr	r2, [r3, #4]
 8008a2e:	4b13      	ldr	r3, [pc, #76]	; (8008a7c <pvPortMalloc+0x184>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	431a      	orrs	r2, r3
 8008a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008a3e:	4b13      	ldr	r3, [pc, #76]	; (8008a8c <pvPortMalloc+0x194>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	3301      	adds	r3, #1
 8008a44:	4a11      	ldr	r2, [pc, #68]	; (8008a8c <pvPortMalloc+0x194>)
 8008a46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008a48:	f7fe fbee 	bl	8007228 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a4c:	69fb      	ldr	r3, [r7, #28]
 8008a4e:	f003 0307 	and.w	r3, r3, #7
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d00a      	beq.n	8008a6c <pvPortMalloc+0x174>
	__asm volatile
 8008a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a5a:	f383 8811 	msr	BASEPRI, r3
 8008a5e:	f3bf 8f6f 	isb	sy
 8008a62:	f3bf 8f4f 	dsb	sy
 8008a66:	60fb      	str	r3, [r7, #12]
}
 8008a68:	bf00      	nop
 8008a6a:	e7fe      	b.n	8008a6a <pvPortMalloc+0x172>
	return pvReturn;
 8008a6c:	69fb      	ldr	r3, [r7, #28]
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3728      	adds	r7, #40	; 0x28
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}
 8008a76:	bf00      	nop
 8008a78:	200018f8 	.word	0x200018f8
 8008a7c:	2000190c 	.word	0x2000190c
 8008a80:	200018fc 	.word	0x200018fc
 8008a84:	200018f0 	.word	0x200018f0
 8008a88:	20001900 	.word	0x20001900
 8008a8c:	20001904 	.word	0x20001904

08008a90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b086      	sub	sp, #24
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d04d      	beq.n	8008b3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008aa2:	2308      	movs	r3, #8
 8008aa4:	425b      	negs	r3, r3
 8008aa6:	697a      	ldr	r2, [r7, #20]
 8008aa8:	4413      	add	r3, r2
 8008aaa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	685a      	ldr	r2, [r3, #4]
 8008ab4:	4b24      	ldr	r3, [pc, #144]	; (8008b48 <vPortFree+0xb8>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4013      	ands	r3, r2
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d10a      	bne.n	8008ad4 <vPortFree+0x44>
	__asm volatile
 8008abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac2:	f383 8811 	msr	BASEPRI, r3
 8008ac6:	f3bf 8f6f 	isb	sy
 8008aca:	f3bf 8f4f 	dsb	sy
 8008ace:	60fb      	str	r3, [r7, #12]
}
 8008ad0:	bf00      	nop
 8008ad2:	e7fe      	b.n	8008ad2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d00a      	beq.n	8008af2 <vPortFree+0x62>
	__asm volatile
 8008adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae0:	f383 8811 	msr	BASEPRI, r3
 8008ae4:	f3bf 8f6f 	isb	sy
 8008ae8:	f3bf 8f4f 	dsb	sy
 8008aec:	60bb      	str	r3, [r7, #8]
}
 8008aee:	bf00      	nop
 8008af0:	e7fe      	b.n	8008af0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	685a      	ldr	r2, [r3, #4]
 8008af6:	4b14      	ldr	r3, [pc, #80]	; (8008b48 <vPortFree+0xb8>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4013      	ands	r3, r2
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d01e      	beq.n	8008b3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d11a      	bne.n	8008b3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	685a      	ldr	r2, [r3, #4]
 8008b0c:	4b0e      	ldr	r3, [pc, #56]	; (8008b48 <vPortFree+0xb8>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	43db      	mvns	r3, r3
 8008b12:	401a      	ands	r2, r3
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008b18:	f7fe fb78 	bl	800720c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	685a      	ldr	r2, [r3, #4]
 8008b20:	4b0a      	ldr	r3, [pc, #40]	; (8008b4c <vPortFree+0xbc>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4413      	add	r3, r2
 8008b26:	4a09      	ldr	r2, [pc, #36]	; (8008b4c <vPortFree+0xbc>)
 8008b28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008b2a:	6938      	ldr	r0, [r7, #16]
 8008b2c:	f000 f874 	bl	8008c18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008b30:	4b07      	ldr	r3, [pc, #28]	; (8008b50 <vPortFree+0xc0>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	3301      	adds	r3, #1
 8008b36:	4a06      	ldr	r2, [pc, #24]	; (8008b50 <vPortFree+0xc0>)
 8008b38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008b3a:	f7fe fb75 	bl	8007228 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008b3e:	bf00      	nop
 8008b40:	3718      	adds	r7, #24
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}
 8008b46:	bf00      	nop
 8008b48:	2000190c 	.word	0x2000190c
 8008b4c:	200018fc 	.word	0x200018fc
 8008b50:	20001908 	.word	0x20001908

08008b54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008b54:	b480      	push	{r7}
 8008b56:	b085      	sub	sp, #20
 8008b58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008b5a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8008b5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008b60:	4b27      	ldr	r3, [pc, #156]	; (8008c00 <prvHeapInit+0xac>)
 8008b62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	f003 0307 	and.w	r3, r3, #7
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d00c      	beq.n	8008b88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	3307      	adds	r3, #7
 8008b72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	f023 0307 	bic.w	r3, r3, #7
 8008b7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008b7c:	68ba      	ldr	r2, [r7, #8]
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	1ad3      	subs	r3, r2, r3
 8008b82:	4a1f      	ldr	r2, [pc, #124]	; (8008c00 <prvHeapInit+0xac>)
 8008b84:	4413      	add	r3, r2
 8008b86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008b8c:	4a1d      	ldr	r2, [pc, #116]	; (8008c04 <prvHeapInit+0xb0>)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008b92:	4b1c      	ldr	r3, [pc, #112]	; (8008c04 <prvHeapInit+0xb0>)
 8008b94:	2200      	movs	r2, #0
 8008b96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	68ba      	ldr	r2, [r7, #8]
 8008b9c:	4413      	add	r3, r2
 8008b9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008ba0:	2208      	movs	r2, #8
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	1a9b      	subs	r3, r3, r2
 8008ba6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f023 0307 	bic.w	r3, r3, #7
 8008bae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	4a15      	ldr	r2, [pc, #84]	; (8008c08 <prvHeapInit+0xb4>)
 8008bb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008bb6:	4b14      	ldr	r3, [pc, #80]	; (8008c08 <prvHeapInit+0xb4>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008bbe:	4b12      	ldr	r3, [pc, #72]	; (8008c08 <prvHeapInit+0xb4>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	68fa      	ldr	r2, [r7, #12]
 8008bce:	1ad2      	subs	r2, r2, r3
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008bd4:	4b0c      	ldr	r3, [pc, #48]	; (8008c08 <prvHeapInit+0xb4>)
 8008bd6:	681a      	ldr	r2, [r3, #0]
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	4a0a      	ldr	r2, [pc, #40]	; (8008c0c <prvHeapInit+0xb8>)
 8008be2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	4a09      	ldr	r2, [pc, #36]	; (8008c10 <prvHeapInit+0xbc>)
 8008bea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008bec:	4b09      	ldr	r3, [pc, #36]	; (8008c14 <prvHeapInit+0xc0>)
 8008bee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008bf2:	601a      	str	r2, [r3, #0]
}
 8008bf4:	bf00      	nop
 8008bf6:	3714      	adds	r7, #20
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr
 8008c00:	20000d38 	.word	0x20000d38
 8008c04:	200018f0 	.word	0x200018f0
 8008c08:	200018f8 	.word	0x200018f8
 8008c0c:	20001900 	.word	0x20001900
 8008c10:	200018fc 	.word	0x200018fc
 8008c14:	2000190c 	.word	0x2000190c

08008c18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b085      	sub	sp, #20
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008c20:	4b28      	ldr	r3, [pc, #160]	; (8008cc4 <prvInsertBlockIntoFreeList+0xac>)
 8008c22:	60fb      	str	r3, [r7, #12]
 8008c24:	e002      	b.n	8008c2c <prvInsertBlockIntoFreeList+0x14>
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	60fb      	str	r3, [r7, #12]
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	687a      	ldr	r2, [r7, #4]
 8008c32:	429a      	cmp	r2, r3
 8008c34:	d8f7      	bhi.n	8008c26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	68ba      	ldr	r2, [r7, #8]
 8008c40:	4413      	add	r3, r2
 8008c42:	687a      	ldr	r2, [r7, #4]
 8008c44:	429a      	cmp	r2, r3
 8008c46:	d108      	bne.n	8008c5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	685a      	ldr	r2, [r3, #4]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	441a      	add	r2, r3
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	685b      	ldr	r3, [r3, #4]
 8008c62:	68ba      	ldr	r2, [r7, #8]
 8008c64:	441a      	add	r2, r3
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	d118      	bne.n	8008ca0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681a      	ldr	r2, [r3, #0]
 8008c72:	4b15      	ldr	r3, [pc, #84]	; (8008cc8 <prvInsertBlockIntoFreeList+0xb0>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	429a      	cmp	r2, r3
 8008c78:	d00d      	beq.n	8008c96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	685a      	ldr	r2, [r3, #4]
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	441a      	add	r2, r3
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	681a      	ldr	r2, [r3, #0]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	601a      	str	r2, [r3, #0]
 8008c94:	e008      	b.n	8008ca8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008c96:	4b0c      	ldr	r3, [pc, #48]	; (8008cc8 <prvInsertBlockIntoFreeList+0xb0>)
 8008c98:	681a      	ldr	r2, [r3, #0]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	601a      	str	r2, [r3, #0]
 8008c9e:	e003      	b.n	8008ca8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681a      	ldr	r2, [r3, #0]
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008ca8:	68fa      	ldr	r2, [r7, #12]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	429a      	cmp	r2, r3
 8008cae:	d002      	beq.n	8008cb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	687a      	ldr	r2, [r7, #4]
 8008cb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008cb6:	bf00      	nop
 8008cb8:	3714      	adds	r7, #20
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc0:	4770      	bx	lr
 8008cc2:	bf00      	nop
 8008cc4:	200018f0 	.word	0x200018f0
 8008cc8:	200018f8 	.word	0x200018f8

08008ccc <IIM42652_ReadRegister>:


/* Function implementation */

HAL_StatusTypeDef IIM42652_ReadRegister( IIM42652 *dev, uint8_t reg, uint8_t *data )
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b088      	sub	sp, #32
 8008cd0:	af04      	add	r7, sp, #16
 8008cd2:	60f8      	str	r0, [r7, #12]
 8008cd4:	460b      	mov	r3, r1
 8008cd6:	607a      	str	r2, [r7, #4]
 8008cd8:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Read( dev->i2cHandle, IIM42652_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	6818      	ldr	r0, [r3, #0]
 8008cde:	7afb      	ldrb	r3, [r7, #11]
 8008ce0:	b29a      	uxth	r2, r3
 8008ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8008ce6:	9302      	str	r3, [sp, #8]
 8008ce8:	2301      	movs	r3, #1
 8008cea:	9301      	str	r3, [sp, #4]
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	9300      	str	r3, [sp, #0]
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	21d2      	movs	r1, #210	; 0xd2
 8008cf4:	f7f8 fda2 	bl	800183c <HAL_I2C_Mem_Read>
 8008cf8:	4603      	mov	r3, r0
	status = HAL_I2C_Mem_Read_IT( dev->i2cHandle, IIM42652_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, 1);
	xSemaphoreTake(xSemI2C_transfer, portMAX_DELAY);

	return status;
*/
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3710      	adds	r7, #16
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}
	...

08008d04 <IIM42652_ReadMultipleRegisters>:


HAL_StatusTypeDef IIM42652_ReadMultipleRegisters( IIM42652 *dev, uint8_t reg, uint8_t *data, uint8_t length )
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b088      	sub	sp, #32
 8008d08:	af02      	add	r7, sp, #8
 8008d0a:	60f8      	str	r0, [r7, #12]
 8008d0c:	607a      	str	r2, [r7, #4]
 8008d0e:	461a      	mov	r2, r3
 8008d10:	460b      	mov	r3, r1
 8008d12:	72fb      	strb	r3, [r7, #11]
 8008d14:	4613      	mov	r3, r2
 8008d16:	72bb      	strb	r3, [r7, #10]
	/* Start non-blocking I2C transaction and blocks until semaphore is given by I2C callback */
	HAL_StatusTypeDef status;
	status = HAL_I2C_Mem_Read_IT( dev->i2cHandle, IIM42652_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, length);
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	6818      	ldr	r0, [r3, #0]
 8008d1c:	7afb      	ldrb	r3, [r7, #11]
 8008d1e:	b29a      	uxth	r2, r3
 8008d20:	7abb      	ldrb	r3, [r7, #10]
 8008d22:	b29b      	uxth	r3, r3
 8008d24:	9301      	str	r3, [sp, #4]
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	9300      	str	r3, [sp, #0]
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	21d2      	movs	r1, #210	; 0xd2
 8008d2e:	f7f8 fe9f 	bl	8001a70 <HAL_I2C_Mem_Read_IT>
 8008d32:	4603      	mov	r3, r0
 8008d34:	75fb      	strb	r3, [r7, #23]
	xSemaphoreTake(xSemI2C_transfer, portMAX_DELAY);
 8008d36:	4b06      	ldr	r3, [pc, #24]	; (8008d50 <IIM42652_ReadMultipleRegisters+0x4c>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f04f 31ff 	mov.w	r1, #4294967295
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f7fd fd92 	bl	8006868 <xQueueSemaphoreTake>

	return status;
 8008d44:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3718      	adds	r7, #24
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}
 8008d4e:	bf00      	nop
 8008d50:	20001914 	.word	0x20001914

08008d54 <IIM42652_WriteRegister>:


HAL_StatusTypeDef IIM42652_WriteRegister( IIM42652 *dev, uint8_t reg, uint8_t *data )
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b088      	sub	sp, #32
 8008d58:	af04      	add	r7, sp, #16
 8008d5a:	60f8      	str	r0, [r7, #12]
 8008d5c:	460b      	mov	r3, r1
 8008d5e:	607a      	str	r2, [r7, #4]
 8008d60:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Write( dev->i2cHandle, IIM42652_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	6818      	ldr	r0, [r3, #0]
 8008d66:	7afb      	ldrb	r3, [r7, #11]
 8008d68:	b29a      	uxth	r2, r3
 8008d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8008d6e:	9302      	str	r3, [sp, #8]
 8008d70:	2301      	movs	r3, #1
 8008d72:	9301      	str	r3, [sp, #4]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	9300      	str	r3, [sp, #0]
 8008d78:	2301      	movs	r3, #1
 8008d7a:	21d2      	movs	r1, #210	; 0xd2
 8008d7c:	f7f8 fc4a 	bl	8001614 <HAL_I2C_Mem_Write>
 8008d80:	4603      	mov	r3, r0
	xSemaphoreTake(xSemI2C_transfer, portMAX_DELAY);

	return status;

	*/
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3710      	adds	r7, #16
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}

08008d8a <IIM42652_SoftReset>:


/* Function that performs a soft reset of device */
HAL_StatusTypeDef IIM42652_SoftReset( IIM42652 *dev )
{
 8008d8a:	b580      	push	{r7, lr}
 8008d8c:	b084      	sub	sp, #16
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef status;
	uint8_t config;

	/* Reads config register, enables reset bit and writes changes */
	status =  IIM42652_ReadRegister( dev, DEVICE_CONFIG_ADD, &config );
 8008d92:	f107 030e 	add.w	r3, r7, #14
 8008d96:	461a      	mov	r2, r3
 8008d98:	2111      	movs	r1, #17
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f7ff ff96 	bl	8008ccc <IIM42652_ReadRegister>
 8008da0:	4603      	mov	r3, r0
 8008da2:	73fb      	strb	r3, [r7, #15]

	config |= 0x01;
 8008da4:	7bbb      	ldrb	r3, [r7, #14]
 8008da6:	f043 0301 	orr.w	r3, r3, #1
 8008daa:	b2db      	uxtb	r3, r3
 8008dac:	73bb      	strb	r3, [r7, #14]

	status |= IIM42652_WriteRegister( dev, DEVICE_CONFIG_ADD, &config );
 8008dae:	f107 030e 	add.w	r3, r7, #14
 8008db2:	461a      	mov	r2, r3
 8008db4:	2111      	movs	r1, #17
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f7ff ffcc 	bl	8008d54 <IIM42652_WriteRegister>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	461a      	mov	r2, r3
 8008dc0:	7bfb      	ldrb	r3, [r7, #15]
 8008dc2:	4313      	orrs	r3, r2
 8008dc4:	73fb      	strb	r3, [r7, #15]

	/* Waits 2ms for soft reset to be effective */
	//vTaskDelay( 2 / portTICK_PERIOD_MS );
	HAL_Delay( 2 );
 8008dc6:	2002      	movs	r0, #2
 8008dc8:	f7f8 f81e 	bl	8000e08 <HAL_Delay>

	return status;
 8008dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	3710      	adds	r7, #16
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}

08008dd6 <IIM42652_EnableGyro>:


/* Function enables gyroscope */
HAL_StatusTypeDef IIM42652_EnableGyro( IIM42652 *dev )
{
 8008dd6:	b580      	push	{r7, lr}
 8008dd8:	b084      	sub	sp, #16
 8008dda:	af00      	add	r7, sp, #0
 8008ddc:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef status;
	uint8_t config;

	/* Reads config register, enables reset bit and writes changes */
	status =  IIM42652_ReadRegister( dev, PWR_MGMT0_ADD, &config );
 8008dde:	f107 030e 	add.w	r3, r7, #14
 8008de2:	461a      	mov	r2, r3
 8008de4:	214e      	movs	r1, #78	; 0x4e
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f7ff ff70 	bl	8008ccc <IIM42652_ReadRegister>
 8008dec:	4603      	mov	r3, r0
 8008dee:	73fb      	strb	r3, [r7, #15]

	config |= IIM42652_SET_GYRO_TLOW_NOISE_MODE;
 8008df0:	7bbb      	ldrb	r3, [r7, #14]
 8008df2:	f043 030c 	orr.w	r3, r3, #12
 8008df6:	b2db      	uxtb	r3, r3
 8008df8:	73bb      	strb	r3, [r7, #14]

	status |= IIM42652_WriteRegister( dev, PWR_MGMT0_ADD, &config );
 8008dfa:	f107 030e 	add.w	r3, r7, #14
 8008dfe:	461a      	mov	r2, r3
 8008e00:	214e      	movs	r1, #78	; 0x4e
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f7ff ffa6 	bl	8008d54 <IIM42652_WriteRegister>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	461a      	mov	r2, r3
 8008e0c:	7bfb      	ldrb	r3, [r7, #15]
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	73fb      	strb	r3, [r7, #15]

	/* Waits for gyroscope power on */
	//vTaskDelay( 1 / portTICK_PERIOD_MS );
	HAL_Delay( 1 );
 8008e12:	2001      	movs	r0, #1
 8008e14:	f7f7 fff8 	bl	8000e08 <HAL_Delay>

	return status;
 8008e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3710      	adds	r7, #16
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}

08008e22 <IIM42652_EnableAccel>:


/* Function enables gyroscope */
HAL_StatusTypeDef IIM42652_EnableAccel( IIM42652 *dev )
{
 8008e22:	b580      	push	{r7, lr}
 8008e24:	b084      	sub	sp, #16
 8008e26:	af00      	add	r7, sp, #0
 8008e28:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef status;
	uint8_t config;

	/* Reads config register, enables reset bit and writes changes */
	status =  IIM42652_ReadRegister( dev, PWR_MGMT0_ADD, &config );
 8008e2a:	f107 030e 	add.w	r3, r7, #14
 8008e2e:	461a      	mov	r2, r3
 8008e30:	214e      	movs	r1, #78	; 0x4e
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f7ff ff4a 	bl	8008ccc <IIM42652_ReadRegister>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	73fb      	strb	r3, [r7, #15]

	config |= IIM42652_SET_ACCEL_LOW_NOISE_MODE;
 8008e3c:	7bbb      	ldrb	r3, [r7, #14]
 8008e3e:	f043 0303 	orr.w	r3, r3, #3
 8008e42:	b2db      	uxtb	r3, r3
 8008e44:	73bb      	strb	r3, [r7, #14]

	status |= IIM42652_WriteRegister( dev, PWR_MGMT0_ADD, &config );
 8008e46:	f107 030e 	add.w	r3, r7, #14
 8008e4a:	461a      	mov	r2, r3
 8008e4c:	214e      	movs	r1, #78	; 0x4e
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f7ff ff80 	bl	8008d54 <IIM42652_WriteRegister>
 8008e54:	4603      	mov	r3, r0
 8008e56:	461a      	mov	r2, r3
 8008e58:	7bfb      	ldrb	r3, [r7, #15]
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	73fb      	strb	r3, [r7, #15]

	/* Waits for accelerometer power on */
	HAL_Delay( 1 );
 8008e5e:	2001      	movs	r0, #1
 8008e60:	f7f7 ffd2 	bl	8000e08 <HAL_Delay>
	//vTaskDelay( 1 / portTICK_PERIOD_MS );

	return status;
 8008e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3710      	adds	r7, #16
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}

08008e6e <IIM42652_setConfigGyro>:


/* Configures gyroscope parameters */
HAL_StatusTypeDef IIM42652_setConfigGyro( IIM42652 *dev, IIM42652_GYRO_CFG_t gyrCfg )
{
 8008e6e:	b580      	push	{r7, lr}
 8008e70:	b086      	sub	sp, #24
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	60f8      	str	r0, [r7, #12]
 8008e76:	1d3b      	adds	r3, r7, #4
 8008e78:	e883 0006 	stmia.w	r3, {r1, r2}
	uint8_t config = 0x00;
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	75bb      	strb	r3, [r7, #22]
	HAL_StatusTypeDef status = HAL_OK;
 8008e80:	2300      	movs	r3, #0
 8008e82:	75fb      	strb	r3, [r7, #23]

	/* Writes gyroscope selected registers */

	config  = ( gyrCfg.gyro_fs_sel & ( BIT_MASK_BIT_2 | BIT_MASK_BIT_1 | BIT_MASK_BIT_0 ) ) << 5;
 8008e84:	793b      	ldrb	r3, [r7, #4]
 8008e86:	015b      	lsls	r3, r3, #5
 8008e88:	b2db      	uxtb	r3, r3
 8008e8a:	75bb      	strb	r3, [r7, #22]
	config |=   gyrCfg.gyro_odr    & ( BIT_MASK_BIT_3 | BIT_MASK_BIT_2 | BIT_MASK_BIT_1 | BIT_MASK_BIT_0 );
 8008e8c:	797b      	ldrb	r3, [r7, #5]
 8008e8e:	b25b      	sxtb	r3, r3
 8008e90:	f003 030f 	and.w	r3, r3, #15
 8008e94:	b25a      	sxtb	r2, r3
 8008e96:	7dbb      	ldrb	r3, [r7, #22]
 8008e98:	b25b      	sxtb	r3, r3
 8008e9a:	4313      	orrs	r3, r2
 8008e9c:	b25b      	sxtb	r3, r3
 8008e9e:	b2db      	uxtb	r3, r3
 8008ea0:	75bb      	strb	r3, [r7, #22]

	status = IIM42652_WriteRegister( dev, GYRO_CONFIG0_ADD, &config );
 8008ea2:	f107 0316 	add.w	r3, r7, #22
 8008ea6:	461a      	mov	r2, r3
 8008ea8:	214f      	movs	r1, #79	; 0x4f
 8008eaa:	68f8      	ldr	r0, [r7, #12]
 8008eac:	f7ff ff52 	bl	8008d54 <IIM42652_WriteRegister>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	75fb      	strb	r3, [r7, #23]

	config  =  ( gyrCfg.gyro_ui_filt_ord  & ( BIT_MASK_BIT_1 | BIT_MASK_BIT_0 ) ) << 2;
 8008eb4:	79bb      	ldrb	r3, [r7, #6]
 8008eb6:	009b      	lsls	r3, r3, #2
 8008eb8:	b2db      	uxtb	r3, r3
 8008eba:	f003 030c 	and.w	r3, r3, #12
 8008ebe:	b2db      	uxtb	r3, r3
 8008ec0:	75bb      	strb	r3, [r7, #22]
	config |=    gyrCfg.gyro_dec2_m2_ord  & ( BIT_MASK_BIT_1 | BIT_MASK_BIT_0 );
 8008ec2:	79fb      	ldrb	r3, [r7, #7]
 8008ec4:	b25b      	sxtb	r3, r3
 8008ec6:	f003 0303 	and.w	r3, r3, #3
 8008eca:	b25a      	sxtb	r2, r3
 8008ecc:	7dbb      	ldrb	r3, [r7, #22]
 8008ece:	b25b      	sxtb	r3, r3
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	b25b      	sxtb	r3, r3
 8008ed4:	b2db      	uxtb	r3, r3
 8008ed6:	75bb      	strb	r3, [r7, #22]

	status |= IIM42652_WriteRegister( dev, GYRO_CONFIG1_ADD, &config );
 8008ed8:	f107 0316 	add.w	r3, r7, #22
 8008edc:	461a      	mov	r2, r3
 8008ede:	2151      	movs	r1, #81	; 0x51
 8008ee0:	68f8      	ldr	r0, [r7, #12]
 8008ee2:	f7ff ff37 	bl	8008d54 <IIM42652_WriteRegister>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	461a      	mov	r2, r3
 8008eea:	7dfb      	ldrb	r3, [r7, #23]
 8008eec:	4313      	orrs	r3, r2
 8008eee:	75fb      	strb	r3, [r7, #23]


	status |=  IIM42652_ReadRegister( dev, GYR_ACC_CONFIG0_ADD, &config );
 8008ef0:	f107 0316 	add.w	r3, r7, #22
 8008ef4:	461a      	mov	r2, r3
 8008ef6:	2152      	movs	r1, #82	; 0x52
 8008ef8:	68f8      	ldr	r0, [r7, #12]
 8008efa:	f7ff fee7 	bl	8008ccc <IIM42652_ReadRegister>
 8008efe:	4603      	mov	r3, r0
 8008f00:	461a      	mov	r2, r3
 8008f02:	7dfb      	ldrb	r3, [r7, #23]
 8008f04:	4313      	orrs	r3, r2
 8008f06:	75fb      	strb	r3, [r7, #23]

	config |= gyrCfg.gyro_ui_filt_bw & ( BIT_MASK_BIT_3 | BIT_MASK_BIT_2 | BIT_MASK_BIT_1 | BIT_MASK_BIT_0 );
 8008f08:	7a3b      	ldrb	r3, [r7, #8]
 8008f0a:	b25b      	sxtb	r3, r3
 8008f0c:	f003 030f 	and.w	r3, r3, #15
 8008f10:	b25a      	sxtb	r2, r3
 8008f12:	7dbb      	ldrb	r3, [r7, #22]
 8008f14:	b25b      	sxtb	r3, r3
 8008f16:	4313      	orrs	r3, r2
 8008f18:	b25b      	sxtb	r3, r3
 8008f1a:	b2db      	uxtb	r3, r3
 8008f1c:	75bb      	strb	r3, [r7, #22]

	status |= IIM42652_WriteRegister( dev, GYRO_CONFIG1_ADD, &config );
 8008f1e:	f107 0316 	add.w	r3, r7, #22
 8008f22:	461a      	mov	r2, r3
 8008f24:	2151      	movs	r1, #81	; 0x51
 8008f26:	68f8      	ldr	r0, [r7, #12]
 8008f28:	f7ff ff14 	bl	8008d54 <IIM42652_WriteRegister>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	461a      	mov	r2, r3
 8008f30:	7dfb      	ldrb	r3, [r7, #23]
 8008f32:	4313      	orrs	r3, r2
 8008f34:	75fb      	strb	r3, [r7, #23]


	return status;
 8008f36:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	3718      	adds	r7, #24
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}

08008f40 <IIM42652_setConfigAccel>:


/* Configure accelerometer parameters */
HAL_StatusTypeDef IIM42652_setConfigAccel( IIM42652 *dev, IIM42652_ACCL_CFG_t accCfg )
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b086      	sub	sp, #24
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	60f8      	str	r0, [r7, #12]
 8008f48:	1d3b      	adds	r3, r7, #4
 8008f4a:	e883 0006 	stmia.w	r3, {r1, r2}
	uint8_t config = 0x00;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	75bb      	strb	r3, [r7, #22]
	HAL_StatusTypeDef status = HAL_OK;
 8008f52:	2300      	movs	r3, #0
 8008f54:	75fb      	strb	r3, [r7, #23]

	/* Writes gyroscope selected registers */

	config  = ( accCfg.accel_fs_sel & ( BIT_MASK_BIT_2 | BIT_MASK_BIT_1 | BIT_MASK_BIT_0 ) ) << 5;
 8008f56:	793b      	ldrb	r3, [r7, #4]
 8008f58:	015b      	lsls	r3, r3, #5
 8008f5a:	b2db      	uxtb	r3, r3
 8008f5c:	75bb      	strb	r3, [r7, #22]
	config |=   accCfg.accel_odr    & ( BIT_MASK_BIT_3 | BIT_MASK_BIT_2 | BIT_MASK_BIT_1 | BIT_MASK_BIT_0 );
 8008f5e:	797b      	ldrb	r3, [r7, #5]
 8008f60:	b25b      	sxtb	r3, r3
 8008f62:	f003 030f 	and.w	r3, r3, #15
 8008f66:	b25a      	sxtb	r2, r3
 8008f68:	7dbb      	ldrb	r3, [r7, #22]
 8008f6a:	b25b      	sxtb	r3, r3
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	b25b      	sxtb	r3, r3
 8008f70:	b2db      	uxtb	r3, r3
 8008f72:	75bb      	strb	r3, [r7, #22]

	status |= IIM42652_WriteRegister( dev, ACCL_CONFIG0_ADD, &config );
 8008f74:	f107 0316 	add.w	r3, r7, #22
 8008f78:	461a      	mov	r2, r3
 8008f7a:	2150      	movs	r1, #80	; 0x50
 8008f7c:	68f8      	ldr	r0, [r7, #12]
 8008f7e:	f7ff fee9 	bl	8008d54 <IIM42652_WriteRegister>
 8008f82:	4603      	mov	r3, r0
 8008f84:	461a      	mov	r2, r3
 8008f86:	7dfb      	ldrb	r3, [r7, #23]
 8008f88:	4313      	orrs	r3, r2
 8008f8a:	75fb      	strb	r3, [r7, #23]

	status |=  IIM42652_ReadRegister( dev, GYR_ACC_CONFIG0_ADD, &config );
 8008f8c:	f107 0316 	add.w	r3, r7, #22
 8008f90:	461a      	mov	r2, r3
 8008f92:	2152      	movs	r1, #82	; 0x52
 8008f94:	68f8      	ldr	r0, [r7, #12]
 8008f96:	f7ff fe99 	bl	8008ccc <IIM42652_ReadRegister>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	461a      	mov	r2, r3
 8008f9e:	7dfb      	ldrb	r3, [r7, #23]
 8008fa0:	4313      	orrs	r3, r2
 8008fa2:	75fb      	strb	r3, [r7, #23]

	config |= ( accCfg.accel_ui_filt_bw & ( BIT_MASK_BIT_3 | BIT_MASK_BIT_2 | BIT_MASK_BIT_1 | BIT_MASK_BIT_0 ) ) << 4;
 8008fa4:	79bb      	ldrb	r3, [r7, #6]
 8008fa6:	011b      	lsls	r3, r3, #4
 8008fa8:	b25a      	sxtb	r2, r3
 8008faa:	7dbb      	ldrb	r3, [r7, #22]
 8008fac:	b25b      	sxtb	r3, r3
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	b25b      	sxtb	r3, r3
 8008fb2:	b2db      	uxtb	r3, r3
 8008fb4:	75bb      	strb	r3, [r7, #22]

	status |= IIM42652_WriteRegister( dev, GYR_ACC_CONFIG0_ADD, &config );
 8008fb6:	f107 0316 	add.w	r3, r7, #22
 8008fba:	461a      	mov	r2, r3
 8008fbc:	2152      	movs	r1, #82	; 0x52
 8008fbe:	68f8      	ldr	r0, [r7, #12]
 8008fc0:	f7ff fec8 	bl	8008d54 <IIM42652_WriteRegister>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	461a      	mov	r2, r3
 8008fc8:	7dfb      	ldrb	r3, [r7, #23]
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	75fb      	strb	r3, [r7, #23]

	config  =  ( accCfg.accel_ui_filt_ord  & ( BIT_MASK_BIT_1 | BIT_MASK_BIT_0 ) ) << 3;
 8008fce:	79fb      	ldrb	r3, [r7, #7]
 8008fd0:	00db      	lsls	r3, r3, #3
 8008fd2:	b2db      	uxtb	r3, r3
 8008fd4:	f003 0318 	and.w	r3, r3, #24
 8008fd8:	b2db      	uxtb	r3, r3
 8008fda:	75bb      	strb	r3, [r7, #22]
	config |=  ( accCfg.accel_dec2_m2_ord  & ( BIT_MASK_BIT_1 | BIT_MASK_BIT_0 ) ) << 1;
 8008fdc:	7a3b      	ldrb	r3, [r7, #8]
 8008fde:	005b      	lsls	r3, r3, #1
 8008fe0:	b25b      	sxtb	r3, r3
 8008fe2:	f003 0306 	and.w	r3, r3, #6
 8008fe6:	b25a      	sxtb	r2, r3
 8008fe8:	7dbb      	ldrb	r3, [r7, #22]
 8008fea:	b25b      	sxtb	r3, r3
 8008fec:	4313      	orrs	r3, r2
 8008fee:	b25b      	sxtb	r3, r3
 8008ff0:	b2db      	uxtb	r3, r3
 8008ff2:	75bb      	strb	r3, [r7, #22]

	status |= IIM42652_WriteRegister( dev, ACCL_CONFIG1_ADD, &config );
 8008ff4:	f107 0316 	add.w	r3, r7, #22
 8008ff8:	461a      	mov	r2, r3
 8008ffa:	2153      	movs	r1, #83	; 0x53
 8008ffc:	68f8      	ldr	r0, [r7, #12]
 8008ffe:	f7ff fea9 	bl	8008d54 <IIM42652_WriteRegister>
 8009002:	4603      	mov	r3, r0
 8009004:	461a      	mov	r2, r3
 8009006:	7dfb      	ldrb	r3, [r7, #23]
 8009008:	4313      	orrs	r3, r2
 800900a:	75fb      	strb	r3, [r7, #23]

	return status;
 800900c:	7dfb      	ldrb	r3, [r7, #23]
}
 800900e:	4618      	mov	r0, r3
 8009010:	3718      	adds	r7, #24
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}

08009016 <IIM42652_ConfigInterrupt>:


/* Configure interrupt parameters */
HAL_StatusTypeDef IIM42652_ConfigInterrupt( IIM42652 *dev )
{
 8009016:	b580      	push	{r7, lr}
 8009018:	b084      	sub	sp, #16
 800901a:	af00      	add	r7, sp, #0
 800901c:	6078      	str	r0, [r7, #4]
	uint8_t config = 0x00;
 800901e:	2300      	movs	r3, #0
 8009020:	73bb      	strb	r3, [r7, #14]
	HAL_StatusTypeDef status = HAL_OK;
 8009022:	2300      	movs	r3, #0
 8009024:	73fb      	strb	r3, [r7, #15]

	/* Implement interrupt configuration */
	//config = IIM42654_SET_INT1 | IIM42652_SET_INT_ACTIVE_HI | IIM42652_SET_INT2;
	config = 0x00;
 8009026:	2300      	movs	r3, #0
 8009028:	73bb      	strb	r3, [r7, #14]
	status = IIM42652_WriteRegister( dev, INT_CONFIG_ADD, &config );
 800902a:	f107 030e 	add.w	r3, r7, #14
 800902e:	461a      	mov	r2, r3
 8009030:	2114      	movs	r1, #20
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f7ff fe8e 	bl	8008d54 <IIM42652_WriteRegister>
 8009038:	4603      	mov	r3, r0
 800903a:	73fb      	strb	r3, [r7, #15]

	config = IIM42652_SET_UI_DRDY_INT_CLEAR;
 800903c:	2320      	movs	r3, #32
 800903e:	73bb      	strb	r3, [r7, #14]
	status = IIM42652_WriteRegister( dev, INT_CONFIG0_ADD, &config );
 8009040:	f107 030e 	add.w	r3, r7, #14
 8009044:	461a      	mov	r2, r3
 8009046:	2163      	movs	r1, #99	; 0x63
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f7ff fe83 	bl	8008d54 <IIM42652_WriteRegister>
 800904e:	4603      	mov	r3, r0
 8009050:	73fb      	strb	r3, [r7, #15]

	config = IIM42652_SET_UI_DRDY_INT1_EN;
 8009052:	2308      	movs	r3, #8
 8009054:	73bb      	strb	r3, [r7, #14]
	status = IIM42652_WriteRegister( dev, INT_SOURCE0_ADD, &config );
 8009056:	f107 030e 	add.w	r3, r7, #14
 800905a:	461a      	mov	r2, r3
 800905c:	2165      	movs	r1, #101	; 0x65
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f7ff fe78 	bl	8008d54 <IIM42652_WriteRegister>
 8009064:	4603      	mov	r3, r0
 8009066:	73fb      	strb	r3, [r7, #15]

	return status;
 8009068:	7bfb      	ldrb	r3, [r7, #15]
}
 800906a:	4618      	mov	r0, r3
 800906c:	3710      	adds	r7, #16
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}
	...

08009074 <IIM42652_Init>:


uint8_t IIM42652_Init( IIM42652 *dev, I2C_HandleTypeDef *i2cHandle )
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b088      	sub	sp, #32
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	6039      	str	r1, [r7, #0]

	IIM42652_ACCL_CFG_t ACC_CFG;
	IIM42652_GYRO_CFG_t GYR_CFG;

	/* Initializes I2C semaphore and takes it */
	xSemI2C_transfer = xSemaphoreCreateBinary();
 800907e:	2203      	movs	r2, #3
 8009080:	2100      	movs	r1, #0
 8009082:	2001      	movs	r0, #1
 8009084:	f7fd f88c 	bl	80061a0 <xQueueGenericCreate>
 8009088:	4603      	mov	r3, r0
 800908a:	4a4a      	ldr	r2, [pc, #296]	; (80091b4 <IIM42652_Init+0x140>)
 800908c:	6013      	str	r3, [r2, #0]
	xSemaphoreTake(xSemI2C_transfer, 0);
 800908e:	4b49      	ldr	r3, [pc, #292]	; (80091b4 <IIM42652_Init+0x140>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	2100      	movs	r1, #0
 8009094:	4618      	mov	r0, r3
 8009096:	f7fd fbe7 	bl	8006868 <xQueueSemaphoreTake>

	/* Initializes structure parameters */
	dev->i2cHandle = i2cHandle;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	683a      	ldr	r2, [r7, #0]
 800909e:	601a      	str	r2, [r3, #0]

	dev->acc[0] = 0.0f;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2200      	movs	r2, #0
 80090a4:	809a      	strh	r2, [r3, #4]
	dev->acc[1] = 0.0f;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2200      	movs	r2, #0
 80090aa:	80da      	strh	r2, [r3, #6]
	dev->acc[2] = 0.0f;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2200      	movs	r2, #0
 80090b0:	811a      	strh	r2, [r3, #8]

	dev->gyr[0] = 0.0f;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2200      	movs	r2, #0
 80090b6:	815a      	strh	r2, [r3, #10]
	dev->gyr[1] = 0.0f;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2200      	movs	r2, #0
 80090bc:	819a      	strh	r2, [r3, #12]
	dev->gyr[2] = 0.0f;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2200      	movs	r2, #0
 80090c2:	81da      	strh	r2, [r3, #14]

	dev->temp_c = 0.0f;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f04f 0200 	mov.w	r2, #0
 80090ca:	611a      	str	r2, [r3, #16]

	/* I2C transaction errors */
	uint8_t errNum = 0;
 80090cc:	2300      	movs	r3, #0
 80090ce:	77fb      	strb	r3, [r7, #31]
	HAL_StatusTypeDef status;

	/* Check for device ID */
	uint8_t regDataID;

	status = IIM42652_ReadRegister(dev, WHO_AM_I_ADD, &regDataID);
 80090d0:	f107 030f 	add.w	r3, r7, #15
 80090d4:	461a      	mov	r2, r3
 80090d6:	2175      	movs	r1, #117	; 0x75
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f7ff fdf7 	bl	8008ccc <IIM42652_ReadRegister>
 80090de:	4603      	mov	r3, r0
 80090e0:	77bb      	strb	r3, [r7, #30]
	errNum += ( status != HAL_OK );
 80090e2:	7fbb      	ldrb	r3, [r7, #30]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	bf14      	ite	ne
 80090e8:	2301      	movne	r3, #1
 80090ea:	2300      	moveq	r3, #0
 80090ec:	b2db      	uxtb	r3, r3
 80090ee:	461a      	mov	r2, r3
 80090f0:	7ffb      	ldrb	r3, [r7, #31]
 80090f2:	4413      	add	r3, r2
 80090f4:	77fb      	strb	r3, [r7, #31]

	/* If ID not equal to IIM42652_I2C_ID, Init returns with an error code */
	if( regDataID != IIM42652_I2C_ID ) return HAL_ERROR;
 80090f6:	7bfb      	ldrb	r3, [r7, #15]
 80090f8:	2b6f      	cmp	r3, #111	; 0x6f
 80090fa:	d001      	beq.n	8009100 <IIM42652_Init+0x8c>
 80090fc:	2301      	movs	r3, #1
 80090fe:	e054      	b.n	80091aa <IIM42652_Init+0x136>
	else {

		/* Initialize routine */
		status |= IIM42652_SoftReset  ( dev );
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f7ff fe42 	bl	8008d8a <IIM42652_SoftReset>
 8009106:	4603      	mov	r3, r0
 8009108:	461a      	mov	r2, r3
 800910a:	7fbb      	ldrb	r3, [r7, #30]
 800910c:	4313      	orrs	r3, r2
 800910e:	77bb      	strb	r3, [r7, #30]
		status |= IIM42652_EnableGyro ( dev );
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f7ff fe60 	bl	8008dd6 <IIM42652_EnableGyro>
 8009116:	4603      	mov	r3, r0
 8009118:	461a      	mov	r2, r3
 800911a:	7fbb      	ldrb	r3, [r7, #30]
 800911c:	4313      	orrs	r3, r2
 800911e:	77bb      	strb	r3, [r7, #30]
		status |= IIM42652_EnableAccel( dev );
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f7ff fe7e 	bl	8008e22 <IIM42652_EnableAccel>
 8009126:	4603      	mov	r3, r0
 8009128:	461a      	mov	r2, r3
 800912a:	7fbb      	ldrb	r3, [r7, #30]
 800912c:	4313      	orrs	r3, r2
 800912e:	77bb      	strb	r3, [r7, #30]


		GYR_CFG.gyro_fs_sel      = IIM42652_SET_GYRO_FS_SEL_500_dps;
 8009130:	2302      	movs	r3, #2
 8009132:	743b      	strb	r3, [r7, #16]
		GYR_CFG.gyro_odr         = IIM42652_SET_GYRO_ODR_12_5Hz;
 8009134:	230b      	movs	r3, #11
 8009136:	747b      	strb	r3, [r7, #17]
		GYR_CFG.gyro_ui_filt_ord = IIM42652_SET_GYRO_UI_FILT_ORD_2st;
 8009138:	2301      	movs	r3, #1
 800913a:	74bb      	strb	r3, [r7, #18]
		GYR_CFG.gyro_dec2_m2_ord = IIM42652_SET_GYRO_DEC2_M2_ORD_3st;
 800913c:	2302      	movs	r3, #2
 800913e:	74fb      	strb	r3, [r7, #19]
		GYR_CFG.gyro_ui_filt_bw  = IIM42652_SET_GYRO_UI_FILT_BW_ODR_4;
 8009140:	2301      	movs	r3, #1
 8009142:	753b      	strb	r3, [r7, #20]
	    status |= IIM42652_setConfigGyro( dev, GYR_CFG );
 8009144:	f107 0310 	add.w	r3, r7, #16
 8009148:	e893 0006 	ldmia.w	r3, {r1, r2}
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f7ff fe8e 	bl	8008e6e <IIM42652_setConfigGyro>
 8009152:	4603      	mov	r3, r0
 8009154:	461a      	mov	r2, r3
 8009156:	7fbb      	ldrb	r3, [r7, #30]
 8009158:	4313      	orrs	r3, r2
 800915a:	77bb      	strb	r3, [r7, #30]

	    ACC_CFG.accel_fs_sel      = IIM42652_SET_ACCEL_FS_SEL_8g;
 800915c:	2301      	movs	r3, #1
 800915e:	763b      	strb	r3, [r7, #24]
	    ACC_CFG.accel_odr         = IIM42652_SET_ACCEL_ODR_12_5Hz;
 8009160:	230b      	movs	r3, #11
 8009162:	767b      	strb	r3, [r7, #25]
	    ACC_CFG.accel_ui_filt_bw  = IIM42652_SET_ACCEL_UI_FILT_BW_ODR_4;
 8009164:	2301      	movs	r3, #1
 8009166:	76bb      	strb	r3, [r7, #26]
	    ACC_CFG.accel_ui_filt_ord = IIM42652_SET_ACCEL_UI_FILT_ORD_2st;
 8009168:	2301      	movs	r3, #1
 800916a:	76fb      	strb	r3, [r7, #27]
	    ACC_CFG.accel_dec2_m2_ord = IIM42652_SET_ACCEL_DEC2_M2_ORD_3st;
 800916c:	2302      	movs	r3, #2
 800916e:	773b      	strb	r3, [r7, #28]
	    status |= IIM42652_setConfigAccel( dev, ACC_CFG );
 8009170:	f107 0318 	add.w	r3, r7, #24
 8009174:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f7ff fee1 	bl	8008f40 <IIM42652_setConfigAccel>
 800917e:	4603      	mov	r3, r0
 8009180:	461a      	mov	r2, r3
 8009182:	7fbb      	ldrb	r3, [r7, #30]
 8009184:	4313      	orrs	r3, r2
 8009186:	77bb      	strb	r3, [r7, #30]

	    /* Enables device interrupt on pin INT1 */
	    status |= IIM42652_ConfigInterrupt( dev );
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f7ff ff44 	bl	8009016 <IIM42652_ConfigInterrupt>
 800918e:	4603      	mov	r3, r0
 8009190:	461a      	mov	r2, r3
 8009192:	7fbb      	ldrb	r3, [r7, #30]
 8009194:	4313      	orrs	r3, r2
 8009196:	77bb      	strb	r3, [r7, #30]

	    /* Initializes semaphore */
	    ImuIntSemaphore = xSemaphoreCreateBinary();
 8009198:	2203      	movs	r2, #3
 800919a:	2100      	movs	r1, #0
 800919c:	2001      	movs	r0, #1
 800919e:	f7fc ffff 	bl	80061a0 <xQueueGenericCreate>
 80091a2:	4603      	mov	r3, r0
 80091a4:	4a04      	ldr	r2, [pc, #16]	; (80091b8 <IIM42652_Init+0x144>)
 80091a6:	6013      	str	r3, [r2, #0]
	    //xSemaphoreTake(ImuIntSemaphore, 0);
	}


	return 0;
 80091a8:	2300      	movs	r3, #0
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3720      	adds	r7, #32
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}
 80091b2:	bf00      	nop
 80091b4:	20001914 	.word	0x20001914
 80091b8:	20001910 	.word	0x20001910

080091bc <IIM42652_ReadMeasurementAxisAll>:



HAL_StatusTypeDef IIM42652_ReadMeasurementAxisAll( IIM42652 *dev )
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b08a      	sub	sp, #40	; 0x28
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
	uint8_t rxBuffer[12];
	int16_t xAccRead, yAccRead, zAccRead;
	int16_t xGyrRead, yGyrRead, zGyrRead;

	/* Takes semaphore until DRDY is ready again */
	xSemaphoreTake( ImuIntSemaphore, portMAX_DELAY );
 80091c4:	4b2a      	ldr	r3, [pc, #168]	; (8009270 <IIM42652_ReadMeasurementAxisAll+0xb4>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f04f 31ff 	mov.w	r1, #4294967295
 80091cc:	4618      	mov	r0, r3
 80091ce:	f7fd fb4b 	bl	8006868 <xQueueSemaphoreTake>
	DRDY_IIMFlag = 0x00;
 80091d2:	4b28      	ldr	r3, [pc, #160]	; (8009274 <IIM42652_ReadMeasurementAxisAll+0xb8>)
 80091d4:	2200      	movs	r2, #0
 80091d6:	701a      	strb	r2, [r3, #0]

	/* Reads Accelerometer and gyroscope data */
	readStatus = IIM42652_ReadMultipleRegisters( dev, ACCL_DATA_XHI_ADD, rxBuffer, 12 );
 80091d8:	f107 020c 	add.w	r2, r7, #12
 80091dc:	230c      	movs	r3, #12
 80091de:	211f      	movs	r1, #31
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f7ff fd8f 	bl	8008d04 <IIM42652_ReadMultipleRegisters>
 80091e6:	4603      	mov	r3, r0
 80091e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	xAccRead = (rxBuffer[0] << 8)  | rxBuffer[1];
 80091ec:	7b3b      	ldrb	r3, [r7, #12]
 80091ee:	021b      	lsls	r3, r3, #8
 80091f0:	b21a      	sxth	r2, r3
 80091f2:	7b7b      	ldrb	r3, [r7, #13]
 80091f4:	b21b      	sxth	r3, r3
 80091f6:	4313      	orrs	r3, r2
 80091f8:	84bb      	strh	r3, [r7, #36]	; 0x24
	yAccRead = (rxBuffer[2] << 8)  | rxBuffer[3];
 80091fa:	7bbb      	ldrb	r3, [r7, #14]
 80091fc:	021b      	lsls	r3, r3, #8
 80091fe:	b21a      	sxth	r2, r3
 8009200:	7bfb      	ldrb	r3, [r7, #15]
 8009202:	b21b      	sxth	r3, r3
 8009204:	4313      	orrs	r3, r2
 8009206:	847b      	strh	r3, [r7, #34]	; 0x22
	zAccRead = (rxBuffer[4] << 8)  | rxBuffer[5];
 8009208:	7c3b      	ldrb	r3, [r7, #16]
 800920a:	021b      	lsls	r3, r3, #8
 800920c:	b21a      	sxth	r2, r3
 800920e:	7c7b      	ldrb	r3, [r7, #17]
 8009210:	b21b      	sxth	r3, r3
 8009212:	4313      	orrs	r3, r2
 8009214:	843b      	strh	r3, [r7, #32]

	xGyrRead = (rxBuffer[6] << 8)  | rxBuffer[7];
 8009216:	7cbb      	ldrb	r3, [r7, #18]
 8009218:	021b      	lsls	r3, r3, #8
 800921a:	b21a      	sxth	r2, r3
 800921c:	7cfb      	ldrb	r3, [r7, #19]
 800921e:	b21b      	sxth	r3, r3
 8009220:	4313      	orrs	r3, r2
 8009222:	83fb      	strh	r3, [r7, #30]
	yGyrRead = (rxBuffer[8] << 8)  | rxBuffer[9];
 8009224:	7d3b      	ldrb	r3, [r7, #20]
 8009226:	021b      	lsls	r3, r3, #8
 8009228:	b21a      	sxth	r2, r3
 800922a:	7d7b      	ldrb	r3, [r7, #21]
 800922c:	b21b      	sxth	r3, r3
 800922e:	4313      	orrs	r3, r2
 8009230:	83bb      	strh	r3, [r7, #28]
	zGyrRead = (rxBuffer[10] << 8) | rxBuffer[11];
 8009232:	7dbb      	ldrb	r3, [r7, #22]
 8009234:	021b      	lsls	r3, r3, #8
 8009236:	b21a      	sxth	r2, r3
 8009238:	7dfb      	ldrb	r3, [r7, #23]
 800923a:	b21b      	sxth	r3, r3
 800923c:	4313      	orrs	r3, r2
 800923e:	837b      	strh	r3, [r7, #26]

	/* Transmits data to PC */
	HAL_GPIO_WritePin(NAV1_OUT_GPIO_Port, NAV1_OUT_Pin, 1);
 8009240:	2201      	movs	r2, #1
 8009242:	2101      	movs	r1, #1
 8009244:	480c      	ldr	r0, [pc, #48]	; (8009278 <IIM42652_ReadMeasurementAxisAll+0xbc>)
 8009246:	f7f8 f91b 	bl	8001480 <HAL_GPIO_WritePin>
	HAL_UART_Transmit_IT( &huart3, rxBuffer, 12 );
 800924a:	f107 030c 	add.w	r3, r7, #12
 800924e:	220c      	movs	r2, #12
 8009250:	4619      	mov	r1, r3
 8009252:	480a      	ldr	r0, [pc, #40]	; (800927c <IIM42652_ReadMeasurementAxisAll+0xc0>)
 8009254:	f7fb fd8e 	bl	8004d74 <HAL_UART_Transmit_IT>
	HAL_GPIO_WritePin(NAV1_OUT_GPIO_Port, NAV1_OUT_Pin, 0);
 8009258:	2200      	movs	r2, #0
 800925a:	2101      	movs	r1, #1
 800925c:	4806      	ldr	r0, [pc, #24]	; (8009278 <IIM42652_ReadMeasurementAxisAll+0xbc>)
 800925e:	f7f8 f90f 	bl	8001480 <HAL_GPIO_WritePin>

	return readStatus;
 8009262:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009266:	4618      	mov	r0, r3
 8009268:	3728      	adds	r7, #40	; 0x28
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}
 800926e:	bf00      	nop
 8009270:	20001910 	.word	0x20001910
 8009274:	20001918 	.word	0x20001918
 8009278:	48000400 	.word	0x48000400
 800927c:	200019e4 	.word	0x200019e4

08009280 <IIM42652_DRDYCallback>:


/* Callback for device interrupt */
void IIM42652_DRDYCallback( void )
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b082      	sub	sp, #8
 8009284:	af00      	add	r7, sp, #0
	/* Gives semaphore and yields */

	if(DRDY_IIMFlag == 0x00)
 8009286:	4b0f      	ldr	r3, [pc, #60]	; (80092c4 <IIM42652_DRDYCallback+0x44>)
 8009288:	781b      	ldrb	r3, [r3, #0]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d116      	bne.n	80092bc <IIM42652_DRDYCallback+0x3c>
	{
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800928e:	2300      	movs	r3, #0
 8009290:	607b      	str	r3, [r7, #4]
		xSemaphoreGiveFromISR( ImuIntSemaphore, &xHigherPriorityTaskWoken );
 8009292:	4b0d      	ldr	r3, [pc, #52]	; (80092c8 <IIM42652_DRDYCallback+0x48>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	1d3a      	adds	r2, r7, #4
 8009298:	4611      	mov	r1, r2
 800929a:	4618      	mov	r0, r3
 800929c:	f7fd f977 	bl	800658e <xQueueGiveFromISR>
		portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d007      	beq.n	80092b6 <IIM42652_DRDYCallback+0x36>
 80092a6:	4b09      	ldr	r3, [pc, #36]	; (80092cc <IIM42652_DRDYCallback+0x4c>)
 80092a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092ac:	601a      	str	r2, [r3, #0]
 80092ae:	f3bf 8f4f 	dsb	sy
 80092b2:	f3bf 8f6f 	isb	sy

		DRDY_IIMFlag = 0x01;
 80092b6:	4b03      	ldr	r3, [pc, #12]	; (80092c4 <IIM42652_DRDYCallback+0x44>)
 80092b8:	2201      	movs	r2, #1
 80092ba:	701a      	strb	r2, [r3, #0]
	}
}
 80092bc:	bf00      	nop
 80092be:	3708      	adds	r7, #8
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}
 80092c4:	20001918 	.word	0x20001918
 80092c8:	20001910 	.word	0x20001910
 80092cc:	e000ed04 	.word	0xe000ed04

080092d0 <IIM42652_I2C2Callback>:

/* Callback for I2C callback */
void IIM42652_I2C2Callback( void )
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b082      	sub	sp, #8
 80092d4:	af00      	add	r7, sp, #0
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80092d6:	2300      	movs	r3, #0
 80092d8:	607b      	str	r3, [r7, #4]
    xSemaphoreGiveFromISR( xSemI2C_transfer, &xHigherPriorityTaskWoken );
 80092da:	4b0b      	ldr	r3, [pc, #44]	; (8009308 <IIM42652_I2C2Callback+0x38>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	1d3a      	adds	r2, r7, #4
 80092e0:	4611      	mov	r1, r2
 80092e2:	4618      	mov	r0, r3
 80092e4:	f7fd f953 	bl	800658e <xQueueGiveFromISR>
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d007      	beq.n	80092fe <IIM42652_I2C2Callback+0x2e>
 80092ee:	4b07      	ldr	r3, [pc, #28]	; (800930c <IIM42652_I2C2Callback+0x3c>)
 80092f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092f4:	601a      	str	r2, [r3, #0]
 80092f6:	f3bf 8f4f 	dsb	sy
 80092fa:	f3bf 8f6f 	isb	sy
}
 80092fe:	bf00      	nop
 8009300:	3708      	adds	r7, #8
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}
 8009306:	bf00      	nop
 8009308:	20001914 	.word	0x20001914
 800930c:	e000ed04 	.word	0xe000ed04

08009310 <MLX90393_DRDYCallback>:
}


/* Callback to DRDY interrupt */
void MLX90393_DRDYCallback( void )
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b082      	sub	sp, #8
 8009314:	af00      	add	r7, sp, #0
	/* Gives semaphore and yields */

	if(DRDYFlag == 0x00)
 8009316:	4b0f      	ldr	r3, [pc, #60]	; (8009354 <MLX90393_DRDYCallback+0x44>)
 8009318:	781b      	ldrb	r3, [r3, #0]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d116      	bne.n	800934c <MLX90393_DRDYCallback+0x3c>
	{
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800931e:	2300      	movs	r3, #0
 8009320:	607b      	str	r3, [r7, #4]
		xSemaphoreGiveFromISR( MagIntSemaphore, &xHigherPriorityTaskWoken );
 8009322:	4b0d      	ldr	r3, [pc, #52]	; (8009358 <MLX90393_DRDYCallback+0x48>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	1d3a      	adds	r2, r7, #4
 8009328:	4611      	mov	r1, r2
 800932a:	4618      	mov	r0, r3
 800932c:	f7fd f92f 	bl	800658e <xQueueGiveFromISR>
		portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d007      	beq.n	8009346 <MLX90393_DRDYCallback+0x36>
 8009336:	4b09      	ldr	r3, [pc, #36]	; (800935c <MLX90393_DRDYCallback+0x4c>)
 8009338:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800933c:	601a      	str	r2, [r3, #0]
 800933e:	f3bf 8f4f 	dsb	sy
 8009342:	f3bf 8f6f 	isb	sy

		DRDYFlag = 0x01;
 8009346:	4b03      	ldr	r3, [pc, #12]	; (8009354 <MLX90393_DRDYCallback+0x44>)
 8009348:	2201      	movs	r2, #1
 800934a:	701a      	strb	r2, [r3, #0]
	}
}
 800934c:	bf00      	nop
 800934e:	3708      	adds	r7, #8
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}
 8009354:	20001919 	.word	0x20001919
 8009358:	20001aac 	.word	0x20001aac
 800935c:	e000ed04 	.word	0xe000ed04

08009360 <__libc_init_array>:
 8009360:	b570      	push	{r4, r5, r6, lr}
 8009362:	4d0d      	ldr	r5, [pc, #52]	; (8009398 <__libc_init_array+0x38>)
 8009364:	4c0d      	ldr	r4, [pc, #52]	; (800939c <__libc_init_array+0x3c>)
 8009366:	1b64      	subs	r4, r4, r5
 8009368:	10a4      	asrs	r4, r4, #2
 800936a:	2600      	movs	r6, #0
 800936c:	42a6      	cmp	r6, r4
 800936e:	d109      	bne.n	8009384 <__libc_init_array+0x24>
 8009370:	4d0b      	ldr	r5, [pc, #44]	; (80093a0 <__libc_init_array+0x40>)
 8009372:	4c0c      	ldr	r4, [pc, #48]	; (80093a4 <__libc_init_array+0x44>)
 8009374:	f000 f82e 	bl	80093d4 <_init>
 8009378:	1b64      	subs	r4, r4, r5
 800937a:	10a4      	asrs	r4, r4, #2
 800937c:	2600      	movs	r6, #0
 800937e:	42a6      	cmp	r6, r4
 8009380:	d105      	bne.n	800938e <__libc_init_array+0x2e>
 8009382:	bd70      	pop	{r4, r5, r6, pc}
 8009384:	f855 3b04 	ldr.w	r3, [r5], #4
 8009388:	4798      	blx	r3
 800938a:	3601      	adds	r6, #1
 800938c:	e7ee      	b.n	800936c <__libc_init_array+0xc>
 800938e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009392:	4798      	blx	r3
 8009394:	3601      	adds	r6, #1
 8009396:	e7f2      	b.n	800937e <__libc_init_array+0x1e>
 8009398:	080094b8 	.word	0x080094b8
 800939c:	080094b8 	.word	0x080094b8
 80093a0:	080094b8 	.word	0x080094b8
 80093a4:	080094bc 	.word	0x080094bc

080093a8 <memcpy>:
 80093a8:	440a      	add	r2, r1
 80093aa:	4291      	cmp	r1, r2
 80093ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80093b0:	d100      	bne.n	80093b4 <memcpy+0xc>
 80093b2:	4770      	bx	lr
 80093b4:	b510      	push	{r4, lr}
 80093b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80093be:	4291      	cmp	r1, r2
 80093c0:	d1f9      	bne.n	80093b6 <memcpy+0xe>
 80093c2:	bd10      	pop	{r4, pc}

080093c4 <memset>:
 80093c4:	4402      	add	r2, r0
 80093c6:	4603      	mov	r3, r0
 80093c8:	4293      	cmp	r3, r2
 80093ca:	d100      	bne.n	80093ce <memset+0xa>
 80093cc:	4770      	bx	lr
 80093ce:	f803 1b01 	strb.w	r1, [r3], #1
 80093d2:	e7f9      	b.n	80093c8 <memset+0x4>

080093d4 <_init>:
 80093d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093d6:	bf00      	nop
 80093d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093da:	bc08      	pop	{r3}
 80093dc:	469e      	mov	lr, r3
 80093de:	4770      	bx	lr

080093e0 <_fini>:
 80093e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093e2:	bf00      	nop
 80093e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093e6:	bc08      	pop	{r3}
 80093e8:	469e      	mov	lr, r3
 80093ea:	4770      	bx	lr
