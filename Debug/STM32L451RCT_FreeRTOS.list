
STM32L451RCT_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005284  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08005424  08005424  00015424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054b4  080054b4  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080054b4  080054b4  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080054b4  080054b4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054b4  080054b4  000154b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054b8  080054b8  000154b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080054bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000199c  20000010  080054cc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200019ac  080054cc  000219ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017d4a  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000309f  00000000  00000000  00037d8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001158  00000000  00000000  0003ae30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001010  00000000  00000000  0003bf88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003408  00000000  00000000  0003cf98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012ed5  00000000  00000000  000403a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf221  00000000  00000000  00053275  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00122496  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004718  00000000  00000000  001224ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800540c 	.word	0x0800540c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	0800540c 	.word	0x0800540c

080001e0 <task>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void task(void *pvParameters){
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b082      	sub	sp, #8
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	6078      	str	r0, [r7, #4]

	static uint32_t pin_state = 0;

	while(1){

		vTaskDelay(150 / portTICK_PERIOD_MS);
 80001e8:	2096      	movs	r0, #150	; 0x96
 80001ea:	f003 fb97 	bl	800391c <vTaskDelay>

		pin_state = !pin_state;
 80001ee:	4b13      	ldr	r3, [pc, #76]	; (800023c <task+0x5c>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	bf0c      	ite	eq
 80001f6:	2301      	moveq	r3, #1
 80001f8:	2300      	movne	r3, #0
 80001fa:	b2db      	uxtb	r3, r3
 80001fc:	461a      	mov	r2, r3
 80001fe:	4b0f      	ldr	r3, [pc, #60]	; (800023c <task+0x5c>)
 8000200:	601a      	str	r2, [r3, #0]

		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, pin_state);
 8000202:	4b0e      	ldr	r3, [pc, #56]	; (800023c <task+0x5c>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	b2db      	uxtb	r3, r3
 8000208:	461a      	mov	r2, r3
 800020a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800020e:	480c      	ldr	r0, [pc, #48]	; (8000240 <task+0x60>)
 8000210:	f000 fd42 	bl	8000c98 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8000214:	2032      	movs	r0, #50	; 0x32
 8000216:	f000 fabb 	bl	8000790 <HAL_Delay>

		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, !pin_state);
 800021a:	4b08      	ldr	r3, [pc, #32]	; (800023c <task+0x5c>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	2b00      	cmp	r3, #0
 8000220:	bf0c      	ite	eq
 8000222:	2301      	moveq	r3, #1
 8000224:	2300      	movne	r3, #0
 8000226:	b2db      	uxtb	r3, r3
 8000228:	461a      	mov	r2, r3
 800022a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800022e:	4804      	ldr	r0, [pc, #16]	; (8000240 <task+0x60>)
 8000230:	f000 fd32 	bl	8000c98 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8000234:	2032      	movs	r0, #50	; 0x32
 8000236:	f000 faab 	bl	8000790 <HAL_Delay>
		vTaskDelay(150 / portTICK_PERIOD_MS);
 800023a:	e7d5      	b.n	80001e8 <task+0x8>
 800023c:	2000002c 	.word	0x2000002c
 8000240:	48000800 	.word	0x48000800

08000244 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b084      	sub	sp, #16
 8000248:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800024a:	f000 fa2c 	bl	80006a6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800024e:	f000 f831 	bl	80002b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000252:	f000 f8bf 	bl	80003d4 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000256:	f000 f87d 	bl	8000354 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  uint8_t i2cStatus = 0;
 800025a:	2300      	movs	r3, #0
 800025c:	71fb      	strb	r3, [r7, #7]

  i2cStatus = IIM42652_Init(&IMU, &hi2c2);
 800025e:	490e      	ldr	r1, [pc, #56]	; (8000298 <main+0x54>)
 8000260:	480e      	ldr	r0, [pc, #56]	; (800029c <main+0x58>)
 8000262:	f005 f856 	bl	8005312 <IIM42652_Init>
 8000266:	4603      	mov	r3, r0
 8000268:	71fb      	strb	r3, [r7, #7]
  if(i2cStatus);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800026a:	f002 fae9 	bl	8002840 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800026e:	4a0c      	ldr	r2, [pc, #48]	; (80002a0 <main+0x5c>)
 8000270:	2100      	movs	r1, #0
 8000272:	480c      	ldr	r0, [pc, #48]	; (80002a4 <main+0x60>)
 8000274:	f002 fb2e 	bl	80028d4 <osThreadNew>
 8000278:	4603      	mov	r3, r0
 800027a:	4a0b      	ldr	r2, [pc, #44]	; (80002a8 <main+0x64>)
 800027c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(task, "blink", 100, NULL, 1, NULL);
 800027e:	2300      	movs	r3, #0
 8000280:	9301      	str	r3, [sp, #4]
 8000282:	2301      	movs	r3, #1
 8000284:	9300      	str	r3, [sp, #0]
 8000286:	2300      	movs	r3, #0
 8000288:	2264      	movs	r2, #100	; 0x64
 800028a:	4908      	ldr	r1, [pc, #32]	; (80002ac <main+0x68>)
 800028c:	4808      	ldr	r0, [pc, #32]	; (80002b0 <main+0x6c>)
 800028e:	f003 fa00 	bl	8003692 <xTaskCreate>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000292:	f002 faf9 	bl	8002888 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000296:	e7fe      	b.n	8000296 <main+0x52>
 8000298:	200018fc 	.word	0x200018fc
 800029c:	20001948 	.word	0x20001948
 80002a0:	08005450 	.word	0x08005450
 80002a4:	08000485 	.word	0x08000485
 80002a8:	200018f8 	.word	0x200018f8
 80002ac:	08005430 	.word	0x08005430
 80002b0:	080001e1 	.word	0x080001e1

080002b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b096      	sub	sp, #88	; 0x58
 80002b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ba:	f107 0314 	add.w	r3, r7, #20
 80002be:	2244      	movs	r2, #68	; 0x44
 80002c0:	2100      	movs	r1, #0
 80002c2:	4618      	mov	r0, r3
 80002c4:	f005 f89a 	bl	80053fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002c8:	463b      	mov	r3, r7
 80002ca:	2200      	movs	r2, #0
 80002cc:	601a      	str	r2, [r3, #0]
 80002ce:	605a      	str	r2, [r3, #4]
 80002d0:	609a      	str	r2, [r3, #8]
 80002d2:	60da      	str	r2, [r3, #12]
 80002d4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002d6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80002da:	f001 f90d 	bl	80014f8 <HAL_PWREx_ControlVoltageScaling>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d001      	beq.n	80002e8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80002e4:	f000 f8d6 	bl	8000494 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002e8:	2301      	movs	r3, #1
 80002ea:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002f0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002f2:	2302      	movs	r3, #2
 80002f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002f6:	2303      	movs	r3, #3
 80002f8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 80002fa:	2302      	movs	r3, #2
 80002fc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80002fe:	2310      	movs	r3, #16
 8000300:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000302:	2307      	movs	r3, #7
 8000304:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000306:	2302      	movs	r3, #2
 8000308:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800030a:	2302      	movs	r3, #2
 800030c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800030e:	f107 0314 	add.w	r3, r7, #20
 8000312:	4618      	mov	r0, r3
 8000314:	f001 f946 	bl	80015a4 <HAL_RCC_OscConfig>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800031e:	f000 f8b9 	bl	8000494 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000322:	230f      	movs	r3, #15
 8000324:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000326:	2303      	movs	r3, #3
 8000328:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800032a:	2300      	movs	r3, #0
 800032c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800032e:	2300      	movs	r3, #0
 8000330:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000332:	2300      	movs	r3, #0
 8000334:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000336:	463b      	mov	r3, r7
 8000338:	2104      	movs	r1, #4
 800033a:	4618      	mov	r0, r3
 800033c:	f001 fd52 	bl	8001de4 <HAL_RCC_ClockConfig>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000346:	f000 f8a5 	bl	8000494 <Error_Handler>
  }
}
 800034a:	bf00      	nop
 800034c:	3758      	adds	r7, #88	; 0x58
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}
	...

08000354 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000358:	4b1b      	ldr	r3, [pc, #108]	; (80003c8 <MX_I2C2_Init+0x74>)
 800035a:	4a1c      	ldr	r2, [pc, #112]	; (80003cc <MX_I2C2_Init+0x78>)
 800035c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 800035e:	4b1a      	ldr	r3, [pc, #104]	; (80003c8 <MX_I2C2_Init+0x74>)
 8000360:	4a1b      	ldr	r2, [pc, #108]	; (80003d0 <MX_I2C2_Init+0x7c>)
 8000362:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000364:	4b18      	ldr	r3, [pc, #96]	; (80003c8 <MX_I2C2_Init+0x74>)
 8000366:	2200      	movs	r2, #0
 8000368:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800036a:	4b17      	ldr	r3, [pc, #92]	; (80003c8 <MX_I2C2_Init+0x74>)
 800036c:	2201      	movs	r2, #1
 800036e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000370:	4b15      	ldr	r3, [pc, #84]	; (80003c8 <MX_I2C2_Init+0x74>)
 8000372:	2200      	movs	r2, #0
 8000374:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000376:	4b14      	ldr	r3, [pc, #80]	; (80003c8 <MX_I2C2_Init+0x74>)
 8000378:	2200      	movs	r2, #0
 800037a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800037c:	4b12      	ldr	r3, [pc, #72]	; (80003c8 <MX_I2C2_Init+0x74>)
 800037e:	2200      	movs	r2, #0
 8000380:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000382:	4b11      	ldr	r3, [pc, #68]	; (80003c8 <MX_I2C2_Init+0x74>)
 8000384:	2200      	movs	r2, #0
 8000386:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000388:	4b0f      	ldr	r3, [pc, #60]	; (80003c8 <MX_I2C2_Init+0x74>)
 800038a:	2200      	movs	r2, #0
 800038c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800038e:	480e      	ldr	r0, [pc, #56]	; (80003c8 <MX_I2C2_Init+0x74>)
 8000390:	f000 fc9a 	bl	8000cc8 <HAL_I2C_Init>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800039a:	f000 f87b 	bl	8000494 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800039e:	2100      	movs	r1, #0
 80003a0:	4809      	ldr	r0, [pc, #36]	; (80003c8 <MX_I2C2_Init+0x74>)
 80003a2:	f001 f803 	bl	80013ac <HAL_I2CEx_ConfigAnalogFilter>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d001      	beq.n	80003b0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80003ac:	f000 f872 	bl	8000494 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80003b0:	2100      	movs	r1, #0
 80003b2:	4805      	ldr	r0, [pc, #20]	; (80003c8 <MX_I2C2_Init+0x74>)
 80003b4:	f001 f845 	bl	8001442 <HAL_I2CEx_ConfigDigitalFilter>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80003be:	f000 f869 	bl	8000494 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80003c2:	bf00      	nop
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	200018fc 	.word	0x200018fc
 80003cc:	40005800 	.word	0x40005800
 80003d0:	10909cec 	.word	0x10909cec

080003d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b08a      	sub	sp, #40	; 0x28
 80003d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003da:	f107 0314 	add.w	r3, r7, #20
 80003de:	2200      	movs	r2, #0
 80003e0:	601a      	str	r2, [r3, #0]
 80003e2:	605a      	str	r2, [r3, #4]
 80003e4:	609a      	str	r2, [r3, #8]
 80003e6:	60da      	str	r2, [r3, #12]
 80003e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003ea:	4b24      	ldr	r3, [pc, #144]	; (800047c <MX_GPIO_Init+0xa8>)
 80003ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ee:	4a23      	ldr	r2, [pc, #140]	; (800047c <MX_GPIO_Init+0xa8>)
 80003f0:	f043 0304 	orr.w	r3, r3, #4
 80003f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003f6:	4b21      	ldr	r3, [pc, #132]	; (800047c <MX_GPIO_Init+0xa8>)
 80003f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003fa:	f003 0304 	and.w	r3, r3, #4
 80003fe:	613b      	str	r3, [r7, #16]
 8000400:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000402:	4b1e      	ldr	r3, [pc, #120]	; (800047c <MX_GPIO_Init+0xa8>)
 8000404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000406:	4a1d      	ldr	r2, [pc, #116]	; (800047c <MX_GPIO_Init+0xa8>)
 8000408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800040c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800040e:	4b1b      	ldr	r3, [pc, #108]	; (800047c <MX_GPIO_Init+0xa8>)
 8000410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000416:	60fb      	str	r3, [r7, #12]
 8000418:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800041a:	4b18      	ldr	r3, [pc, #96]	; (800047c <MX_GPIO_Init+0xa8>)
 800041c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800041e:	4a17      	ldr	r2, [pc, #92]	; (800047c <MX_GPIO_Init+0xa8>)
 8000420:	f043 0302 	orr.w	r3, r3, #2
 8000424:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000426:	4b15      	ldr	r3, [pc, #84]	; (800047c <MX_GPIO_Init+0xa8>)
 8000428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800042a:	f003 0302 	and.w	r3, r3, #2
 800042e:	60bb      	str	r3, [r7, #8]
 8000430:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000432:	4b12      	ldr	r3, [pc, #72]	; (800047c <MX_GPIO_Init+0xa8>)
 8000434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000436:	4a11      	ldr	r2, [pc, #68]	; (800047c <MX_GPIO_Init+0xa8>)
 8000438:	f043 0301 	orr.w	r3, r3, #1
 800043c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800043e:	4b0f      	ldr	r3, [pc, #60]	; (800047c <MX_GPIO_Init+0xa8>)
 8000440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000442:	f003 0301 	and.w	r3, r3, #1
 8000446:	607b      	str	r3, [r7, #4]
 8000448:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 800044a:	2200      	movs	r2, #0
 800044c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000450:	480b      	ldr	r0, [pc, #44]	; (8000480 <MX_GPIO_Init+0xac>)
 8000452:	f000 fc21 	bl	8000c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000456:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800045a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800045c:	2301      	movs	r3, #1
 800045e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000460:	2300      	movs	r3, #0
 8000462:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000464:	2300      	movs	r3, #0
 8000466:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000468:	f107 0314 	add.w	r3, r7, #20
 800046c:	4619      	mov	r1, r3
 800046e:	4804      	ldr	r0, [pc, #16]	; (8000480 <MX_GPIO_Init+0xac>)
 8000470:	f000 fa98 	bl	80009a4 <HAL_GPIO_Init>

}
 8000474:	bf00      	nop
 8000476:	3728      	adds	r7, #40	; 0x28
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}
 800047c:	40021000 	.word	0x40021000
 8000480:	48000800 	.word	0x48000800

08000484 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800048c:	2001      	movs	r0, #1
 800048e:	f002 fab3 	bl	80029f8 <osDelay>
 8000492:	e7fb      	b.n	800048c <StartDefaultTask+0x8>

08000494 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000498:	b672      	cpsid	i
}
 800049a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800049c:	e7fe      	b.n	800049c <Error_Handler+0x8>
	...

080004a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004a6:	4b11      	ldr	r3, [pc, #68]	; (80004ec <HAL_MspInit+0x4c>)
 80004a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004aa:	4a10      	ldr	r2, [pc, #64]	; (80004ec <HAL_MspInit+0x4c>)
 80004ac:	f043 0301 	orr.w	r3, r3, #1
 80004b0:	6613      	str	r3, [r2, #96]	; 0x60
 80004b2:	4b0e      	ldr	r3, [pc, #56]	; (80004ec <HAL_MspInit+0x4c>)
 80004b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004b6:	f003 0301 	and.w	r3, r3, #1
 80004ba:	607b      	str	r3, [r7, #4]
 80004bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004be:	4b0b      	ldr	r3, [pc, #44]	; (80004ec <HAL_MspInit+0x4c>)
 80004c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004c2:	4a0a      	ldr	r2, [pc, #40]	; (80004ec <HAL_MspInit+0x4c>)
 80004c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004c8:	6593      	str	r3, [r2, #88]	; 0x58
 80004ca:	4b08      	ldr	r3, [pc, #32]	; (80004ec <HAL_MspInit+0x4c>)
 80004cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004d2:	603b      	str	r3, [r7, #0]
 80004d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80004d6:	2200      	movs	r2, #0
 80004d8:	210f      	movs	r1, #15
 80004da:	f06f 0001 	mvn.w	r0, #1
 80004de:	f000 fa38 	bl	8000952 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004e2:	bf00      	nop
 80004e4:	3708      	adds	r7, #8
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	40021000 	.word	0x40021000

080004f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b0a2      	sub	sp, #136	; 0x88
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80004fc:	2200      	movs	r2, #0
 80004fe:	601a      	str	r2, [r3, #0]
 8000500:	605a      	str	r2, [r3, #4]
 8000502:	609a      	str	r2, [r3, #8]
 8000504:	60da      	str	r2, [r3, #12]
 8000506:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000508:	f107 0310 	add.w	r3, r7, #16
 800050c:	2264      	movs	r2, #100	; 0x64
 800050e:	2100      	movs	r1, #0
 8000510:	4618      	mov	r0, r3
 8000512:	f004 ff73 	bl	80053fc <memset>
  if(hi2c->Instance==I2C2)
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	4a20      	ldr	r2, [pc, #128]	; (800059c <HAL_I2C_MspInit+0xac>)
 800051c:	4293      	cmp	r3, r2
 800051e:	d138      	bne.n	8000592 <HAL_I2C_MspInit+0xa2>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000520:	2380      	movs	r3, #128	; 0x80
 8000522:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000524:	2300      	movs	r3, #0
 8000526:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000528:	f107 0310 	add.w	r3, r7, #16
 800052c:	4618      	mov	r0, r3
 800052e:	f001 fe27 	bl	8002180 <HAL_RCCEx_PeriphCLKConfig>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d001      	beq.n	800053c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000538:	f7ff ffac 	bl	8000494 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800053c:	4b18      	ldr	r3, [pc, #96]	; (80005a0 <HAL_I2C_MspInit+0xb0>)
 800053e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000540:	4a17      	ldr	r2, [pc, #92]	; (80005a0 <HAL_I2C_MspInit+0xb0>)
 8000542:	f043 0302 	orr.w	r3, r3, #2
 8000546:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000548:	4b15      	ldr	r3, [pc, #84]	; (80005a0 <HAL_I2C_MspInit+0xb0>)
 800054a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800054c:	f003 0302 	and.w	r3, r3, #2
 8000550:	60fb      	str	r3, [r7, #12]
 8000552:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB13     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000554:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000558:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800055a:	2312      	movs	r3, #18
 800055c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055e:	2300      	movs	r3, #0
 8000560:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000562:	2303      	movs	r3, #3
 8000564:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000568:	2304      	movs	r3, #4
 800056a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800056e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000572:	4619      	mov	r1, r3
 8000574:	480b      	ldr	r0, [pc, #44]	; (80005a4 <HAL_I2C_MspInit+0xb4>)
 8000576:	f000 fa15 	bl	80009a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800057a:	4b09      	ldr	r3, [pc, #36]	; (80005a0 <HAL_I2C_MspInit+0xb0>)
 800057c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800057e:	4a08      	ldr	r2, [pc, #32]	; (80005a0 <HAL_I2C_MspInit+0xb0>)
 8000580:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000584:	6593      	str	r3, [r2, #88]	; 0x58
 8000586:	4b06      	ldr	r3, [pc, #24]	; (80005a0 <HAL_I2C_MspInit+0xb0>)
 8000588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800058a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800058e:	60bb      	str	r3, [r7, #8]
 8000590:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000592:	bf00      	nop
 8000594:	3788      	adds	r7, #136	; 0x88
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	40005800 	.word	0x40005800
 80005a0:	40021000 	.word	0x40021000
 80005a4:	48000400 	.word	0x48000400

080005a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005ac:	e7fe      	b.n	80005ac <NMI_Handler+0x4>

080005ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005ae:	b480      	push	{r7}
 80005b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005b2:	e7fe      	b.n	80005b2 <HardFault_Handler+0x4>

080005b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005b8:	e7fe      	b.n	80005b8 <MemManage_Handler+0x4>

080005ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005ba:	b480      	push	{r7}
 80005bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005be:	e7fe      	b.n	80005be <BusFault_Handler+0x4>

080005c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005c4:	e7fe      	b.n	80005c4 <UsageFault_Handler+0x4>

080005c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005c6:	b480      	push	{r7}
 80005c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005ca:	bf00      	nop
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr

080005d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005d8:	f000 f8ba 	bl	8000750 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80005dc:	f003 fe1a 	bl	8004214 <xTaskGetSchedulerState>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	d001      	beq.n	80005ea <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80005e6:	f004 fbff 	bl	8004de8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005ea:	bf00      	nop
 80005ec:	bd80      	pop	{r7, pc}
	...

080005f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80005f4:	4b15      	ldr	r3, [pc, #84]	; (800064c <SystemInit+0x5c>)
 80005f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005fa:	4a14      	ldr	r2, [pc, #80]	; (800064c <SystemInit+0x5c>)
 80005fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000600:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000604:	4b12      	ldr	r3, [pc, #72]	; (8000650 <SystemInit+0x60>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a11      	ldr	r2, [pc, #68]	; (8000650 <SystemInit+0x60>)
 800060a:	f043 0301 	orr.w	r3, r3, #1
 800060e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000610:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <SystemInit+0x60>)
 8000612:	2200      	movs	r2, #0
 8000614:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000616:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <SystemInit+0x60>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4a0d      	ldr	r2, [pc, #52]	; (8000650 <SystemInit+0x60>)
 800061c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000620:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000624:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000626:	4b0a      	ldr	r3, [pc, #40]	; (8000650 <SystemInit+0x60>)
 8000628:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800062c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800062e:	4b08      	ldr	r3, [pc, #32]	; (8000650 <SystemInit+0x60>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4a07      	ldr	r2, [pc, #28]	; (8000650 <SystemInit+0x60>)
 8000634:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000638:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800063a:	4b05      	ldr	r3, [pc, #20]	; (8000650 <SystemInit+0x60>)
 800063c:	2200      	movs	r2, #0
 800063e:	619a      	str	r2, [r3, #24]
}
 8000640:	bf00      	nop
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	e000ed00 	.word	0xe000ed00
 8000650:	40021000 	.word	0x40021000

08000654 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000654:	f8df d034 	ldr.w	sp, [pc, #52]	; 800068c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000658:	f7ff ffca 	bl	80005f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800065c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800065e:	e003      	b.n	8000668 <LoopCopyDataInit>

08000660 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000660:	4b0b      	ldr	r3, [pc, #44]	; (8000690 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000662:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000664:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000666:	3104      	adds	r1, #4

08000668 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000668:	480a      	ldr	r0, [pc, #40]	; (8000694 <LoopForever+0xa>)
	ldr	r3, =_edata
 800066a:	4b0b      	ldr	r3, [pc, #44]	; (8000698 <LoopForever+0xe>)
	adds	r2, r0, r1
 800066c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800066e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000670:	d3f6      	bcc.n	8000660 <CopyDataInit>
	ldr	r2, =_sbss
 8000672:	4a0a      	ldr	r2, [pc, #40]	; (800069c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000674:	e002      	b.n	800067c <LoopFillZerobss>

08000676 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000676:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000678:	f842 3b04 	str.w	r3, [r2], #4

0800067c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800067c:	4b08      	ldr	r3, [pc, #32]	; (80006a0 <LoopForever+0x16>)
	cmp	r2, r3
 800067e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000680:	d3f9      	bcc.n	8000676 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000682:	f004 fe89 	bl	8005398 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000686:	f7ff fddd 	bl	8000244 <main>

0800068a <LoopForever>:

LoopForever:
    b LoopForever
 800068a:	e7fe      	b.n	800068a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800068c:	20020000 	.word	0x20020000
	ldr	r3, =_sidata
 8000690:	080054bc 	.word	0x080054bc
	ldr	r0, =_sdata
 8000694:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000698:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 800069c:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 80006a0:	200019ac 	.word	0x200019ac

080006a4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006a4:	e7fe      	b.n	80006a4 <ADC1_IRQHandler>

080006a6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b082      	sub	sp, #8
 80006aa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006ac:	2300      	movs	r3, #0
 80006ae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006b0:	2003      	movs	r0, #3
 80006b2:	f000 f943 	bl	800093c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006b6:	200f      	movs	r0, #15
 80006b8:	f000 f80e 	bl	80006d8 <HAL_InitTick>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d002      	beq.n	80006c8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80006c2:	2301      	movs	r3, #1
 80006c4:	71fb      	strb	r3, [r7, #7]
 80006c6:	e001      	b.n	80006cc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80006c8:	f7ff feea 	bl	80004a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80006cc:	79fb      	ldrb	r3, [r7, #7]
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
	...

080006d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b084      	sub	sp, #16
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80006e0:	2300      	movs	r3, #0
 80006e2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80006e4:	4b17      	ldr	r3, [pc, #92]	; (8000744 <HAL_InitTick+0x6c>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d023      	beq.n	8000734 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80006ec:	4b16      	ldr	r3, [pc, #88]	; (8000748 <HAL_InitTick+0x70>)
 80006ee:	681a      	ldr	r2, [r3, #0]
 80006f0:	4b14      	ldr	r3, [pc, #80]	; (8000744 <HAL_InitTick+0x6c>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	4619      	mov	r1, r3
 80006f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80006fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000702:	4618      	mov	r0, r3
 8000704:	f000 f941 	bl	800098a <HAL_SYSTICK_Config>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d10f      	bne.n	800072e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	2b0f      	cmp	r3, #15
 8000712:	d809      	bhi.n	8000728 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000714:	2200      	movs	r2, #0
 8000716:	6879      	ldr	r1, [r7, #4]
 8000718:	f04f 30ff 	mov.w	r0, #4294967295
 800071c:	f000 f919 	bl	8000952 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000720:	4a0a      	ldr	r2, [pc, #40]	; (800074c <HAL_InitTick+0x74>)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	6013      	str	r3, [r2, #0]
 8000726:	e007      	b.n	8000738 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000728:	2301      	movs	r3, #1
 800072a:	73fb      	strb	r3, [r7, #15]
 800072c:	e004      	b.n	8000738 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800072e:	2301      	movs	r3, #1
 8000730:	73fb      	strb	r3, [r7, #15]
 8000732:	e001      	b.n	8000738 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000734:	2301      	movs	r3, #1
 8000736:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000738:	7bfb      	ldrb	r3, [r7, #15]
}
 800073a:	4618      	mov	r0, r3
 800073c:	3710      	adds	r7, #16
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20000008 	.word	0x20000008
 8000748:	20000000 	.word	0x20000000
 800074c:	20000004 	.word	0x20000004

08000750 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <HAL_IncTick+0x20>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	461a      	mov	r2, r3
 800075a:	4b06      	ldr	r3, [pc, #24]	; (8000774 <HAL_IncTick+0x24>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4413      	add	r3, r2
 8000760:	4a04      	ldr	r2, [pc, #16]	; (8000774 <HAL_IncTick+0x24>)
 8000762:	6013      	str	r3, [r2, #0]
}
 8000764:	bf00      	nop
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	20000008 	.word	0x20000008
 8000774:	20001968 	.word	0x20001968

08000778 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  return uwTick;
 800077c:	4b03      	ldr	r3, [pc, #12]	; (800078c <HAL_GetTick+0x14>)
 800077e:	681b      	ldr	r3, [r3, #0]
}
 8000780:	4618      	mov	r0, r3
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	20001968 	.word	0x20001968

08000790 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000798:	f7ff ffee 	bl	8000778 <HAL_GetTick>
 800079c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007a8:	d005      	beq.n	80007b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80007aa:	4b0a      	ldr	r3, [pc, #40]	; (80007d4 <HAL_Delay+0x44>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	461a      	mov	r2, r3
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	4413      	add	r3, r2
 80007b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007b6:	bf00      	nop
 80007b8:	f7ff ffde 	bl	8000778 <HAL_GetTick>
 80007bc:	4602      	mov	r2, r0
 80007be:	68bb      	ldr	r3, [r7, #8]
 80007c0:	1ad3      	subs	r3, r2, r3
 80007c2:	68fa      	ldr	r2, [r7, #12]
 80007c4:	429a      	cmp	r2, r3
 80007c6:	d8f7      	bhi.n	80007b8 <HAL_Delay+0x28>
  {
  }
}
 80007c8:	bf00      	nop
 80007ca:	bf00      	nop
 80007cc:	3710      	adds	r7, #16
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20000008 	.word	0x20000008

080007d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007d8:	b480      	push	{r7}
 80007da:	b085      	sub	sp, #20
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	f003 0307 	and.w	r3, r3, #7
 80007e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007e8:	4b0c      	ldr	r3, [pc, #48]	; (800081c <__NVIC_SetPriorityGrouping+0x44>)
 80007ea:	68db      	ldr	r3, [r3, #12]
 80007ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007ee:	68ba      	ldr	r2, [r7, #8]
 80007f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007f4:	4013      	ands	r3, r2
 80007f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000800:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000808:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800080a:	4a04      	ldr	r2, [pc, #16]	; (800081c <__NVIC_SetPriorityGrouping+0x44>)
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	60d3      	str	r3, [r2, #12]
}
 8000810:	bf00      	nop
 8000812:	3714      	adds	r7, #20
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr
 800081c:	e000ed00 	.word	0xe000ed00

08000820 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000824:	4b04      	ldr	r3, [pc, #16]	; (8000838 <__NVIC_GetPriorityGrouping+0x18>)
 8000826:	68db      	ldr	r3, [r3, #12]
 8000828:	0a1b      	lsrs	r3, r3, #8
 800082a:	f003 0307 	and.w	r3, r3, #7
}
 800082e:	4618      	mov	r0, r3
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr
 8000838:	e000ed00 	.word	0xe000ed00

0800083c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	6039      	str	r1, [r7, #0]
 8000846:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800084c:	2b00      	cmp	r3, #0
 800084e:	db0a      	blt.n	8000866 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	b2da      	uxtb	r2, r3
 8000854:	490c      	ldr	r1, [pc, #48]	; (8000888 <__NVIC_SetPriority+0x4c>)
 8000856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085a:	0112      	lsls	r2, r2, #4
 800085c:	b2d2      	uxtb	r2, r2
 800085e:	440b      	add	r3, r1
 8000860:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000864:	e00a      	b.n	800087c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	b2da      	uxtb	r2, r3
 800086a:	4908      	ldr	r1, [pc, #32]	; (800088c <__NVIC_SetPriority+0x50>)
 800086c:	79fb      	ldrb	r3, [r7, #7]
 800086e:	f003 030f 	and.w	r3, r3, #15
 8000872:	3b04      	subs	r3, #4
 8000874:	0112      	lsls	r2, r2, #4
 8000876:	b2d2      	uxtb	r2, r2
 8000878:	440b      	add	r3, r1
 800087a:	761a      	strb	r2, [r3, #24]
}
 800087c:	bf00      	nop
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr
 8000888:	e000e100 	.word	0xe000e100
 800088c:	e000ed00 	.word	0xe000ed00

08000890 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000890:	b480      	push	{r7}
 8000892:	b089      	sub	sp, #36	; 0x24
 8000894:	af00      	add	r7, sp, #0
 8000896:	60f8      	str	r0, [r7, #12]
 8000898:	60b9      	str	r1, [r7, #8]
 800089a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	f003 0307 	and.w	r3, r3, #7
 80008a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008a4:	69fb      	ldr	r3, [r7, #28]
 80008a6:	f1c3 0307 	rsb	r3, r3, #7
 80008aa:	2b04      	cmp	r3, #4
 80008ac:	bf28      	it	cs
 80008ae:	2304      	movcs	r3, #4
 80008b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008b2:	69fb      	ldr	r3, [r7, #28]
 80008b4:	3304      	adds	r3, #4
 80008b6:	2b06      	cmp	r3, #6
 80008b8:	d902      	bls.n	80008c0 <NVIC_EncodePriority+0x30>
 80008ba:	69fb      	ldr	r3, [r7, #28]
 80008bc:	3b03      	subs	r3, #3
 80008be:	e000      	b.n	80008c2 <NVIC_EncodePriority+0x32>
 80008c0:	2300      	movs	r3, #0
 80008c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008c4:	f04f 32ff 	mov.w	r2, #4294967295
 80008c8:	69bb      	ldr	r3, [r7, #24]
 80008ca:	fa02 f303 	lsl.w	r3, r2, r3
 80008ce:	43da      	mvns	r2, r3
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	401a      	ands	r2, r3
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008d8:	f04f 31ff 	mov.w	r1, #4294967295
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	fa01 f303 	lsl.w	r3, r1, r3
 80008e2:	43d9      	mvns	r1, r3
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008e8:	4313      	orrs	r3, r2
         );
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3724      	adds	r7, #36	; 0x24
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
	...

080008f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	3b01      	subs	r3, #1
 8000904:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000908:	d301      	bcc.n	800090e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800090a:	2301      	movs	r3, #1
 800090c:	e00f      	b.n	800092e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800090e:	4a0a      	ldr	r2, [pc, #40]	; (8000938 <SysTick_Config+0x40>)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	3b01      	subs	r3, #1
 8000914:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000916:	210f      	movs	r1, #15
 8000918:	f04f 30ff 	mov.w	r0, #4294967295
 800091c:	f7ff ff8e 	bl	800083c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000920:	4b05      	ldr	r3, [pc, #20]	; (8000938 <SysTick_Config+0x40>)
 8000922:	2200      	movs	r2, #0
 8000924:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000926:	4b04      	ldr	r3, [pc, #16]	; (8000938 <SysTick_Config+0x40>)
 8000928:	2207      	movs	r2, #7
 800092a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800092c:	2300      	movs	r3, #0
}
 800092e:	4618      	mov	r0, r3
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	e000e010 	.word	0xe000e010

0800093c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000944:	6878      	ldr	r0, [r7, #4]
 8000946:	f7ff ff47 	bl	80007d8 <__NVIC_SetPriorityGrouping>
}
 800094a:	bf00      	nop
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}

08000952 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000952:	b580      	push	{r7, lr}
 8000954:	b086      	sub	sp, #24
 8000956:	af00      	add	r7, sp, #0
 8000958:	4603      	mov	r3, r0
 800095a:	60b9      	str	r1, [r7, #8]
 800095c:	607a      	str	r2, [r7, #4]
 800095e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000960:	2300      	movs	r3, #0
 8000962:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000964:	f7ff ff5c 	bl	8000820 <__NVIC_GetPriorityGrouping>
 8000968:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800096a:	687a      	ldr	r2, [r7, #4]
 800096c:	68b9      	ldr	r1, [r7, #8]
 800096e:	6978      	ldr	r0, [r7, #20]
 8000970:	f7ff ff8e 	bl	8000890 <NVIC_EncodePriority>
 8000974:	4602      	mov	r2, r0
 8000976:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800097a:	4611      	mov	r1, r2
 800097c:	4618      	mov	r0, r3
 800097e:	f7ff ff5d 	bl	800083c <__NVIC_SetPriority>
}
 8000982:	bf00      	nop
 8000984:	3718      	adds	r7, #24
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}

0800098a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800098a:	b580      	push	{r7, lr}
 800098c:	b082      	sub	sp, #8
 800098e:	af00      	add	r7, sp, #0
 8000990:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000992:	6878      	ldr	r0, [r7, #4]
 8000994:	f7ff ffb0 	bl	80008f8 <SysTick_Config>
 8000998:	4603      	mov	r3, r0
}
 800099a:	4618      	mov	r0, r3
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
	...

080009a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b087      	sub	sp, #28
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
 80009ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009ae:	2300      	movs	r3, #0
 80009b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009b2:	e154      	b.n	8000c5e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	681a      	ldr	r2, [r3, #0]
 80009b8:	2101      	movs	r1, #1
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	fa01 f303 	lsl.w	r3, r1, r3
 80009c0:	4013      	ands	r3, r2
 80009c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	f000 8146 	beq.w	8000c58 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d00b      	beq.n	80009ec <HAL_GPIO_Init+0x48>
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	2b02      	cmp	r3, #2
 80009da:	d007      	beq.n	80009ec <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009e0:	2b11      	cmp	r3, #17
 80009e2:	d003      	beq.n	80009ec <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	2b12      	cmp	r3, #18
 80009ea:	d130      	bne.n	8000a4e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	689b      	ldr	r3, [r3, #8]
 80009f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	005b      	lsls	r3, r3, #1
 80009f6:	2203      	movs	r2, #3
 80009f8:	fa02 f303 	lsl.w	r3, r2, r3
 80009fc:	43db      	mvns	r3, r3
 80009fe:	693a      	ldr	r2, [r7, #16]
 8000a00:	4013      	ands	r3, r2
 8000a02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	68da      	ldr	r2, [r3, #12]
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	005b      	lsls	r3, r3, #1
 8000a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a10:	693a      	ldr	r2, [r7, #16]
 8000a12:	4313      	orrs	r3, r2
 8000a14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	693a      	ldr	r2, [r7, #16]
 8000a1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a22:	2201      	movs	r2, #1
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2a:	43db      	mvns	r3, r3
 8000a2c:	693a      	ldr	r2, [r7, #16]
 8000a2e:	4013      	ands	r3, r2
 8000a30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	091b      	lsrs	r3, r3, #4
 8000a38:	f003 0201 	and.w	r2, r3, #1
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a42:	693a      	ldr	r2, [r7, #16]
 8000a44:	4313      	orrs	r3, r2
 8000a46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	693a      	ldr	r2, [r7, #16]
 8000a4c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	68db      	ldr	r3, [r3, #12]
 8000a52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	005b      	lsls	r3, r3, #1
 8000a58:	2203      	movs	r2, #3
 8000a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5e:	43db      	mvns	r3, r3
 8000a60:	693a      	ldr	r2, [r7, #16]
 8000a62:	4013      	ands	r3, r2
 8000a64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	689a      	ldr	r2, [r3, #8]
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	005b      	lsls	r3, r3, #1
 8000a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a72:	693a      	ldr	r2, [r7, #16]
 8000a74:	4313      	orrs	r3, r2
 8000a76:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	693a      	ldr	r2, [r7, #16]
 8000a7c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	2b02      	cmp	r3, #2
 8000a84:	d003      	beq.n	8000a8e <HAL_GPIO_Init+0xea>
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	2b12      	cmp	r3, #18
 8000a8c:	d123      	bne.n	8000ad6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	08da      	lsrs	r2, r3, #3
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	3208      	adds	r2, #8
 8000a96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	f003 0307 	and.w	r3, r3, #7
 8000aa2:	009b      	lsls	r3, r3, #2
 8000aa4:	220f      	movs	r2, #15
 8000aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aaa:	43db      	mvns	r3, r3
 8000aac:	693a      	ldr	r2, [r7, #16]
 8000aae:	4013      	ands	r3, r2
 8000ab0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	691a      	ldr	r2, [r3, #16]
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	f003 0307 	and.w	r3, r3, #7
 8000abc:	009b      	lsls	r3, r3, #2
 8000abe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	08da      	lsrs	r2, r3, #3
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	3208      	adds	r2, #8
 8000ad0:	6939      	ldr	r1, [r7, #16]
 8000ad2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	005b      	lsls	r3, r3, #1
 8000ae0:	2203      	movs	r2, #3
 8000ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae6:	43db      	mvns	r3, r3
 8000ae8:	693a      	ldr	r2, [r7, #16]
 8000aea:	4013      	ands	r3, r2
 8000aec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	f003 0203 	and.w	r2, r3, #3
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	005b      	lsls	r3, r3, #1
 8000afa:	fa02 f303 	lsl.w	r3, r2, r3
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	4313      	orrs	r3, r2
 8000b02:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	f000 80a0 	beq.w	8000c58 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b18:	4b58      	ldr	r3, [pc, #352]	; (8000c7c <HAL_GPIO_Init+0x2d8>)
 8000b1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b1c:	4a57      	ldr	r2, [pc, #348]	; (8000c7c <HAL_GPIO_Init+0x2d8>)
 8000b1e:	f043 0301 	orr.w	r3, r3, #1
 8000b22:	6613      	str	r3, [r2, #96]	; 0x60
 8000b24:	4b55      	ldr	r3, [pc, #340]	; (8000c7c <HAL_GPIO_Init+0x2d8>)
 8000b26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b28:	f003 0301 	and.w	r3, r3, #1
 8000b2c:	60bb      	str	r3, [r7, #8]
 8000b2e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b30:	4a53      	ldr	r2, [pc, #332]	; (8000c80 <HAL_GPIO_Init+0x2dc>)
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	089b      	lsrs	r3, r3, #2
 8000b36:	3302      	adds	r3, #2
 8000b38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	f003 0303 	and.w	r3, r3, #3
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	220f      	movs	r2, #15
 8000b48:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4c:	43db      	mvns	r3, r3
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	4013      	ands	r3, r2
 8000b52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b5a:	d019      	beq.n	8000b90 <HAL_GPIO_Init+0x1ec>
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	4a49      	ldr	r2, [pc, #292]	; (8000c84 <HAL_GPIO_Init+0x2e0>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d013      	beq.n	8000b8c <HAL_GPIO_Init+0x1e8>
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	4a48      	ldr	r2, [pc, #288]	; (8000c88 <HAL_GPIO_Init+0x2e4>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d00d      	beq.n	8000b88 <HAL_GPIO_Init+0x1e4>
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4a47      	ldr	r2, [pc, #284]	; (8000c8c <HAL_GPIO_Init+0x2e8>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d007      	beq.n	8000b84 <HAL_GPIO_Init+0x1e0>
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	4a46      	ldr	r2, [pc, #280]	; (8000c90 <HAL_GPIO_Init+0x2ec>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d101      	bne.n	8000b80 <HAL_GPIO_Init+0x1dc>
 8000b7c:	2304      	movs	r3, #4
 8000b7e:	e008      	b.n	8000b92 <HAL_GPIO_Init+0x1ee>
 8000b80:	2307      	movs	r3, #7
 8000b82:	e006      	b.n	8000b92 <HAL_GPIO_Init+0x1ee>
 8000b84:	2303      	movs	r3, #3
 8000b86:	e004      	b.n	8000b92 <HAL_GPIO_Init+0x1ee>
 8000b88:	2302      	movs	r3, #2
 8000b8a:	e002      	b.n	8000b92 <HAL_GPIO_Init+0x1ee>
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	e000      	b.n	8000b92 <HAL_GPIO_Init+0x1ee>
 8000b90:	2300      	movs	r3, #0
 8000b92:	697a      	ldr	r2, [r7, #20]
 8000b94:	f002 0203 	and.w	r2, r2, #3
 8000b98:	0092      	lsls	r2, r2, #2
 8000b9a:	4093      	lsls	r3, r2
 8000b9c:	693a      	ldr	r2, [r7, #16]
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ba2:	4937      	ldr	r1, [pc, #220]	; (8000c80 <HAL_GPIO_Init+0x2dc>)
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	089b      	lsrs	r3, r3, #2
 8000ba8:	3302      	adds	r3, #2
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000bb0:	4b38      	ldr	r3, [pc, #224]	; (8000c94 <HAL_GPIO_Init+0x2f0>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	43db      	mvns	r3, r3
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d003      	beq.n	8000bd4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000bcc:	693a      	ldr	r2, [r7, #16]
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000bd4:	4a2f      	ldr	r2, [pc, #188]	; (8000c94 <HAL_GPIO_Init+0x2f0>)
 8000bd6:	693b      	ldr	r3, [r7, #16]
 8000bd8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000bda:	4b2e      	ldr	r3, [pc, #184]	; (8000c94 <HAL_GPIO_Init+0x2f0>)
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	43db      	mvns	r3, r3
 8000be4:	693a      	ldr	r2, [r7, #16]
 8000be6:	4013      	ands	r3, r2
 8000be8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d003      	beq.n	8000bfe <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000bfe:	4a25      	ldr	r2, [pc, #148]	; (8000c94 <HAL_GPIO_Init+0x2f0>)
 8000c00:	693b      	ldr	r3, [r7, #16]
 8000c02:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c04:	4b23      	ldr	r3, [pc, #140]	; (8000c94 <HAL_GPIO_Init+0x2f0>)
 8000c06:	689b      	ldr	r3, [r3, #8]
 8000c08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	43db      	mvns	r3, r3
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	4013      	ands	r3, r2
 8000c12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d003      	beq.n	8000c28 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000c20:	693a      	ldr	r2, [r7, #16]
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	4313      	orrs	r3, r2
 8000c26:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000c28:	4a1a      	ldr	r2, [pc, #104]	; (8000c94 <HAL_GPIO_Init+0x2f0>)
 8000c2a:	693b      	ldr	r3, [r7, #16]
 8000c2c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000c2e:	4b19      	ldr	r3, [pc, #100]	; (8000c94 <HAL_GPIO_Init+0x2f0>)
 8000c30:	68db      	ldr	r3, [r3, #12]
 8000c32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	43db      	mvns	r3, r3
 8000c38:	693a      	ldr	r2, [r7, #16]
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d003      	beq.n	8000c52 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000c4a:	693a      	ldr	r2, [r7, #16]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000c52:	4a10      	ldr	r2, [pc, #64]	; (8000c94 <HAL_GPIO_Init+0x2f0>)
 8000c54:	693b      	ldr	r3, [r7, #16]
 8000c56:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	fa22 f303 	lsr.w	r3, r2, r3
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	f47f aea3 	bne.w	80009b4 <HAL_GPIO_Init+0x10>
  }
}
 8000c6e:	bf00      	nop
 8000c70:	bf00      	nop
 8000c72:	371c      	adds	r7, #28
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	40021000 	.word	0x40021000
 8000c80:	40010000 	.word	0x40010000
 8000c84:	48000400 	.word	0x48000400
 8000c88:	48000800 	.word	0x48000800
 8000c8c:	48000c00 	.word	0x48000c00
 8000c90:	48001000 	.word	0x48001000
 8000c94:	40010400 	.word	0x40010400

08000c98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	460b      	mov	r3, r1
 8000ca2:	807b      	strh	r3, [r7, #2]
 8000ca4:	4613      	mov	r3, r2
 8000ca6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ca8:	787b      	ldrb	r3, [r7, #1]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d003      	beq.n	8000cb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000cae:	887a      	ldrh	r2, [r7, #2]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000cb4:	e002      	b.n	8000cbc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000cb6:	887a      	ldrh	r2, [r7, #2]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000cbc:	bf00      	nop
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d101      	bne.n	8000cda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e081      	b.n	8000dde <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d106      	bne.n	8000cf4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2200      	movs	r2, #0
 8000cea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000cee:	6878      	ldr	r0, [r7, #4]
 8000cf0:	f7ff fbfe 	bl	80004f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2224      	movs	r2, #36	; 0x24
 8000cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f022 0201 	bic.w	r2, r2, #1
 8000d0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	685a      	ldr	r2, [r3, #4]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000d18:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	689a      	ldr	r2, [r3, #8]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000d28:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	68db      	ldr	r3, [r3, #12]
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d107      	bne.n	8000d42 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	689a      	ldr	r2, [r3, #8]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	e006      	b.n	8000d50 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	689a      	ldr	r2, [r3, #8]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000d4e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	2b02      	cmp	r3, #2
 8000d56:	d104      	bne.n	8000d62 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d60:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	687a      	ldr	r2, [r7, #4]
 8000d6a:	6812      	ldr	r2, [r2, #0]
 8000d6c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d74:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	68da      	ldr	r2, [r3, #12]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000d84:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	691a      	ldr	r2, [r3, #16]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	695b      	ldr	r3, [r3, #20]
 8000d8e:	ea42 0103 	orr.w	r1, r2, r3
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	699b      	ldr	r3, [r3, #24]
 8000d96:	021a      	lsls	r2, r3, #8
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	430a      	orrs	r2, r1
 8000d9e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	69d9      	ldr	r1, [r3, #28]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6a1a      	ldr	r2, [r3, #32]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	430a      	orrs	r2, r1
 8000dae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f042 0201 	orr.w	r2, r2, #1
 8000dbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2220      	movs	r2, #32
 8000dca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000ddc:	2300      	movs	r3, #0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
	...

08000de8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b088      	sub	sp, #32
 8000dec:	af02      	add	r7, sp, #8
 8000dee:	60f8      	str	r0, [r7, #12]
 8000df0:	4608      	mov	r0, r1
 8000df2:	4611      	mov	r1, r2
 8000df4:	461a      	mov	r2, r3
 8000df6:	4603      	mov	r3, r0
 8000df8:	817b      	strh	r3, [r7, #10]
 8000dfa:	460b      	mov	r3, r1
 8000dfc:	813b      	strh	r3, [r7, #8]
 8000dfe:	4613      	mov	r3, r2
 8000e00:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	2b20      	cmp	r3, #32
 8000e0c:	f040 80fd 	bne.w	800100a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8000e10:	6a3b      	ldr	r3, [r7, #32]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d002      	beq.n	8000e1c <HAL_I2C_Mem_Read+0x34>
 8000e16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d105      	bne.n	8000e28 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e22:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8000e24:	2301      	movs	r3, #1
 8000e26:	e0f1      	b.n	800100c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d101      	bne.n	8000e36 <HAL_I2C_Mem_Read+0x4e>
 8000e32:	2302      	movs	r3, #2
 8000e34:	e0ea      	b.n	800100c <HAL_I2C_Mem_Read+0x224>
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	2201      	movs	r2, #1
 8000e3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000e3e:	f7ff fc9b 	bl	8000778 <HAL_GetTick>
 8000e42:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	9300      	str	r3, [sp, #0]
 8000e48:	2319      	movs	r3, #25
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e50:	68f8      	ldr	r0, [r7, #12]
 8000e52:	f000 f95b 	bl	800110c <I2C_WaitOnFlagUntilTimeout>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	e0d5      	b.n	800100c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	2222      	movs	r2, #34	; 0x22
 8000e64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	2240      	movs	r2, #64	; 0x40
 8000e6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	2200      	movs	r2, #0
 8000e74:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	6a3a      	ldr	r2, [r7, #32]
 8000e7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000e80:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	2200      	movs	r2, #0
 8000e86:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000e88:	88f8      	ldrh	r0, [r7, #6]
 8000e8a:	893a      	ldrh	r2, [r7, #8]
 8000e8c:	8979      	ldrh	r1, [r7, #10]
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	9301      	str	r3, [sp, #4]
 8000e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e94:	9300      	str	r3, [sp, #0]
 8000e96:	4603      	mov	r3, r0
 8000e98:	68f8      	ldr	r0, [r7, #12]
 8000e9a:	f000 f8bf 	bl	800101c <I2C_RequestMemoryRead>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d005      	beq.n	8000eb0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8000eac:	2301      	movs	r3, #1
 8000eae:	e0ad      	b.n	800100c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	2bff      	cmp	r3, #255	; 0xff
 8000eb8:	d90e      	bls.n	8000ed8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	22ff      	movs	r2, #255	; 0xff
 8000ebe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ec4:	b2da      	uxtb	r2, r3
 8000ec6:	8979      	ldrh	r1, [r7, #10]
 8000ec8:	4b52      	ldr	r3, [pc, #328]	; (8001014 <HAL_I2C_Mem_Read+0x22c>)
 8000eca:	9300      	str	r3, [sp, #0]
 8000ecc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ed0:	68f8      	ldr	r0, [r7, #12]
 8000ed2:	f000 fa3d 	bl	8001350 <I2C_TransferConfig>
 8000ed6:	e00f      	b.n	8000ef8 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000edc:	b29a      	uxth	r2, r3
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	8979      	ldrh	r1, [r7, #10]
 8000eea:	4b4a      	ldr	r3, [pc, #296]	; (8001014 <HAL_I2C_Mem_Read+0x22c>)
 8000eec:	9300      	str	r3, [sp, #0]
 8000eee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ef2:	68f8      	ldr	r0, [r7, #12]
 8000ef4:	f000 fa2c 	bl	8001350 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	9300      	str	r3, [sp, #0]
 8000efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000efe:	2200      	movs	r2, #0
 8000f00:	2104      	movs	r1, #4
 8000f02:	68f8      	ldr	r0, [r7, #12]
 8000f04:	f000 f902 	bl	800110c <I2C_WaitOnFlagUntilTimeout>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e07c      	b.n	800100c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f1c:	b2d2      	uxtb	r2, r2
 8000f1e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f24:	1c5a      	adds	r2, r3, #1
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f2e:	3b01      	subs	r3, #1
 8000f30:	b29a      	uxth	r2, r3
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	3b01      	subs	r3, #1
 8000f3e:	b29a      	uxth	r2, r3
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d034      	beq.n	8000fb8 <HAL_I2C_Mem_Read+0x1d0>
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d130      	bne.n	8000fb8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	9300      	str	r3, [sp, #0]
 8000f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	2180      	movs	r1, #128	; 0x80
 8000f60:	68f8      	ldr	r0, [r7, #12]
 8000f62:	f000 f8d3 	bl	800110c <I2C_WaitOnFlagUntilTimeout>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	e04d      	b.n	800100c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f74:	b29b      	uxth	r3, r3
 8000f76:	2bff      	cmp	r3, #255	; 0xff
 8000f78:	d90e      	bls.n	8000f98 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	22ff      	movs	r2, #255	; 0xff
 8000f7e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f84:	b2da      	uxtb	r2, r3
 8000f86:	8979      	ldrh	r1, [r7, #10]
 8000f88:	2300      	movs	r3, #0
 8000f8a:	9300      	str	r3, [sp, #0]
 8000f8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f90:	68f8      	ldr	r0, [r7, #12]
 8000f92:	f000 f9dd 	bl	8001350 <I2C_TransferConfig>
 8000f96:	e00f      	b.n	8000fb8 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f9c:	b29a      	uxth	r2, r3
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	8979      	ldrh	r1, [r7, #10]
 8000faa:	2300      	movs	r3, #0
 8000fac:	9300      	str	r3, [sp, #0]
 8000fae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000fb2:	68f8      	ldr	r0, [r7, #12]
 8000fb4:	f000 f9cc 	bl	8001350 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d19a      	bne.n	8000ef8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000fc2:	697a      	ldr	r2, [r7, #20]
 8000fc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000fc6:	68f8      	ldr	r0, [r7, #12]
 8000fc8:	f000 f920 	bl	800120c <I2C_WaitOnSTOPFlagUntilTimeout>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e01a      	b.n	800100c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	2220      	movs	r2, #32
 8000fdc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	6859      	ldr	r1, [r3, #4]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <HAL_I2C_Mem_Read+0x230>)
 8000fea:	400b      	ands	r3, r1
 8000fec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	2220      	movs	r2, #32
 8000ff2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	2200      	movs	r2, #0
 8001002:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001006:	2300      	movs	r3, #0
 8001008:	e000      	b.n	800100c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800100a:	2302      	movs	r3, #2
  }
}
 800100c:	4618      	mov	r0, r3
 800100e:	3718      	adds	r7, #24
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	80002400 	.word	0x80002400
 8001018:	fe00e800 	.word	0xfe00e800

0800101c <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af02      	add	r7, sp, #8
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	4608      	mov	r0, r1
 8001026:	4611      	mov	r1, r2
 8001028:	461a      	mov	r2, r3
 800102a:	4603      	mov	r3, r0
 800102c:	817b      	strh	r3, [r7, #10]
 800102e:	460b      	mov	r3, r1
 8001030:	813b      	strh	r3, [r7, #8]
 8001032:	4613      	mov	r3, r2
 8001034:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001036:	88fb      	ldrh	r3, [r7, #6]
 8001038:	b2da      	uxtb	r2, r3
 800103a:	8979      	ldrh	r1, [r7, #10]
 800103c:	4b20      	ldr	r3, [pc, #128]	; (80010c0 <I2C_RequestMemoryRead+0xa4>)
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	2300      	movs	r3, #0
 8001042:	68f8      	ldr	r0, [r7, #12]
 8001044:	f000 f984 	bl	8001350 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001048:	69fa      	ldr	r2, [r7, #28]
 800104a:	69b9      	ldr	r1, [r7, #24]
 800104c:	68f8      	ldr	r0, [r7, #12]
 800104e:	f000 f89d 	bl	800118c <I2C_WaitOnTXISFlagUntilTimeout>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001058:	2301      	movs	r3, #1
 800105a:	e02c      	b.n	80010b6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800105c:	88fb      	ldrh	r3, [r7, #6]
 800105e:	2b01      	cmp	r3, #1
 8001060:	d105      	bne.n	800106e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001062:	893b      	ldrh	r3, [r7, #8]
 8001064:	b2da      	uxtb	r2, r3
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	629a      	str	r2, [r3, #40]	; 0x28
 800106c:	e015      	b.n	800109a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800106e:	893b      	ldrh	r3, [r7, #8]
 8001070:	0a1b      	lsrs	r3, r3, #8
 8001072:	b29b      	uxth	r3, r3
 8001074:	b2da      	uxtb	r2, r3
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800107c:	69fa      	ldr	r2, [r7, #28]
 800107e:	69b9      	ldr	r1, [r7, #24]
 8001080:	68f8      	ldr	r0, [r7, #12]
 8001082:	f000 f883 	bl	800118c <I2C_WaitOnTXISFlagUntilTimeout>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	e012      	b.n	80010b6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001090:	893b      	ldrh	r3, [r7, #8]
 8001092:	b2da      	uxtb	r2, r3
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	9300      	str	r3, [sp, #0]
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	2200      	movs	r2, #0
 80010a2:	2140      	movs	r1, #64	; 0x40
 80010a4:	68f8      	ldr	r0, [r7, #12]
 80010a6:	f000 f831 	bl	800110c <I2C_WaitOnFlagUntilTimeout>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80010b0:	2301      	movs	r3, #1
 80010b2:	e000      	b.n	80010b6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	80002000 	.word	0x80002000

080010c4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	699b      	ldr	r3, [r3, #24]
 80010d2:	f003 0302 	and.w	r3, r3, #2
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	d103      	bne.n	80010e2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2200      	movs	r2, #0
 80010e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	699b      	ldr	r3, [r3, #24]
 80010e8:	f003 0301 	and.w	r3, r3, #1
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d007      	beq.n	8001100 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	699a      	ldr	r2, [r3, #24]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f042 0201 	orr.w	r2, r2, #1
 80010fe:	619a      	str	r2, [r3, #24]
  }
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	603b      	str	r3, [r7, #0]
 8001118:	4613      	mov	r3, r2
 800111a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800111c:	e022      	b.n	8001164 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001124:	d01e      	beq.n	8001164 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001126:	f7ff fb27 	bl	8000778 <HAL_GetTick>
 800112a:	4602      	mov	r2, r0
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	1ad3      	subs	r3, r2, r3
 8001130:	683a      	ldr	r2, [r7, #0]
 8001132:	429a      	cmp	r2, r3
 8001134:	d302      	bcc.n	800113c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d113      	bne.n	8001164 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001140:	f043 0220 	orr.w	r2, r3, #32
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	2220      	movs	r2, #32
 800114c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	2200      	movs	r2, #0
 8001154:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	2200      	movs	r2, #0
 800115c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001160:	2301      	movs	r3, #1
 8001162:	e00f      	b.n	8001184 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	699a      	ldr	r2, [r3, #24]
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	4013      	ands	r3, r2
 800116e:	68ba      	ldr	r2, [r7, #8]
 8001170:	429a      	cmp	r2, r3
 8001172:	bf0c      	ite	eq
 8001174:	2301      	moveq	r3, #1
 8001176:	2300      	movne	r3, #0
 8001178:	b2db      	uxtb	r3, r3
 800117a:	461a      	mov	r2, r3
 800117c:	79fb      	ldrb	r3, [r7, #7]
 800117e:	429a      	cmp	r2, r3
 8001180:	d0cd      	beq.n	800111e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001182:	2300      	movs	r3, #0
}
 8001184:	4618      	mov	r0, r3
 8001186:	3710      	adds	r7, #16
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001198:	e02c      	b.n	80011f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	68b9      	ldr	r1, [r7, #8]
 800119e:	68f8      	ldr	r0, [r7, #12]
 80011a0:	f000 f870 	bl	8001284 <I2C_IsAcknowledgeFailed>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e02a      	b.n	8001204 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011b4:	d01e      	beq.n	80011f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80011b6:	f7ff fadf 	bl	8000778 <HAL_GetTick>
 80011ba:	4602      	mov	r2, r0
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	68ba      	ldr	r2, [r7, #8]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d302      	bcc.n	80011cc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d113      	bne.n	80011f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d0:	f043 0220 	orr.w	r2, r3, #32
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	2220      	movs	r2, #32
 80011dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	2200      	movs	r2, #0
 80011e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	2200      	movs	r2, #0
 80011ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	e007      	b.n	8001204 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	699b      	ldr	r3, [r3, #24]
 80011fa:	f003 0302 	and.w	r3, r3, #2
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d1cb      	bne.n	800119a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001202:	2300      	movs	r3, #0
}
 8001204:	4618      	mov	r0, r3
 8001206:	3710      	adds	r7, #16
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001218:	e028      	b.n	800126c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	68b9      	ldr	r1, [r7, #8]
 800121e:	68f8      	ldr	r0, [r7, #12]
 8001220:	f000 f830 	bl	8001284 <I2C_IsAcknowledgeFailed>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e026      	b.n	800127c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800122e:	f7ff faa3 	bl	8000778 <HAL_GetTick>
 8001232:	4602      	mov	r2, r0
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	68ba      	ldr	r2, [r7, #8]
 800123a:	429a      	cmp	r2, r3
 800123c:	d302      	bcc.n	8001244 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d113      	bne.n	800126c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001248:	f043 0220 	orr.w	r2, r3, #32
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	2220      	movs	r2, #32
 8001254:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	2200      	movs	r2, #0
 800125c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	2200      	movs	r2, #0
 8001264:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	e007      	b.n	800127c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	699b      	ldr	r3, [r3, #24]
 8001272:	f003 0320 	and.w	r3, r3, #32
 8001276:	2b20      	cmp	r3, #32
 8001278:	d1cf      	bne.n	800121a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800127a:	2300      	movs	r3, #0
}
 800127c:	4618      	mov	r0, r3
 800127e:	3710      	adds	r7, #16
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	699b      	ldr	r3, [r3, #24]
 8001296:	f003 0310 	and.w	r3, r3, #16
 800129a:	2b10      	cmp	r3, #16
 800129c:	d151      	bne.n	8001342 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800129e:	e022      	b.n	80012e6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012a6:	d01e      	beq.n	80012e6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80012a8:	f7ff fa66 	bl	8000778 <HAL_GetTick>
 80012ac:	4602      	mov	r2, r0
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	68ba      	ldr	r2, [r7, #8]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d302      	bcc.n	80012be <I2C_IsAcknowledgeFailed+0x3a>
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d113      	bne.n	80012e6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c2:	f043 0220 	orr.w	r2, r3, #32
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	2220      	movs	r2, #32
 80012ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	2200      	movs	r2, #0
 80012d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	2200      	movs	r2, #0
 80012de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e02e      	b.n	8001344 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	f003 0320 	and.w	r3, r3, #32
 80012f0:	2b20      	cmp	r3, #32
 80012f2:	d1d5      	bne.n	80012a0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2210      	movs	r2, #16
 80012fa:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2220      	movs	r2, #32
 8001302:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001304:	68f8      	ldr	r0, [r7, #12]
 8001306:	f7ff fedd 	bl	80010c4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	6859      	ldr	r1, [r3, #4]
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	4b0d      	ldr	r3, [pc, #52]	; (800134c <I2C_IsAcknowledgeFailed+0xc8>)
 8001316:	400b      	ands	r3, r1
 8001318:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131e:	f043 0204 	orr.w	r2, r3, #4
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	2220      	movs	r2, #32
 800132a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	2200      	movs	r2, #0
 8001332:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	2200      	movs	r2, #0
 800133a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e000      	b.n	8001344 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001342:	2300      	movs	r3, #0
}
 8001344:	4618      	mov	r0, r3
 8001346:	3710      	adds	r7, #16
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	fe00e800 	.word	0xfe00e800

08001350 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001350:	b480      	push	{r7}
 8001352:	b085      	sub	sp, #20
 8001354:	af00      	add	r7, sp, #0
 8001356:	60f8      	str	r0, [r7, #12]
 8001358:	607b      	str	r3, [r7, #4]
 800135a:	460b      	mov	r3, r1
 800135c:	817b      	strh	r3, [r7, #10]
 800135e:	4613      	mov	r3, r2
 8001360:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	685a      	ldr	r2, [r3, #4]
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	0d5b      	lsrs	r3, r3, #21
 800136c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001370:	4b0d      	ldr	r3, [pc, #52]	; (80013a8 <I2C_TransferConfig+0x58>)
 8001372:	430b      	orrs	r3, r1
 8001374:	43db      	mvns	r3, r3
 8001376:	ea02 0103 	and.w	r1, r2, r3
 800137a:	897b      	ldrh	r3, [r7, #10]
 800137c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001380:	7a7b      	ldrb	r3, [r7, #9]
 8001382:	041b      	lsls	r3, r3, #16
 8001384:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001388:	431a      	orrs	r2, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	431a      	orrs	r2, r3
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	431a      	orrs	r2, r3
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	430a      	orrs	r2, r1
 8001398:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800139a:	bf00      	nop
 800139c:	3714      	adds	r7, #20
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	03ff63ff 	.word	0x03ff63ff

080013ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	2b20      	cmp	r3, #32
 80013c0:	d138      	bne.n	8001434 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d101      	bne.n	80013d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80013cc:	2302      	movs	r3, #2
 80013ce:	e032      	b.n	8001436 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2201      	movs	r2, #1
 80013d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2224      	movs	r2, #36	; 0x24
 80013dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f022 0201 	bic.w	r2, r2, #1
 80013ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80013fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	6819      	ldr	r1, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	683a      	ldr	r2, [r7, #0]
 800140c:	430a      	orrs	r2, r1
 800140e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f042 0201 	orr.w	r2, r2, #1
 800141e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2220      	movs	r2, #32
 8001424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2200      	movs	r2, #0
 800142c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001430:	2300      	movs	r3, #0
 8001432:	e000      	b.n	8001436 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001434:	2302      	movs	r3, #2
  }
}
 8001436:	4618      	mov	r0, r3
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr

08001442 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001442:	b480      	push	{r7}
 8001444:	b085      	sub	sp, #20
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
 800144a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001452:	b2db      	uxtb	r3, r3
 8001454:	2b20      	cmp	r3, #32
 8001456:	d139      	bne.n	80014cc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800145e:	2b01      	cmp	r3, #1
 8001460:	d101      	bne.n	8001466 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001462:	2302      	movs	r3, #2
 8001464:	e033      	b.n	80014ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2201      	movs	r2, #1
 800146a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2224      	movs	r2, #36	; 0x24
 8001472:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f022 0201 	bic.w	r2, r2, #1
 8001484:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001494:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	021b      	lsls	r3, r3, #8
 800149a:	68fa      	ldr	r2, [r7, #12]
 800149c:	4313      	orrs	r3, r2
 800149e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	68fa      	ldr	r2, [r7, #12]
 80014a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f042 0201 	orr.w	r2, r2, #1
 80014b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2220      	movs	r2, #32
 80014bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2200      	movs	r2, #0
 80014c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80014c8:	2300      	movs	r3, #0
 80014ca:	e000      	b.n	80014ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80014cc:	2302      	movs	r3, #2
  }
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3714      	adds	r7, #20
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
	...

080014dc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80014e0:	4b04      	ldr	r3, [pc, #16]	; (80014f4 <HAL_PWREx_GetVoltageRange+0x18>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	40007000 	.word	0x40007000

080014f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001506:	d130      	bne.n	800156a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001508:	4b23      	ldr	r3, [pc, #140]	; (8001598 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001510:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001514:	d038      	beq.n	8001588 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001516:	4b20      	ldr	r3, [pc, #128]	; (8001598 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800151e:	4a1e      	ldr	r2, [pc, #120]	; (8001598 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001520:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001524:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001526:	4b1d      	ldr	r3, [pc, #116]	; (800159c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2232      	movs	r2, #50	; 0x32
 800152c:	fb02 f303 	mul.w	r3, r2, r3
 8001530:	4a1b      	ldr	r2, [pc, #108]	; (80015a0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001532:	fba2 2303 	umull	r2, r3, r2, r3
 8001536:	0c9b      	lsrs	r3, r3, #18
 8001538:	3301      	adds	r3, #1
 800153a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800153c:	e002      	b.n	8001544 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	3b01      	subs	r3, #1
 8001542:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001544:	4b14      	ldr	r3, [pc, #80]	; (8001598 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001546:	695b      	ldr	r3, [r3, #20]
 8001548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800154c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001550:	d102      	bne.n	8001558 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1f2      	bne.n	800153e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001558:	4b0f      	ldr	r3, [pc, #60]	; (8001598 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800155a:	695b      	ldr	r3, [r3, #20]
 800155c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001560:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001564:	d110      	bne.n	8001588 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e00f      	b.n	800158a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800156a:	4b0b      	ldr	r3, [pc, #44]	; (8001598 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001572:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001576:	d007      	beq.n	8001588 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001578:	4b07      	ldr	r3, [pc, #28]	; (8001598 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001580:	4a05      	ldr	r2, [pc, #20]	; (8001598 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001582:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001586:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3714      	adds	r7, #20
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	40007000 	.word	0x40007000
 800159c:	20000000 	.word	0x20000000
 80015a0:	431bde83 	.word	0x431bde83

080015a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b088      	sub	sp, #32
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d102      	bne.n	80015b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	f000 bc11 	b.w	8001dda <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015b8:	4ba0      	ldr	r3, [pc, #640]	; (800183c <HAL_RCC_OscConfig+0x298>)
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	f003 030c 	and.w	r3, r3, #12
 80015c0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015c2:	4b9e      	ldr	r3, [pc, #632]	; (800183c <HAL_RCC_OscConfig+0x298>)
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	f003 0303 	and.w	r3, r3, #3
 80015ca:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0310 	and.w	r3, r3, #16
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	f000 80e4 	beq.w	80017a2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d007      	beq.n	80015f0 <HAL_RCC_OscConfig+0x4c>
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	2b0c      	cmp	r3, #12
 80015e4:	f040 808b 	bne.w	80016fe <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	f040 8087 	bne.w	80016fe <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015f0:	4b92      	ldr	r3, [pc, #584]	; (800183c <HAL_RCC_OscConfig+0x298>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0302 	and.w	r3, r3, #2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d005      	beq.n	8001608 <HAL_RCC_OscConfig+0x64>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d101      	bne.n	8001608 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e3e8      	b.n	8001dda <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6a1a      	ldr	r2, [r3, #32]
 800160c:	4b8b      	ldr	r3, [pc, #556]	; (800183c <HAL_RCC_OscConfig+0x298>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 0308 	and.w	r3, r3, #8
 8001614:	2b00      	cmp	r3, #0
 8001616:	d004      	beq.n	8001622 <HAL_RCC_OscConfig+0x7e>
 8001618:	4b88      	ldr	r3, [pc, #544]	; (800183c <HAL_RCC_OscConfig+0x298>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001620:	e005      	b.n	800162e <HAL_RCC_OscConfig+0x8a>
 8001622:	4b86      	ldr	r3, [pc, #536]	; (800183c <HAL_RCC_OscConfig+0x298>)
 8001624:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001628:	091b      	lsrs	r3, r3, #4
 800162a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800162e:	4293      	cmp	r3, r2
 8001630:	d223      	bcs.n	800167a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a1b      	ldr	r3, [r3, #32]
 8001636:	4618      	mov	r0, r3
 8001638:	f000 fd42 	bl	80020c0 <RCC_SetFlashLatencyFromMSIRange>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e3c9      	b.n	8001dda <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001646:	4b7d      	ldr	r3, [pc, #500]	; (800183c <HAL_RCC_OscConfig+0x298>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a7c      	ldr	r2, [pc, #496]	; (800183c <HAL_RCC_OscConfig+0x298>)
 800164c:	f043 0308 	orr.w	r3, r3, #8
 8001650:	6013      	str	r3, [r2, #0]
 8001652:	4b7a      	ldr	r3, [pc, #488]	; (800183c <HAL_RCC_OscConfig+0x298>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a1b      	ldr	r3, [r3, #32]
 800165e:	4977      	ldr	r1, [pc, #476]	; (800183c <HAL_RCC_OscConfig+0x298>)
 8001660:	4313      	orrs	r3, r2
 8001662:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001664:	4b75      	ldr	r3, [pc, #468]	; (800183c <HAL_RCC_OscConfig+0x298>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	69db      	ldr	r3, [r3, #28]
 8001670:	021b      	lsls	r3, r3, #8
 8001672:	4972      	ldr	r1, [pc, #456]	; (800183c <HAL_RCC_OscConfig+0x298>)
 8001674:	4313      	orrs	r3, r2
 8001676:	604b      	str	r3, [r1, #4]
 8001678:	e025      	b.n	80016c6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800167a:	4b70      	ldr	r3, [pc, #448]	; (800183c <HAL_RCC_OscConfig+0x298>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a6f      	ldr	r2, [pc, #444]	; (800183c <HAL_RCC_OscConfig+0x298>)
 8001680:	f043 0308 	orr.w	r3, r3, #8
 8001684:	6013      	str	r3, [r2, #0]
 8001686:	4b6d      	ldr	r3, [pc, #436]	; (800183c <HAL_RCC_OscConfig+0x298>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a1b      	ldr	r3, [r3, #32]
 8001692:	496a      	ldr	r1, [pc, #424]	; (800183c <HAL_RCC_OscConfig+0x298>)
 8001694:	4313      	orrs	r3, r2
 8001696:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001698:	4b68      	ldr	r3, [pc, #416]	; (800183c <HAL_RCC_OscConfig+0x298>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	69db      	ldr	r3, [r3, #28]
 80016a4:	021b      	lsls	r3, r3, #8
 80016a6:	4965      	ldr	r1, [pc, #404]	; (800183c <HAL_RCC_OscConfig+0x298>)
 80016a8:	4313      	orrs	r3, r2
 80016aa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d109      	bne.n	80016c6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a1b      	ldr	r3, [r3, #32]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f000 fd02 	bl	80020c0 <RCC_SetFlashLatencyFromMSIRange>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e389      	b.n	8001dda <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016c6:	f000 fc6f 	bl	8001fa8 <HAL_RCC_GetSysClockFreq>
 80016ca:	4602      	mov	r2, r0
 80016cc:	4b5b      	ldr	r3, [pc, #364]	; (800183c <HAL_RCC_OscConfig+0x298>)
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	091b      	lsrs	r3, r3, #4
 80016d2:	f003 030f 	and.w	r3, r3, #15
 80016d6:	495a      	ldr	r1, [pc, #360]	; (8001840 <HAL_RCC_OscConfig+0x29c>)
 80016d8:	5ccb      	ldrb	r3, [r1, r3]
 80016da:	f003 031f 	and.w	r3, r3, #31
 80016de:	fa22 f303 	lsr.w	r3, r2, r3
 80016e2:	4a58      	ldr	r2, [pc, #352]	; (8001844 <HAL_RCC_OscConfig+0x2a0>)
 80016e4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80016e6:	4b58      	ldr	r3, [pc, #352]	; (8001848 <HAL_RCC_OscConfig+0x2a4>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7fe fff4 	bl	80006d8 <HAL_InitTick>
 80016f0:	4603      	mov	r3, r0
 80016f2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80016f4:	7bfb      	ldrb	r3, [r7, #15]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d052      	beq.n	80017a0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80016fa:	7bfb      	ldrb	r3, [r7, #15]
 80016fc:	e36d      	b.n	8001dda <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	699b      	ldr	r3, [r3, #24]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d032      	beq.n	800176c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001706:	4b4d      	ldr	r3, [pc, #308]	; (800183c <HAL_RCC_OscConfig+0x298>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a4c      	ldr	r2, [pc, #304]	; (800183c <HAL_RCC_OscConfig+0x298>)
 800170c:	f043 0301 	orr.w	r3, r3, #1
 8001710:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001712:	f7ff f831 	bl	8000778 <HAL_GetTick>
 8001716:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001718:	e008      	b.n	800172c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800171a:	f7ff f82d 	bl	8000778 <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d901      	bls.n	800172c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e356      	b.n	8001dda <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800172c:	4b43      	ldr	r3, [pc, #268]	; (800183c <HAL_RCC_OscConfig+0x298>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0302 	and.w	r3, r3, #2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d0f0      	beq.n	800171a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001738:	4b40      	ldr	r3, [pc, #256]	; (800183c <HAL_RCC_OscConfig+0x298>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a3f      	ldr	r2, [pc, #252]	; (800183c <HAL_RCC_OscConfig+0x298>)
 800173e:	f043 0308 	orr.w	r3, r3, #8
 8001742:	6013      	str	r3, [r2, #0]
 8001744:	4b3d      	ldr	r3, [pc, #244]	; (800183c <HAL_RCC_OscConfig+0x298>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6a1b      	ldr	r3, [r3, #32]
 8001750:	493a      	ldr	r1, [pc, #232]	; (800183c <HAL_RCC_OscConfig+0x298>)
 8001752:	4313      	orrs	r3, r2
 8001754:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001756:	4b39      	ldr	r3, [pc, #228]	; (800183c <HAL_RCC_OscConfig+0x298>)
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	69db      	ldr	r3, [r3, #28]
 8001762:	021b      	lsls	r3, r3, #8
 8001764:	4935      	ldr	r1, [pc, #212]	; (800183c <HAL_RCC_OscConfig+0x298>)
 8001766:	4313      	orrs	r3, r2
 8001768:	604b      	str	r3, [r1, #4]
 800176a:	e01a      	b.n	80017a2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800176c:	4b33      	ldr	r3, [pc, #204]	; (800183c <HAL_RCC_OscConfig+0x298>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a32      	ldr	r2, [pc, #200]	; (800183c <HAL_RCC_OscConfig+0x298>)
 8001772:	f023 0301 	bic.w	r3, r3, #1
 8001776:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001778:	f7fe fffe 	bl	8000778 <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800177e:	e008      	b.n	8001792 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001780:	f7fe fffa 	bl	8000778 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b02      	cmp	r3, #2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e323      	b.n	8001dda <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001792:	4b2a      	ldr	r3, [pc, #168]	; (800183c <HAL_RCC_OscConfig+0x298>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1f0      	bne.n	8001780 <HAL_RCC_OscConfig+0x1dc>
 800179e:	e000      	b.n	80017a2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017a0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d073      	beq.n	8001896 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	2b08      	cmp	r3, #8
 80017b2:	d005      	beq.n	80017c0 <HAL_RCC_OscConfig+0x21c>
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	2b0c      	cmp	r3, #12
 80017b8:	d10e      	bne.n	80017d8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	2b03      	cmp	r3, #3
 80017be:	d10b      	bne.n	80017d8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017c0:	4b1e      	ldr	r3, [pc, #120]	; (800183c <HAL_RCC_OscConfig+0x298>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d063      	beq.n	8001894 <HAL_RCC_OscConfig+0x2f0>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d15f      	bne.n	8001894 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e300      	b.n	8001dda <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017e0:	d106      	bne.n	80017f0 <HAL_RCC_OscConfig+0x24c>
 80017e2:	4b16      	ldr	r3, [pc, #88]	; (800183c <HAL_RCC_OscConfig+0x298>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a15      	ldr	r2, [pc, #84]	; (800183c <HAL_RCC_OscConfig+0x298>)
 80017e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017ec:	6013      	str	r3, [r2, #0]
 80017ee:	e01d      	b.n	800182c <HAL_RCC_OscConfig+0x288>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017f8:	d10c      	bne.n	8001814 <HAL_RCC_OscConfig+0x270>
 80017fa:	4b10      	ldr	r3, [pc, #64]	; (800183c <HAL_RCC_OscConfig+0x298>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a0f      	ldr	r2, [pc, #60]	; (800183c <HAL_RCC_OscConfig+0x298>)
 8001800:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001804:	6013      	str	r3, [r2, #0]
 8001806:	4b0d      	ldr	r3, [pc, #52]	; (800183c <HAL_RCC_OscConfig+0x298>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a0c      	ldr	r2, [pc, #48]	; (800183c <HAL_RCC_OscConfig+0x298>)
 800180c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001810:	6013      	str	r3, [r2, #0]
 8001812:	e00b      	b.n	800182c <HAL_RCC_OscConfig+0x288>
 8001814:	4b09      	ldr	r3, [pc, #36]	; (800183c <HAL_RCC_OscConfig+0x298>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a08      	ldr	r2, [pc, #32]	; (800183c <HAL_RCC_OscConfig+0x298>)
 800181a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800181e:	6013      	str	r3, [r2, #0]
 8001820:	4b06      	ldr	r3, [pc, #24]	; (800183c <HAL_RCC_OscConfig+0x298>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a05      	ldr	r2, [pc, #20]	; (800183c <HAL_RCC_OscConfig+0x298>)
 8001826:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800182a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d01b      	beq.n	800186c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001834:	f7fe ffa0 	bl	8000778 <HAL_GetTick>
 8001838:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800183a:	e010      	b.n	800185e <HAL_RCC_OscConfig+0x2ba>
 800183c:	40021000 	.word	0x40021000
 8001840:	08005474 	.word	0x08005474
 8001844:	20000000 	.word	0x20000000
 8001848:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800184c:	f7fe ff94 	bl	8000778 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b64      	cmp	r3, #100	; 0x64
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e2bd      	b.n	8001dda <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800185e:	4baf      	ldr	r3, [pc, #700]	; (8001b1c <HAL_RCC_OscConfig+0x578>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d0f0      	beq.n	800184c <HAL_RCC_OscConfig+0x2a8>
 800186a:	e014      	b.n	8001896 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800186c:	f7fe ff84 	bl	8000778 <HAL_GetTick>
 8001870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001872:	e008      	b.n	8001886 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001874:	f7fe ff80 	bl	8000778 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b64      	cmp	r3, #100	; 0x64
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e2a9      	b.n	8001dda <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001886:	4ba5      	ldr	r3, [pc, #660]	; (8001b1c <HAL_RCC_OscConfig+0x578>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1f0      	bne.n	8001874 <HAL_RCC_OscConfig+0x2d0>
 8001892:	e000      	b.n	8001896 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001894:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d060      	beq.n	8001964 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	2b04      	cmp	r3, #4
 80018a6:	d005      	beq.n	80018b4 <HAL_RCC_OscConfig+0x310>
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	2b0c      	cmp	r3, #12
 80018ac:	d119      	bne.n	80018e2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d116      	bne.n	80018e2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018b4:	4b99      	ldr	r3, [pc, #612]	; (8001b1c <HAL_RCC_OscConfig+0x578>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d005      	beq.n	80018cc <HAL_RCC_OscConfig+0x328>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d101      	bne.n	80018cc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e286      	b.n	8001dda <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018cc:	4b93      	ldr	r3, [pc, #588]	; (8001b1c <HAL_RCC_OscConfig+0x578>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	691b      	ldr	r3, [r3, #16]
 80018d8:	061b      	lsls	r3, r3, #24
 80018da:	4990      	ldr	r1, [pc, #576]	; (8001b1c <HAL_RCC_OscConfig+0x578>)
 80018dc:	4313      	orrs	r3, r2
 80018de:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018e0:	e040      	b.n	8001964 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d023      	beq.n	8001932 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018ea:	4b8c      	ldr	r3, [pc, #560]	; (8001b1c <HAL_RCC_OscConfig+0x578>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a8b      	ldr	r2, [pc, #556]	; (8001b1c <HAL_RCC_OscConfig+0x578>)
 80018f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f6:	f7fe ff3f 	bl	8000778 <HAL_GetTick>
 80018fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018fc:	e008      	b.n	8001910 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018fe:	f7fe ff3b 	bl	8000778 <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b02      	cmp	r3, #2
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e264      	b.n	8001dda <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001910:	4b82      	ldr	r3, [pc, #520]	; (8001b1c <HAL_RCC_OscConfig+0x578>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001918:	2b00      	cmp	r3, #0
 800191a:	d0f0      	beq.n	80018fe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800191c:	4b7f      	ldr	r3, [pc, #508]	; (8001b1c <HAL_RCC_OscConfig+0x578>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	691b      	ldr	r3, [r3, #16]
 8001928:	061b      	lsls	r3, r3, #24
 800192a:	497c      	ldr	r1, [pc, #496]	; (8001b1c <HAL_RCC_OscConfig+0x578>)
 800192c:	4313      	orrs	r3, r2
 800192e:	604b      	str	r3, [r1, #4]
 8001930:	e018      	b.n	8001964 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001932:	4b7a      	ldr	r3, [pc, #488]	; (8001b1c <HAL_RCC_OscConfig+0x578>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a79      	ldr	r2, [pc, #484]	; (8001b1c <HAL_RCC_OscConfig+0x578>)
 8001938:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800193c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800193e:	f7fe ff1b 	bl	8000778 <HAL_GetTick>
 8001942:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001944:	e008      	b.n	8001958 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001946:	f7fe ff17 	bl	8000778 <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d901      	bls.n	8001958 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e240      	b.n	8001dda <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001958:	4b70      	ldr	r3, [pc, #448]	; (8001b1c <HAL_RCC_OscConfig+0x578>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001960:	2b00      	cmp	r3, #0
 8001962:	d1f0      	bne.n	8001946 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0308 	and.w	r3, r3, #8
 800196c:	2b00      	cmp	r3, #0
 800196e:	d03c      	beq.n	80019ea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	695b      	ldr	r3, [r3, #20]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d01c      	beq.n	80019b2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001978:	4b68      	ldr	r3, [pc, #416]	; (8001b1c <HAL_RCC_OscConfig+0x578>)
 800197a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800197e:	4a67      	ldr	r2, [pc, #412]	; (8001b1c <HAL_RCC_OscConfig+0x578>)
 8001980:	f043 0301 	orr.w	r3, r3, #1
 8001984:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001988:	f7fe fef6 	bl	8000778 <HAL_GetTick>
 800198c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001990:	f7fe fef2 	bl	8000778 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b02      	cmp	r3, #2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e21b      	b.n	8001dda <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019a2:	4b5e      	ldr	r3, [pc, #376]	; (8001b1c <HAL_RCC_OscConfig+0x578>)
 80019a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d0ef      	beq.n	8001990 <HAL_RCC_OscConfig+0x3ec>
 80019b0:	e01b      	b.n	80019ea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019b2:	4b5a      	ldr	r3, [pc, #360]	; (8001b1c <HAL_RCC_OscConfig+0x578>)
 80019b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019b8:	4a58      	ldr	r2, [pc, #352]	; (8001b1c <HAL_RCC_OscConfig+0x578>)
 80019ba:	f023 0301 	bic.w	r3, r3, #1
 80019be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019c2:	f7fe fed9 	bl	8000778 <HAL_GetTick>
 80019c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019c8:	e008      	b.n	80019dc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019ca:	f7fe fed5 	bl	8000778 <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e1fe      	b.n	8001dda <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019dc:	4b4f      	ldr	r3, [pc, #316]	; (8001b1c <HAL_RCC_OscConfig+0x578>)
 80019de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1ef      	bne.n	80019ca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0304 	and.w	r3, r3, #4
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	f000 80a6 	beq.w	8001b44 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019f8:	2300      	movs	r3, #0
 80019fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80019fc:	4b47      	ldr	r3, [pc, #284]	; (8001b1c <HAL_RCC_OscConfig+0x578>)
 80019fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d10d      	bne.n	8001a24 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a08:	4b44      	ldr	r3, [pc, #272]	; (8001b1c <HAL_RCC_OscConfig+0x578>)
 8001a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a0c:	4a43      	ldr	r2, [pc, #268]	; (8001b1c <HAL_RCC_OscConfig+0x578>)
 8001a0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a12:	6593      	str	r3, [r2, #88]	; 0x58
 8001a14:	4b41      	ldr	r3, [pc, #260]	; (8001b1c <HAL_RCC_OscConfig+0x578>)
 8001a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a1c:	60bb      	str	r3, [r7, #8]
 8001a1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a20:	2301      	movs	r3, #1
 8001a22:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a24:	4b3e      	ldr	r3, [pc, #248]	; (8001b20 <HAL_RCC_OscConfig+0x57c>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d118      	bne.n	8001a62 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a30:	4b3b      	ldr	r3, [pc, #236]	; (8001b20 <HAL_RCC_OscConfig+0x57c>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a3a      	ldr	r2, [pc, #232]	; (8001b20 <HAL_RCC_OscConfig+0x57c>)
 8001a36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a3a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a3c:	f7fe fe9c 	bl	8000778 <HAL_GetTick>
 8001a40:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a44:	f7fe fe98 	bl	8000778 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e1c1      	b.n	8001dda <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a56:	4b32      	ldr	r3, [pc, #200]	; (8001b20 <HAL_RCC_OscConfig+0x57c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d0f0      	beq.n	8001a44 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d108      	bne.n	8001a7c <HAL_RCC_OscConfig+0x4d8>
 8001a6a:	4b2c      	ldr	r3, [pc, #176]	; (8001b1c <HAL_RCC_OscConfig+0x578>)
 8001a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a70:	4a2a      	ldr	r2, [pc, #168]	; (8001b1c <HAL_RCC_OscConfig+0x578>)
 8001a72:	f043 0301 	orr.w	r3, r3, #1
 8001a76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a7a:	e024      	b.n	8001ac6 <HAL_RCC_OscConfig+0x522>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	2b05      	cmp	r3, #5
 8001a82:	d110      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x502>
 8001a84:	4b25      	ldr	r3, [pc, #148]	; (8001b1c <HAL_RCC_OscConfig+0x578>)
 8001a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a8a:	4a24      	ldr	r2, [pc, #144]	; (8001b1c <HAL_RCC_OscConfig+0x578>)
 8001a8c:	f043 0304 	orr.w	r3, r3, #4
 8001a90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a94:	4b21      	ldr	r3, [pc, #132]	; (8001b1c <HAL_RCC_OscConfig+0x578>)
 8001a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a9a:	4a20      	ldr	r2, [pc, #128]	; (8001b1c <HAL_RCC_OscConfig+0x578>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001aa4:	e00f      	b.n	8001ac6 <HAL_RCC_OscConfig+0x522>
 8001aa6:	4b1d      	ldr	r3, [pc, #116]	; (8001b1c <HAL_RCC_OscConfig+0x578>)
 8001aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aac:	4a1b      	ldr	r2, [pc, #108]	; (8001b1c <HAL_RCC_OscConfig+0x578>)
 8001aae:	f023 0301 	bic.w	r3, r3, #1
 8001ab2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ab6:	4b19      	ldr	r3, [pc, #100]	; (8001b1c <HAL_RCC_OscConfig+0x578>)
 8001ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001abc:	4a17      	ldr	r2, [pc, #92]	; (8001b1c <HAL_RCC_OscConfig+0x578>)
 8001abe:	f023 0304 	bic.w	r3, r3, #4
 8001ac2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d016      	beq.n	8001afc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ace:	f7fe fe53 	bl	8000778 <HAL_GetTick>
 8001ad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ad4:	e00a      	b.n	8001aec <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ad6:	f7fe fe4f 	bl	8000778 <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d901      	bls.n	8001aec <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e176      	b.n	8001dda <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001aec:	4b0b      	ldr	r3, [pc, #44]	; (8001b1c <HAL_RCC_OscConfig+0x578>)
 8001aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d0ed      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x532>
 8001afa:	e01a      	b.n	8001b32 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001afc:	f7fe fe3c 	bl	8000778 <HAL_GetTick>
 8001b00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b02:	e00f      	b.n	8001b24 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b04:	f7fe fe38 	bl	8000778 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d906      	bls.n	8001b24 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e15f      	b.n	8001dda <HAL_RCC_OscConfig+0x836>
 8001b1a:	bf00      	nop
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b24:	4baa      	ldr	r3, [pc, #680]	; (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d1e8      	bne.n	8001b04 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b32:	7ffb      	ldrb	r3, [r7, #31]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d105      	bne.n	8001b44 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b38:	4ba5      	ldr	r3, [pc, #660]	; (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b3c:	4aa4      	ldr	r2, [pc, #656]	; (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001b3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b42:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0320 	and.w	r3, r3, #32
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d03c      	beq.n	8001bca <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d01c      	beq.n	8001b92 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b58:	4b9d      	ldr	r3, [pc, #628]	; (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001b5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b5e:	4a9c      	ldr	r2, [pc, #624]	; (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001b60:	f043 0301 	orr.w	r3, r3, #1
 8001b64:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b68:	f7fe fe06 	bl	8000778 <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b70:	f7fe fe02 	bl	8000778 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e12b      	b.n	8001dda <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b82:	4b93      	ldr	r3, [pc, #588]	; (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001b84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b88:	f003 0302 	and.w	r3, r3, #2
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d0ef      	beq.n	8001b70 <HAL_RCC_OscConfig+0x5cc>
 8001b90:	e01b      	b.n	8001bca <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b92:	4b8f      	ldr	r3, [pc, #572]	; (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001b94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b98:	4a8d      	ldr	r2, [pc, #564]	; (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001b9a:	f023 0301 	bic.w	r3, r3, #1
 8001b9e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba2:	f7fe fde9 	bl	8000778 <HAL_GetTick>
 8001ba6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ba8:	e008      	b.n	8001bbc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001baa:	f7fe fde5 	bl	8000778 <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e10e      	b.n	8001dda <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001bbc:	4b84      	ldr	r3, [pc, #528]	; (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001bbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d1ef      	bne.n	8001baa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	f000 8102 	beq.w	8001dd8 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	f040 80c5 	bne.w	8001d68 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001bde:	4b7c      	ldr	r3, [pc, #496]	; (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	f003 0203 	and.w	r2, r3, #3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d12c      	bne.n	8001c4c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfc:	3b01      	subs	r3, #1
 8001bfe:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d123      	bne.n	8001c4c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c0e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d11b      	bne.n	8001c4c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c1e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d113      	bne.n	8001c4c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c2e:	085b      	lsrs	r3, r3, #1
 8001c30:	3b01      	subs	r3, #1
 8001c32:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d109      	bne.n	8001c4c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c42:	085b      	lsrs	r3, r3, #1
 8001c44:	3b01      	subs	r3, #1
 8001c46:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d067      	beq.n	8001d1c <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	2b0c      	cmp	r3, #12
 8001c50:	d062      	beq.n	8001d18 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001c52:	4b5f      	ldr	r3, [pc, #380]	; (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e0bb      	b.n	8001dda <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001c62:	4b5b      	ldr	r3, [pc, #364]	; (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a5a      	ldr	r2, [pc, #360]	; (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001c68:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c6c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c6e:	f7fe fd83 	bl	8000778 <HAL_GetTick>
 8001c72:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c74:	e008      	b.n	8001c88 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c76:	f7fe fd7f 	bl	8000778 <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d901      	bls.n	8001c88 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e0a8      	b.n	8001dda <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c88:	4b51      	ldr	r3, [pc, #324]	; (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d1f0      	bne.n	8001c76 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c94:	4b4e      	ldr	r3, [pc, #312]	; (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001c96:	68da      	ldr	r2, [r3, #12]
 8001c98:	4b4e      	ldr	r3, [pc, #312]	; (8001dd4 <HAL_RCC_OscConfig+0x830>)
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001ca4:	3a01      	subs	r2, #1
 8001ca6:	0112      	lsls	r2, r2, #4
 8001ca8:	4311      	orrs	r1, r2
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001cae:	0212      	lsls	r2, r2, #8
 8001cb0:	4311      	orrs	r1, r2
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001cb6:	0852      	lsrs	r2, r2, #1
 8001cb8:	3a01      	subs	r2, #1
 8001cba:	0552      	lsls	r2, r2, #21
 8001cbc:	4311      	orrs	r1, r2
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001cc2:	0852      	lsrs	r2, r2, #1
 8001cc4:	3a01      	subs	r2, #1
 8001cc6:	0652      	lsls	r2, r2, #25
 8001cc8:	4311      	orrs	r1, r2
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001cce:	06d2      	lsls	r2, r2, #27
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	493f      	ldr	r1, [pc, #252]	; (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001cd8:	4b3d      	ldr	r3, [pc, #244]	; (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a3c      	ldr	r2, [pc, #240]	; (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001cde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ce2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ce4:	4b3a      	ldr	r3, [pc, #232]	; (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	4a39      	ldr	r2, [pc, #228]	; (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001cea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001cf0:	f7fe fd42 	bl	8000778 <HAL_GetTick>
 8001cf4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cf6:	e008      	b.n	8001d0a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cf8:	f7fe fd3e 	bl	8000778 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e067      	b.n	8001dda <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d0a:	4b31      	ldr	r3, [pc, #196]	; (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d0f0      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d16:	e05f      	b.n	8001dd8 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e05e      	b.n	8001dda <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d1c:	4b2c      	ldr	r3, [pc, #176]	; (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d157      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001d28:	4b29      	ldr	r3, [pc, #164]	; (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a28      	ldr	r2, [pc, #160]	; (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001d2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d32:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d34:	4b26      	ldr	r3, [pc, #152]	; (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	4a25      	ldr	r2, [pc, #148]	; (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001d3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d3e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d40:	f7fe fd1a 	bl	8000778 <HAL_GetTick>
 8001d44:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d48:	f7fe fd16 	bl	8000778 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e03f      	b.n	8001dda <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d5a:	4b1d      	ldr	r3, [pc, #116]	; (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d0f0      	beq.n	8001d48 <HAL_RCC_OscConfig+0x7a4>
 8001d66:	e037      	b.n	8001dd8 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	2b0c      	cmp	r3, #12
 8001d6c:	d02d      	beq.n	8001dca <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d6e:	4b18      	ldr	r3, [pc, #96]	; (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a17      	ldr	r2, [pc, #92]	; (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001d74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d78:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001d7a:	4b15      	ldr	r3, [pc, #84]	; (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d105      	bne.n	8001d92 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001d86:	4b12      	ldr	r3, [pc, #72]	; (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	4a11      	ldr	r2, [pc, #68]	; (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001d8c:	f023 0303 	bic.w	r3, r3, #3
 8001d90:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001d92:	4b0f      	ldr	r3, [pc, #60]	; (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	4a0e      	ldr	r2, [pc, #56]	; (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001d98:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001d9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001da0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da2:	f7fe fce9 	bl	8000778 <HAL_GetTick>
 8001da6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001da8:	e008      	b.n	8001dbc <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001daa:	f7fe fce5 	bl	8000778 <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d901      	bls.n	8001dbc <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e00e      	b.n	8001dda <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dbc:	4b04      	ldr	r3, [pc, #16]	; (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d1f0      	bne.n	8001daa <HAL_RCC_OscConfig+0x806>
 8001dc8:	e006      	b.n	8001dd8 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e005      	b.n	8001dda <HAL_RCC_OscConfig+0x836>
 8001dce:	bf00      	nop
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3720      	adds	r7, #32
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop

08001de4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d101      	bne.n	8001df8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e0c8      	b.n	8001f8a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001df8:	4b66      	ldr	r3, [pc, #408]	; (8001f94 <HAL_RCC_ClockConfig+0x1b0>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0307 	and.w	r3, r3, #7
 8001e00:	683a      	ldr	r2, [r7, #0]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d910      	bls.n	8001e28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e06:	4b63      	ldr	r3, [pc, #396]	; (8001f94 <HAL_RCC_ClockConfig+0x1b0>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f023 0207 	bic.w	r2, r3, #7
 8001e0e:	4961      	ldr	r1, [pc, #388]	; (8001f94 <HAL_RCC_ClockConfig+0x1b0>)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e16:	4b5f      	ldr	r3, [pc, #380]	; (8001f94 <HAL_RCC_ClockConfig+0x1b0>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	683a      	ldr	r2, [r7, #0]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d001      	beq.n	8001e28 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e0b0      	b.n	8001f8a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0301 	and.w	r3, r3, #1
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d04c      	beq.n	8001ece <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	2b03      	cmp	r3, #3
 8001e3a:	d107      	bne.n	8001e4c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e3c:	4b56      	ldr	r3, [pc, #344]	; (8001f98 <HAL_RCC_ClockConfig+0x1b4>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d121      	bne.n	8001e8c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e09e      	b.n	8001f8a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d107      	bne.n	8001e64 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e54:	4b50      	ldr	r3, [pc, #320]	; (8001f98 <HAL_RCC_ClockConfig+0x1b4>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d115      	bne.n	8001e8c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e092      	b.n	8001f8a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d107      	bne.n	8001e7c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e6c:	4b4a      	ldr	r3, [pc, #296]	; (8001f98 <HAL_RCC_ClockConfig+0x1b4>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0302 	and.w	r3, r3, #2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d109      	bne.n	8001e8c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e086      	b.n	8001f8a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e7c:	4b46      	ldr	r3, [pc, #280]	; (8001f98 <HAL_RCC_ClockConfig+0x1b4>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d101      	bne.n	8001e8c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e07e      	b.n	8001f8a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e8c:	4b42      	ldr	r3, [pc, #264]	; (8001f98 <HAL_RCC_ClockConfig+0x1b4>)
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f023 0203 	bic.w	r2, r3, #3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	493f      	ldr	r1, [pc, #252]	; (8001f98 <HAL_RCC_ClockConfig+0x1b4>)
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e9e:	f7fe fc6b 	bl	8000778 <HAL_GetTick>
 8001ea2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ea4:	e00a      	b.n	8001ebc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ea6:	f7fe fc67 	bl	8000778 <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d901      	bls.n	8001ebc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e066      	b.n	8001f8a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ebc:	4b36      	ldr	r3, [pc, #216]	; (8001f98 <HAL_RCC_ClockConfig+0x1b4>)
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f003 020c 	and.w	r2, r3, #12
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d1eb      	bne.n	8001ea6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d008      	beq.n	8001eec <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eda:	4b2f      	ldr	r3, [pc, #188]	; (8001f98 <HAL_RCC_ClockConfig+0x1b4>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	492c      	ldr	r1, [pc, #176]	; (8001f98 <HAL_RCC_ClockConfig+0x1b4>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001eec:	4b29      	ldr	r3, [pc, #164]	; (8001f94 <HAL_RCC_ClockConfig+0x1b0>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0307 	and.w	r3, r3, #7
 8001ef4:	683a      	ldr	r2, [r7, #0]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d210      	bcs.n	8001f1c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001efa:	4b26      	ldr	r3, [pc, #152]	; (8001f94 <HAL_RCC_ClockConfig+0x1b0>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f023 0207 	bic.w	r2, r3, #7
 8001f02:	4924      	ldr	r1, [pc, #144]	; (8001f94 <HAL_RCC_ClockConfig+0x1b0>)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f0a:	4b22      	ldr	r3, [pc, #136]	; (8001f94 <HAL_RCC_ClockConfig+0x1b0>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0307 	and.w	r3, r3, #7
 8001f12:	683a      	ldr	r2, [r7, #0]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d001      	beq.n	8001f1c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e036      	b.n	8001f8a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0304 	and.w	r3, r3, #4
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d008      	beq.n	8001f3a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f28:	4b1b      	ldr	r3, [pc, #108]	; (8001f98 <HAL_RCC_ClockConfig+0x1b4>)
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	4918      	ldr	r1, [pc, #96]	; (8001f98 <HAL_RCC_ClockConfig+0x1b4>)
 8001f36:	4313      	orrs	r3, r2
 8001f38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0308 	and.w	r3, r3, #8
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d009      	beq.n	8001f5a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f46:	4b14      	ldr	r3, [pc, #80]	; (8001f98 <HAL_RCC_ClockConfig+0x1b4>)
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	4910      	ldr	r1, [pc, #64]	; (8001f98 <HAL_RCC_ClockConfig+0x1b4>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f5a:	f000 f825 	bl	8001fa8 <HAL_RCC_GetSysClockFreq>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	4b0d      	ldr	r3, [pc, #52]	; (8001f98 <HAL_RCC_ClockConfig+0x1b4>)
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	091b      	lsrs	r3, r3, #4
 8001f66:	f003 030f 	and.w	r3, r3, #15
 8001f6a:	490c      	ldr	r1, [pc, #48]	; (8001f9c <HAL_RCC_ClockConfig+0x1b8>)
 8001f6c:	5ccb      	ldrb	r3, [r1, r3]
 8001f6e:	f003 031f 	and.w	r3, r3, #31
 8001f72:	fa22 f303 	lsr.w	r3, r2, r3
 8001f76:	4a0a      	ldr	r2, [pc, #40]	; (8001fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f7a:	4b0a      	ldr	r3, [pc, #40]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7fe fbaa 	bl	80006d8 <HAL_InitTick>
 8001f84:	4603      	mov	r3, r0
 8001f86:	72fb      	strb	r3, [r7, #11]

  return status;
 8001f88:	7afb      	ldrb	r3, [r7, #11]
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	40022000 	.word	0x40022000
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	08005474 	.word	0x08005474
 8001fa0:	20000000 	.word	0x20000000
 8001fa4:	20000004 	.word	0x20000004

08001fa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b089      	sub	sp, #36	; 0x24
 8001fac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	61fb      	str	r3, [r7, #28]
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fb6:	4b3e      	ldr	r3, [pc, #248]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f003 030c 	and.w	r3, r3, #12
 8001fbe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fc0:	4b3b      	ldr	r3, [pc, #236]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	f003 0303 	and.w	r3, r3, #3
 8001fc8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d005      	beq.n	8001fdc <HAL_RCC_GetSysClockFreq+0x34>
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	2b0c      	cmp	r3, #12
 8001fd4:	d121      	bne.n	800201a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d11e      	bne.n	800201a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001fdc:	4b34      	ldr	r3, [pc, #208]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0308 	and.w	r3, r3, #8
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d107      	bne.n	8001ff8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001fe8:	4b31      	ldr	r3, [pc, #196]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fee:	0a1b      	lsrs	r3, r3, #8
 8001ff0:	f003 030f 	and.w	r3, r3, #15
 8001ff4:	61fb      	str	r3, [r7, #28]
 8001ff6:	e005      	b.n	8002004 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ff8:	4b2d      	ldr	r3, [pc, #180]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	091b      	lsrs	r3, r3, #4
 8001ffe:	f003 030f 	and.w	r3, r3, #15
 8002002:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002004:	4a2b      	ldr	r2, [pc, #172]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800200c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d10d      	bne.n	8002030 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002018:	e00a      	b.n	8002030 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	2b04      	cmp	r3, #4
 800201e:	d102      	bne.n	8002026 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002020:	4b25      	ldr	r3, [pc, #148]	; (80020b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002022:	61bb      	str	r3, [r7, #24]
 8002024:	e004      	b.n	8002030 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	2b08      	cmp	r3, #8
 800202a:	d101      	bne.n	8002030 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800202c:	4b23      	ldr	r3, [pc, #140]	; (80020bc <HAL_RCC_GetSysClockFreq+0x114>)
 800202e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	2b0c      	cmp	r3, #12
 8002034:	d134      	bne.n	80020a0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002036:	4b1e      	ldr	r3, [pc, #120]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	f003 0303 	and.w	r3, r3, #3
 800203e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	2b02      	cmp	r3, #2
 8002044:	d003      	beq.n	800204e <HAL_RCC_GetSysClockFreq+0xa6>
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	2b03      	cmp	r3, #3
 800204a:	d003      	beq.n	8002054 <HAL_RCC_GetSysClockFreq+0xac>
 800204c:	e005      	b.n	800205a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800204e:	4b1a      	ldr	r3, [pc, #104]	; (80020b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002050:	617b      	str	r3, [r7, #20]
      break;
 8002052:	e005      	b.n	8002060 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002054:	4b19      	ldr	r3, [pc, #100]	; (80020bc <HAL_RCC_GetSysClockFreq+0x114>)
 8002056:	617b      	str	r3, [r7, #20]
      break;
 8002058:	e002      	b.n	8002060 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	617b      	str	r3, [r7, #20]
      break;
 800205e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002060:	4b13      	ldr	r3, [pc, #76]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	091b      	lsrs	r3, r3, #4
 8002066:	f003 0307 	and.w	r3, r3, #7
 800206a:	3301      	adds	r3, #1
 800206c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800206e:	4b10      	ldr	r3, [pc, #64]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	0a1b      	lsrs	r3, r3, #8
 8002074:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002078:	697a      	ldr	r2, [r7, #20]
 800207a:	fb02 f203 	mul.w	r2, r2, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	fbb2 f3f3 	udiv	r3, r2, r3
 8002084:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002086:	4b0a      	ldr	r3, [pc, #40]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	0e5b      	lsrs	r3, r3, #25
 800208c:	f003 0303 	and.w	r3, r3, #3
 8002090:	3301      	adds	r3, #1
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002096:	697a      	ldr	r2, [r7, #20]
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	fbb2 f3f3 	udiv	r3, r2, r3
 800209e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80020a0:	69bb      	ldr	r3, [r7, #24]
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3724      	adds	r7, #36	; 0x24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	40021000 	.word	0x40021000
 80020b4:	08005484 	.word	0x08005484
 80020b8:	00f42400 	.word	0x00f42400
 80020bc:	01312d00 	.word	0x01312d00

080020c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80020c8:	2300      	movs	r3, #0
 80020ca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80020cc:	4b2a      	ldr	r3, [pc, #168]	; (8002178 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d003      	beq.n	80020e0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80020d8:	f7ff fa00 	bl	80014dc <HAL_PWREx_GetVoltageRange>
 80020dc:	6178      	str	r0, [r7, #20]
 80020de:	e014      	b.n	800210a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80020e0:	4b25      	ldr	r3, [pc, #148]	; (8002178 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e4:	4a24      	ldr	r2, [pc, #144]	; (8002178 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ea:	6593      	str	r3, [r2, #88]	; 0x58
 80020ec:	4b22      	ldr	r3, [pc, #136]	; (8002178 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f4:	60fb      	str	r3, [r7, #12]
 80020f6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80020f8:	f7ff f9f0 	bl	80014dc <HAL_PWREx_GetVoltageRange>
 80020fc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80020fe:	4b1e      	ldr	r3, [pc, #120]	; (8002178 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002102:	4a1d      	ldr	r2, [pc, #116]	; (8002178 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002104:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002108:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002110:	d10b      	bne.n	800212a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2b80      	cmp	r3, #128	; 0x80
 8002116:	d919      	bls.n	800214c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2ba0      	cmp	r3, #160	; 0xa0
 800211c:	d902      	bls.n	8002124 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800211e:	2302      	movs	r3, #2
 8002120:	613b      	str	r3, [r7, #16]
 8002122:	e013      	b.n	800214c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002124:	2301      	movs	r3, #1
 8002126:	613b      	str	r3, [r7, #16]
 8002128:	e010      	b.n	800214c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2b80      	cmp	r3, #128	; 0x80
 800212e:	d902      	bls.n	8002136 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002130:	2303      	movs	r3, #3
 8002132:	613b      	str	r3, [r7, #16]
 8002134:	e00a      	b.n	800214c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2b80      	cmp	r3, #128	; 0x80
 800213a:	d102      	bne.n	8002142 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800213c:	2302      	movs	r3, #2
 800213e:	613b      	str	r3, [r7, #16]
 8002140:	e004      	b.n	800214c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2b70      	cmp	r3, #112	; 0x70
 8002146:	d101      	bne.n	800214c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002148:	2301      	movs	r3, #1
 800214a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800214c:	4b0b      	ldr	r3, [pc, #44]	; (800217c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f023 0207 	bic.w	r2, r3, #7
 8002154:	4909      	ldr	r1, [pc, #36]	; (800217c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	4313      	orrs	r3, r2
 800215a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800215c:	4b07      	ldr	r3, [pc, #28]	; (800217c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0307 	and.w	r3, r3, #7
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	429a      	cmp	r2, r3
 8002168:	d001      	beq.n	800216e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e000      	b.n	8002170 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800216e:	2300      	movs	r3, #0
}
 8002170:	4618      	mov	r0, r3
 8002172:	3718      	adds	r7, #24
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	40021000 	.word	0x40021000
 800217c:	40022000 	.word	0x40022000

08002180 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002188:	2300      	movs	r3, #0
 800218a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800218c:	2300      	movs	r3, #0
 800218e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002198:	2b00      	cmp	r3, #0
 800219a:	d031      	beq.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021a0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80021a4:	d01a      	beq.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80021a6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80021aa:	d814      	bhi.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d009      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80021b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80021b4:	d10f      	bne.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80021b6:	4b5d      	ldr	r3, [pc, #372]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	4a5c      	ldr	r2, [pc, #368]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021c0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021c2:	e00c      	b.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	3304      	adds	r3, #4
 80021c8:	2100      	movs	r1, #0
 80021ca:	4618      	mov	r0, r3
 80021cc:	f000 fa12 	bl	80025f4 <RCCEx_PLLSAI1_Config>
 80021d0:	4603      	mov	r3, r0
 80021d2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021d4:	e003      	b.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	74fb      	strb	r3, [r7, #19]
      break;
 80021da:	e000      	b.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80021dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80021de:	7cfb      	ldrb	r3, [r7, #19]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d10b      	bne.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021e4:	4b51      	ldr	r3, [pc, #324]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021f2:	494e      	ldr	r1, [pc, #312]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80021fa:	e001      	b.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021fc:	7cfb      	ldrb	r3, [r7, #19]
 80021fe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002208:	2b00      	cmp	r3, #0
 800220a:	f000 809e 	beq.w	800234a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800220e:	2300      	movs	r3, #0
 8002210:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002212:	4b46      	ldr	r3, [pc, #280]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d101      	bne.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800221e:	2301      	movs	r3, #1
 8002220:	e000      	b.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002222:	2300      	movs	r3, #0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d00d      	beq.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002228:	4b40      	ldr	r3, [pc, #256]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800222a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800222c:	4a3f      	ldr	r2, [pc, #252]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800222e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002232:	6593      	str	r3, [r2, #88]	; 0x58
 8002234:	4b3d      	ldr	r3, [pc, #244]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002238:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800223c:	60bb      	str	r3, [r7, #8]
 800223e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002240:	2301      	movs	r3, #1
 8002242:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002244:	4b3a      	ldr	r3, [pc, #232]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a39      	ldr	r2, [pc, #228]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800224a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800224e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002250:	f7fe fa92 	bl	8000778 <HAL_GetTick>
 8002254:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002256:	e009      	b.n	800226c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002258:	f7fe fa8e 	bl	8000778 <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	2b02      	cmp	r3, #2
 8002264:	d902      	bls.n	800226c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	74fb      	strb	r3, [r7, #19]
        break;
 800226a:	e005      	b.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800226c:	4b30      	ldr	r3, [pc, #192]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002274:	2b00      	cmp	r3, #0
 8002276:	d0ef      	beq.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002278:	7cfb      	ldrb	r3, [r7, #19]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d15a      	bne.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800227e:	4b2b      	ldr	r3, [pc, #172]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002284:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002288:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d01e      	beq.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002294:	697a      	ldr	r2, [r7, #20]
 8002296:	429a      	cmp	r2, r3
 8002298:	d019      	beq.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800229a:	4b24      	ldr	r3, [pc, #144]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800229c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022a4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80022a6:	4b21      	ldr	r3, [pc, #132]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ac:	4a1f      	ldr	r2, [pc, #124]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80022b6:	4b1d      	ldr	r3, [pc, #116]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022bc:	4a1b      	ldr	r2, [pc, #108]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80022c6:	4a19      	ldr	r2, [pc, #100]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	f003 0301 	and.w	r3, r3, #1
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d016      	beq.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d8:	f7fe fa4e 	bl	8000778 <HAL_GetTick>
 80022dc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022de:	e00b      	b.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022e0:	f7fe fa4a 	bl	8000778 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d902      	bls.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	74fb      	strb	r3, [r7, #19]
            break;
 80022f6:	e006      	b.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022f8:	4b0c      	ldr	r3, [pc, #48]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d0ec      	beq.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002306:	7cfb      	ldrb	r3, [r7, #19]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d10b      	bne.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800230c:	4b07      	ldr	r3, [pc, #28]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800230e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002312:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800231a:	4904      	ldr	r1, [pc, #16]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800231c:	4313      	orrs	r3, r2
 800231e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002322:	e009      	b.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002324:	7cfb      	ldrb	r3, [r7, #19]
 8002326:	74bb      	strb	r3, [r7, #18]
 8002328:	e006      	b.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800232a:	bf00      	nop
 800232c:	40021000 	.word	0x40021000
 8002330:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002334:	7cfb      	ldrb	r3, [r7, #19]
 8002336:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002338:	7c7b      	ldrb	r3, [r7, #17]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d105      	bne.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800233e:	4bac      	ldr	r3, [pc, #688]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002342:	4aab      	ldr	r2, [pc, #684]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002344:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002348:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b00      	cmp	r3, #0
 8002354:	d00a      	beq.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002356:	4ba6      	ldr	r3, [pc, #664]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800235c:	f023 0203 	bic.w	r2, r3, #3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a1b      	ldr	r3, [r3, #32]
 8002364:	49a2      	ldr	r1, [pc, #648]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002366:	4313      	orrs	r3, r2
 8002368:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d00a      	beq.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002378:	4b9d      	ldr	r3, [pc, #628]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800237a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800237e:	f023 020c 	bic.w	r2, r3, #12
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002386:	499a      	ldr	r1, [pc, #616]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002388:	4313      	orrs	r3, r2
 800238a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0304 	and.w	r3, r3, #4
 8002396:	2b00      	cmp	r3, #0
 8002398:	d00a      	beq.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800239a:	4b95      	ldr	r3, [pc, #596]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800239c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a8:	4991      	ldr	r1, [pc, #580]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0308 	and.w	r3, r3, #8
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d00a      	beq.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80023bc:	4b8c      	ldr	r3, [pc, #560]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80023be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ca:	4989      	ldr	r1, [pc, #548]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0320 	and.w	r3, r3, #32
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d00a      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80023de:	4b84      	ldr	r3, [pc, #528]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80023e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ec:	4980      	ldr	r1, [pc, #512]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d00a      	beq.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002400:	4b7b      	ldr	r3, [pc, #492]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002406:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240e:	4978      	ldr	r1, [pc, #480]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002410:	4313      	orrs	r3, r2
 8002412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800241e:	2b00      	cmp	r3, #0
 8002420:	d00a      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002422:	4b73      	ldr	r3, [pc, #460]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002428:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002430:	496f      	ldr	r1, [pc, #444]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002432:	4313      	orrs	r3, r2
 8002434:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002440:	2b00      	cmp	r3, #0
 8002442:	d00a      	beq.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002444:	4b6a      	ldr	r3, [pc, #424]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800244a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002452:	4967      	ldr	r1, [pc, #412]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002454:	4313      	orrs	r3, r2
 8002456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00a      	beq.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002466:	4b62      	ldr	r3, [pc, #392]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800246c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002474:	495e      	ldr	r1, [pc, #376]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002476:	4313      	orrs	r3, r2
 8002478:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002484:	2b00      	cmp	r3, #0
 8002486:	d00a      	beq.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002488:	4b59      	ldr	r3, [pc, #356]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800248a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800248e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002496:	4956      	ldr	r1, [pc, #344]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002498:	4313      	orrs	r3, r2
 800249a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00a      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80024aa:	4b51      	ldr	r3, [pc, #324]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80024ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80024b0:	f023 0203 	bic.w	r2, r3, #3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b8:	494d      	ldr	r1, [pc, #308]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d028      	beq.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80024cc:	4b48      	ldr	r3, [pc, #288]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80024ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024da:	4945      	ldr	r1, [pc, #276]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024ea:	d106      	bne.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024ec:	4b40      	ldr	r3, [pc, #256]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	4a3f      	ldr	r2, [pc, #252]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80024f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024f6:	60d3      	str	r3, [r2, #12]
 80024f8:	e011      	b.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002502:	d10c      	bne.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	3304      	adds	r3, #4
 8002508:	2101      	movs	r1, #1
 800250a:	4618      	mov	r0, r3
 800250c:	f000 f872 	bl	80025f4 <RCCEx_PLLSAI1_Config>
 8002510:	4603      	mov	r3, r0
 8002512:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002514:	7cfb      	ldrb	r3, [r7, #19]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* set overall return value */
        status = ret;
 800251a:	7cfb      	ldrb	r3, [r7, #19]
 800251c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d028      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800252a:	4b31      	ldr	r3, [pc, #196]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800252c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002530:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002538:	492d      	ldr	r1, [pc, #180]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800253a:	4313      	orrs	r3, r2
 800253c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002544:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002548:	d106      	bne.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800254a:	4b29      	ldr	r3, [pc, #164]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	4a28      	ldr	r2, [pc, #160]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002550:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002554:	60d3      	str	r3, [r2, #12]
 8002556:	e011      	b.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800255c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002560:	d10c      	bne.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	3304      	adds	r3, #4
 8002566:	2101      	movs	r1, #1
 8002568:	4618      	mov	r0, r3
 800256a:	f000 f843 	bl	80025f4 <RCCEx_PLLSAI1_Config>
 800256e:	4603      	mov	r3, r0
 8002570:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002572:	7cfb      	ldrb	r3, [r7, #19]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8002578:	7cfb      	ldrb	r3, [r7, #19]
 800257a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d01c      	beq.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002588:	4b19      	ldr	r3, [pc, #100]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800258a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800258e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002596:	4916      	ldr	r1, [pc, #88]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002598:	4313      	orrs	r3, r2
 800259a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80025a6:	d10c      	bne.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	3304      	adds	r3, #4
 80025ac:	2102      	movs	r1, #2
 80025ae:	4618      	mov	r0, r3
 80025b0:	f000 f820 	bl	80025f4 <RCCEx_PLLSAI1_Config>
 80025b4:	4603      	mov	r3, r0
 80025b6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025b8:	7cfb      	ldrb	r3, [r7, #19]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x442>
      {
        /* set overall return value */
        status = ret;
 80025be:	7cfb      	ldrb	r3, [r7, #19]
 80025c0:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d00a      	beq.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x464>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80025ce:	4b08      	ldr	r3, [pc, #32]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80025d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025d4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025dc:	4904      	ldr	r1, [pc, #16]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80025e4:	7cbb      	ldrb	r3, [r7, #18]
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3718      	adds	r7, #24
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	40021000 	.word	0x40021000

080025f4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80025fe:	2300      	movs	r3, #0
 8002600:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002602:	4b74      	ldr	r3, [pc, #464]	; (80027d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	f003 0303 	and.w	r3, r3, #3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d018      	beq.n	8002640 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800260e:	4b71      	ldr	r3, [pc, #452]	; (80027d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	f003 0203 	and.w	r2, r3, #3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	429a      	cmp	r2, r3
 800261c:	d10d      	bne.n	800263a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
       ||
 8002622:	2b00      	cmp	r3, #0
 8002624:	d009      	beq.n	800263a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002626:	4b6b      	ldr	r3, [pc, #428]	; (80027d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	091b      	lsrs	r3, r3, #4
 800262c:	f003 0307 	and.w	r3, r3, #7
 8002630:	1c5a      	adds	r2, r3, #1
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
       ||
 8002636:	429a      	cmp	r2, r3
 8002638:	d047      	beq.n	80026ca <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	73fb      	strb	r3, [r7, #15]
 800263e:	e044      	b.n	80026ca <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2b03      	cmp	r3, #3
 8002646:	d018      	beq.n	800267a <RCCEx_PLLSAI1_Config+0x86>
 8002648:	2b03      	cmp	r3, #3
 800264a:	d825      	bhi.n	8002698 <RCCEx_PLLSAI1_Config+0xa4>
 800264c:	2b01      	cmp	r3, #1
 800264e:	d002      	beq.n	8002656 <RCCEx_PLLSAI1_Config+0x62>
 8002650:	2b02      	cmp	r3, #2
 8002652:	d009      	beq.n	8002668 <RCCEx_PLLSAI1_Config+0x74>
 8002654:	e020      	b.n	8002698 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002656:	4b5f      	ldr	r3, [pc, #380]	; (80027d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d11d      	bne.n	800269e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002666:	e01a      	b.n	800269e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002668:	4b5a      	ldr	r3, [pc, #360]	; (80027d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002670:	2b00      	cmp	r3, #0
 8002672:	d116      	bne.n	80026a2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002678:	e013      	b.n	80026a2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800267a:	4b56      	ldr	r3, [pc, #344]	; (80027d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d10f      	bne.n	80026a6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002686:	4b53      	ldr	r3, [pc, #332]	; (80027d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d109      	bne.n	80026a6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002696:	e006      	b.n	80026a6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	73fb      	strb	r3, [r7, #15]
      break;
 800269c:	e004      	b.n	80026a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800269e:	bf00      	nop
 80026a0:	e002      	b.n	80026a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026a2:	bf00      	nop
 80026a4:	e000      	b.n	80026a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80026a8:	7bfb      	ldrb	r3, [r7, #15]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d10d      	bne.n	80026ca <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80026ae:	4b49      	ldr	r3, [pc, #292]	; (80027d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6819      	ldr	r1, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	3b01      	subs	r3, #1
 80026c0:	011b      	lsls	r3, r3, #4
 80026c2:	430b      	orrs	r3, r1
 80026c4:	4943      	ldr	r1, [pc, #268]	; (80027d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80026ca:	7bfb      	ldrb	r3, [r7, #15]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d17c      	bne.n	80027ca <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80026d0:	4b40      	ldr	r3, [pc, #256]	; (80027d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a3f      	ldr	r2, [pc, #252]	; (80027d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80026da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026dc:	f7fe f84c 	bl	8000778 <HAL_GetTick>
 80026e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026e2:	e009      	b.n	80026f8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026e4:	f7fe f848 	bl	8000778 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d902      	bls.n	80026f8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	73fb      	strb	r3, [r7, #15]
        break;
 80026f6:	e005      	b.n	8002704 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026f8:	4b36      	ldr	r3, [pc, #216]	; (80027d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d1ef      	bne.n	80026e4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002704:	7bfb      	ldrb	r3, [r7, #15]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d15f      	bne.n	80027ca <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d110      	bne.n	8002732 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002710:	4b30      	ldr	r3, [pc, #192]	; (80027d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002712:	691b      	ldr	r3, [r3, #16]
 8002714:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002718:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	6892      	ldr	r2, [r2, #8]
 8002720:	0211      	lsls	r1, r2, #8
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	68d2      	ldr	r2, [r2, #12]
 8002726:	06d2      	lsls	r2, r2, #27
 8002728:	430a      	orrs	r2, r1
 800272a:	492a      	ldr	r1, [pc, #168]	; (80027d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800272c:	4313      	orrs	r3, r2
 800272e:	610b      	str	r3, [r1, #16]
 8002730:	e027      	b.n	8002782 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d112      	bne.n	800275e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002738:	4b26      	ldr	r3, [pc, #152]	; (80027d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002740:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	6892      	ldr	r2, [r2, #8]
 8002748:	0211      	lsls	r1, r2, #8
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	6912      	ldr	r2, [r2, #16]
 800274e:	0852      	lsrs	r2, r2, #1
 8002750:	3a01      	subs	r2, #1
 8002752:	0552      	lsls	r2, r2, #21
 8002754:	430a      	orrs	r2, r1
 8002756:	491f      	ldr	r1, [pc, #124]	; (80027d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002758:	4313      	orrs	r3, r2
 800275a:	610b      	str	r3, [r1, #16]
 800275c:	e011      	b.n	8002782 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800275e:	4b1d      	ldr	r3, [pc, #116]	; (80027d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002766:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	6892      	ldr	r2, [r2, #8]
 800276e:	0211      	lsls	r1, r2, #8
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	6952      	ldr	r2, [r2, #20]
 8002774:	0852      	lsrs	r2, r2, #1
 8002776:	3a01      	subs	r2, #1
 8002778:	0652      	lsls	r2, r2, #25
 800277a:	430a      	orrs	r2, r1
 800277c:	4915      	ldr	r1, [pc, #84]	; (80027d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800277e:	4313      	orrs	r3, r2
 8002780:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002782:	4b14      	ldr	r3, [pc, #80]	; (80027d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a13      	ldr	r2, [pc, #76]	; (80027d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002788:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800278c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800278e:	f7fd fff3 	bl	8000778 <HAL_GetTick>
 8002792:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002794:	e009      	b.n	80027aa <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002796:	f7fd ffef 	bl	8000778 <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d902      	bls.n	80027aa <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	73fb      	strb	r3, [r7, #15]
          break;
 80027a8:	e005      	b.n	80027b6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80027aa:	4b0a      	ldr	r3, [pc, #40]	; (80027d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d0ef      	beq.n	8002796 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80027b6:	7bfb      	ldrb	r3, [r7, #15]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d106      	bne.n	80027ca <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80027bc:	4b05      	ldr	r3, [pc, #20]	; (80027d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027be:	691a      	ldr	r2, [r3, #16]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	4903      	ldr	r1, [pc, #12]	; (80027d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80027ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3710      	adds	r7, #16
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40021000 	.word	0x40021000

080027d8 <__NVIC_SetPriority>:
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	4603      	mov	r3, r0
 80027e0:	6039      	str	r1, [r7, #0]
 80027e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	db0a      	blt.n	8002802 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	b2da      	uxtb	r2, r3
 80027f0:	490c      	ldr	r1, [pc, #48]	; (8002824 <__NVIC_SetPriority+0x4c>)
 80027f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f6:	0112      	lsls	r2, r2, #4
 80027f8:	b2d2      	uxtb	r2, r2
 80027fa:	440b      	add	r3, r1
 80027fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002800:	e00a      	b.n	8002818 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	b2da      	uxtb	r2, r3
 8002806:	4908      	ldr	r1, [pc, #32]	; (8002828 <__NVIC_SetPriority+0x50>)
 8002808:	79fb      	ldrb	r3, [r7, #7]
 800280a:	f003 030f 	and.w	r3, r3, #15
 800280e:	3b04      	subs	r3, #4
 8002810:	0112      	lsls	r2, r2, #4
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	440b      	add	r3, r1
 8002816:	761a      	strb	r2, [r3, #24]
}
 8002818:	bf00      	nop
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr
 8002824:	e000e100 	.word	0xe000e100
 8002828:	e000ed00 	.word	0xe000ed00

0800282c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002830:	2100      	movs	r1, #0
 8002832:	f06f 0004 	mvn.w	r0, #4
 8002836:	f7ff ffcf 	bl	80027d8 <__NVIC_SetPriority>
#endif
}
 800283a:	bf00      	nop
 800283c:	bd80      	pop	{r7, pc}
	...

08002840 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002846:	f3ef 8305 	mrs	r3, IPSR
 800284a:	603b      	str	r3, [r7, #0]
  return(result);
 800284c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800284e:	2b00      	cmp	r3, #0
 8002850:	d003      	beq.n	800285a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002852:	f06f 0305 	mvn.w	r3, #5
 8002856:	607b      	str	r3, [r7, #4]
 8002858:	e00c      	b.n	8002874 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800285a:	4b0a      	ldr	r3, [pc, #40]	; (8002884 <osKernelInitialize+0x44>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d105      	bne.n	800286e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002862:	4b08      	ldr	r3, [pc, #32]	; (8002884 <osKernelInitialize+0x44>)
 8002864:	2201      	movs	r2, #1
 8002866:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002868:	2300      	movs	r3, #0
 800286a:	607b      	str	r3, [r7, #4]
 800286c:	e002      	b.n	8002874 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800286e:	f04f 33ff 	mov.w	r3, #4294967295
 8002872:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002874:	687b      	ldr	r3, [r7, #4]
}
 8002876:	4618      	mov	r0, r3
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	20000030 	.word	0x20000030

08002888 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800288e:	f3ef 8305 	mrs	r3, IPSR
 8002892:	603b      	str	r3, [r7, #0]
  return(result);
 8002894:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002896:	2b00      	cmp	r3, #0
 8002898:	d003      	beq.n	80028a2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800289a:	f06f 0305 	mvn.w	r3, #5
 800289e:	607b      	str	r3, [r7, #4]
 80028a0:	e010      	b.n	80028c4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80028a2:	4b0b      	ldr	r3, [pc, #44]	; (80028d0 <osKernelStart+0x48>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d109      	bne.n	80028be <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80028aa:	f7ff ffbf 	bl	800282c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80028ae:	4b08      	ldr	r3, [pc, #32]	; (80028d0 <osKernelStart+0x48>)
 80028b0:	2202      	movs	r2, #2
 80028b2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80028b4:	f001 f866 	bl	8003984 <vTaskStartScheduler>
      stat = osOK;
 80028b8:	2300      	movs	r3, #0
 80028ba:	607b      	str	r3, [r7, #4]
 80028bc:	e002      	b.n	80028c4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80028be:	f04f 33ff 	mov.w	r3, #4294967295
 80028c2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80028c4:	687b      	ldr	r3, [r7, #4]
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3708      	adds	r7, #8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	20000030 	.word	0x20000030

080028d4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b08e      	sub	sp, #56	; 0x38
 80028d8:	af04      	add	r7, sp, #16
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80028e0:	2300      	movs	r3, #0
 80028e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028e4:	f3ef 8305 	mrs	r3, IPSR
 80028e8:	617b      	str	r3, [r7, #20]
  return(result);
 80028ea:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d17e      	bne.n	80029ee <osThreadNew+0x11a>
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d07b      	beq.n	80029ee <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80028f6:	2380      	movs	r3, #128	; 0x80
 80028f8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80028fa:	2318      	movs	r3, #24
 80028fc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80028fe:	2300      	movs	r3, #0
 8002900:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002902:	f04f 33ff 	mov.w	r3, #4294967295
 8002906:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d045      	beq.n	800299a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d002      	beq.n	800291c <osThreadNew+0x48>
        name = attr->name;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d002      	beq.n	800292a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d008      	beq.n	8002942 <osThreadNew+0x6e>
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	2b38      	cmp	r3, #56	; 0x38
 8002934:	d805      	bhi.n	8002942 <osThreadNew+0x6e>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <osThreadNew+0x72>
        return (NULL);
 8002942:	2300      	movs	r3, #0
 8002944:	e054      	b.n	80029f0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d003      	beq.n	8002956 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	089b      	lsrs	r3, r3, #2
 8002954:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00e      	beq.n	800297c <osThreadNew+0xa8>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	2b5b      	cmp	r3, #91	; 0x5b
 8002964:	d90a      	bls.n	800297c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800296a:	2b00      	cmp	r3, #0
 800296c:	d006      	beq.n	800297c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d002      	beq.n	800297c <osThreadNew+0xa8>
        mem = 1;
 8002976:	2301      	movs	r3, #1
 8002978:	61bb      	str	r3, [r7, #24]
 800297a:	e010      	b.n	800299e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d10c      	bne.n	800299e <osThreadNew+0xca>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d108      	bne.n	800299e <osThreadNew+0xca>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d104      	bne.n	800299e <osThreadNew+0xca>
          mem = 0;
 8002994:	2300      	movs	r3, #0
 8002996:	61bb      	str	r3, [r7, #24]
 8002998:	e001      	b.n	800299e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800299a:	2300      	movs	r3, #0
 800299c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d110      	bne.n	80029c6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80029ac:	9202      	str	r2, [sp, #8]
 80029ae:	9301      	str	r3, [sp, #4]
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	9300      	str	r3, [sp, #0]
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	6a3a      	ldr	r2, [r7, #32]
 80029b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029ba:	68f8      	ldr	r0, [r7, #12]
 80029bc:	f000 fe0c 	bl	80035d8 <xTaskCreateStatic>
 80029c0:	4603      	mov	r3, r0
 80029c2:	613b      	str	r3, [r7, #16]
 80029c4:	e013      	b.n	80029ee <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d110      	bne.n	80029ee <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80029cc:	6a3b      	ldr	r3, [r7, #32]
 80029ce:	b29a      	uxth	r2, r3
 80029d0:	f107 0310 	add.w	r3, r7, #16
 80029d4:	9301      	str	r3, [sp, #4]
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	9300      	str	r3, [sp, #0]
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029de:	68f8      	ldr	r0, [r7, #12]
 80029e0:	f000 fe57 	bl	8003692 <xTaskCreate>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d001      	beq.n	80029ee <osThreadNew+0x11a>
            hTask = NULL;
 80029ea:	2300      	movs	r3, #0
 80029ec:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80029ee:	693b      	ldr	r3, [r7, #16]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3728      	adds	r7, #40	; 0x28
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a00:	f3ef 8305 	mrs	r3, IPSR
 8002a04:	60bb      	str	r3, [r7, #8]
  return(result);
 8002a06:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d003      	beq.n	8002a14 <osDelay+0x1c>
    stat = osErrorISR;
 8002a0c:	f06f 0305 	mvn.w	r3, #5
 8002a10:	60fb      	str	r3, [r7, #12]
 8002a12:	e007      	b.n	8002a24 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002a14:	2300      	movs	r3, #0
 8002a16:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d002      	beq.n	8002a24 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 ff7c 	bl	800391c <vTaskDelay>
    }
  }

  return (stat);
 8002a24:	68fb      	ldr	r3, [r7, #12]
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
	...

08002a30 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	4a07      	ldr	r2, [pc, #28]	; (8002a5c <vApplicationGetIdleTaskMemory+0x2c>)
 8002a40:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	4a06      	ldr	r2, [pc, #24]	; (8002a60 <vApplicationGetIdleTaskMemory+0x30>)
 8002a46:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2280      	movs	r2, #128	; 0x80
 8002a4c:	601a      	str	r2, [r3, #0]
}
 8002a4e:	bf00      	nop
 8002a50:	3714      	adds	r7, #20
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	20000034 	.word	0x20000034
 8002a60:	20000090 	.word	0x20000090

08002a64 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002a64:	b480      	push	{r7}
 8002a66:	b085      	sub	sp, #20
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	4a07      	ldr	r2, [pc, #28]	; (8002a90 <vApplicationGetTimerTaskMemory+0x2c>)
 8002a74:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	4a06      	ldr	r2, [pc, #24]	; (8002a94 <vApplicationGetTimerTaskMemory+0x30>)
 8002a7a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a82:	601a      	str	r2, [r3, #0]
}
 8002a84:	bf00      	nop
 8002a86:	3714      	adds	r7, #20
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr
 8002a90:	20000290 	.word	0x20000290
 8002a94:	200002ec 	.word	0x200002ec

08002a98 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f103 0208 	add.w	r2, r3, #8
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f04f 32ff 	mov.w	r2, #4294967295
 8002ab0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f103 0208 	add.w	r2, r3, #8
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f103 0208 	add.w	r2, r3, #8
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002acc:	bf00      	nop
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002ae6:	bf00      	nop
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr

08002af2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002af2:	b480      	push	{r7}
 8002af4:	b085      	sub	sp, #20
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
 8002afa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	68fa      	ldr	r2, [r7, #12]
 8002b06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	689a      	ldr	r2, [r3, #8]
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	683a      	ldr	r2, [r7, #0]
 8002b16:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	683a      	ldr	r2, [r7, #0]
 8002b1c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	1c5a      	adds	r2, r3, #1
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	601a      	str	r2, [r3, #0]
}
 8002b2e:	bf00      	nop
 8002b30:	3714      	adds	r7, #20
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr

08002b3a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	b085      	sub	sp, #20
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
 8002b42:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b50:	d103      	bne.n	8002b5a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	60fb      	str	r3, [r7, #12]
 8002b58:	e00c      	b.n	8002b74 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	3308      	adds	r3, #8
 8002b5e:	60fb      	str	r3, [r7, #12]
 8002b60:	e002      	b.n	8002b68 <vListInsert+0x2e>
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	60fb      	str	r3, [r7, #12]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	68ba      	ldr	r2, [r7, #8]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d2f6      	bcs.n	8002b62 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	685a      	ldr	r2, [r3, #4]
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	683a      	ldr	r2, [r7, #0]
 8002b8e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	1c5a      	adds	r2, r3, #1
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	601a      	str	r2, [r3, #0]
}
 8002ba0:	bf00      	nop
 8002ba2:	3714      	adds	r7, #20
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002bac:	b480      	push	{r7}
 8002bae:	b085      	sub	sp, #20
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	691b      	ldr	r3, [r3, #16]
 8002bb8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	6892      	ldr	r2, [r2, #8]
 8002bc2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	6852      	ldr	r2, [r2, #4]
 8002bcc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d103      	bne.n	8002be0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689a      	ldr	r2, [r3, #8]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	1e5a      	subs	r2, r3, #1
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3714      	adds	r7, #20
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d10a      	bne.n	8002c2a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c18:	f383 8811 	msr	BASEPRI, r3
 8002c1c:	f3bf 8f6f 	isb	sy
 8002c20:	f3bf 8f4f 	dsb	sy
 8002c24:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002c26:	bf00      	nop
 8002c28:	e7fe      	b.n	8002c28 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002c2a:	f002 f84b 	bl	8004cc4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c36:	68f9      	ldr	r1, [r7, #12]
 8002c38:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002c3a:	fb01 f303 	mul.w	r3, r1, r3
 8002c3e:	441a      	add	r2, r3
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2200      	movs	r2, #0
 8002c48:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	68f9      	ldr	r1, [r7, #12]
 8002c5e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002c60:	fb01 f303 	mul.w	r3, r1, r3
 8002c64:	441a      	add	r2, r3
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	22ff      	movs	r2, #255	; 0xff
 8002c6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	22ff      	movs	r2, #255	; 0xff
 8002c76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d114      	bne.n	8002caa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	691b      	ldr	r3, [r3, #16]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d01a      	beq.n	8002cbe <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	3310      	adds	r3, #16
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f001 f903 	bl	8003e98 <xTaskRemoveFromEventList>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d012      	beq.n	8002cbe <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002c98:	4b0c      	ldr	r3, [pc, #48]	; (8002ccc <xQueueGenericReset+0xcc>)
 8002c9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c9e:	601a      	str	r2, [r3, #0]
 8002ca0:	f3bf 8f4f 	dsb	sy
 8002ca4:	f3bf 8f6f 	isb	sy
 8002ca8:	e009      	b.n	8002cbe <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	3310      	adds	r3, #16
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7ff fef2 	bl	8002a98 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	3324      	adds	r3, #36	; 0x24
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7ff feed 	bl	8002a98 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002cbe:	f002 f831 	bl	8004d24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002cc2:	2301      	movs	r3, #1
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3710      	adds	r7, #16
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	e000ed04 	.word	0xe000ed04

08002cd0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b08e      	sub	sp, #56	; 0x38
 8002cd4:	af02      	add	r7, sp, #8
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	607a      	str	r2, [r7, #4]
 8002cdc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d10a      	bne.n	8002cfa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ce8:	f383 8811 	msr	BASEPRI, r3
 8002cec:	f3bf 8f6f 	isb	sy
 8002cf0:	f3bf 8f4f 	dsb	sy
 8002cf4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002cf6:	bf00      	nop
 8002cf8:	e7fe      	b.n	8002cf8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d10a      	bne.n	8002d16 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d04:	f383 8811 	msr	BASEPRI, r3
 8002d08:	f3bf 8f6f 	isb	sy
 8002d0c:	f3bf 8f4f 	dsb	sy
 8002d10:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002d12:	bf00      	nop
 8002d14:	e7fe      	b.n	8002d14 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d002      	beq.n	8002d22 <xQueueGenericCreateStatic+0x52>
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <xQueueGenericCreateStatic+0x56>
 8002d22:	2301      	movs	r3, #1
 8002d24:	e000      	b.n	8002d28 <xQueueGenericCreateStatic+0x58>
 8002d26:	2300      	movs	r3, #0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d10a      	bne.n	8002d42 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d30:	f383 8811 	msr	BASEPRI, r3
 8002d34:	f3bf 8f6f 	isb	sy
 8002d38:	f3bf 8f4f 	dsb	sy
 8002d3c:	623b      	str	r3, [r7, #32]
}
 8002d3e:	bf00      	nop
 8002d40:	e7fe      	b.n	8002d40 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d102      	bne.n	8002d4e <xQueueGenericCreateStatic+0x7e>
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <xQueueGenericCreateStatic+0x82>
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e000      	b.n	8002d54 <xQueueGenericCreateStatic+0x84>
 8002d52:	2300      	movs	r3, #0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d10a      	bne.n	8002d6e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d5c:	f383 8811 	msr	BASEPRI, r3
 8002d60:	f3bf 8f6f 	isb	sy
 8002d64:	f3bf 8f4f 	dsb	sy
 8002d68:	61fb      	str	r3, [r7, #28]
}
 8002d6a:	bf00      	nop
 8002d6c:	e7fe      	b.n	8002d6c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002d6e:	2350      	movs	r3, #80	; 0x50
 8002d70:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	2b50      	cmp	r3, #80	; 0x50
 8002d76:	d00a      	beq.n	8002d8e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d7c:	f383 8811 	msr	BASEPRI, r3
 8002d80:	f3bf 8f6f 	isb	sy
 8002d84:	f3bf 8f4f 	dsb	sy
 8002d88:	61bb      	str	r3, [r7, #24]
}
 8002d8a:	bf00      	nop
 8002d8c:	e7fe      	b.n	8002d8c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002d8e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00d      	beq.n	8002db6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002da2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da8:	9300      	str	r3, [sp, #0]
 8002daa:	4613      	mov	r3, r2
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	68b9      	ldr	r1, [r7, #8]
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f000 f805 	bl	8002dc0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3730      	adds	r7, #48	; 0x30
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
 8002dcc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d103      	bne.n	8002ddc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	e002      	b.n	8002de2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	68ba      	ldr	r2, [r7, #8]
 8002dec:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002dee:	2101      	movs	r1, #1
 8002df0:	69b8      	ldr	r0, [r7, #24]
 8002df2:	f7ff ff05 	bl	8002c00 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	78fa      	ldrb	r2, [r7, #3]
 8002dfa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002dfe:	bf00      	nop
 8002e00:	3710      	adds	r7, #16
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
	...

08002e08 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b08e      	sub	sp, #56	; 0x38
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	607a      	str	r2, [r7, #4]
 8002e14:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002e16:	2300      	movs	r3, #0
 8002e18:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d10a      	bne.n	8002e3a <xQueueGenericSend+0x32>
	__asm volatile
 8002e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e28:	f383 8811 	msr	BASEPRI, r3
 8002e2c:	f3bf 8f6f 	isb	sy
 8002e30:	f3bf 8f4f 	dsb	sy
 8002e34:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002e36:	bf00      	nop
 8002e38:	e7fe      	b.n	8002e38 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d103      	bne.n	8002e48 <xQueueGenericSend+0x40>
 8002e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d101      	bne.n	8002e4c <xQueueGenericSend+0x44>
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e000      	b.n	8002e4e <xQueueGenericSend+0x46>
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d10a      	bne.n	8002e68 <xQueueGenericSend+0x60>
	__asm volatile
 8002e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e56:	f383 8811 	msr	BASEPRI, r3
 8002e5a:	f3bf 8f6f 	isb	sy
 8002e5e:	f3bf 8f4f 	dsb	sy
 8002e62:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002e64:	bf00      	nop
 8002e66:	e7fe      	b.n	8002e66 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d103      	bne.n	8002e76 <xQueueGenericSend+0x6e>
 8002e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d101      	bne.n	8002e7a <xQueueGenericSend+0x72>
 8002e76:	2301      	movs	r3, #1
 8002e78:	e000      	b.n	8002e7c <xQueueGenericSend+0x74>
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d10a      	bne.n	8002e96 <xQueueGenericSend+0x8e>
	__asm volatile
 8002e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e84:	f383 8811 	msr	BASEPRI, r3
 8002e88:	f3bf 8f6f 	isb	sy
 8002e8c:	f3bf 8f4f 	dsb	sy
 8002e90:	623b      	str	r3, [r7, #32]
}
 8002e92:	bf00      	nop
 8002e94:	e7fe      	b.n	8002e94 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e96:	f001 f9bd 	bl	8004214 <xTaskGetSchedulerState>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d102      	bne.n	8002ea6 <xQueueGenericSend+0x9e>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <xQueueGenericSend+0xa2>
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e000      	b.n	8002eac <xQueueGenericSend+0xa4>
 8002eaa:	2300      	movs	r3, #0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d10a      	bne.n	8002ec6 <xQueueGenericSend+0xbe>
	__asm volatile
 8002eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb4:	f383 8811 	msr	BASEPRI, r3
 8002eb8:	f3bf 8f6f 	isb	sy
 8002ebc:	f3bf 8f4f 	dsb	sy
 8002ec0:	61fb      	str	r3, [r7, #28]
}
 8002ec2:	bf00      	nop
 8002ec4:	e7fe      	b.n	8002ec4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002ec6:	f001 fefd 	bl	8004cc4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ecc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d302      	bcc.n	8002edc <xQueueGenericSend+0xd4>
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d129      	bne.n	8002f30 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002edc:	683a      	ldr	r2, [r7, #0]
 8002ede:	68b9      	ldr	r1, [r7, #8]
 8002ee0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ee2:	f000 fa0b 	bl	80032fc <prvCopyDataToQueue>
 8002ee6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d010      	beq.n	8002f12 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef2:	3324      	adds	r3, #36	; 0x24
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f000 ffcf 	bl	8003e98 <xTaskRemoveFromEventList>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d013      	beq.n	8002f28 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002f00:	4b3f      	ldr	r3, [pc, #252]	; (8003000 <xQueueGenericSend+0x1f8>)
 8002f02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f06:	601a      	str	r2, [r3, #0]
 8002f08:	f3bf 8f4f 	dsb	sy
 8002f0c:	f3bf 8f6f 	isb	sy
 8002f10:	e00a      	b.n	8002f28 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d007      	beq.n	8002f28 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002f18:	4b39      	ldr	r3, [pc, #228]	; (8003000 <xQueueGenericSend+0x1f8>)
 8002f1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f1e:	601a      	str	r2, [r3, #0]
 8002f20:	f3bf 8f4f 	dsb	sy
 8002f24:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002f28:	f001 fefc 	bl	8004d24 <vPortExitCritical>
				return pdPASS;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e063      	b.n	8002ff8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d103      	bne.n	8002f3e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002f36:	f001 fef5 	bl	8004d24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	e05c      	b.n	8002ff8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d106      	bne.n	8002f52 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f44:	f107 0314 	add.w	r3, r7, #20
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f001 f809 	bl	8003f60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f52:	f001 fee7 	bl	8004d24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f56:	f000 fd7b 	bl	8003a50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f5a:	f001 feb3 	bl	8004cc4 <vPortEnterCritical>
 8002f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f64:	b25b      	sxtb	r3, r3
 8002f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f6a:	d103      	bne.n	8002f74 <xQueueGenericSend+0x16c>
 8002f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f7a:	b25b      	sxtb	r3, r3
 8002f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f80:	d103      	bne.n	8002f8a <xQueueGenericSend+0x182>
 8002f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f8a:	f001 fecb 	bl	8004d24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f8e:	1d3a      	adds	r2, r7, #4
 8002f90:	f107 0314 	add.w	r3, r7, #20
 8002f94:	4611      	mov	r1, r2
 8002f96:	4618      	mov	r0, r3
 8002f98:	f000 fff8 	bl	8003f8c <xTaskCheckForTimeOut>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d124      	bne.n	8002fec <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002fa2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fa4:	f000 faa2 	bl	80034ec <prvIsQueueFull>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d018      	beq.n	8002fe0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb0:	3310      	adds	r3, #16
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	4611      	mov	r1, r2
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f000 ff1e 	bl	8003df8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002fbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fbe:	f000 fa2d 	bl	800341c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002fc2:	f000 fd53 	bl	8003a6c <xTaskResumeAll>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	f47f af7c 	bne.w	8002ec6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002fce:	4b0c      	ldr	r3, [pc, #48]	; (8003000 <xQueueGenericSend+0x1f8>)
 8002fd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fd4:	601a      	str	r2, [r3, #0]
 8002fd6:	f3bf 8f4f 	dsb	sy
 8002fda:	f3bf 8f6f 	isb	sy
 8002fde:	e772      	b.n	8002ec6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002fe0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fe2:	f000 fa1b 	bl	800341c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002fe6:	f000 fd41 	bl	8003a6c <xTaskResumeAll>
 8002fea:	e76c      	b.n	8002ec6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002fec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fee:	f000 fa15 	bl	800341c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002ff2:	f000 fd3b 	bl	8003a6c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002ff6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3738      	adds	r7, #56	; 0x38
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	e000ed04 	.word	0xe000ed04

08003004 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b090      	sub	sp, #64	; 0x40
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
 8003010:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003018:	2b00      	cmp	r3, #0
 800301a:	d10a      	bne.n	8003032 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800301c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003020:	f383 8811 	msr	BASEPRI, r3
 8003024:	f3bf 8f6f 	isb	sy
 8003028:	f3bf 8f4f 	dsb	sy
 800302c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800302e:	bf00      	nop
 8003030:	e7fe      	b.n	8003030 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d103      	bne.n	8003040 <xQueueGenericSendFromISR+0x3c>
 8003038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800303a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303c:	2b00      	cmp	r3, #0
 800303e:	d101      	bne.n	8003044 <xQueueGenericSendFromISR+0x40>
 8003040:	2301      	movs	r3, #1
 8003042:	e000      	b.n	8003046 <xQueueGenericSendFromISR+0x42>
 8003044:	2300      	movs	r3, #0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d10a      	bne.n	8003060 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800304a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800304e:	f383 8811 	msr	BASEPRI, r3
 8003052:	f3bf 8f6f 	isb	sy
 8003056:	f3bf 8f4f 	dsb	sy
 800305a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800305c:	bf00      	nop
 800305e:	e7fe      	b.n	800305e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	2b02      	cmp	r3, #2
 8003064:	d103      	bne.n	800306e <xQueueGenericSendFromISR+0x6a>
 8003066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800306a:	2b01      	cmp	r3, #1
 800306c:	d101      	bne.n	8003072 <xQueueGenericSendFromISR+0x6e>
 800306e:	2301      	movs	r3, #1
 8003070:	e000      	b.n	8003074 <xQueueGenericSendFromISR+0x70>
 8003072:	2300      	movs	r3, #0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d10a      	bne.n	800308e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800307c:	f383 8811 	msr	BASEPRI, r3
 8003080:	f3bf 8f6f 	isb	sy
 8003084:	f3bf 8f4f 	dsb	sy
 8003088:	623b      	str	r3, [r7, #32]
}
 800308a:	bf00      	nop
 800308c:	e7fe      	b.n	800308c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800308e:	f001 fefb 	bl	8004e88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003092:	f3ef 8211 	mrs	r2, BASEPRI
 8003096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800309a:	f383 8811 	msr	BASEPRI, r3
 800309e:	f3bf 8f6f 	isb	sy
 80030a2:	f3bf 8f4f 	dsb	sy
 80030a6:	61fa      	str	r2, [r7, #28]
 80030a8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80030aa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80030ac:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80030ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d302      	bcc.n	80030c0 <xQueueGenericSendFromISR+0xbc>
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d12f      	bne.n	8003120 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80030c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ce:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80030d0:	683a      	ldr	r2, [r7, #0]
 80030d2:	68b9      	ldr	r1, [r7, #8]
 80030d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80030d6:	f000 f911 	bl	80032fc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80030da:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80030de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e2:	d112      	bne.n	800310a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d016      	beq.n	800311a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ee:	3324      	adds	r3, #36	; 0x24
 80030f0:	4618      	mov	r0, r3
 80030f2:	f000 fed1 	bl	8003e98 <xTaskRemoveFromEventList>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00e      	beq.n	800311a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00b      	beq.n	800311a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2201      	movs	r2, #1
 8003106:	601a      	str	r2, [r3, #0]
 8003108:	e007      	b.n	800311a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800310a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800310e:	3301      	adds	r3, #1
 8003110:	b2db      	uxtb	r3, r3
 8003112:	b25a      	sxtb	r2, r3
 8003114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003116:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800311a:	2301      	movs	r3, #1
 800311c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800311e:	e001      	b.n	8003124 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003120:	2300      	movs	r3, #0
 8003122:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003126:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800312e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003132:	4618      	mov	r0, r3
 8003134:	3740      	adds	r7, #64	; 0x40
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
	...

0800313c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b08c      	sub	sp, #48	; 0x30
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003148:	2300      	movs	r3, #0
 800314a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003152:	2b00      	cmp	r3, #0
 8003154:	d10a      	bne.n	800316c <xQueueReceive+0x30>
	__asm volatile
 8003156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800315a:	f383 8811 	msr	BASEPRI, r3
 800315e:	f3bf 8f6f 	isb	sy
 8003162:	f3bf 8f4f 	dsb	sy
 8003166:	623b      	str	r3, [r7, #32]
}
 8003168:	bf00      	nop
 800316a:	e7fe      	b.n	800316a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d103      	bne.n	800317a <xQueueReceive+0x3e>
 8003172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003176:	2b00      	cmp	r3, #0
 8003178:	d101      	bne.n	800317e <xQueueReceive+0x42>
 800317a:	2301      	movs	r3, #1
 800317c:	e000      	b.n	8003180 <xQueueReceive+0x44>
 800317e:	2300      	movs	r3, #0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d10a      	bne.n	800319a <xQueueReceive+0x5e>
	__asm volatile
 8003184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003188:	f383 8811 	msr	BASEPRI, r3
 800318c:	f3bf 8f6f 	isb	sy
 8003190:	f3bf 8f4f 	dsb	sy
 8003194:	61fb      	str	r3, [r7, #28]
}
 8003196:	bf00      	nop
 8003198:	e7fe      	b.n	8003198 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800319a:	f001 f83b 	bl	8004214 <xTaskGetSchedulerState>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d102      	bne.n	80031aa <xQueueReceive+0x6e>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d101      	bne.n	80031ae <xQueueReceive+0x72>
 80031aa:	2301      	movs	r3, #1
 80031ac:	e000      	b.n	80031b0 <xQueueReceive+0x74>
 80031ae:	2300      	movs	r3, #0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d10a      	bne.n	80031ca <xQueueReceive+0x8e>
	__asm volatile
 80031b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b8:	f383 8811 	msr	BASEPRI, r3
 80031bc:	f3bf 8f6f 	isb	sy
 80031c0:	f3bf 8f4f 	dsb	sy
 80031c4:	61bb      	str	r3, [r7, #24]
}
 80031c6:	bf00      	nop
 80031c8:	e7fe      	b.n	80031c8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80031ca:	f001 fd7b 	bl	8004cc4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80031ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80031d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d01f      	beq.n	800321a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80031da:	68b9      	ldr	r1, [r7, #8]
 80031dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031de:	f000 f8f7 	bl	80033d0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80031e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e4:	1e5a      	subs	r2, r3, #1
 80031e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031e8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00f      	beq.n	8003212 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f4:	3310      	adds	r3, #16
 80031f6:	4618      	mov	r0, r3
 80031f8:	f000 fe4e 	bl	8003e98 <xTaskRemoveFromEventList>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d007      	beq.n	8003212 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003202:	4b3d      	ldr	r3, [pc, #244]	; (80032f8 <xQueueReceive+0x1bc>)
 8003204:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003208:	601a      	str	r2, [r3, #0]
 800320a:	f3bf 8f4f 	dsb	sy
 800320e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003212:	f001 fd87 	bl	8004d24 <vPortExitCritical>
				return pdPASS;
 8003216:	2301      	movs	r3, #1
 8003218:	e069      	b.n	80032ee <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d103      	bne.n	8003228 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003220:	f001 fd80 	bl	8004d24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003224:	2300      	movs	r3, #0
 8003226:	e062      	b.n	80032ee <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800322a:	2b00      	cmp	r3, #0
 800322c:	d106      	bne.n	800323c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800322e:	f107 0310 	add.w	r3, r7, #16
 8003232:	4618      	mov	r0, r3
 8003234:	f000 fe94 	bl	8003f60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003238:	2301      	movs	r3, #1
 800323a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800323c:	f001 fd72 	bl	8004d24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003240:	f000 fc06 	bl	8003a50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003244:	f001 fd3e 	bl	8004cc4 <vPortEnterCritical>
 8003248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800324a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800324e:	b25b      	sxtb	r3, r3
 8003250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003254:	d103      	bne.n	800325e <xQueueReceive+0x122>
 8003256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003258:	2200      	movs	r2, #0
 800325a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800325e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003260:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003264:	b25b      	sxtb	r3, r3
 8003266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800326a:	d103      	bne.n	8003274 <xQueueReceive+0x138>
 800326c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800326e:	2200      	movs	r2, #0
 8003270:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003274:	f001 fd56 	bl	8004d24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003278:	1d3a      	adds	r2, r7, #4
 800327a:	f107 0310 	add.w	r3, r7, #16
 800327e:	4611      	mov	r1, r2
 8003280:	4618      	mov	r0, r3
 8003282:	f000 fe83 	bl	8003f8c <xTaskCheckForTimeOut>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d123      	bne.n	80032d4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800328c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800328e:	f000 f917 	bl	80034c0 <prvIsQueueEmpty>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d017      	beq.n	80032c8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800329a:	3324      	adds	r3, #36	; 0x24
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	4611      	mov	r1, r2
 80032a0:	4618      	mov	r0, r3
 80032a2:	f000 fda9 	bl	8003df8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80032a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032a8:	f000 f8b8 	bl	800341c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80032ac:	f000 fbde 	bl	8003a6c <xTaskResumeAll>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d189      	bne.n	80031ca <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80032b6:	4b10      	ldr	r3, [pc, #64]	; (80032f8 <xQueueReceive+0x1bc>)
 80032b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032bc:	601a      	str	r2, [r3, #0]
 80032be:	f3bf 8f4f 	dsb	sy
 80032c2:	f3bf 8f6f 	isb	sy
 80032c6:	e780      	b.n	80031ca <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80032c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032ca:	f000 f8a7 	bl	800341c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80032ce:	f000 fbcd 	bl	8003a6c <xTaskResumeAll>
 80032d2:	e77a      	b.n	80031ca <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80032d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032d6:	f000 f8a1 	bl	800341c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80032da:	f000 fbc7 	bl	8003a6c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80032de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032e0:	f000 f8ee 	bl	80034c0 <prvIsQueueEmpty>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	f43f af6f 	beq.w	80031ca <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80032ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3730      	adds	r7, #48	; 0x30
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	e000ed04 	.word	0xe000ed04

080032fc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b086      	sub	sp, #24
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003308:	2300      	movs	r3, #0
 800330a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003310:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003316:	2b00      	cmp	r3, #0
 8003318:	d10d      	bne.n	8003336 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d14d      	bne.n	80033be <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	4618      	mov	r0, r3
 8003328:	f000 ff92 	bl	8004250 <xTaskPriorityDisinherit>
 800332c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	609a      	str	r2, [r3, #8]
 8003334:	e043      	b.n	80033be <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d119      	bne.n	8003370 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6858      	ldr	r0, [r3, #4]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003344:	461a      	mov	r2, r3
 8003346:	68b9      	ldr	r1, [r7, #8]
 8003348:	f002 f84a 	bl	80053e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	685a      	ldr	r2, [r3, #4]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003354:	441a      	add	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	685a      	ldr	r2, [r3, #4]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	429a      	cmp	r2, r3
 8003364:	d32b      	bcc.n	80033be <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	605a      	str	r2, [r3, #4]
 800336e:	e026      	b.n	80033be <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	68d8      	ldr	r0, [r3, #12]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003378:	461a      	mov	r2, r3
 800337a:	68b9      	ldr	r1, [r7, #8]
 800337c:	f002 f830 	bl	80053e0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	68da      	ldr	r2, [r3, #12]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003388:	425b      	negs	r3, r3
 800338a:	441a      	add	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	68da      	ldr	r2, [r3, #12]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	429a      	cmp	r2, r3
 800339a:	d207      	bcs.n	80033ac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	689a      	ldr	r2, [r3, #8]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a4:	425b      	negs	r3, r3
 80033a6:	441a      	add	r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d105      	bne.n	80033be <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d002      	beq.n	80033be <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	3b01      	subs	r3, #1
 80033bc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	1c5a      	adds	r2, r3, #1
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80033c6:	697b      	ldr	r3, [r7, #20]
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3718      	adds	r7, #24
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d018      	beq.n	8003414 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	68da      	ldr	r2, [r3, #12]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ea:	441a      	add	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	68da      	ldr	r2, [r3, #12]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d303      	bcc.n	8003404 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	68d9      	ldr	r1, [r3, #12]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340c:	461a      	mov	r2, r3
 800340e:	6838      	ldr	r0, [r7, #0]
 8003410:	f001 ffe6 	bl	80053e0 <memcpy>
	}
}
 8003414:	bf00      	nop
 8003416:	3708      	adds	r7, #8
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003424:	f001 fc4e 	bl	8004cc4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800342e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003430:	e011      	b.n	8003456 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003436:	2b00      	cmp	r3, #0
 8003438:	d012      	beq.n	8003460 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	3324      	adds	r3, #36	; 0x24
 800343e:	4618      	mov	r0, r3
 8003440:	f000 fd2a 	bl	8003e98 <xTaskRemoveFromEventList>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d001      	beq.n	800344e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800344a:	f000 fe01 	bl	8004050 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800344e:	7bfb      	ldrb	r3, [r7, #15]
 8003450:	3b01      	subs	r3, #1
 8003452:	b2db      	uxtb	r3, r3
 8003454:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003456:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800345a:	2b00      	cmp	r3, #0
 800345c:	dce9      	bgt.n	8003432 <prvUnlockQueue+0x16>
 800345e:	e000      	b.n	8003462 <prvUnlockQueue+0x46>
					break;
 8003460:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	22ff      	movs	r2, #255	; 0xff
 8003466:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800346a:	f001 fc5b 	bl	8004d24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800346e:	f001 fc29 	bl	8004cc4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003478:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800347a:	e011      	b.n	80034a0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	691b      	ldr	r3, [r3, #16]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d012      	beq.n	80034aa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	3310      	adds	r3, #16
 8003488:	4618      	mov	r0, r3
 800348a:	f000 fd05 	bl	8003e98 <xTaskRemoveFromEventList>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d001      	beq.n	8003498 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003494:	f000 fddc 	bl	8004050 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003498:	7bbb      	ldrb	r3, [r7, #14]
 800349a:	3b01      	subs	r3, #1
 800349c:	b2db      	uxtb	r3, r3
 800349e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80034a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	dce9      	bgt.n	800347c <prvUnlockQueue+0x60>
 80034a8:	e000      	b.n	80034ac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80034aa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	22ff      	movs	r2, #255	; 0xff
 80034b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80034b4:	f001 fc36 	bl	8004d24 <vPortExitCritical>
}
 80034b8:	bf00      	nop
 80034ba:	3710      	adds	r7, #16
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80034c8:	f001 fbfc 	bl	8004cc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d102      	bne.n	80034da <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80034d4:	2301      	movs	r3, #1
 80034d6:	60fb      	str	r3, [r7, #12]
 80034d8:	e001      	b.n	80034de <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80034da:	2300      	movs	r3, #0
 80034dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80034de:	f001 fc21 	bl	8004d24 <vPortExitCritical>

	return xReturn;
 80034e2:	68fb      	ldr	r3, [r7, #12]
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3710      	adds	r7, #16
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80034f4:	f001 fbe6 	bl	8004cc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003500:	429a      	cmp	r2, r3
 8003502:	d102      	bne.n	800350a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003504:	2301      	movs	r3, #1
 8003506:	60fb      	str	r3, [r7, #12]
 8003508:	e001      	b.n	800350e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800350a:	2300      	movs	r3, #0
 800350c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800350e:	f001 fc09 	bl	8004d24 <vPortExitCritical>

	return xReturn;
 8003512:	68fb      	ldr	r3, [r7, #12]
}
 8003514:	4618      	mov	r0, r3
 8003516:	3710      	adds	r7, #16
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800351c:	b480      	push	{r7}
 800351e:	b085      	sub	sp, #20
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003526:	2300      	movs	r3, #0
 8003528:	60fb      	str	r3, [r7, #12]
 800352a:	e014      	b.n	8003556 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800352c:	4a0f      	ldr	r2, [pc, #60]	; (800356c <vQueueAddToRegistry+0x50>)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d10b      	bne.n	8003550 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003538:	490c      	ldr	r1, [pc, #48]	; (800356c <vQueueAddToRegistry+0x50>)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	683a      	ldr	r2, [r7, #0]
 800353e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003542:	4a0a      	ldr	r2, [pc, #40]	; (800356c <vQueueAddToRegistry+0x50>)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	00db      	lsls	r3, r3, #3
 8003548:	4413      	add	r3, r2
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800354e:	e006      	b.n	800355e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	3301      	adds	r3, #1
 8003554:	60fb      	str	r3, [r7, #12]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2b07      	cmp	r3, #7
 800355a:	d9e7      	bls.n	800352c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800355c:	bf00      	nop
 800355e:	bf00      	nop
 8003560:	3714      	adds	r7, #20
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	2000196c 	.word	0x2000196c

08003570 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003570:	b580      	push	{r7, lr}
 8003572:	b086      	sub	sp, #24
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003580:	f001 fba0 	bl	8004cc4 <vPortEnterCritical>
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800358a:	b25b      	sxtb	r3, r3
 800358c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003590:	d103      	bne.n	800359a <vQueueWaitForMessageRestricted+0x2a>
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035a0:	b25b      	sxtb	r3, r3
 80035a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a6:	d103      	bne.n	80035b0 <vQueueWaitForMessageRestricted+0x40>
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035b0:	f001 fbb8 	bl	8004d24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d106      	bne.n	80035ca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	3324      	adds	r3, #36	; 0x24
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	68b9      	ldr	r1, [r7, #8]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f000 fc3b 	bl	8003e40 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80035ca:	6978      	ldr	r0, [r7, #20]
 80035cc:	f7ff ff26 	bl	800341c <prvUnlockQueue>
	}
 80035d0:	bf00      	nop
 80035d2:	3718      	adds	r7, #24
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b08e      	sub	sp, #56	; 0x38
 80035dc:	af04      	add	r7, sp, #16
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	607a      	str	r2, [r7, #4]
 80035e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80035e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d10a      	bne.n	8003602 <xTaskCreateStatic+0x2a>
	__asm volatile
 80035ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f0:	f383 8811 	msr	BASEPRI, r3
 80035f4:	f3bf 8f6f 	isb	sy
 80035f8:	f3bf 8f4f 	dsb	sy
 80035fc:	623b      	str	r3, [r7, #32]
}
 80035fe:	bf00      	nop
 8003600:	e7fe      	b.n	8003600 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003604:	2b00      	cmp	r3, #0
 8003606:	d10a      	bne.n	800361e <xTaskCreateStatic+0x46>
	__asm volatile
 8003608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800360c:	f383 8811 	msr	BASEPRI, r3
 8003610:	f3bf 8f6f 	isb	sy
 8003614:	f3bf 8f4f 	dsb	sy
 8003618:	61fb      	str	r3, [r7, #28]
}
 800361a:	bf00      	nop
 800361c:	e7fe      	b.n	800361c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800361e:	235c      	movs	r3, #92	; 0x5c
 8003620:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	2b5c      	cmp	r3, #92	; 0x5c
 8003626:	d00a      	beq.n	800363e <xTaskCreateStatic+0x66>
	__asm volatile
 8003628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800362c:	f383 8811 	msr	BASEPRI, r3
 8003630:	f3bf 8f6f 	isb	sy
 8003634:	f3bf 8f4f 	dsb	sy
 8003638:	61bb      	str	r3, [r7, #24]
}
 800363a:	bf00      	nop
 800363c:	e7fe      	b.n	800363c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800363e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003642:	2b00      	cmp	r3, #0
 8003644:	d01e      	beq.n	8003684 <xTaskCreateStatic+0xac>
 8003646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003648:	2b00      	cmp	r3, #0
 800364a:	d01b      	beq.n	8003684 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800364c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800364e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003652:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003654:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003658:	2202      	movs	r2, #2
 800365a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800365e:	2300      	movs	r3, #0
 8003660:	9303      	str	r3, [sp, #12]
 8003662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003664:	9302      	str	r3, [sp, #8]
 8003666:	f107 0314 	add.w	r3, r7, #20
 800366a:	9301      	str	r3, [sp, #4]
 800366c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800366e:	9300      	str	r3, [sp, #0]
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	68b9      	ldr	r1, [r7, #8]
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f000 f850 	bl	800371c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800367c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800367e:	f000 f8dd 	bl	800383c <prvAddNewTaskToReadyList>
 8003682:	e001      	b.n	8003688 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003684:	2300      	movs	r3, #0
 8003686:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003688:	697b      	ldr	r3, [r7, #20]
	}
 800368a:	4618      	mov	r0, r3
 800368c:	3728      	adds	r7, #40	; 0x28
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003692:	b580      	push	{r7, lr}
 8003694:	b08c      	sub	sp, #48	; 0x30
 8003696:	af04      	add	r7, sp, #16
 8003698:	60f8      	str	r0, [r7, #12]
 800369a:	60b9      	str	r1, [r7, #8]
 800369c:	603b      	str	r3, [r7, #0]
 800369e:	4613      	mov	r3, r2
 80036a0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80036a2:	88fb      	ldrh	r3, [r7, #6]
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	4618      	mov	r0, r3
 80036a8:	f001 fc2e 	bl	8004f08 <pvPortMalloc>
 80036ac:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00e      	beq.n	80036d2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80036b4:	205c      	movs	r0, #92	; 0x5c
 80036b6:	f001 fc27 	bl	8004f08 <pvPortMalloc>
 80036ba:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d003      	beq.n	80036ca <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	697a      	ldr	r2, [r7, #20]
 80036c6:	631a      	str	r2, [r3, #48]	; 0x30
 80036c8:	e005      	b.n	80036d6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80036ca:	6978      	ldr	r0, [r7, #20]
 80036cc:	f001 fce8 	bl	80050a0 <vPortFree>
 80036d0:	e001      	b.n	80036d6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80036d2:	2300      	movs	r3, #0
 80036d4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d017      	beq.n	800370c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80036e4:	88fa      	ldrh	r2, [r7, #6]
 80036e6:	2300      	movs	r3, #0
 80036e8:	9303      	str	r3, [sp, #12]
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	9302      	str	r3, [sp, #8]
 80036ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f0:	9301      	str	r3, [sp, #4]
 80036f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f4:	9300      	str	r3, [sp, #0]
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	68b9      	ldr	r1, [r7, #8]
 80036fa:	68f8      	ldr	r0, [r7, #12]
 80036fc:	f000 f80e 	bl	800371c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003700:	69f8      	ldr	r0, [r7, #28]
 8003702:	f000 f89b 	bl	800383c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003706:	2301      	movs	r3, #1
 8003708:	61bb      	str	r3, [r7, #24]
 800370a:	e002      	b.n	8003712 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800370c:	f04f 33ff 	mov.w	r3, #4294967295
 8003710:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003712:	69bb      	ldr	r3, [r7, #24]
	}
 8003714:	4618      	mov	r0, r3
 8003716:	3720      	adds	r7, #32
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b088      	sub	sp, #32
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]
 8003728:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800372a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800372c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	461a      	mov	r2, r3
 8003734:	21a5      	movs	r1, #165	; 0xa5
 8003736:	f001 fe61 	bl	80053fc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800373a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800373c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003744:	3b01      	subs	r3, #1
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	4413      	add	r3, r2
 800374a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	f023 0307 	bic.w	r3, r3, #7
 8003752:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	f003 0307 	and.w	r3, r3, #7
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00a      	beq.n	8003774 <prvInitialiseNewTask+0x58>
	__asm volatile
 800375e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003762:	f383 8811 	msr	BASEPRI, r3
 8003766:	f3bf 8f6f 	isb	sy
 800376a:	f3bf 8f4f 	dsb	sy
 800376e:	617b      	str	r3, [r7, #20]
}
 8003770:	bf00      	nop
 8003772:	e7fe      	b.n	8003772 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d01f      	beq.n	80037ba <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800377a:	2300      	movs	r3, #0
 800377c:	61fb      	str	r3, [r7, #28]
 800377e:	e012      	b.n	80037a6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003780:	68ba      	ldr	r2, [r7, #8]
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	4413      	add	r3, r2
 8003786:	7819      	ldrb	r1, [r3, #0]
 8003788:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	4413      	add	r3, r2
 800378e:	3334      	adds	r3, #52	; 0x34
 8003790:	460a      	mov	r2, r1
 8003792:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003794:	68ba      	ldr	r2, [r7, #8]
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	4413      	add	r3, r2
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d006      	beq.n	80037ae <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	3301      	adds	r3, #1
 80037a4:	61fb      	str	r3, [r7, #28]
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	2b0f      	cmp	r3, #15
 80037aa:	d9e9      	bls.n	8003780 <prvInitialiseNewTask+0x64>
 80037ac:	e000      	b.n	80037b0 <prvInitialiseNewTask+0x94>
			{
				break;
 80037ae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80037b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037b8:	e003      	b.n	80037c2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80037ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80037c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c4:	2b37      	cmp	r3, #55	; 0x37
 80037c6:	d901      	bls.n	80037cc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80037c8:	2337      	movs	r3, #55	; 0x37
 80037ca:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80037cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037d0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80037d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037d6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80037d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037da:	2200      	movs	r2, #0
 80037dc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80037de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e0:	3304      	adds	r3, #4
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7ff f978 	bl	8002ad8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80037e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ea:	3318      	adds	r3, #24
 80037ec:	4618      	mov	r0, r3
 80037ee:	f7ff f973 	bl	8002ad8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80037f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037f6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037fa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80037fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003800:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003804:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003806:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800380a:	2200      	movs	r2, #0
 800380c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800380e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003810:	2200      	movs	r2, #0
 8003812:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003816:	683a      	ldr	r2, [r7, #0]
 8003818:	68f9      	ldr	r1, [r7, #12]
 800381a:	69b8      	ldr	r0, [r7, #24]
 800381c:	f001 f928 	bl	8004a70 <pxPortInitialiseStack>
 8003820:	4602      	mov	r2, r0
 8003822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003824:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003828:	2b00      	cmp	r3, #0
 800382a:	d002      	beq.n	8003832 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800382c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800382e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003830:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003832:	bf00      	nop
 8003834:	3720      	adds	r7, #32
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
	...

0800383c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003844:	f001 fa3e 	bl	8004cc4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003848:	4b2d      	ldr	r3, [pc, #180]	; (8003900 <prvAddNewTaskToReadyList+0xc4>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	3301      	adds	r3, #1
 800384e:	4a2c      	ldr	r2, [pc, #176]	; (8003900 <prvAddNewTaskToReadyList+0xc4>)
 8003850:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003852:	4b2c      	ldr	r3, [pc, #176]	; (8003904 <prvAddNewTaskToReadyList+0xc8>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d109      	bne.n	800386e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800385a:	4a2a      	ldr	r2, [pc, #168]	; (8003904 <prvAddNewTaskToReadyList+0xc8>)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003860:	4b27      	ldr	r3, [pc, #156]	; (8003900 <prvAddNewTaskToReadyList+0xc4>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2b01      	cmp	r3, #1
 8003866:	d110      	bne.n	800388a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003868:	f000 fc16 	bl	8004098 <prvInitialiseTaskLists>
 800386c:	e00d      	b.n	800388a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800386e:	4b26      	ldr	r3, [pc, #152]	; (8003908 <prvAddNewTaskToReadyList+0xcc>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d109      	bne.n	800388a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003876:	4b23      	ldr	r3, [pc, #140]	; (8003904 <prvAddNewTaskToReadyList+0xc8>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003880:	429a      	cmp	r2, r3
 8003882:	d802      	bhi.n	800388a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003884:	4a1f      	ldr	r2, [pc, #124]	; (8003904 <prvAddNewTaskToReadyList+0xc8>)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800388a:	4b20      	ldr	r3, [pc, #128]	; (800390c <prvAddNewTaskToReadyList+0xd0>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	3301      	adds	r3, #1
 8003890:	4a1e      	ldr	r2, [pc, #120]	; (800390c <prvAddNewTaskToReadyList+0xd0>)
 8003892:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003894:	4b1d      	ldr	r3, [pc, #116]	; (800390c <prvAddNewTaskToReadyList+0xd0>)
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038a0:	4b1b      	ldr	r3, [pc, #108]	; (8003910 <prvAddNewTaskToReadyList+0xd4>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d903      	bls.n	80038b0 <prvAddNewTaskToReadyList+0x74>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ac:	4a18      	ldr	r2, [pc, #96]	; (8003910 <prvAddNewTaskToReadyList+0xd4>)
 80038ae:	6013      	str	r3, [r2, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038b4:	4613      	mov	r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	4413      	add	r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	4a15      	ldr	r2, [pc, #84]	; (8003914 <prvAddNewTaskToReadyList+0xd8>)
 80038be:	441a      	add	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	3304      	adds	r3, #4
 80038c4:	4619      	mov	r1, r3
 80038c6:	4610      	mov	r0, r2
 80038c8:	f7ff f913 	bl	8002af2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80038cc:	f001 fa2a 	bl	8004d24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80038d0:	4b0d      	ldr	r3, [pc, #52]	; (8003908 <prvAddNewTaskToReadyList+0xcc>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00e      	beq.n	80038f6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80038d8:	4b0a      	ldr	r3, [pc, #40]	; (8003904 <prvAddNewTaskToReadyList+0xc8>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d207      	bcs.n	80038f6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80038e6:	4b0c      	ldr	r3, [pc, #48]	; (8003918 <prvAddNewTaskToReadyList+0xdc>)
 80038e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038ec:	601a      	str	r2, [r3, #0]
 80038ee:	f3bf 8f4f 	dsb	sy
 80038f2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80038f6:	bf00      	nop
 80038f8:	3708      	adds	r7, #8
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	20000bc0 	.word	0x20000bc0
 8003904:	200006ec 	.word	0x200006ec
 8003908:	20000bcc 	.word	0x20000bcc
 800390c:	20000bdc 	.word	0x20000bdc
 8003910:	20000bc8 	.word	0x20000bc8
 8003914:	200006f0 	.word	0x200006f0
 8003918:	e000ed04 	.word	0xe000ed04

0800391c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003924:	2300      	movs	r3, #0
 8003926:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d017      	beq.n	800395e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800392e:	4b13      	ldr	r3, [pc, #76]	; (800397c <vTaskDelay+0x60>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00a      	beq.n	800394c <vTaskDelay+0x30>
	__asm volatile
 8003936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800393a:	f383 8811 	msr	BASEPRI, r3
 800393e:	f3bf 8f6f 	isb	sy
 8003942:	f3bf 8f4f 	dsb	sy
 8003946:	60bb      	str	r3, [r7, #8]
}
 8003948:	bf00      	nop
 800394a:	e7fe      	b.n	800394a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800394c:	f000 f880 	bl	8003a50 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003950:	2100      	movs	r1, #0
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 fcea 	bl	800432c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003958:	f000 f888 	bl	8003a6c <xTaskResumeAll>
 800395c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d107      	bne.n	8003974 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003964:	4b06      	ldr	r3, [pc, #24]	; (8003980 <vTaskDelay+0x64>)
 8003966:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800396a:	601a      	str	r2, [r3, #0]
 800396c:	f3bf 8f4f 	dsb	sy
 8003970:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003974:	bf00      	nop
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	20000be8 	.word	0x20000be8
 8003980:	e000ed04 	.word	0xe000ed04

08003984 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b08a      	sub	sp, #40	; 0x28
 8003988:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800398a:	2300      	movs	r3, #0
 800398c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800398e:	2300      	movs	r3, #0
 8003990:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003992:	463a      	mov	r2, r7
 8003994:	1d39      	adds	r1, r7, #4
 8003996:	f107 0308 	add.w	r3, r7, #8
 800399a:	4618      	mov	r0, r3
 800399c:	f7ff f848 	bl	8002a30 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80039a0:	6839      	ldr	r1, [r7, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	68ba      	ldr	r2, [r7, #8]
 80039a6:	9202      	str	r2, [sp, #8]
 80039a8:	9301      	str	r3, [sp, #4]
 80039aa:	2300      	movs	r3, #0
 80039ac:	9300      	str	r3, [sp, #0]
 80039ae:	2300      	movs	r3, #0
 80039b0:	460a      	mov	r2, r1
 80039b2:	4921      	ldr	r1, [pc, #132]	; (8003a38 <vTaskStartScheduler+0xb4>)
 80039b4:	4821      	ldr	r0, [pc, #132]	; (8003a3c <vTaskStartScheduler+0xb8>)
 80039b6:	f7ff fe0f 	bl	80035d8 <xTaskCreateStatic>
 80039ba:	4603      	mov	r3, r0
 80039bc:	4a20      	ldr	r2, [pc, #128]	; (8003a40 <vTaskStartScheduler+0xbc>)
 80039be:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80039c0:	4b1f      	ldr	r3, [pc, #124]	; (8003a40 <vTaskStartScheduler+0xbc>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d002      	beq.n	80039ce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80039c8:	2301      	movs	r3, #1
 80039ca:	617b      	str	r3, [r7, #20]
 80039cc:	e001      	b.n	80039d2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80039ce:	2300      	movs	r3, #0
 80039d0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d102      	bne.n	80039de <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80039d8:	f000 fcfc 	bl	80043d4 <xTimerCreateTimerTask>
 80039dc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d116      	bne.n	8003a12 <vTaskStartScheduler+0x8e>
	__asm volatile
 80039e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e8:	f383 8811 	msr	BASEPRI, r3
 80039ec:	f3bf 8f6f 	isb	sy
 80039f0:	f3bf 8f4f 	dsb	sy
 80039f4:	613b      	str	r3, [r7, #16]
}
 80039f6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80039f8:	4b12      	ldr	r3, [pc, #72]	; (8003a44 <vTaskStartScheduler+0xc0>)
 80039fa:	f04f 32ff 	mov.w	r2, #4294967295
 80039fe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003a00:	4b11      	ldr	r3, [pc, #68]	; (8003a48 <vTaskStartScheduler+0xc4>)
 8003a02:	2201      	movs	r2, #1
 8003a04:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003a06:	4b11      	ldr	r3, [pc, #68]	; (8003a4c <vTaskStartScheduler+0xc8>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003a0c:	f001 f8b8 	bl	8004b80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003a10:	e00e      	b.n	8003a30 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a18:	d10a      	bne.n	8003a30 <vTaskStartScheduler+0xac>
	__asm volatile
 8003a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a1e:	f383 8811 	msr	BASEPRI, r3
 8003a22:	f3bf 8f6f 	isb	sy
 8003a26:	f3bf 8f4f 	dsb	sy
 8003a2a:	60fb      	str	r3, [r7, #12]
}
 8003a2c:	bf00      	nop
 8003a2e:	e7fe      	b.n	8003a2e <vTaskStartScheduler+0xaa>
}
 8003a30:	bf00      	nop
 8003a32:	3718      	adds	r7, #24
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	08005438 	.word	0x08005438
 8003a3c:	08004069 	.word	0x08004069
 8003a40:	20000be4 	.word	0x20000be4
 8003a44:	20000be0 	.word	0x20000be0
 8003a48:	20000bcc 	.word	0x20000bcc
 8003a4c:	20000bc4 	.word	0x20000bc4

08003a50 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003a50:	b480      	push	{r7}
 8003a52:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003a54:	4b04      	ldr	r3, [pc, #16]	; (8003a68 <vTaskSuspendAll+0x18>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	3301      	adds	r3, #1
 8003a5a:	4a03      	ldr	r2, [pc, #12]	; (8003a68 <vTaskSuspendAll+0x18>)
 8003a5c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003a5e:	bf00      	nop
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr
 8003a68:	20000be8 	.word	0x20000be8

08003a6c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003a72:	2300      	movs	r3, #0
 8003a74:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003a76:	2300      	movs	r3, #0
 8003a78:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003a7a:	4b42      	ldr	r3, [pc, #264]	; (8003b84 <xTaskResumeAll+0x118>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d10a      	bne.n	8003a98 <xTaskResumeAll+0x2c>
	__asm volatile
 8003a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a86:	f383 8811 	msr	BASEPRI, r3
 8003a8a:	f3bf 8f6f 	isb	sy
 8003a8e:	f3bf 8f4f 	dsb	sy
 8003a92:	603b      	str	r3, [r7, #0]
}
 8003a94:	bf00      	nop
 8003a96:	e7fe      	b.n	8003a96 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003a98:	f001 f914 	bl	8004cc4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003a9c:	4b39      	ldr	r3, [pc, #228]	; (8003b84 <xTaskResumeAll+0x118>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	4a38      	ldr	r2, [pc, #224]	; (8003b84 <xTaskResumeAll+0x118>)
 8003aa4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003aa6:	4b37      	ldr	r3, [pc, #220]	; (8003b84 <xTaskResumeAll+0x118>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d162      	bne.n	8003b74 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003aae:	4b36      	ldr	r3, [pc, #216]	; (8003b88 <xTaskResumeAll+0x11c>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d05e      	beq.n	8003b74 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ab6:	e02f      	b.n	8003b18 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ab8:	4b34      	ldr	r3, [pc, #208]	; (8003b8c <xTaskResumeAll+0x120>)
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	3318      	adds	r3, #24
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7ff f871 	bl	8002bac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	3304      	adds	r3, #4
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7ff f86c 	bl	8002bac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ad8:	4b2d      	ldr	r3, [pc, #180]	; (8003b90 <xTaskResumeAll+0x124>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d903      	bls.n	8003ae8 <xTaskResumeAll+0x7c>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae4:	4a2a      	ldr	r2, [pc, #168]	; (8003b90 <xTaskResumeAll+0x124>)
 8003ae6:	6013      	str	r3, [r2, #0]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aec:	4613      	mov	r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	4413      	add	r3, r2
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	4a27      	ldr	r2, [pc, #156]	; (8003b94 <xTaskResumeAll+0x128>)
 8003af6:	441a      	add	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	3304      	adds	r3, #4
 8003afc:	4619      	mov	r1, r3
 8003afe:	4610      	mov	r0, r2
 8003b00:	f7fe fff7 	bl	8002af2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b08:	4b23      	ldr	r3, [pc, #140]	; (8003b98 <xTaskResumeAll+0x12c>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d302      	bcc.n	8003b18 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003b12:	4b22      	ldr	r3, [pc, #136]	; (8003b9c <xTaskResumeAll+0x130>)
 8003b14:	2201      	movs	r2, #1
 8003b16:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b18:	4b1c      	ldr	r3, [pc, #112]	; (8003b8c <xTaskResumeAll+0x120>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d1cb      	bne.n	8003ab8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d001      	beq.n	8003b2a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003b26:	f000 fb55 	bl	80041d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003b2a:	4b1d      	ldr	r3, [pc, #116]	; (8003ba0 <xTaskResumeAll+0x134>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d010      	beq.n	8003b58 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003b36:	f000 f847 	bl	8003bc8 <xTaskIncrementTick>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d002      	beq.n	8003b46 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003b40:	4b16      	ldr	r3, [pc, #88]	; (8003b9c <xTaskResumeAll+0x130>)
 8003b42:	2201      	movs	r2, #1
 8003b44:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d1f1      	bne.n	8003b36 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003b52:	4b13      	ldr	r3, [pc, #76]	; (8003ba0 <xTaskResumeAll+0x134>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003b58:	4b10      	ldr	r3, [pc, #64]	; (8003b9c <xTaskResumeAll+0x130>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d009      	beq.n	8003b74 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003b60:	2301      	movs	r3, #1
 8003b62:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003b64:	4b0f      	ldr	r3, [pc, #60]	; (8003ba4 <xTaskResumeAll+0x138>)
 8003b66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b6a:	601a      	str	r2, [r3, #0]
 8003b6c:	f3bf 8f4f 	dsb	sy
 8003b70:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003b74:	f001 f8d6 	bl	8004d24 <vPortExitCritical>

	return xAlreadyYielded;
 8003b78:	68bb      	ldr	r3, [r7, #8]
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	20000be8 	.word	0x20000be8
 8003b88:	20000bc0 	.word	0x20000bc0
 8003b8c:	20000b80 	.word	0x20000b80
 8003b90:	20000bc8 	.word	0x20000bc8
 8003b94:	200006f0 	.word	0x200006f0
 8003b98:	200006ec 	.word	0x200006ec
 8003b9c:	20000bd4 	.word	0x20000bd4
 8003ba0:	20000bd0 	.word	0x20000bd0
 8003ba4:	e000ed04 	.word	0xe000ed04

08003ba8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003bae:	4b05      	ldr	r3, [pc, #20]	; (8003bc4 <xTaskGetTickCount+0x1c>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003bb4:	687b      	ldr	r3, [r7, #4]
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	370c      	adds	r7, #12
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	20000bc4 	.word	0x20000bc4

08003bc8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b086      	sub	sp, #24
 8003bcc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bd2:	4b4f      	ldr	r3, [pc, #316]	; (8003d10 <xTaskIncrementTick+0x148>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	f040 808f 	bne.w	8003cfa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003bdc:	4b4d      	ldr	r3, [pc, #308]	; (8003d14 <xTaskIncrementTick+0x14c>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	3301      	adds	r3, #1
 8003be2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003be4:	4a4b      	ldr	r2, [pc, #300]	; (8003d14 <xTaskIncrementTick+0x14c>)
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d120      	bne.n	8003c32 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003bf0:	4b49      	ldr	r3, [pc, #292]	; (8003d18 <xTaskIncrementTick+0x150>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00a      	beq.n	8003c10 <xTaskIncrementTick+0x48>
	__asm volatile
 8003bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bfe:	f383 8811 	msr	BASEPRI, r3
 8003c02:	f3bf 8f6f 	isb	sy
 8003c06:	f3bf 8f4f 	dsb	sy
 8003c0a:	603b      	str	r3, [r7, #0]
}
 8003c0c:	bf00      	nop
 8003c0e:	e7fe      	b.n	8003c0e <xTaskIncrementTick+0x46>
 8003c10:	4b41      	ldr	r3, [pc, #260]	; (8003d18 <xTaskIncrementTick+0x150>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	60fb      	str	r3, [r7, #12]
 8003c16:	4b41      	ldr	r3, [pc, #260]	; (8003d1c <xTaskIncrementTick+0x154>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a3f      	ldr	r2, [pc, #252]	; (8003d18 <xTaskIncrementTick+0x150>)
 8003c1c:	6013      	str	r3, [r2, #0]
 8003c1e:	4a3f      	ldr	r2, [pc, #252]	; (8003d1c <xTaskIncrementTick+0x154>)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6013      	str	r3, [r2, #0]
 8003c24:	4b3e      	ldr	r3, [pc, #248]	; (8003d20 <xTaskIncrementTick+0x158>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	3301      	adds	r3, #1
 8003c2a:	4a3d      	ldr	r2, [pc, #244]	; (8003d20 <xTaskIncrementTick+0x158>)
 8003c2c:	6013      	str	r3, [r2, #0]
 8003c2e:	f000 fad1 	bl	80041d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003c32:	4b3c      	ldr	r3, [pc, #240]	; (8003d24 <xTaskIncrementTick+0x15c>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d349      	bcc.n	8003cd0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c3c:	4b36      	ldr	r3, [pc, #216]	; (8003d18 <xTaskIncrementTick+0x150>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d104      	bne.n	8003c50 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c46:	4b37      	ldr	r3, [pc, #220]	; (8003d24 <xTaskIncrementTick+0x15c>)
 8003c48:	f04f 32ff 	mov.w	r2, #4294967295
 8003c4c:	601a      	str	r2, [r3, #0]
					break;
 8003c4e:	e03f      	b.n	8003cd0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c50:	4b31      	ldr	r3, [pc, #196]	; (8003d18 <xTaskIncrementTick+0x150>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003c60:	693a      	ldr	r2, [r7, #16]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d203      	bcs.n	8003c70 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003c68:	4a2e      	ldr	r2, [pc, #184]	; (8003d24 <xTaskIncrementTick+0x15c>)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003c6e:	e02f      	b.n	8003cd0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	3304      	adds	r3, #4
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7fe ff99 	bl	8002bac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d004      	beq.n	8003c8c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	3318      	adds	r3, #24
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7fe ff90 	bl	8002bac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c90:	4b25      	ldr	r3, [pc, #148]	; (8003d28 <xTaskIncrementTick+0x160>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d903      	bls.n	8003ca0 <xTaskIncrementTick+0xd8>
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9c:	4a22      	ldr	r2, [pc, #136]	; (8003d28 <xTaskIncrementTick+0x160>)
 8003c9e:	6013      	str	r3, [r2, #0]
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	4413      	add	r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	4a1f      	ldr	r2, [pc, #124]	; (8003d2c <xTaskIncrementTick+0x164>)
 8003cae:	441a      	add	r2, r3
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	3304      	adds	r3, #4
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	4610      	mov	r0, r2
 8003cb8:	f7fe ff1b 	bl	8002af2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cc0:	4b1b      	ldr	r3, [pc, #108]	; (8003d30 <xTaskIncrementTick+0x168>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d3b8      	bcc.n	8003c3c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cce:	e7b5      	b.n	8003c3c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003cd0:	4b17      	ldr	r3, [pc, #92]	; (8003d30 <xTaskIncrementTick+0x168>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cd6:	4915      	ldr	r1, [pc, #84]	; (8003d2c <xTaskIncrementTick+0x164>)
 8003cd8:	4613      	mov	r3, r2
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	4413      	add	r3, r2
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	440b      	add	r3, r1
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d901      	bls.n	8003cec <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003cec:	4b11      	ldr	r3, [pc, #68]	; (8003d34 <xTaskIncrementTick+0x16c>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d007      	beq.n	8003d04 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	617b      	str	r3, [r7, #20]
 8003cf8:	e004      	b.n	8003d04 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003cfa:	4b0f      	ldr	r3, [pc, #60]	; (8003d38 <xTaskIncrementTick+0x170>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	3301      	adds	r3, #1
 8003d00:	4a0d      	ldr	r2, [pc, #52]	; (8003d38 <xTaskIncrementTick+0x170>)
 8003d02:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003d04:	697b      	ldr	r3, [r7, #20]
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3718      	adds	r7, #24
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	20000be8 	.word	0x20000be8
 8003d14:	20000bc4 	.word	0x20000bc4
 8003d18:	20000b78 	.word	0x20000b78
 8003d1c:	20000b7c 	.word	0x20000b7c
 8003d20:	20000bd8 	.word	0x20000bd8
 8003d24:	20000be0 	.word	0x20000be0
 8003d28:	20000bc8 	.word	0x20000bc8
 8003d2c:	200006f0 	.word	0x200006f0
 8003d30:	200006ec 	.word	0x200006ec
 8003d34:	20000bd4 	.word	0x20000bd4
 8003d38:	20000bd0 	.word	0x20000bd0

08003d3c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b085      	sub	sp, #20
 8003d40:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003d42:	4b28      	ldr	r3, [pc, #160]	; (8003de4 <vTaskSwitchContext+0xa8>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d003      	beq.n	8003d52 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003d4a:	4b27      	ldr	r3, [pc, #156]	; (8003de8 <vTaskSwitchContext+0xac>)
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003d50:	e041      	b.n	8003dd6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003d52:	4b25      	ldr	r3, [pc, #148]	; (8003de8 <vTaskSwitchContext+0xac>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d58:	4b24      	ldr	r3, [pc, #144]	; (8003dec <vTaskSwitchContext+0xb0>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	60fb      	str	r3, [r7, #12]
 8003d5e:	e010      	b.n	8003d82 <vTaskSwitchContext+0x46>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d10a      	bne.n	8003d7c <vTaskSwitchContext+0x40>
	__asm volatile
 8003d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d6a:	f383 8811 	msr	BASEPRI, r3
 8003d6e:	f3bf 8f6f 	isb	sy
 8003d72:	f3bf 8f4f 	dsb	sy
 8003d76:	607b      	str	r3, [r7, #4]
}
 8003d78:	bf00      	nop
 8003d7a:	e7fe      	b.n	8003d7a <vTaskSwitchContext+0x3e>
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	60fb      	str	r3, [r7, #12]
 8003d82:	491b      	ldr	r1, [pc, #108]	; (8003df0 <vTaskSwitchContext+0xb4>)
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	4613      	mov	r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	4413      	add	r3, r2
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	440b      	add	r3, r1
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d0e4      	beq.n	8003d60 <vTaskSwitchContext+0x24>
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	4413      	add	r3, r2
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	4a13      	ldr	r2, [pc, #76]	; (8003df0 <vTaskSwitchContext+0xb4>)
 8003da2:	4413      	add	r3, r2
 8003da4:	60bb      	str	r3, [r7, #8]
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	685a      	ldr	r2, [r3, #4]
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	605a      	str	r2, [r3, #4]
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	685a      	ldr	r2, [r3, #4]
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	3308      	adds	r3, #8
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d104      	bne.n	8003dc6 <vTaskSwitchContext+0x8a>
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	685a      	ldr	r2, [r3, #4]
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	605a      	str	r2, [r3, #4]
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	4a09      	ldr	r2, [pc, #36]	; (8003df4 <vTaskSwitchContext+0xb8>)
 8003dce:	6013      	str	r3, [r2, #0]
 8003dd0:	4a06      	ldr	r2, [pc, #24]	; (8003dec <vTaskSwitchContext+0xb0>)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6013      	str	r3, [r2, #0]
}
 8003dd6:	bf00      	nop
 8003dd8:	3714      	adds	r7, #20
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	20000be8 	.word	0x20000be8
 8003de8:	20000bd4 	.word	0x20000bd4
 8003dec:	20000bc8 	.word	0x20000bc8
 8003df0:	200006f0 	.word	0x200006f0
 8003df4:	200006ec 	.word	0x200006ec

08003df8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d10a      	bne.n	8003e1e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e0c:	f383 8811 	msr	BASEPRI, r3
 8003e10:	f3bf 8f6f 	isb	sy
 8003e14:	f3bf 8f4f 	dsb	sy
 8003e18:	60fb      	str	r3, [r7, #12]
}
 8003e1a:	bf00      	nop
 8003e1c:	e7fe      	b.n	8003e1c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e1e:	4b07      	ldr	r3, [pc, #28]	; (8003e3c <vTaskPlaceOnEventList+0x44>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	3318      	adds	r3, #24
 8003e24:	4619      	mov	r1, r3
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f7fe fe87 	bl	8002b3a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003e2c:	2101      	movs	r1, #1
 8003e2e:	6838      	ldr	r0, [r7, #0]
 8003e30:	f000 fa7c 	bl	800432c <prvAddCurrentTaskToDelayedList>
}
 8003e34:	bf00      	nop
 8003e36:	3710      	adds	r7, #16
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	200006ec 	.word	0x200006ec

08003e40 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d10a      	bne.n	8003e68 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e56:	f383 8811 	msr	BASEPRI, r3
 8003e5a:	f3bf 8f6f 	isb	sy
 8003e5e:	f3bf 8f4f 	dsb	sy
 8003e62:	617b      	str	r3, [r7, #20]
}
 8003e64:	bf00      	nop
 8003e66:	e7fe      	b.n	8003e66 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e68:	4b0a      	ldr	r3, [pc, #40]	; (8003e94 <vTaskPlaceOnEventListRestricted+0x54>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	3318      	adds	r3, #24
 8003e6e:	4619      	mov	r1, r3
 8003e70:	68f8      	ldr	r0, [r7, #12]
 8003e72:	f7fe fe3e 	bl	8002af2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d002      	beq.n	8003e82 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e80:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003e82:	6879      	ldr	r1, [r7, #4]
 8003e84:	68b8      	ldr	r0, [r7, #8]
 8003e86:	f000 fa51 	bl	800432c <prvAddCurrentTaskToDelayedList>
	}
 8003e8a:	bf00      	nop
 8003e8c:	3718      	adds	r7, #24
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	200006ec 	.word	0x200006ec

08003e98 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b086      	sub	sp, #24
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d10a      	bne.n	8003ec4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb2:	f383 8811 	msr	BASEPRI, r3
 8003eb6:	f3bf 8f6f 	isb	sy
 8003eba:	f3bf 8f4f 	dsb	sy
 8003ebe:	60fb      	str	r3, [r7, #12]
}
 8003ec0:	bf00      	nop
 8003ec2:	e7fe      	b.n	8003ec2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	3318      	adds	r3, #24
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f7fe fe6f 	bl	8002bac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ece:	4b1e      	ldr	r3, [pc, #120]	; (8003f48 <xTaskRemoveFromEventList+0xb0>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d11d      	bne.n	8003f12 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	3304      	adds	r3, #4
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7fe fe66 	bl	8002bac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ee4:	4b19      	ldr	r3, [pc, #100]	; (8003f4c <xTaskRemoveFromEventList+0xb4>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d903      	bls.n	8003ef4 <xTaskRemoveFromEventList+0x5c>
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef0:	4a16      	ldr	r2, [pc, #88]	; (8003f4c <xTaskRemoveFromEventList+0xb4>)
 8003ef2:	6013      	str	r3, [r2, #0]
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ef8:	4613      	mov	r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	4413      	add	r3, r2
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	4a13      	ldr	r2, [pc, #76]	; (8003f50 <xTaskRemoveFromEventList+0xb8>)
 8003f02:	441a      	add	r2, r3
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	3304      	adds	r3, #4
 8003f08:	4619      	mov	r1, r3
 8003f0a:	4610      	mov	r0, r2
 8003f0c:	f7fe fdf1 	bl	8002af2 <vListInsertEnd>
 8003f10:	e005      	b.n	8003f1e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	3318      	adds	r3, #24
 8003f16:	4619      	mov	r1, r3
 8003f18:	480e      	ldr	r0, [pc, #56]	; (8003f54 <xTaskRemoveFromEventList+0xbc>)
 8003f1a:	f7fe fdea 	bl	8002af2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f22:	4b0d      	ldr	r3, [pc, #52]	; (8003f58 <xTaskRemoveFromEventList+0xc0>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d905      	bls.n	8003f38 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003f30:	4b0a      	ldr	r3, [pc, #40]	; (8003f5c <xTaskRemoveFromEventList+0xc4>)
 8003f32:	2201      	movs	r2, #1
 8003f34:	601a      	str	r2, [r3, #0]
 8003f36:	e001      	b.n	8003f3c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003f3c:	697b      	ldr	r3, [r7, #20]
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3718      	adds	r7, #24
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	20000be8 	.word	0x20000be8
 8003f4c:	20000bc8 	.word	0x20000bc8
 8003f50:	200006f0 	.word	0x200006f0
 8003f54:	20000b80 	.word	0x20000b80
 8003f58:	200006ec 	.word	0x200006ec
 8003f5c:	20000bd4 	.word	0x20000bd4

08003f60 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003f68:	4b06      	ldr	r3, [pc, #24]	; (8003f84 <vTaskInternalSetTimeOutState+0x24>)
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003f70:	4b05      	ldr	r3, [pc, #20]	; (8003f88 <vTaskInternalSetTimeOutState+0x28>)
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	605a      	str	r2, [r3, #4]
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr
 8003f84:	20000bd8 	.word	0x20000bd8
 8003f88:	20000bc4 	.word	0x20000bc4

08003f8c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b088      	sub	sp, #32
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d10a      	bne.n	8003fb2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa0:	f383 8811 	msr	BASEPRI, r3
 8003fa4:	f3bf 8f6f 	isb	sy
 8003fa8:	f3bf 8f4f 	dsb	sy
 8003fac:	613b      	str	r3, [r7, #16]
}
 8003fae:	bf00      	nop
 8003fb0:	e7fe      	b.n	8003fb0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d10a      	bne.n	8003fce <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fbc:	f383 8811 	msr	BASEPRI, r3
 8003fc0:	f3bf 8f6f 	isb	sy
 8003fc4:	f3bf 8f4f 	dsb	sy
 8003fc8:	60fb      	str	r3, [r7, #12]
}
 8003fca:	bf00      	nop
 8003fcc:	e7fe      	b.n	8003fcc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003fce:	f000 fe79 	bl	8004cc4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003fd2:	4b1d      	ldr	r3, [pc, #116]	; (8004048 <xTaskCheckForTimeOut+0xbc>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	69ba      	ldr	r2, [r7, #24]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fea:	d102      	bne.n	8003ff2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003fec:	2300      	movs	r3, #0
 8003fee:	61fb      	str	r3, [r7, #28]
 8003ff0:	e023      	b.n	800403a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	4b15      	ldr	r3, [pc, #84]	; (800404c <xTaskCheckForTimeOut+0xc0>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d007      	beq.n	800400e <xTaskCheckForTimeOut+0x82>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	69ba      	ldr	r2, [r7, #24]
 8004004:	429a      	cmp	r2, r3
 8004006:	d302      	bcc.n	800400e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004008:	2301      	movs	r3, #1
 800400a:	61fb      	str	r3, [r7, #28]
 800400c:	e015      	b.n	800403a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	429a      	cmp	r2, r3
 8004016:	d20b      	bcs.n	8004030 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	1ad2      	subs	r2, r2, r3
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f7ff ff9b 	bl	8003f60 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800402a:	2300      	movs	r3, #0
 800402c:	61fb      	str	r3, [r7, #28]
 800402e:	e004      	b.n	800403a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	2200      	movs	r2, #0
 8004034:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004036:	2301      	movs	r3, #1
 8004038:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800403a:	f000 fe73 	bl	8004d24 <vPortExitCritical>

	return xReturn;
 800403e:	69fb      	ldr	r3, [r7, #28]
}
 8004040:	4618      	mov	r0, r3
 8004042:	3720      	adds	r7, #32
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	20000bc4 	.word	0x20000bc4
 800404c:	20000bd8 	.word	0x20000bd8

08004050 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004050:	b480      	push	{r7}
 8004052:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004054:	4b03      	ldr	r3, [pc, #12]	; (8004064 <vTaskMissedYield+0x14>)
 8004056:	2201      	movs	r2, #1
 8004058:	601a      	str	r2, [r3, #0]
}
 800405a:	bf00      	nop
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr
 8004064:	20000bd4 	.word	0x20000bd4

08004068 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004070:	f000 f852 	bl	8004118 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004074:	4b06      	ldr	r3, [pc, #24]	; (8004090 <prvIdleTask+0x28>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2b01      	cmp	r3, #1
 800407a:	d9f9      	bls.n	8004070 <prvIdleTask+0x8>
			{
				taskYIELD();
 800407c:	4b05      	ldr	r3, [pc, #20]	; (8004094 <prvIdleTask+0x2c>)
 800407e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004082:	601a      	str	r2, [r3, #0]
 8004084:	f3bf 8f4f 	dsb	sy
 8004088:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800408c:	e7f0      	b.n	8004070 <prvIdleTask+0x8>
 800408e:	bf00      	nop
 8004090:	200006f0 	.word	0x200006f0
 8004094:	e000ed04 	.word	0xe000ed04

08004098 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800409e:	2300      	movs	r3, #0
 80040a0:	607b      	str	r3, [r7, #4]
 80040a2:	e00c      	b.n	80040be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	4613      	mov	r3, r2
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	4413      	add	r3, r2
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	4a12      	ldr	r2, [pc, #72]	; (80040f8 <prvInitialiseTaskLists+0x60>)
 80040b0:	4413      	add	r3, r2
 80040b2:	4618      	mov	r0, r3
 80040b4:	f7fe fcf0 	bl	8002a98 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	3301      	adds	r3, #1
 80040bc:	607b      	str	r3, [r7, #4]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2b37      	cmp	r3, #55	; 0x37
 80040c2:	d9ef      	bls.n	80040a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80040c4:	480d      	ldr	r0, [pc, #52]	; (80040fc <prvInitialiseTaskLists+0x64>)
 80040c6:	f7fe fce7 	bl	8002a98 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80040ca:	480d      	ldr	r0, [pc, #52]	; (8004100 <prvInitialiseTaskLists+0x68>)
 80040cc:	f7fe fce4 	bl	8002a98 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80040d0:	480c      	ldr	r0, [pc, #48]	; (8004104 <prvInitialiseTaskLists+0x6c>)
 80040d2:	f7fe fce1 	bl	8002a98 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80040d6:	480c      	ldr	r0, [pc, #48]	; (8004108 <prvInitialiseTaskLists+0x70>)
 80040d8:	f7fe fcde 	bl	8002a98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80040dc:	480b      	ldr	r0, [pc, #44]	; (800410c <prvInitialiseTaskLists+0x74>)
 80040de:	f7fe fcdb 	bl	8002a98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80040e2:	4b0b      	ldr	r3, [pc, #44]	; (8004110 <prvInitialiseTaskLists+0x78>)
 80040e4:	4a05      	ldr	r2, [pc, #20]	; (80040fc <prvInitialiseTaskLists+0x64>)
 80040e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80040e8:	4b0a      	ldr	r3, [pc, #40]	; (8004114 <prvInitialiseTaskLists+0x7c>)
 80040ea:	4a05      	ldr	r2, [pc, #20]	; (8004100 <prvInitialiseTaskLists+0x68>)
 80040ec:	601a      	str	r2, [r3, #0]
}
 80040ee:	bf00      	nop
 80040f0:	3708      	adds	r7, #8
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	200006f0 	.word	0x200006f0
 80040fc:	20000b50 	.word	0x20000b50
 8004100:	20000b64 	.word	0x20000b64
 8004104:	20000b80 	.word	0x20000b80
 8004108:	20000b94 	.word	0x20000b94
 800410c:	20000bac 	.word	0x20000bac
 8004110:	20000b78 	.word	0x20000b78
 8004114:	20000b7c 	.word	0x20000b7c

08004118 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800411e:	e019      	b.n	8004154 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004120:	f000 fdd0 	bl	8004cc4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004124:	4b10      	ldr	r3, [pc, #64]	; (8004168 <prvCheckTasksWaitingTermination+0x50>)
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	3304      	adds	r3, #4
 8004130:	4618      	mov	r0, r3
 8004132:	f7fe fd3b 	bl	8002bac <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004136:	4b0d      	ldr	r3, [pc, #52]	; (800416c <prvCheckTasksWaitingTermination+0x54>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	3b01      	subs	r3, #1
 800413c:	4a0b      	ldr	r2, [pc, #44]	; (800416c <prvCheckTasksWaitingTermination+0x54>)
 800413e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004140:	4b0b      	ldr	r3, [pc, #44]	; (8004170 <prvCheckTasksWaitingTermination+0x58>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	3b01      	subs	r3, #1
 8004146:	4a0a      	ldr	r2, [pc, #40]	; (8004170 <prvCheckTasksWaitingTermination+0x58>)
 8004148:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800414a:	f000 fdeb 	bl	8004d24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 f810 	bl	8004174 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004154:	4b06      	ldr	r3, [pc, #24]	; (8004170 <prvCheckTasksWaitingTermination+0x58>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d1e1      	bne.n	8004120 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800415c:	bf00      	nop
 800415e:	bf00      	nop
 8004160:	3708      	adds	r7, #8
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	20000b94 	.word	0x20000b94
 800416c:	20000bc0 	.word	0x20000bc0
 8004170:	20000ba8 	.word	0x20000ba8

08004174 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004182:	2b00      	cmp	r3, #0
 8004184:	d108      	bne.n	8004198 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800418a:	4618      	mov	r0, r3
 800418c:	f000 ff88 	bl	80050a0 <vPortFree>
				vPortFree( pxTCB );
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f000 ff85 	bl	80050a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004196:	e018      	b.n	80041ca <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d103      	bne.n	80041aa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 ff7c 	bl	80050a0 <vPortFree>
	}
 80041a8:	e00f      	b.n	80041ca <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	d00a      	beq.n	80041ca <prvDeleteTCB+0x56>
	__asm volatile
 80041b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b8:	f383 8811 	msr	BASEPRI, r3
 80041bc:	f3bf 8f6f 	isb	sy
 80041c0:	f3bf 8f4f 	dsb	sy
 80041c4:	60fb      	str	r3, [r7, #12]
}
 80041c6:	bf00      	nop
 80041c8:	e7fe      	b.n	80041c8 <prvDeleteTCB+0x54>
	}
 80041ca:	bf00      	nop
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
	...

080041d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041da:	4b0c      	ldr	r3, [pc, #48]	; (800420c <prvResetNextTaskUnblockTime+0x38>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d104      	bne.n	80041ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80041e4:	4b0a      	ldr	r3, [pc, #40]	; (8004210 <prvResetNextTaskUnblockTime+0x3c>)
 80041e6:	f04f 32ff 	mov.w	r2, #4294967295
 80041ea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80041ec:	e008      	b.n	8004200 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041ee:	4b07      	ldr	r3, [pc, #28]	; (800420c <prvResetNextTaskUnblockTime+0x38>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	4a04      	ldr	r2, [pc, #16]	; (8004210 <prvResetNextTaskUnblockTime+0x3c>)
 80041fe:	6013      	str	r3, [r2, #0]
}
 8004200:	bf00      	nop
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr
 800420c:	20000b78 	.word	0x20000b78
 8004210:	20000be0 	.word	0x20000be0

08004214 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800421a:	4b0b      	ldr	r3, [pc, #44]	; (8004248 <xTaskGetSchedulerState+0x34>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d102      	bne.n	8004228 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004222:	2301      	movs	r3, #1
 8004224:	607b      	str	r3, [r7, #4]
 8004226:	e008      	b.n	800423a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004228:	4b08      	ldr	r3, [pc, #32]	; (800424c <xTaskGetSchedulerState+0x38>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d102      	bne.n	8004236 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004230:	2302      	movs	r3, #2
 8004232:	607b      	str	r3, [r7, #4]
 8004234:	e001      	b.n	800423a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004236:	2300      	movs	r3, #0
 8004238:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800423a:	687b      	ldr	r3, [r7, #4]
	}
 800423c:	4618      	mov	r0, r3
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr
 8004248:	20000bcc 	.word	0x20000bcc
 800424c:	20000be8 	.word	0x20000be8

08004250 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004250:	b580      	push	{r7, lr}
 8004252:	b086      	sub	sp, #24
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800425c:	2300      	movs	r3, #0
 800425e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d056      	beq.n	8004314 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004266:	4b2e      	ldr	r3, [pc, #184]	; (8004320 <xTaskPriorityDisinherit+0xd0>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	693a      	ldr	r2, [r7, #16]
 800426c:	429a      	cmp	r2, r3
 800426e:	d00a      	beq.n	8004286 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004274:	f383 8811 	msr	BASEPRI, r3
 8004278:	f3bf 8f6f 	isb	sy
 800427c:	f3bf 8f4f 	dsb	sy
 8004280:	60fb      	str	r3, [r7, #12]
}
 8004282:	bf00      	nop
 8004284:	e7fe      	b.n	8004284 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800428a:	2b00      	cmp	r3, #0
 800428c:	d10a      	bne.n	80042a4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800428e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004292:	f383 8811 	msr	BASEPRI, r3
 8004296:	f3bf 8f6f 	isb	sy
 800429a:	f3bf 8f4f 	dsb	sy
 800429e:	60bb      	str	r3, [r7, #8]
}
 80042a0:	bf00      	nop
 80042a2:	e7fe      	b.n	80042a2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042a8:	1e5a      	subs	r2, r3, #1
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d02c      	beq.n	8004314 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d128      	bne.n	8004314 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	3304      	adds	r3, #4
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7fe fc70 	bl	8002bac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042e4:	4b0f      	ldr	r3, [pc, #60]	; (8004324 <xTaskPriorityDisinherit+0xd4>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d903      	bls.n	80042f4 <xTaskPriorityDisinherit+0xa4>
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f0:	4a0c      	ldr	r2, [pc, #48]	; (8004324 <xTaskPriorityDisinherit+0xd4>)
 80042f2:	6013      	str	r3, [r2, #0]
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042f8:	4613      	mov	r3, r2
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	4413      	add	r3, r2
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	4a09      	ldr	r2, [pc, #36]	; (8004328 <xTaskPriorityDisinherit+0xd8>)
 8004302:	441a      	add	r2, r3
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	3304      	adds	r3, #4
 8004308:	4619      	mov	r1, r3
 800430a:	4610      	mov	r0, r2
 800430c:	f7fe fbf1 	bl	8002af2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004310:	2301      	movs	r3, #1
 8004312:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004314:	697b      	ldr	r3, [r7, #20]
	}
 8004316:	4618      	mov	r0, r3
 8004318:	3718      	adds	r7, #24
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	200006ec 	.word	0x200006ec
 8004324:	20000bc8 	.word	0x20000bc8
 8004328:	200006f0 	.word	0x200006f0

0800432c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004336:	4b21      	ldr	r3, [pc, #132]	; (80043bc <prvAddCurrentTaskToDelayedList+0x90>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800433c:	4b20      	ldr	r3, [pc, #128]	; (80043c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	3304      	adds	r3, #4
 8004342:	4618      	mov	r0, r3
 8004344:	f7fe fc32 	bl	8002bac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800434e:	d10a      	bne.n	8004366 <prvAddCurrentTaskToDelayedList+0x3a>
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d007      	beq.n	8004366 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004356:	4b1a      	ldr	r3, [pc, #104]	; (80043c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	3304      	adds	r3, #4
 800435c:	4619      	mov	r1, r3
 800435e:	4819      	ldr	r0, [pc, #100]	; (80043c4 <prvAddCurrentTaskToDelayedList+0x98>)
 8004360:	f7fe fbc7 	bl	8002af2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004364:	e026      	b.n	80043b4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4413      	add	r3, r2
 800436c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800436e:	4b14      	ldr	r3, [pc, #80]	; (80043c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68ba      	ldr	r2, [r7, #8]
 8004374:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004376:	68ba      	ldr	r2, [r7, #8]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	429a      	cmp	r2, r3
 800437c:	d209      	bcs.n	8004392 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800437e:	4b12      	ldr	r3, [pc, #72]	; (80043c8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	4b0f      	ldr	r3, [pc, #60]	; (80043c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	3304      	adds	r3, #4
 8004388:	4619      	mov	r1, r3
 800438a:	4610      	mov	r0, r2
 800438c:	f7fe fbd5 	bl	8002b3a <vListInsert>
}
 8004390:	e010      	b.n	80043b4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004392:	4b0e      	ldr	r3, [pc, #56]	; (80043cc <prvAddCurrentTaskToDelayedList+0xa0>)
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	4b0a      	ldr	r3, [pc, #40]	; (80043c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	3304      	adds	r3, #4
 800439c:	4619      	mov	r1, r3
 800439e:	4610      	mov	r0, r2
 80043a0:	f7fe fbcb 	bl	8002b3a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80043a4:	4b0a      	ldr	r3, [pc, #40]	; (80043d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68ba      	ldr	r2, [r7, #8]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d202      	bcs.n	80043b4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80043ae:	4a08      	ldr	r2, [pc, #32]	; (80043d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	6013      	str	r3, [r2, #0]
}
 80043b4:	bf00      	nop
 80043b6:	3710      	adds	r7, #16
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	20000bc4 	.word	0x20000bc4
 80043c0:	200006ec 	.word	0x200006ec
 80043c4:	20000bac 	.word	0x20000bac
 80043c8:	20000b7c 	.word	0x20000b7c
 80043cc:	20000b78 	.word	0x20000b78
 80043d0:	20000be0 	.word	0x20000be0

080043d4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b08a      	sub	sp, #40	; 0x28
 80043d8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80043da:	2300      	movs	r3, #0
 80043dc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80043de:	f000 fb07 	bl	80049f0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80043e2:	4b1c      	ldr	r3, [pc, #112]	; (8004454 <xTimerCreateTimerTask+0x80>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d021      	beq.n	800442e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80043ea:	2300      	movs	r3, #0
 80043ec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80043ee:	2300      	movs	r3, #0
 80043f0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80043f2:	1d3a      	adds	r2, r7, #4
 80043f4:	f107 0108 	add.w	r1, r7, #8
 80043f8:	f107 030c 	add.w	r3, r7, #12
 80043fc:	4618      	mov	r0, r3
 80043fe:	f7fe fb31 	bl	8002a64 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004402:	6879      	ldr	r1, [r7, #4]
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	68fa      	ldr	r2, [r7, #12]
 8004408:	9202      	str	r2, [sp, #8]
 800440a:	9301      	str	r3, [sp, #4]
 800440c:	2302      	movs	r3, #2
 800440e:	9300      	str	r3, [sp, #0]
 8004410:	2300      	movs	r3, #0
 8004412:	460a      	mov	r2, r1
 8004414:	4910      	ldr	r1, [pc, #64]	; (8004458 <xTimerCreateTimerTask+0x84>)
 8004416:	4811      	ldr	r0, [pc, #68]	; (800445c <xTimerCreateTimerTask+0x88>)
 8004418:	f7ff f8de 	bl	80035d8 <xTaskCreateStatic>
 800441c:	4603      	mov	r3, r0
 800441e:	4a10      	ldr	r2, [pc, #64]	; (8004460 <xTimerCreateTimerTask+0x8c>)
 8004420:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004422:	4b0f      	ldr	r3, [pc, #60]	; (8004460 <xTimerCreateTimerTask+0x8c>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d001      	beq.n	800442e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800442a:	2301      	movs	r3, #1
 800442c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d10a      	bne.n	800444a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004438:	f383 8811 	msr	BASEPRI, r3
 800443c:	f3bf 8f6f 	isb	sy
 8004440:	f3bf 8f4f 	dsb	sy
 8004444:	613b      	str	r3, [r7, #16]
}
 8004446:	bf00      	nop
 8004448:	e7fe      	b.n	8004448 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800444a:	697b      	ldr	r3, [r7, #20]
}
 800444c:	4618      	mov	r0, r3
 800444e:	3718      	adds	r7, #24
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}
 8004454:	20000c1c 	.word	0x20000c1c
 8004458:	08005440 	.word	0x08005440
 800445c:	08004599 	.word	0x08004599
 8004460:	20000c20 	.word	0x20000c20

08004464 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b08a      	sub	sp, #40	; 0x28
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	607a      	str	r2, [r7, #4]
 8004470:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004472:	2300      	movs	r3, #0
 8004474:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d10a      	bne.n	8004492 <xTimerGenericCommand+0x2e>
	__asm volatile
 800447c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004480:	f383 8811 	msr	BASEPRI, r3
 8004484:	f3bf 8f6f 	isb	sy
 8004488:	f3bf 8f4f 	dsb	sy
 800448c:	623b      	str	r3, [r7, #32]
}
 800448e:	bf00      	nop
 8004490:	e7fe      	b.n	8004490 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004492:	4b1a      	ldr	r3, [pc, #104]	; (80044fc <xTimerGenericCommand+0x98>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d02a      	beq.n	80044f0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	2b05      	cmp	r3, #5
 80044aa:	dc18      	bgt.n	80044de <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80044ac:	f7ff feb2 	bl	8004214 <xTaskGetSchedulerState>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d109      	bne.n	80044ca <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80044b6:	4b11      	ldr	r3, [pc, #68]	; (80044fc <xTimerGenericCommand+0x98>)
 80044b8:	6818      	ldr	r0, [r3, #0]
 80044ba:	f107 0110 	add.w	r1, r7, #16
 80044be:	2300      	movs	r3, #0
 80044c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044c2:	f7fe fca1 	bl	8002e08 <xQueueGenericSend>
 80044c6:	6278      	str	r0, [r7, #36]	; 0x24
 80044c8:	e012      	b.n	80044f0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80044ca:	4b0c      	ldr	r3, [pc, #48]	; (80044fc <xTimerGenericCommand+0x98>)
 80044cc:	6818      	ldr	r0, [r3, #0]
 80044ce:	f107 0110 	add.w	r1, r7, #16
 80044d2:	2300      	movs	r3, #0
 80044d4:	2200      	movs	r2, #0
 80044d6:	f7fe fc97 	bl	8002e08 <xQueueGenericSend>
 80044da:	6278      	str	r0, [r7, #36]	; 0x24
 80044dc:	e008      	b.n	80044f0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80044de:	4b07      	ldr	r3, [pc, #28]	; (80044fc <xTimerGenericCommand+0x98>)
 80044e0:	6818      	ldr	r0, [r3, #0]
 80044e2:	f107 0110 	add.w	r1, r7, #16
 80044e6:	2300      	movs	r3, #0
 80044e8:	683a      	ldr	r2, [r7, #0]
 80044ea:	f7fe fd8b 	bl	8003004 <xQueueGenericSendFromISR>
 80044ee:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80044f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3728      	adds	r7, #40	; 0x28
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	20000c1c 	.word	0x20000c1c

08004500 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b088      	sub	sp, #32
 8004504:	af02      	add	r7, sp, #8
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800450a:	4b22      	ldr	r3, [pc, #136]	; (8004594 <prvProcessExpiredTimer+0x94>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	3304      	adds	r3, #4
 8004518:	4618      	mov	r0, r3
 800451a:	f7fe fb47 	bl	8002bac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004524:	f003 0304 	and.w	r3, r3, #4
 8004528:	2b00      	cmp	r3, #0
 800452a:	d022      	beq.n	8004572 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	699a      	ldr	r2, [r3, #24]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	18d1      	adds	r1, r2, r3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	683a      	ldr	r2, [r7, #0]
 8004538:	6978      	ldr	r0, [r7, #20]
 800453a:	f000 f8d1 	bl	80046e0 <prvInsertTimerInActiveList>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d01f      	beq.n	8004584 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004544:	2300      	movs	r3, #0
 8004546:	9300      	str	r3, [sp, #0]
 8004548:	2300      	movs	r3, #0
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	2100      	movs	r1, #0
 800454e:	6978      	ldr	r0, [r7, #20]
 8004550:	f7ff ff88 	bl	8004464 <xTimerGenericCommand>
 8004554:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d113      	bne.n	8004584 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800455c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004560:	f383 8811 	msr	BASEPRI, r3
 8004564:	f3bf 8f6f 	isb	sy
 8004568:	f3bf 8f4f 	dsb	sy
 800456c:	60fb      	str	r3, [r7, #12]
}
 800456e:	bf00      	nop
 8004570:	e7fe      	b.n	8004570 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004578:	f023 0301 	bic.w	r3, r3, #1
 800457c:	b2da      	uxtb	r2, r3
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	6a1b      	ldr	r3, [r3, #32]
 8004588:	6978      	ldr	r0, [r7, #20]
 800458a:	4798      	blx	r3
}
 800458c:	bf00      	nop
 800458e:	3718      	adds	r7, #24
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	20000c14 	.word	0x20000c14

08004598 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80045a0:	f107 0308 	add.w	r3, r7, #8
 80045a4:	4618      	mov	r0, r3
 80045a6:	f000 f857 	bl	8004658 <prvGetNextExpireTime>
 80045aa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	4619      	mov	r1, r3
 80045b0:	68f8      	ldr	r0, [r7, #12]
 80045b2:	f000 f803 	bl	80045bc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80045b6:	f000 f8d5 	bl	8004764 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80045ba:	e7f1      	b.n	80045a0 <prvTimerTask+0x8>

080045bc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80045c6:	f7ff fa43 	bl	8003a50 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80045ca:	f107 0308 	add.w	r3, r7, #8
 80045ce:	4618      	mov	r0, r3
 80045d0:	f000 f866 	bl	80046a0 <prvSampleTimeNow>
 80045d4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d130      	bne.n	800463e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d10a      	bne.n	80045f8 <prvProcessTimerOrBlockTask+0x3c>
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d806      	bhi.n	80045f8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80045ea:	f7ff fa3f 	bl	8003a6c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80045ee:	68f9      	ldr	r1, [r7, #12]
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f7ff ff85 	bl	8004500 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80045f6:	e024      	b.n	8004642 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d008      	beq.n	8004610 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80045fe:	4b13      	ldr	r3, [pc, #76]	; (800464c <prvProcessTimerOrBlockTask+0x90>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d101      	bne.n	800460c <prvProcessTimerOrBlockTask+0x50>
 8004608:	2301      	movs	r3, #1
 800460a:	e000      	b.n	800460e <prvProcessTimerOrBlockTask+0x52>
 800460c:	2300      	movs	r3, #0
 800460e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004610:	4b0f      	ldr	r3, [pc, #60]	; (8004650 <prvProcessTimerOrBlockTask+0x94>)
 8004612:	6818      	ldr	r0, [r3, #0]
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	683a      	ldr	r2, [r7, #0]
 800461c:	4619      	mov	r1, r3
 800461e:	f7fe ffa7 	bl	8003570 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004622:	f7ff fa23 	bl	8003a6c <xTaskResumeAll>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d10a      	bne.n	8004642 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800462c:	4b09      	ldr	r3, [pc, #36]	; (8004654 <prvProcessTimerOrBlockTask+0x98>)
 800462e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004632:	601a      	str	r2, [r3, #0]
 8004634:	f3bf 8f4f 	dsb	sy
 8004638:	f3bf 8f6f 	isb	sy
}
 800463c:	e001      	b.n	8004642 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800463e:	f7ff fa15 	bl	8003a6c <xTaskResumeAll>
}
 8004642:	bf00      	nop
 8004644:	3710      	adds	r7, #16
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	20000c18 	.word	0x20000c18
 8004650:	20000c1c 	.word	0x20000c1c
 8004654:	e000ed04 	.word	0xe000ed04

08004658 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004658:	b480      	push	{r7}
 800465a:	b085      	sub	sp, #20
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004660:	4b0e      	ldr	r3, [pc, #56]	; (800469c <prvGetNextExpireTime+0x44>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d101      	bne.n	800466e <prvGetNextExpireTime+0x16>
 800466a:	2201      	movs	r2, #1
 800466c:	e000      	b.n	8004670 <prvGetNextExpireTime+0x18>
 800466e:	2200      	movs	r2, #0
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d105      	bne.n	8004688 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800467c:	4b07      	ldr	r3, [pc, #28]	; (800469c <prvGetNextExpireTime+0x44>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	60fb      	str	r3, [r7, #12]
 8004686:	e001      	b.n	800468c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004688:	2300      	movs	r3, #0
 800468a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800468c:	68fb      	ldr	r3, [r7, #12]
}
 800468e:	4618      	mov	r0, r3
 8004690:	3714      	adds	r7, #20
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	20000c14 	.word	0x20000c14

080046a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80046a8:	f7ff fa7e 	bl	8003ba8 <xTaskGetTickCount>
 80046ac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80046ae:	4b0b      	ldr	r3, [pc, #44]	; (80046dc <prvSampleTimeNow+0x3c>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d205      	bcs.n	80046c4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80046b8:	f000 f936 	bl	8004928 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	601a      	str	r2, [r3, #0]
 80046c2:	e002      	b.n	80046ca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80046ca:	4a04      	ldr	r2, [pc, #16]	; (80046dc <prvSampleTimeNow+0x3c>)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80046d0:	68fb      	ldr	r3, [r7, #12]
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3710      	adds	r7, #16
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	20000c24 	.word	0x20000c24

080046e0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b086      	sub	sp, #24
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
 80046ec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80046ee:	2300      	movs	r3, #0
 80046f0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	68ba      	ldr	r2, [r7, #8]
 80046f6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80046fe:	68ba      	ldr	r2, [r7, #8]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	429a      	cmp	r2, r3
 8004704:	d812      	bhi.n	800472c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	1ad2      	subs	r2, r2, r3
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	699b      	ldr	r3, [r3, #24]
 8004710:	429a      	cmp	r2, r3
 8004712:	d302      	bcc.n	800471a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004714:	2301      	movs	r3, #1
 8004716:	617b      	str	r3, [r7, #20]
 8004718:	e01b      	b.n	8004752 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800471a:	4b10      	ldr	r3, [pc, #64]	; (800475c <prvInsertTimerInActiveList+0x7c>)
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	3304      	adds	r3, #4
 8004722:	4619      	mov	r1, r3
 8004724:	4610      	mov	r0, r2
 8004726:	f7fe fa08 	bl	8002b3a <vListInsert>
 800472a:	e012      	b.n	8004752 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	429a      	cmp	r2, r3
 8004732:	d206      	bcs.n	8004742 <prvInsertTimerInActiveList+0x62>
 8004734:	68ba      	ldr	r2, [r7, #8]
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	429a      	cmp	r2, r3
 800473a:	d302      	bcc.n	8004742 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800473c:	2301      	movs	r3, #1
 800473e:	617b      	str	r3, [r7, #20]
 8004740:	e007      	b.n	8004752 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004742:	4b07      	ldr	r3, [pc, #28]	; (8004760 <prvInsertTimerInActiveList+0x80>)
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	3304      	adds	r3, #4
 800474a:	4619      	mov	r1, r3
 800474c:	4610      	mov	r0, r2
 800474e:	f7fe f9f4 	bl	8002b3a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004752:	697b      	ldr	r3, [r7, #20]
}
 8004754:	4618      	mov	r0, r3
 8004756:	3718      	adds	r7, #24
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}
 800475c:	20000c18 	.word	0x20000c18
 8004760:	20000c14 	.word	0x20000c14

08004764 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b08e      	sub	sp, #56	; 0x38
 8004768:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800476a:	e0ca      	b.n	8004902 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2b00      	cmp	r3, #0
 8004770:	da18      	bge.n	80047a4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004772:	1d3b      	adds	r3, r7, #4
 8004774:	3304      	adds	r3, #4
 8004776:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800477a:	2b00      	cmp	r3, #0
 800477c:	d10a      	bne.n	8004794 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800477e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004782:	f383 8811 	msr	BASEPRI, r3
 8004786:	f3bf 8f6f 	isb	sy
 800478a:	f3bf 8f4f 	dsb	sy
 800478e:	61fb      	str	r3, [r7, #28]
}
 8004790:	bf00      	nop
 8004792:	e7fe      	b.n	8004792 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800479a:	6850      	ldr	r0, [r2, #4]
 800479c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800479e:	6892      	ldr	r2, [r2, #8]
 80047a0:	4611      	mov	r1, r2
 80047a2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	f2c0 80aa 	blt.w	8004900 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80047b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b2:	695b      	ldr	r3, [r3, #20]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d004      	beq.n	80047c2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80047b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ba:	3304      	adds	r3, #4
 80047bc:	4618      	mov	r0, r3
 80047be:	f7fe f9f5 	bl	8002bac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80047c2:	463b      	mov	r3, r7
 80047c4:	4618      	mov	r0, r3
 80047c6:	f7ff ff6b 	bl	80046a0 <prvSampleTimeNow>
 80047ca:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2b09      	cmp	r3, #9
 80047d0:	f200 8097 	bhi.w	8004902 <prvProcessReceivedCommands+0x19e>
 80047d4:	a201      	add	r2, pc, #4	; (adr r2, 80047dc <prvProcessReceivedCommands+0x78>)
 80047d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047da:	bf00      	nop
 80047dc:	08004805 	.word	0x08004805
 80047e0:	08004805 	.word	0x08004805
 80047e4:	08004805 	.word	0x08004805
 80047e8:	08004879 	.word	0x08004879
 80047ec:	0800488d 	.word	0x0800488d
 80047f0:	080048d7 	.word	0x080048d7
 80047f4:	08004805 	.word	0x08004805
 80047f8:	08004805 	.word	0x08004805
 80047fc:	08004879 	.word	0x08004879
 8004800:	0800488d 	.word	0x0800488d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004806:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800480a:	f043 0301 	orr.w	r3, r3, #1
 800480e:	b2da      	uxtb	r2, r3
 8004810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004812:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004816:	68ba      	ldr	r2, [r7, #8]
 8004818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	18d1      	adds	r1, r2, r3
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004822:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004824:	f7ff ff5c 	bl	80046e0 <prvInsertTimerInActiveList>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d069      	beq.n	8004902 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800482e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004830:	6a1b      	ldr	r3, [r3, #32]
 8004832:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004834:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004838:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800483c:	f003 0304 	and.w	r3, r3, #4
 8004840:	2b00      	cmp	r3, #0
 8004842:	d05e      	beq.n	8004902 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004844:	68ba      	ldr	r2, [r7, #8]
 8004846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	441a      	add	r2, r3
 800484c:	2300      	movs	r3, #0
 800484e:	9300      	str	r3, [sp, #0]
 8004850:	2300      	movs	r3, #0
 8004852:	2100      	movs	r1, #0
 8004854:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004856:	f7ff fe05 	bl	8004464 <xTimerGenericCommand>
 800485a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800485c:	6a3b      	ldr	r3, [r7, #32]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d14f      	bne.n	8004902 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004866:	f383 8811 	msr	BASEPRI, r3
 800486a:	f3bf 8f6f 	isb	sy
 800486e:	f3bf 8f4f 	dsb	sy
 8004872:	61bb      	str	r3, [r7, #24]
}
 8004874:	bf00      	nop
 8004876:	e7fe      	b.n	8004876 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800487a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800487e:	f023 0301 	bic.w	r3, r3, #1
 8004882:	b2da      	uxtb	r2, r3
 8004884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004886:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800488a:	e03a      	b.n	8004902 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800488c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800488e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004892:	f043 0301 	orr.w	r3, r3, #1
 8004896:	b2da      	uxtb	r2, r3
 8004898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800489a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800489e:	68ba      	ldr	r2, [r7, #8]
 80048a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80048a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a6:	699b      	ldr	r3, [r3, #24]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d10a      	bne.n	80048c2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80048ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b0:	f383 8811 	msr	BASEPRI, r3
 80048b4:	f3bf 8f6f 	isb	sy
 80048b8:	f3bf 8f4f 	dsb	sy
 80048bc:	617b      	str	r3, [r7, #20]
}
 80048be:	bf00      	nop
 80048c0:	e7fe      	b.n	80048c0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80048c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c4:	699a      	ldr	r2, [r3, #24]
 80048c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c8:	18d1      	adds	r1, r2, r3
 80048ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048d0:	f7ff ff06 	bl	80046e0 <prvInsertTimerInActiveList>
					break;
 80048d4:	e015      	b.n	8004902 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80048d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048dc:	f003 0302 	and.w	r3, r3, #2
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d103      	bne.n	80048ec <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80048e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048e6:	f000 fbdb 	bl	80050a0 <vPortFree>
 80048ea:	e00a      	b.n	8004902 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80048ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048f2:	f023 0301 	bic.w	r3, r3, #1
 80048f6:	b2da      	uxtb	r2, r3
 80048f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80048fe:	e000      	b.n	8004902 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004900:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004902:	4b08      	ldr	r3, [pc, #32]	; (8004924 <prvProcessReceivedCommands+0x1c0>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	1d39      	adds	r1, r7, #4
 8004908:	2200      	movs	r2, #0
 800490a:	4618      	mov	r0, r3
 800490c:	f7fe fc16 	bl	800313c <xQueueReceive>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	f47f af2a 	bne.w	800476c <prvProcessReceivedCommands+0x8>
	}
}
 8004918:	bf00      	nop
 800491a:	bf00      	nop
 800491c:	3730      	adds	r7, #48	; 0x30
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	20000c1c 	.word	0x20000c1c

08004928 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b088      	sub	sp, #32
 800492c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800492e:	e048      	b.n	80049c2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004930:	4b2d      	ldr	r3, [pc, #180]	; (80049e8 <prvSwitchTimerLists+0xc0>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800493a:	4b2b      	ldr	r3, [pc, #172]	; (80049e8 <prvSwitchTimerLists+0xc0>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	3304      	adds	r3, #4
 8004948:	4618      	mov	r0, r3
 800494a:	f7fe f92f 	bl	8002bac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6a1b      	ldr	r3, [r3, #32]
 8004952:	68f8      	ldr	r0, [r7, #12]
 8004954:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800495c:	f003 0304 	and.w	r3, r3, #4
 8004960:	2b00      	cmp	r3, #0
 8004962:	d02e      	beq.n	80049c2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	699b      	ldr	r3, [r3, #24]
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	4413      	add	r3, r2
 800496c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800496e:	68ba      	ldr	r2, [r7, #8]
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	429a      	cmp	r2, r3
 8004974:	d90e      	bls.n	8004994 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	68ba      	ldr	r2, [r7, #8]
 800497a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	68fa      	ldr	r2, [r7, #12]
 8004980:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004982:	4b19      	ldr	r3, [pc, #100]	; (80049e8 <prvSwitchTimerLists+0xc0>)
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	3304      	adds	r3, #4
 800498a:	4619      	mov	r1, r3
 800498c:	4610      	mov	r0, r2
 800498e:	f7fe f8d4 	bl	8002b3a <vListInsert>
 8004992:	e016      	b.n	80049c2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004994:	2300      	movs	r3, #0
 8004996:	9300      	str	r3, [sp, #0]
 8004998:	2300      	movs	r3, #0
 800499a:	693a      	ldr	r2, [r7, #16]
 800499c:	2100      	movs	r1, #0
 800499e:	68f8      	ldr	r0, [r7, #12]
 80049a0:	f7ff fd60 	bl	8004464 <xTimerGenericCommand>
 80049a4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d10a      	bne.n	80049c2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80049ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b0:	f383 8811 	msr	BASEPRI, r3
 80049b4:	f3bf 8f6f 	isb	sy
 80049b8:	f3bf 8f4f 	dsb	sy
 80049bc:	603b      	str	r3, [r7, #0]
}
 80049be:	bf00      	nop
 80049c0:	e7fe      	b.n	80049c0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80049c2:	4b09      	ldr	r3, [pc, #36]	; (80049e8 <prvSwitchTimerLists+0xc0>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d1b1      	bne.n	8004930 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80049cc:	4b06      	ldr	r3, [pc, #24]	; (80049e8 <prvSwitchTimerLists+0xc0>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80049d2:	4b06      	ldr	r3, [pc, #24]	; (80049ec <prvSwitchTimerLists+0xc4>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a04      	ldr	r2, [pc, #16]	; (80049e8 <prvSwitchTimerLists+0xc0>)
 80049d8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80049da:	4a04      	ldr	r2, [pc, #16]	; (80049ec <prvSwitchTimerLists+0xc4>)
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	6013      	str	r3, [r2, #0]
}
 80049e0:	bf00      	nop
 80049e2:	3718      	adds	r7, #24
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	20000c14 	.word	0x20000c14
 80049ec:	20000c18 	.word	0x20000c18

080049f0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80049f6:	f000 f965 	bl	8004cc4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80049fa:	4b15      	ldr	r3, [pc, #84]	; (8004a50 <prvCheckForValidListAndQueue+0x60>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d120      	bne.n	8004a44 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004a02:	4814      	ldr	r0, [pc, #80]	; (8004a54 <prvCheckForValidListAndQueue+0x64>)
 8004a04:	f7fe f848 	bl	8002a98 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004a08:	4813      	ldr	r0, [pc, #76]	; (8004a58 <prvCheckForValidListAndQueue+0x68>)
 8004a0a:	f7fe f845 	bl	8002a98 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004a0e:	4b13      	ldr	r3, [pc, #76]	; (8004a5c <prvCheckForValidListAndQueue+0x6c>)
 8004a10:	4a10      	ldr	r2, [pc, #64]	; (8004a54 <prvCheckForValidListAndQueue+0x64>)
 8004a12:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004a14:	4b12      	ldr	r3, [pc, #72]	; (8004a60 <prvCheckForValidListAndQueue+0x70>)
 8004a16:	4a10      	ldr	r2, [pc, #64]	; (8004a58 <prvCheckForValidListAndQueue+0x68>)
 8004a18:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	9300      	str	r3, [sp, #0]
 8004a1e:	4b11      	ldr	r3, [pc, #68]	; (8004a64 <prvCheckForValidListAndQueue+0x74>)
 8004a20:	4a11      	ldr	r2, [pc, #68]	; (8004a68 <prvCheckForValidListAndQueue+0x78>)
 8004a22:	2110      	movs	r1, #16
 8004a24:	200a      	movs	r0, #10
 8004a26:	f7fe f953 	bl	8002cd0 <xQueueGenericCreateStatic>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	4a08      	ldr	r2, [pc, #32]	; (8004a50 <prvCheckForValidListAndQueue+0x60>)
 8004a2e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004a30:	4b07      	ldr	r3, [pc, #28]	; (8004a50 <prvCheckForValidListAndQueue+0x60>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d005      	beq.n	8004a44 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004a38:	4b05      	ldr	r3, [pc, #20]	; (8004a50 <prvCheckForValidListAndQueue+0x60>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	490b      	ldr	r1, [pc, #44]	; (8004a6c <prvCheckForValidListAndQueue+0x7c>)
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f7fe fd6c 	bl	800351c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004a44:	f000 f96e 	bl	8004d24 <vPortExitCritical>
}
 8004a48:	bf00      	nop
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	20000c1c 	.word	0x20000c1c
 8004a54:	20000bec 	.word	0x20000bec
 8004a58:	20000c00 	.word	0x20000c00
 8004a5c:	20000c14 	.word	0x20000c14
 8004a60:	20000c18 	.word	0x20000c18
 8004a64:	20000cc8 	.word	0x20000cc8
 8004a68:	20000c28 	.word	0x20000c28
 8004a6c:	08005448 	.word	0x08005448

08004a70 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004a70:	b480      	push	{r7}
 8004a72:	b085      	sub	sp, #20
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	3b04      	subs	r3, #4
 8004a80:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004a88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	3b04      	subs	r3, #4
 8004a8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	f023 0201 	bic.w	r2, r3, #1
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	3b04      	subs	r3, #4
 8004a9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004aa0:	4a0c      	ldr	r2, [pc, #48]	; (8004ad4 <pxPortInitialiseStack+0x64>)
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	3b14      	subs	r3, #20
 8004aaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	3b04      	subs	r3, #4
 8004ab6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f06f 0202 	mvn.w	r2, #2
 8004abe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	3b20      	subs	r3, #32
 8004ac4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3714      	adds	r7, #20
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr
 8004ad4:	08004ad9 	.word	0x08004ad9

08004ad8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004ae2:	4b12      	ldr	r3, [pc, #72]	; (8004b2c <prvTaskExitError+0x54>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aea:	d00a      	beq.n	8004b02 <prvTaskExitError+0x2a>
	__asm volatile
 8004aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af0:	f383 8811 	msr	BASEPRI, r3
 8004af4:	f3bf 8f6f 	isb	sy
 8004af8:	f3bf 8f4f 	dsb	sy
 8004afc:	60fb      	str	r3, [r7, #12]
}
 8004afe:	bf00      	nop
 8004b00:	e7fe      	b.n	8004b00 <prvTaskExitError+0x28>
	__asm volatile
 8004b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b06:	f383 8811 	msr	BASEPRI, r3
 8004b0a:	f3bf 8f6f 	isb	sy
 8004b0e:	f3bf 8f4f 	dsb	sy
 8004b12:	60bb      	str	r3, [r7, #8]
}
 8004b14:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004b16:	bf00      	nop
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d0fc      	beq.n	8004b18 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004b1e:	bf00      	nop
 8004b20:	bf00      	nop
 8004b22:	3714      	adds	r7, #20
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr
 8004b2c:	2000000c 	.word	0x2000000c

08004b30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004b30:	4b07      	ldr	r3, [pc, #28]	; (8004b50 <pxCurrentTCBConst2>)
 8004b32:	6819      	ldr	r1, [r3, #0]
 8004b34:	6808      	ldr	r0, [r1, #0]
 8004b36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b3a:	f380 8809 	msr	PSP, r0
 8004b3e:	f3bf 8f6f 	isb	sy
 8004b42:	f04f 0000 	mov.w	r0, #0
 8004b46:	f380 8811 	msr	BASEPRI, r0
 8004b4a:	4770      	bx	lr
 8004b4c:	f3af 8000 	nop.w

08004b50 <pxCurrentTCBConst2>:
 8004b50:	200006ec 	.word	0x200006ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004b54:	bf00      	nop
 8004b56:	bf00      	nop

08004b58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004b58:	4808      	ldr	r0, [pc, #32]	; (8004b7c <prvPortStartFirstTask+0x24>)
 8004b5a:	6800      	ldr	r0, [r0, #0]
 8004b5c:	6800      	ldr	r0, [r0, #0]
 8004b5e:	f380 8808 	msr	MSP, r0
 8004b62:	f04f 0000 	mov.w	r0, #0
 8004b66:	f380 8814 	msr	CONTROL, r0
 8004b6a:	b662      	cpsie	i
 8004b6c:	b661      	cpsie	f
 8004b6e:	f3bf 8f4f 	dsb	sy
 8004b72:	f3bf 8f6f 	isb	sy
 8004b76:	df00      	svc	0
 8004b78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004b7a:	bf00      	nop
 8004b7c:	e000ed08 	.word	0xe000ed08

08004b80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b086      	sub	sp, #24
 8004b84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004b86:	4b46      	ldr	r3, [pc, #280]	; (8004ca0 <xPortStartScheduler+0x120>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a46      	ldr	r2, [pc, #280]	; (8004ca4 <xPortStartScheduler+0x124>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d10a      	bne.n	8004ba6 <xPortStartScheduler+0x26>
	__asm volatile
 8004b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b94:	f383 8811 	msr	BASEPRI, r3
 8004b98:	f3bf 8f6f 	isb	sy
 8004b9c:	f3bf 8f4f 	dsb	sy
 8004ba0:	613b      	str	r3, [r7, #16]
}
 8004ba2:	bf00      	nop
 8004ba4:	e7fe      	b.n	8004ba4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004ba6:	4b3e      	ldr	r3, [pc, #248]	; (8004ca0 <xPortStartScheduler+0x120>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a3f      	ldr	r2, [pc, #252]	; (8004ca8 <xPortStartScheduler+0x128>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d10a      	bne.n	8004bc6 <xPortStartScheduler+0x46>
	__asm volatile
 8004bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb4:	f383 8811 	msr	BASEPRI, r3
 8004bb8:	f3bf 8f6f 	isb	sy
 8004bbc:	f3bf 8f4f 	dsb	sy
 8004bc0:	60fb      	str	r3, [r7, #12]
}
 8004bc2:	bf00      	nop
 8004bc4:	e7fe      	b.n	8004bc4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004bc6:	4b39      	ldr	r3, [pc, #228]	; (8004cac <xPortStartScheduler+0x12c>)
 8004bc8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	22ff      	movs	r2, #255	; 0xff
 8004bd6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004be0:	78fb      	ldrb	r3, [r7, #3]
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004be8:	b2da      	uxtb	r2, r3
 8004bea:	4b31      	ldr	r3, [pc, #196]	; (8004cb0 <xPortStartScheduler+0x130>)
 8004bec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004bee:	4b31      	ldr	r3, [pc, #196]	; (8004cb4 <xPortStartScheduler+0x134>)
 8004bf0:	2207      	movs	r2, #7
 8004bf2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004bf4:	e009      	b.n	8004c0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004bf6:	4b2f      	ldr	r3, [pc, #188]	; (8004cb4 <xPortStartScheduler+0x134>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	3b01      	subs	r3, #1
 8004bfc:	4a2d      	ldr	r2, [pc, #180]	; (8004cb4 <xPortStartScheduler+0x134>)
 8004bfe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004c00:	78fb      	ldrb	r3, [r7, #3]
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	005b      	lsls	r3, r3, #1
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c0a:	78fb      	ldrb	r3, [r7, #3]
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c12:	2b80      	cmp	r3, #128	; 0x80
 8004c14:	d0ef      	beq.n	8004bf6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004c16:	4b27      	ldr	r3, [pc, #156]	; (8004cb4 <xPortStartScheduler+0x134>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f1c3 0307 	rsb	r3, r3, #7
 8004c1e:	2b04      	cmp	r3, #4
 8004c20:	d00a      	beq.n	8004c38 <xPortStartScheduler+0xb8>
	__asm volatile
 8004c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c26:	f383 8811 	msr	BASEPRI, r3
 8004c2a:	f3bf 8f6f 	isb	sy
 8004c2e:	f3bf 8f4f 	dsb	sy
 8004c32:	60bb      	str	r3, [r7, #8]
}
 8004c34:	bf00      	nop
 8004c36:	e7fe      	b.n	8004c36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004c38:	4b1e      	ldr	r3, [pc, #120]	; (8004cb4 <xPortStartScheduler+0x134>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	021b      	lsls	r3, r3, #8
 8004c3e:	4a1d      	ldr	r2, [pc, #116]	; (8004cb4 <xPortStartScheduler+0x134>)
 8004c40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004c42:	4b1c      	ldr	r3, [pc, #112]	; (8004cb4 <xPortStartScheduler+0x134>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c4a:	4a1a      	ldr	r2, [pc, #104]	; (8004cb4 <xPortStartScheduler+0x134>)
 8004c4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	b2da      	uxtb	r2, r3
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004c56:	4b18      	ldr	r3, [pc, #96]	; (8004cb8 <xPortStartScheduler+0x138>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a17      	ldr	r2, [pc, #92]	; (8004cb8 <xPortStartScheduler+0x138>)
 8004c5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004c60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004c62:	4b15      	ldr	r3, [pc, #84]	; (8004cb8 <xPortStartScheduler+0x138>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a14      	ldr	r2, [pc, #80]	; (8004cb8 <xPortStartScheduler+0x138>)
 8004c68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004c6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004c6e:	f000 f8dd 	bl	8004e2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004c72:	4b12      	ldr	r3, [pc, #72]	; (8004cbc <xPortStartScheduler+0x13c>)
 8004c74:	2200      	movs	r2, #0
 8004c76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004c78:	f000 f8fc 	bl	8004e74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004c7c:	4b10      	ldr	r3, [pc, #64]	; (8004cc0 <xPortStartScheduler+0x140>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a0f      	ldr	r2, [pc, #60]	; (8004cc0 <xPortStartScheduler+0x140>)
 8004c82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004c86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004c88:	f7ff ff66 	bl	8004b58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004c8c:	f7ff f856 	bl	8003d3c <vTaskSwitchContext>
	prvTaskExitError();
 8004c90:	f7ff ff22 	bl	8004ad8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3718      	adds	r7, #24
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	e000ed00 	.word	0xe000ed00
 8004ca4:	410fc271 	.word	0x410fc271
 8004ca8:	410fc270 	.word	0x410fc270
 8004cac:	e000e400 	.word	0xe000e400
 8004cb0:	20000d18 	.word	0x20000d18
 8004cb4:	20000d1c 	.word	0x20000d1c
 8004cb8:	e000ed20 	.word	0xe000ed20
 8004cbc:	2000000c 	.word	0x2000000c
 8004cc0:	e000ef34 	.word	0xe000ef34

08004cc4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
	__asm volatile
 8004cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cce:	f383 8811 	msr	BASEPRI, r3
 8004cd2:	f3bf 8f6f 	isb	sy
 8004cd6:	f3bf 8f4f 	dsb	sy
 8004cda:	607b      	str	r3, [r7, #4]
}
 8004cdc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004cde:	4b0f      	ldr	r3, [pc, #60]	; (8004d1c <vPortEnterCritical+0x58>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	4a0d      	ldr	r2, [pc, #52]	; (8004d1c <vPortEnterCritical+0x58>)
 8004ce6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004ce8:	4b0c      	ldr	r3, [pc, #48]	; (8004d1c <vPortEnterCritical+0x58>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d10f      	bne.n	8004d10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004cf0:	4b0b      	ldr	r3, [pc, #44]	; (8004d20 <vPortEnterCritical+0x5c>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00a      	beq.n	8004d10 <vPortEnterCritical+0x4c>
	__asm volatile
 8004cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cfe:	f383 8811 	msr	BASEPRI, r3
 8004d02:	f3bf 8f6f 	isb	sy
 8004d06:	f3bf 8f4f 	dsb	sy
 8004d0a:	603b      	str	r3, [r7, #0]
}
 8004d0c:	bf00      	nop
 8004d0e:	e7fe      	b.n	8004d0e <vPortEnterCritical+0x4a>
	}
}
 8004d10:	bf00      	nop
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr
 8004d1c:	2000000c 	.word	0x2000000c
 8004d20:	e000ed04 	.word	0xe000ed04

08004d24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004d2a:	4b12      	ldr	r3, [pc, #72]	; (8004d74 <vPortExitCritical+0x50>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d10a      	bne.n	8004d48 <vPortExitCritical+0x24>
	__asm volatile
 8004d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d36:	f383 8811 	msr	BASEPRI, r3
 8004d3a:	f3bf 8f6f 	isb	sy
 8004d3e:	f3bf 8f4f 	dsb	sy
 8004d42:	607b      	str	r3, [r7, #4]
}
 8004d44:	bf00      	nop
 8004d46:	e7fe      	b.n	8004d46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004d48:	4b0a      	ldr	r3, [pc, #40]	; (8004d74 <vPortExitCritical+0x50>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	3b01      	subs	r3, #1
 8004d4e:	4a09      	ldr	r2, [pc, #36]	; (8004d74 <vPortExitCritical+0x50>)
 8004d50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004d52:	4b08      	ldr	r3, [pc, #32]	; (8004d74 <vPortExitCritical+0x50>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d105      	bne.n	8004d66 <vPortExitCritical+0x42>
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	f383 8811 	msr	BASEPRI, r3
}
 8004d64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004d66:	bf00      	nop
 8004d68:	370c      	adds	r7, #12
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	2000000c 	.word	0x2000000c
	...

08004d80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004d80:	f3ef 8009 	mrs	r0, PSP
 8004d84:	f3bf 8f6f 	isb	sy
 8004d88:	4b15      	ldr	r3, [pc, #84]	; (8004de0 <pxCurrentTCBConst>)
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	f01e 0f10 	tst.w	lr, #16
 8004d90:	bf08      	it	eq
 8004d92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004d96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d9a:	6010      	str	r0, [r2, #0]
 8004d9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004da0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004da4:	f380 8811 	msr	BASEPRI, r0
 8004da8:	f3bf 8f4f 	dsb	sy
 8004dac:	f3bf 8f6f 	isb	sy
 8004db0:	f7fe ffc4 	bl	8003d3c <vTaskSwitchContext>
 8004db4:	f04f 0000 	mov.w	r0, #0
 8004db8:	f380 8811 	msr	BASEPRI, r0
 8004dbc:	bc09      	pop	{r0, r3}
 8004dbe:	6819      	ldr	r1, [r3, #0]
 8004dc0:	6808      	ldr	r0, [r1, #0]
 8004dc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dc6:	f01e 0f10 	tst.w	lr, #16
 8004dca:	bf08      	it	eq
 8004dcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004dd0:	f380 8809 	msr	PSP, r0
 8004dd4:	f3bf 8f6f 	isb	sy
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	f3af 8000 	nop.w

08004de0 <pxCurrentTCBConst>:
 8004de0:	200006ec 	.word	0x200006ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004de4:	bf00      	nop
 8004de6:	bf00      	nop

08004de8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b082      	sub	sp, #8
 8004dec:	af00      	add	r7, sp, #0
	__asm volatile
 8004dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df2:	f383 8811 	msr	BASEPRI, r3
 8004df6:	f3bf 8f6f 	isb	sy
 8004dfa:	f3bf 8f4f 	dsb	sy
 8004dfe:	607b      	str	r3, [r7, #4]
}
 8004e00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004e02:	f7fe fee1 	bl	8003bc8 <xTaskIncrementTick>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d003      	beq.n	8004e14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004e0c:	4b06      	ldr	r3, [pc, #24]	; (8004e28 <xPortSysTickHandler+0x40>)
 8004e0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e12:	601a      	str	r2, [r3, #0]
 8004e14:	2300      	movs	r3, #0
 8004e16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	f383 8811 	msr	BASEPRI, r3
}
 8004e1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004e20:	bf00      	nop
 8004e22:	3708      	adds	r7, #8
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	e000ed04 	.word	0xe000ed04

08004e2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004e30:	4b0b      	ldr	r3, [pc, #44]	; (8004e60 <vPortSetupTimerInterrupt+0x34>)
 8004e32:	2200      	movs	r2, #0
 8004e34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004e36:	4b0b      	ldr	r3, [pc, #44]	; (8004e64 <vPortSetupTimerInterrupt+0x38>)
 8004e38:	2200      	movs	r2, #0
 8004e3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004e3c:	4b0a      	ldr	r3, [pc, #40]	; (8004e68 <vPortSetupTimerInterrupt+0x3c>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a0a      	ldr	r2, [pc, #40]	; (8004e6c <vPortSetupTimerInterrupt+0x40>)
 8004e42:	fba2 2303 	umull	r2, r3, r2, r3
 8004e46:	099b      	lsrs	r3, r3, #6
 8004e48:	4a09      	ldr	r2, [pc, #36]	; (8004e70 <vPortSetupTimerInterrupt+0x44>)
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004e4e:	4b04      	ldr	r3, [pc, #16]	; (8004e60 <vPortSetupTimerInterrupt+0x34>)
 8004e50:	2207      	movs	r2, #7
 8004e52:	601a      	str	r2, [r3, #0]
}
 8004e54:	bf00      	nop
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr
 8004e5e:	bf00      	nop
 8004e60:	e000e010 	.word	0xe000e010
 8004e64:	e000e018 	.word	0xe000e018
 8004e68:	20000000 	.word	0x20000000
 8004e6c:	10624dd3 	.word	0x10624dd3
 8004e70:	e000e014 	.word	0xe000e014

08004e74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004e74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004e84 <vPortEnableVFP+0x10>
 8004e78:	6801      	ldr	r1, [r0, #0]
 8004e7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004e7e:	6001      	str	r1, [r0, #0]
 8004e80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004e82:	bf00      	nop
 8004e84:	e000ed88 	.word	0xe000ed88

08004e88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004e88:	b480      	push	{r7}
 8004e8a:	b085      	sub	sp, #20
 8004e8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004e8e:	f3ef 8305 	mrs	r3, IPSR
 8004e92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2b0f      	cmp	r3, #15
 8004e98:	d914      	bls.n	8004ec4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004e9a:	4a17      	ldr	r2, [pc, #92]	; (8004ef8 <vPortValidateInterruptPriority+0x70>)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	781b      	ldrb	r3, [r3, #0]
 8004ea2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004ea4:	4b15      	ldr	r3, [pc, #84]	; (8004efc <vPortValidateInterruptPriority+0x74>)
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	7afa      	ldrb	r2, [r7, #11]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d20a      	bcs.n	8004ec4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb2:	f383 8811 	msr	BASEPRI, r3
 8004eb6:	f3bf 8f6f 	isb	sy
 8004eba:	f3bf 8f4f 	dsb	sy
 8004ebe:	607b      	str	r3, [r7, #4]
}
 8004ec0:	bf00      	nop
 8004ec2:	e7fe      	b.n	8004ec2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004ec4:	4b0e      	ldr	r3, [pc, #56]	; (8004f00 <vPortValidateInterruptPriority+0x78>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004ecc:	4b0d      	ldr	r3, [pc, #52]	; (8004f04 <vPortValidateInterruptPriority+0x7c>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d90a      	bls.n	8004eea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed8:	f383 8811 	msr	BASEPRI, r3
 8004edc:	f3bf 8f6f 	isb	sy
 8004ee0:	f3bf 8f4f 	dsb	sy
 8004ee4:	603b      	str	r3, [r7, #0]
}
 8004ee6:	bf00      	nop
 8004ee8:	e7fe      	b.n	8004ee8 <vPortValidateInterruptPriority+0x60>
	}
 8004eea:	bf00      	nop
 8004eec:	3714      	adds	r7, #20
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	e000e3f0 	.word	0xe000e3f0
 8004efc:	20000d18 	.word	0x20000d18
 8004f00:	e000ed0c 	.word	0xe000ed0c
 8004f04:	20000d1c 	.word	0x20000d1c

08004f08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b08a      	sub	sp, #40	; 0x28
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004f10:	2300      	movs	r3, #0
 8004f12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004f14:	f7fe fd9c 	bl	8003a50 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004f18:	4b5b      	ldr	r3, [pc, #364]	; (8005088 <pvPortMalloc+0x180>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d101      	bne.n	8004f24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004f20:	f000 f920 	bl	8005164 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004f24:	4b59      	ldr	r3, [pc, #356]	; (800508c <pvPortMalloc+0x184>)
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	f040 8093 	bne.w	8005058 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d01d      	beq.n	8004f74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004f38:	2208      	movs	r2, #8
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4413      	add	r3, r2
 8004f3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f003 0307 	and.w	r3, r3, #7
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d014      	beq.n	8004f74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f023 0307 	bic.w	r3, r3, #7
 8004f50:	3308      	adds	r3, #8
 8004f52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f003 0307 	and.w	r3, r3, #7
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d00a      	beq.n	8004f74 <pvPortMalloc+0x6c>
	__asm volatile
 8004f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f62:	f383 8811 	msr	BASEPRI, r3
 8004f66:	f3bf 8f6f 	isb	sy
 8004f6a:	f3bf 8f4f 	dsb	sy
 8004f6e:	617b      	str	r3, [r7, #20]
}
 8004f70:	bf00      	nop
 8004f72:	e7fe      	b.n	8004f72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d06e      	beq.n	8005058 <pvPortMalloc+0x150>
 8004f7a:	4b45      	ldr	r3, [pc, #276]	; (8005090 <pvPortMalloc+0x188>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d869      	bhi.n	8005058 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004f84:	4b43      	ldr	r3, [pc, #268]	; (8005094 <pvPortMalloc+0x18c>)
 8004f86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004f88:	4b42      	ldr	r3, [pc, #264]	; (8005094 <pvPortMalloc+0x18c>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f8e:	e004      	b.n	8004f9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d903      	bls.n	8004fac <pvPortMalloc+0xa4>
 8004fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d1f1      	bne.n	8004f90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004fac:	4b36      	ldr	r3, [pc, #216]	; (8005088 <pvPortMalloc+0x180>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d050      	beq.n	8005058 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004fb6:	6a3b      	ldr	r3, [r7, #32]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2208      	movs	r2, #8
 8004fbc:	4413      	add	r3, r2
 8004fbe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	6a3b      	ldr	r3, [r7, #32]
 8004fc6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fca:	685a      	ldr	r2, [r3, #4]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	1ad2      	subs	r2, r2, r3
 8004fd0:	2308      	movs	r3, #8
 8004fd2:	005b      	lsls	r3, r3, #1
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d91f      	bls.n	8005018 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004fd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4413      	add	r3, r2
 8004fde:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	f003 0307 	and.w	r3, r3, #7
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d00a      	beq.n	8005000 <pvPortMalloc+0xf8>
	__asm volatile
 8004fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fee:	f383 8811 	msr	BASEPRI, r3
 8004ff2:	f3bf 8f6f 	isb	sy
 8004ff6:	f3bf 8f4f 	dsb	sy
 8004ffa:	613b      	str	r3, [r7, #16]
}
 8004ffc:	bf00      	nop
 8004ffe:	e7fe      	b.n	8004ffe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005002:	685a      	ldr	r2, [r3, #4]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	1ad2      	subs	r2, r2, r3
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800500c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005012:	69b8      	ldr	r0, [r7, #24]
 8005014:	f000 f908 	bl	8005228 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005018:	4b1d      	ldr	r3, [pc, #116]	; (8005090 <pvPortMalloc+0x188>)
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	4a1b      	ldr	r2, [pc, #108]	; (8005090 <pvPortMalloc+0x188>)
 8005024:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005026:	4b1a      	ldr	r3, [pc, #104]	; (8005090 <pvPortMalloc+0x188>)
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	4b1b      	ldr	r3, [pc, #108]	; (8005098 <pvPortMalloc+0x190>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	429a      	cmp	r2, r3
 8005030:	d203      	bcs.n	800503a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005032:	4b17      	ldr	r3, [pc, #92]	; (8005090 <pvPortMalloc+0x188>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a18      	ldr	r2, [pc, #96]	; (8005098 <pvPortMalloc+0x190>)
 8005038:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800503a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503c:	685a      	ldr	r2, [r3, #4]
 800503e:	4b13      	ldr	r3, [pc, #76]	; (800508c <pvPortMalloc+0x184>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	431a      	orrs	r2, r3
 8005044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005046:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504a:	2200      	movs	r2, #0
 800504c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800504e:	4b13      	ldr	r3, [pc, #76]	; (800509c <pvPortMalloc+0x194>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	3301      	adds	r3, #1
 8005054:	4a11      	ldr	r2, [pc, #68]	; (800509c <pvPortMalloc+0x194>)
 8005056:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005058:	f7fe fd08 	bl	8003a6c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	f003 0307 	and.w	r3, r3, #7
 8005062:	2b00      	cmp	r3, #0
 8005064:	d00a      	beq.n	800507c <pvPortMalloc+0x174>
	__asm volatile
 8005066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800506a:	f383 8811 	msr	BASEPRI, r3
 800506e:	f3bf 8f6f 	isb	sy
 8005072:	f3bf 8f4f 	dsb	sy
 8005076:	60fb      	str	r3, [r7, #12]
}
 8005078:	bf00      	nop
 800507a:	e7fe      	b.n	800507a <pvPortMalloc+0x172>
	return pvReturn;
 800507c:	69fb      	ldr	r3, [r7, #28]
}
 800507e:	4618      	mov	r0, r3
 8005080:	3728      	adds	r7, #40	; 0x28
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	200018e0 	.word	0x200018e0
 800508c:	200018f4 	.word	0x200018f4
 8005090:	200018e4 	.word	0x200018e4
 8005094:	200018d8 	.word	0x200018d8
 8005098:	200018e8 	.word	0x200018e8
 800509c:	200018ec 	.word	0x200018ec

080050a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b086      	sub	sp, #24
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d04d      	beq.n	800514e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80050b2:	2308      	movs	r3, #8
 80050b4:	425b      	negs	r3, r3
 80050b6:	697a      	ldr	r2, [r7, #20]
 80050b8:	4413      	add	r3, r2
 80050ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	685a      	ldr	r2, [r3, #4]
 80050c4:	4b24      	ldr	r3, [pc, #144]	; (8005158 <vPortFree+0xb8>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4013      	ands	r3, r2
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d10a      	bne.n	80050e4 <vPortFree+0x44>
	__asm volatile
 80050ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d2:	f383 8811 	msr	BASEPRI, r3
 80050d6:	f3bf 8f6f 	isb	sy
 80050da:	f3bf 8f4f 	dsb	sy
 80050de:	60fb      	str	r3, [r7, #12]
}
 80050e0:	bf00      	nop
 80050e2:	e7fe      	b.n	80050e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d00a      	beq.n	8005102 <vPortFree+0x62>
	__asm volatile
 80050ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f0:	f383 8811 	msr	BASEPRI, r3
 80050f4:	f3bf 8f6f 	isb	sy
 80050f8:	f3bf 8f4f 	dsb	sy
 80050fc:	60bb      	str	r3, [r7, #8]
}
 80050fe:	bf00      	nop
 8005100:	e7fe      	b.n	8005100 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	685a      	ldr	r2, [r3, #4]
 8005106:	4b14      	ldr	r3, [pc, #80]	; (8005158 <vPortFree+0xb8>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4013      	ands	r3, r2
 800510c:	2b00      	cmp	r3, #0
 800510e:	d01e      	beq.n	800514e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d11a      	bne.n	800514e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	685a      	ldr	r2, [r3, #4]
 800511c:	4b0e      	ldr	r3, [pc, #56]	; (8005158 <vPortFree+0xb8>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	43db      	mvns	r3, r3
 8005122:	401a      	ands	r2, r3
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005128:	f7fe fc92 	bl	8003a50 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	685a      	ldr	r2, [r3, #4]
 8005130:	4b0a      	ldr	r3, [pc, #40]	; (800515c <vPortFree+0xbc>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4413      	add	r3, r2
 8005136:	4a09      	ldr	r2, [pc, #36]	; (800515c <vPortFree+0xbc>)
 8005138:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800513a:	6938      	ldr	r0, [r7, #16]
 800513c:	f000 f874 	bl	8005228 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005140:	4b07      	ldr	r3, [pc, #28]	; (8005160 <vPortFree+0xc0>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	3301      	adds	r3, #1
 8005146:	4a06      	ldr	r2, [pc, #24]	; (8005160 <vPortFree+0xc0>)
 8005148:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800514a:	f7fe fc8f 	bl	8003a6c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800514e:	bf00      	nop
 8005150:	3718      	adds	r7, #24
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	200018f4 	.word	0x200018f4
 800515c:	200018e4 	.word	0x200018e4
 8005160:	200018f0 	.word	0x200018f0

08005164 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005164:	b480      	push	{r7}
 8005166:	b085      	sub	sp, #20
 8005168:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800516a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800516e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005170:	4b27      	ldr	r3, [pc, #156]	; (8005210 <prvHeapInit+0xac>)
 8005172:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f003 0307 	and.w	r3, r3, #7
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00c      	beq.n	8005198 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	3307      	adds	r3, #7
 8005182:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f023 0307 	bic.w	r3, r3, #7
 800518a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800518c:	68ba      	ldr	r2, [r7, #8]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	4a1f      	ldr	r2, [pc, #124]	; (8005210 <prvHeapInit+0xac>)
 8005194:	4413      	add	r3, r2
 8005196:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800519c:	4a1d      	ldr	r2, [pc, #116]	; (8005214 <prvHeapInit+0xb0>)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80051a2:	4b1c      	ldr	r3, [pc, #112]	; (8005214 <prvHeapInit+0xb0>)
 80051a4:	2200      	movs	r2, #0
 80051a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	68ba      	ldr	r2, [r7, #8]
 80051ac:	4413      	add	r3, r2
 80051ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80051b0:	2208      	movs	r2, #8
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	1a9b      	subs	r3, r3, r2
 80051b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f023 0307 	bic.w	r3, r3, #7
 80051be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	4a15      	ldr	r2, [pc, #84]	; (8005218 <prvHeapInit+0xb4>)
 80051c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80051c6:	4b14      	ldr	r3, [pc, #80]	; (8005218 <prvHeapInit+0xb4>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	2200      	movs	r2, #0
 80051cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80051ce:	4b12      	ldr	r3, [pc, #72]	; (8005218 <prvHeapInit+0xb4>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2200      	movs	r2, #0
 80051d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	1ad2      	subs	r2, r2, r3
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80051e4:	4b0c      	ldr	r3, [pc, #48]	; (8005218 <prvHeapInit+0xb4>)
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	4a0a      	ldr	r2, [pc, #40]	; (800521c <prvHeapInit+0xb8>)
 80051f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	4a09      	ldr	r2, [pc, #36]	; (8005220 <prvHeapInit+0xbc>)
 80051fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80051fc:	4b09      	ldr	r3, [pc, #36]	; (8005224 <prvHeapInit+0xc0>)
 80051fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005202:	601a      	str	r2, [r3, #0]
}
 8005204:	bf00      	nop
 8005206:	3714      	adds	r7, #20
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr
 8005210:	20000d20 	.word	0x20000d20
 8005214:	200018d8 	.word	0x200018d8
 8005218:	200018e0 	.word	0x200018e0
 800521c:	200018e8 	.word	0x200018e8
 8005220:	200018e4 	.word	0x200018e4
 8005224:	200018f4 	.word	0x200018f4

08005228 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005228:	b480      	push	{r7}
 800522a:	b085      	sub	sp, #20
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005230:	4b28      	ldr	r3, [pc, #160]	; (80052d4 <prvInsertBlockIntoFreeList+0xac>)
 8005232:	60fb      	str	r3, [r7, #12]
 8005234:	e002      	b.n	800523c <prvInsertBlockIntoFreeList+0x14>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	60fb      	str	r3, [r7, #12]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	429a      	cmp	r2, r3
 8005244:	d8f7      	bhi.n	8005236 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	68ba      	ldr	r2, [r7, #8]
 8005250:	4413      	add	r3, r2
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	429a      	cmp	r2, r3
 8005256:	d108      	bne.n	800526a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	685a      	ldr	r2, [r3, #4]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	441a      	add	r2, r3
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	68ba      	ldr	r2, [r7, #8]
 8005274:	441a      	add	r2, r3
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	429a      	cmp	r2, r3
 800527c:	d118      	bne.n	80052b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	4b15      	ldr	r3, [pc, #84]	; (80052d8 <prvInsertBlockIntoFreeList+0xb0>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	429a      	cmp	r2, r3
 8005288:	d00d      	beq.n	80052a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	685a      	ldr	r2, [r3, #4]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	441a      	add	r2, r3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	601a      	str	r2, [r3, #0]
 80052a4:	e008      	b.n	80052b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80052a6:	4b0c      	ldr	r3, [pc, #48]	; (80052d8 <prvInsertBlockIntoFreeList+0xb0>)
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	601a      	str	r2, [r3, #0]
 80052ae:	e003      	b.n	80052b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d002      	beq.n	80052c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052c6:	bf00      	nop
 80052c8:	3714      	adds	r7, #20
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr
 80052d2:	bf00      	nop
 80052d4:	200018d8 	.word	0x200018d8
 80052d8:	200018e0 	.word	0x200018e0

080052dc <IIM42652_ReadRegister>:




HAL_StatusTypeDef IIM42652_ReadRegister( IIM42652 *dev, uint8_t reg, uint8_t *data )
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b088      	sub	sp, #32
 80052e0:	af04      	add	r7, sp, #16
 80052e2:	60f8      	str	r0, [r7, #12]
 80052e4:	460b      	mov	r3, r1
 80052e6:	607a      	str	r2, [r7, #4]
 80052e8:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Read( dev->i2cHandle, IIM42652_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6818      	ldr	r0, [r3, #0]
 80052ee:	7afb      	ldrb	r3, [r7, #11]
 80052f0:	b29a      	uxth	r2, r3
 80052f2:	f04f 33ff 	mov.w	r3, #4294967295
 80052f6:	9302      	str	r3, [sp, #8]
 80052f8:	2301      	movs	r3, #1
 80052fa:	9301      	str	r3, [sp, #4]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	9300      	str	r3, [sp, #0]
 8005300:	2301      	movs	r3, #1
 8005302:	21d2      	movs	r1, #210	; 0xd2
 8005304:	f7fb fd70 	bl	8000de8 <HAL_I2C_Mem_Read>
 8005308:	4603      	mov	r3, r0
}
 800530a:	4618      	mov	r0, r3
 800530c:	3710      	adds	r7, #16
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}

08005312 <IIM42652_Init>:
	return HAL_I2C_Mem_Write( dev->i2cHandle, IIM42652_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
}


uint8_t IIM42652_Init( IIM42652 *dev, I2C_HandleTypeDef *i2cHandle )
{
 8005312:	b580      	push	{r7, lr}
 8005314:	b084      	sub	sp, #16
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
 800531a:	6039      	str	r1, [r7, #0]

	/* Initialise structure parameters */
	dev->i2cHandle = i2cHandle;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	683a      	ldr	r2, [r7, #0]
 8005320:	601a      	str	r2, [r3, #0]

	dev->acc[0] = 0.0f;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f04f 0200 	mov.w	r2, #0
 8005328:	605a      	str	r2, [r3, #4]
	dev->acc[1] = 0.0f;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f04f 0200 	mov.w	r2, #0
 8005330:	609a      	str	r2, [r3, #8]
	dev->acc[2] = 0.0f;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f04f 0200 	mov.w	r2, #0
 8005338:	60da      	str	r2, [r3, #12]

	dev->gyr[0] = 0.0f;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f04f 0200 	mov.w	r2, #0
 8005340:	611a      	str	r2, [r3, #16]
	dev->gyr[1] = 0.0f;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f04f 0200 	mov.w	r2, #0
 8005348:	615a      	str	r2, [r3, #20]
	dev->gyr[2] = 0.0f;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f04f 0200 	mov.w	r2, #0
 8005350:	619a      	str	r2, [r3, #24]

	dev->temp_c = 0.0f;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f04f 0200 	mov.w	r2, #0
 8005358:	61da      	str	r2, [r3, #28]

	/* I2C transaction errors */
	uint8_t errNum = 0;
 800535a:	2300      	movs	r3, #0
 800535c:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef status;

	/* Check for device ID */
	uint8_t regDataID;

	status = IIM42652_ReadRegister(dev, WHO_AM_I_ADD, &regDataID);
 800535e:	f107 030d 	add.w	r3, r7, #13
 8005362:	461a      	mov	r2, r3
 8005364:	2175      	movs	r1, #117	; 0x75
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f7ff ffb8 	bl	80052dc <IIM42652_ReadRegister>
 800536c:	4603      	mov	r3, r0
 800536e:	73bb      	strb	r3, [r7, #14]
	errNum += ( status != HAL_OK );
 8005370:	7bbb      	ldrb	r3, [r7, #14]
 8005372:	2b00      	cmp	r3, #0
 8005374:	bf14      	ite	ne
 8005376:	2301      	movne	r3, #1
 8005378:	2300      	moveq	r3, #0
 800537a:	b2db      	uxtb	r3, r3
 800537c:	461a      	mov	r2, r3
 800537e:	7bfb      	ldrb	r3, [r7, #15]
 8005380:	4413      	add	r3, r2
 8005382:	73fb      	strb	r3, [r7, #15]

	/* If ID not equal to IIM42652_I2C_ID, Init returns with an error code */
	if( regDataID != IIM42652_I2C_ID ) return 0xFF;
 8005384:	7b7b      	ldrb	r3, [r7, #13]
 8005386:	2b6f      	cmp	r3, #111	; 0x6f
 8005388:	d001      	beq.n	800538e <IIM42652_Init+0x7c>
 800538a:	23ff      	movs	r3, #255	; 0xff
 800538c:	e000      	b.n	8005390 <IIM42652_Init+0x7e>


	return 0;
 800538e:	2300      	movs	r3, #0
}
 8005390:	4618      	mov	r0, r3
 8005392:	3710      	adds	r7, #16
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}

08005398 <__libc_init_array>:
 8005398:	b570      	push	{r4, r5, r6, lr}
 800539a:	4d0d      	ldr	r5, [pc, #52]	; (80053d0 <__libc_init_array+0x38>)
 800539c:	4c0d      	ldr	r4, [pc, #52]	; (80053d4 <__libc_init_array+0x3c>)
 800539e:	1b64      	subs	r4, r4, r5
 80053a0:	10a4      	asrs	r4, r4, #2
 80053a2:	2600      	movs	r6, #0
 80053a4:	42a6      	cmp	r6, r4
 80053a6:	d109      	bne.n	80053bc <__libc_init_array+0x24>
 80053a8:	4d0b      	ldr	r5, [pc, #44]	; (80053d8 <__libc_init_array+0x40>)
 80053aa:	4c0c      	ldr	r4, [pc, #48]	; (80053dc <__libc_init_array+0x44>)
 80053ac:	f000 f82e 	bl	800540c <_init>
 80053b0:	1b64      	subs	r4, r4, r5
 80053b2:	10a4      	asrs	r4, r4, #2
 80053b4:	2600      	movs	r6, #0
 80053b6:	42a6      	cmp	r6, r4
 80053b8:	d105      	bne.n	80053c6 <__libc_init_array+0x2e>
 80053ba:	bd70      	pop	{r4, r5, r6, pc}
 80053bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80053c0:	4798      	blx	r3
 80053c2:	3601      	adds	r6, #1
 80053c4:	e7ee      	b.n	80053a4 <__libc_init_array+0xc>
 80053c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80053ca:	4798      	blx	r3
 80053cc:	3601      	adds	r6, #1
 80053ce:	e7f2      	b.n	80053b6 <__libc_init_array+0x1e>
 80053d0:	080054b4 	.word	0x080054b4
 80053d4:	080054b4 	.word	0x080054b4
 80053d8:	080054b4 	.word	0x080054b4
 80053dc:	080054b8 	.word	0x080054b8

080053e0 <memcpy>:
 80053e0:	440a      	add	r2, r1
 80053e2:	4291      	cmp	r1, r2
 80053e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80053e8:	d100      	bne.n	80053ec <memcpy+0xc>
 80053ea:	4770      	bx	lr
 80053ec:	b510      	push	{r4, lr}
 80053ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053f6:	4291      	cmp	r1, r2
 80053f8:	d1f9      	bne.n	80053ee <memcpy+0xe>
 80053fa:	bd10      	pop	{r4, pc}

080053fc <memset>:
 80053fc:	4402      	add	r2, r0
 80053fe:	4603      	mov	r3, r0
 8005400:	4293      	cmp	r3, r2
 8005402:	d100      	bne.n	8005406 <memset+0xa>
 8005404:	4770      	bx	lr
 8005406:	f803 1b01 	strb.w	r1, [r3], #1
 800540a:	e7f9      	b.n	8005400 <memset+0x4>

0800540c <_init>:
 800540c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800540e:	bf00      	nop
 8005410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005412:	bc08      	pop	{r3}
 8005414:	469e      	mov	lr, r3
 8005416:	4770      	bx	lr

08005418 <_fini>:
 8005418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800541a:	bf00      	nop
 800541c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800541e:	bc08      	pop	{r3}
 8005420:	469e      	mov	lr, r3
 8005422:	4770      	bx	lr
