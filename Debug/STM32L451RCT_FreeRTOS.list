
STM32L451RCT_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006968  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08006b08  08006b08  00016b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ba0  08006ba0  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08006ba0  08006ba0  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006ba0  08006ba0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ba0  08006ba0  00016ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ba4  08006ba4  00016ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006ba8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019bc  20000010  08006bb8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200019cc  08006bb8  000219cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a2e1  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000377f  00000000  00000000  0003a321  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a0  00000000  00000000  0003daa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001118  00000000  00000000  0003ed40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023316  00000000  00000000  0003fe58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001547c  00000000  00000000  0006316e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d054f  00000000  00000000  000785ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00148b39  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b50  00000000  00000000  00148b8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006af0 	.word	0x08006af0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08006af0 	.word	0x08006af0

080001e0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80001e4:	4a04      	ldr	r2, [pc, #16]	; (80001f8 <MX_FREERTOS_Init+0x18>)
 80001e6:	2100      	movs	r1, #0
 80001e8:	4804      	ldr	r0, [pc, #16]	; (80001fc <MX_FREERTOS_Init+0x1c>)
 80001ea:	f003 f801 	bl	80031f0 <osThreadNew>
 80001ee:	4603      	mov	r3, r0
 80001f0:	4a03      	ldr	r2, [pc, #12]	; (8000200 <MX_FREERTOS_Init+0x20>)
 80001f2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80001f4:	bf00      	nop
 80001f6:	bd80      	pop	{r7, pc}
 80001f8:	08006b3c 	.word	0x08006b3c
 80001fc:	08000205 	.word	0x08000205
 8000200:	20001908 	.word	0x20001908

08000204 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800020c:	2001      	movs	r0, #1
 800020e:	f003 f881 	bl	8003314 <osDelay>
 8000212:	e7fb      	b.n	800020c <StartDefaultTask+0x8>

08000214 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b08a      	sub	sp, #40	; 0x28
 8000218:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800021a:	f107 0314 	add.w	r3, r7, #20
 800021e:	2200      	movs	r2, #0
 8000220:	601a      	str	r2, [r3, #0]
 8000222:	605a      	str	r2, [r3, #4]
 8000224:	609a      	str	r2, [r3, #8]
 8000226:	60da      	str	r2, [r3, #12]
 8000228:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800022a:	4b34      	ldr	r3, [pc, #208]	; (80002fc <MX_GPIO_Init+0xe8>)
 800022c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800022e:	4a33      	ldr	r2, [pc, #204]	; (80002fc <MX_GPIO_Init+0xe8>)
 8000230:	f043 0304 	orr.w	r3, r3, #4
 8000234:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000236:	4b31      	ldr	r3, [pc, #196]	; (80002fc <MX_GPIO_Init+0xe8>)
 8000238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800023a:	f003 0304 	and.w	r3, r3, #4
 800023e:	613b      	str	r3, [r7, #16]
 8000240:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000242:	4b2e      	ldr	r3, [pc, #184]	; (80002fc <MX_GPIO_Init+0xe8>)
 8000244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000246:	4a2d      	ldr	r2, [pc, #180]	; (80002fc <MX_GPIO_Init+0xe8>)
 8000248:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800024c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800024e:	4b2b      	ldr	r3, [pc, #172]	; (80002fc <MX_GPIO_Init+0xe8>)
 8000250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000256:	60fb      	str	r3, [r7, #12]
 8000258:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800025a:	4b28      	ldr	r3, [pc, #160]	; (80002fc <MX_GPIO_Init+0xe8>)
 800025c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800025e:	4a27      	ldr	r2, [pc, #156]	; (80002fc <MX_GPIO_Init+0xe8>)
 8000260:	f043 0302 	orr.w	r3, r3, #2
 8000264:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000266:	4b25      	ldr	r3, [pc, #148]	; (80002fc <MX_GPIO_Init+0xe8>)
 8000268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800026a:	f003 0302 	and.w	r3, r3, #2
 800026e:	60bb      	str	r3, [r7, #8]
 8000270:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000272:	4b22      	ldr	r3, [pc, #136]	; (80002fc <MX_GPIO_Init+0xe8>)
 8000274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000276:	4a21      	ldr	r2, [pc, #132]	; (80002fc <MX_GPIO_Init+0xe8>)
 8000278:	f043 0301 	orr.w	r3, r3, #1
 800027c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800027e:	4b1f      	ldr	r3, [pc, #124]	; (80002fc <MX_GPIO_Init+0xe8>)
 8000280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000282:	f003 0301 	and.w	r3, r3, #1
 8000286:	607b      	str	r3, [r7, #4]
 8000288:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 800028a:	2200      	movs	r2, #0
 800028c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000290:	481b      	ldr	r0, [pc, #108]	; (8000300 <MX_GPIO_Init+0xec>)
 8000292:	f000 fdd1 	bl	8000e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000296:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800029a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800029c:	2301      	movs	r3, #1
 800029e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002a0:	2300      	movs	r3, #0
 80002a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002a4:	2300      	movs	r3, #0
 80002a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002a8:	f107 0314 	add.w	r3, r7, #20
 80002ac:	4619      	mov	r1, r3
 80002ae:	4814      	ldr	r0, [pc, #80]	; (8000300 <MX_GPIO_Init+0xec>)
 80002b0:	f000 fc48 	bl	8000b44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT_MAG_Pin;
 80002b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80002b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80002ba:	4b12      	ldr	r3, [pc, #72]	; (8000304 <MX_GPIO_Init+0xf0>)
 80002bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002be:	2300      	movs	r3, #0
 80002c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_MAG_GPIO_Port, &GPIO_InitStruct);
 80002c2:	f107 0314 	add.w	r3, r7, #20
 80002c6:	4619      	mov	r1, r3
 80002c8:	480f      	ldr	r0, [pc, #60]	; (8000308 <MX_GPIO_Init+0xf4>)
 80002ca:	f000 fc3b 	bl	8000b44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT_IMU_Pin;
 80002ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80002d4:	4b0d      	ldr	r3, [pc, #52]	; (800030c <MX_GPIO_Init+0xf8>)
 80002d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80002d8:	2301      	movs	r3, #1
 80002da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_IMU_GPIO_Port, &GPIO_InitStruct);
 80002dc:	f107 0314 	add.w	r3, r7, #20
 80002e0:	4619      	mov	r1, r3
 80002e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002e6:	f000 fc2d 	bl	8000b44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80002ea:	2200      	movs	r2, #0
 80002ec:	2105      	movs	r1, #5
 80002ee:	2028      	movs	r0, #40	; 0x28
 80002f0:	f000 fbf1 	bl	8000ad6 <HAL_NVIC_SetPriority>
  //HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

}
 80002f4:	bf00      	nop
 80002f6:	3728      	adds	r7, #40	; 0x28
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	40021000 	.word	0x40021000
 8000300:	48000800 	.word	0x48000800
 8000304:	10110000 	.word	0x10110000
 8000308:	48000400 	.word	0x48000400
 800030c:	10210000 	.word	0x10210000

08000310 <enableIRQ>:

/* USER CODE BEGIN 2 */


void enableIRQ( void )
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000314:	2028      	movs	r0, #40	; 0x28
 8000316:	f000 fbfa 	bl	8000b0e <HAL_NVIC_EnableIRQ>
}
 800031a:	bf00      	nop
 800031c:	bd80      	pop	{r7, pc}
	...

08000320 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000324:	4b1b      	ldr	r3, [pc, #108]	; (8000394 <MX_I2C2_Init+0x74>)
 8000326:	4a1c      	ldr	r2, [pc, #112]	; (8000398 <MX_I2C2_Init+0x78>)
 8000328:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 800032a:	4b1a      	ldr	r3, [pc, #104]	; (8000394 <MX_I2C2_Init+0x74>)
 800032c:	4a1b      	ldr	r2, [pc, #108]	; (800039c <MX_I2C2_Init+0x7c>)
 800032e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000330:	4b18      	ldr	r3, [pc, #96]	; (8000394 <MX_I2C2_Init+0x74>)
 8000332:	2200      	movs	r2, #0
 8000334:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000336:	4b17      	ldr	r3, [pc, #92]	; (8000394 <MX_I2C2_Init+0x74>)
 8000338:	2201      	movs	r2, #1
 800033a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800033c:	4b15      	ldr	r3, [pc, #84]	; (8000394 <MX_I2C2_Init+0x74>)
 800033e:	2200      	movs	r2, #0
 8000340:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000342:	4b14      	ldr	r3, [pc, #80]	; (8000394 <MX_I2C2_Init+0x74>)
 8000344:	2200      	movs	r2, #0
 8000346:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000348:	4b12      	ldr	r3, [pc, #72]	; (8000394 <MX_I2C2_Init+0x74>)
 800034a:	2200      	movs	r2, #0
 800034c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800034e:	4b11      	ldr	r3, [pc, #68]	; (8000394 <MX_I2C2_Init+0x74>)
 8000350:	2200      	movs	r2, #0
 8000352:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000354:	4b0f      	ldr	r3, [pc, #60]	; (8000394 <MX_I2C2_Init+0x74>)
 8000356:	2200      	movs	r2, #0
 8000358:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800035a:	480e      	ldr	r0, [pc, #56]	; (8000394 <MX_I2C2_Init+0x74>)
 800035c:	f000 fd84 	bl	8000e68 <HAL_I2C_Init>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000366:	f000 f974 	bl	8000652 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800036a:	2100      	movs	r1, #0
 800036c:	4809      	ldr	r0, [pc, #36]	; (8000394 <MX_I2C2_Init+0x74>)
 800036e:	f001 fcab 	bl	8001cc8 <HAL_I2CEx_ConfigAnalogFilter>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000378:	f000 f96b 	bl	8000652 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800037c:	2100      	movs	r1, #0
 800037e:	4805      	ldr	r0, [pc, #20]	; (8000394 <MX_I2C2_Init+0x74>)
 8000380:	f001 fced 	bl	8001d5e <HAL_I2CEx_ConfigDigitalFilter>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800038a:	f000 f962 	bl	8000652 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800038e:	bf00      	nop
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	2000190c 	.word	0x2000190c
 8000398:	40005800 	.word	0x40005800
 800039c:	10909cec 	.word	0x10909cec

080003a0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b0a2      	sub	sp, #136	; 0x88
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003a8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80003ac:	2200      	movs	r2, #0
 80003ae:	601a      	str	r2, [r3, #0]
 80003b0:	605a      	str	r2, [r3, #4]
 80003b2:	609a      	str	r2, [r3, #8]
 80003b4:	60da      	str	r2, [r3, #12]
 80003b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003b8:	f107 0310 	add.w	r3, r7, #16
 80003bc:	2264      	movs	r2, #100	; 0x64
 80003be:	2100      	movs	r1, #0
 80003c0:	4618      	mov	r0, r3
 80003c2:	f006 fb8d 	bl	8006ae0 <memset>
  if(i2cHandle->Instance==I2C2)
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	4a20      	ldr	r2, [pc, #128]	; (800044c <HAL_I2C_MspInit+0xac>)
 80003cc:	4293      	cmp	r3, r2
 80003ce:	d138      	bne.n	8000442 <HAL_I2C_MspInit+0xa2>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80003d0:	2380      	movs	r3, #128	; 0x80
 80003d2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80003d4:	2300      	movs	r3, #0
 80003d6:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003d8:	f107 0310 	add.w	r3, r7, #16
 80003dc:	4618      	mov	r0, r3
 80003de:	f002 fb5d 	bl	8002a9c <HAL_RCCEx_PeriphCLKConfig>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d001      	beq.n	80003ec <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80003e8:	f000 f933 	bl	8000652 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003ec:	4b18      	ldr	r3, [pc, #96]	; (8000450 <HAL_I2C_MspInit+0xb0>)
 80003ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003f0:	4a17      	ldr	r2, [pc, #92]	; (8000450 <HAL_I2C_MspInit+0xb0>)
 80003f2:	f043 0302 	orr.w	r3, r3, #2
 80003f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003f8:	4b15      	ldr	r3, [pc, #84]	; (8000450 <HAL_I2C_MspInit+0xb0>)
 80003fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003fc:	f003 0302 	and.w	r3, r3, #2
 8000400:	60fb      	str	r3, [r7, #12]
 8000402:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB13     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000404:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000408:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800040a:	2312      	movs	r3, #18
 800040c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040e:	2300      	movs	r3, #0
 8000410:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000412:	2303      	movs	r3, #3
 8000414:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000418:	2304      	movs	r3, #4
 800041a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800041e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000422:	4619      	mov	r1, r3
 8000424:	480b      	ldr	r0, [pc, #44]	; (8000454 <HAL_I2C_MspInit+0xb4>)
 8000426:	f000 fb8d 	bl	8000b44 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800042a:	4b09      	ldr	r3, [pc, #36]	; (8000450 <HAL_I2C_MspInit+0xb0>)
 800042c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800042e:	4a08      	ldr	r2, [pc, #32]	; (8000450 <HAL_I2C_MspInit+0xb0>)
 8000430:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000434:	6593      	str	r3, [r2, #88]	; 0x58
 8000436:	4b06      	ldr	r3, [pc, #24]	; (8000450 <HAL_I2C_MspInit+0xb0>)
 8000438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800043a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800043e:	60bb      	str	r3, [r7, #8]
 8000440:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000442:	bf00      	nop
 8000444:	3788      	adds	r7, #136	; 0x88
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	40005800 	.word	0x40005800
 8000450:	40021000 	.word	0x40021000
 8000454:	48000400 	.word	0x48000400

08000458 <taskSensorMAG>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void taskSensorMAG ( void *pvParameters )
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b084      	sub	sp, #16
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
	int16_t magX, magY, magZ;

	while(1)
	{
		MLX90393_ReadMeasurementAxisAll( &MAG, &magX, &magY, &magZ );
 8000460:	f107 030a 	add.w	r3, r7, #10
 8000464:	f107 020c 	add.w	r2, r7, #12
 8000468:	f107 010e 	add.w	r1, r7, #14
 800046c:	4801      	ldr	r0, [pc, #4]	; (8000474 <taskSensorMAG+0x1c>)
 800046e:	f006 fa97 	bl	80069a0 <MLX90393_ReadMeasurementAxisAll>
 8000472:	e7f5      	b.n	8000460 <taskSensorMAG+0x8>
 8000474:	2000196c 	.word	0x2000196c

08000478 <taskSensorIMU>:
	}
}


void taskSensorIMU ( void *pvParameters )
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b0a2      	sub	sp, #136	; 0x88
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]

	char txBuffer[128];

	while(1)
	{
		IIM42652_ReadMeasurementAxisAll( &IMU );
 8000480:	4801      	ldr	r0, [pc, #4]	; (8000488 <taskSensorIMU+0x10>)
 8000482:	f006 f8f7 	bl	8006674 <IIM42652_ReadMeasurementAxisAll>
 8000486:	e7fb      	b.n	8000480 <taskSensorIMU+0x8>
 8000488:	20001958 	.word	0x20001958

0800048c <taskLED>:
}


/* Task for blinking LED and sensor task initialization  */
void taskLED ( void *pvParameters )
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b088      	sub	sp, #32
 8000490:	af02      	add	r7, sp, #8
 8000492:	6078      	str	r0, [r7, #4]

	static uint32_t pin_state = 0;
	HAL_StatusTypeDef i2cStatus = HAL_OK;
 8000494:	2300      	movs	r3, #0
 8000496:	75fb      	strb	r3, [r7, #23]


	/* This section initializes sensors and sensors tasks */

	i2cStatus |= IIM42652_Init(&IMU, &hi2c2);
 8000498:	4929      	ldr	r1, [pc, #164]	; (8000540 <taskLED+0xb4>)
 800049a:	482a      	ldr	r0, [pc, #168]	; (8000544 <taskLED+0xb8>)
 800049c:	f006 f860 	bl	8006560 <IIM42652_Init>
 80004a0:	4603      	mov	r3, r0
 80004a2:	461a      	mov	r2, r3
 80004a4:	7dfb      	ldrb	r3, [r7, #23]
 80004a6:	4313      	orrs	r3, r2
 80004a8:	75fb      	strb	r3, [r7, #23]
	i2cStatus |= MLX90393_Init(&MAG, &hi2c2);
 80004aa:	4925      	ldr	r1, [pc, #148]	; (8000540 <taskLED+0xb4>)
 80004ac:	4826      	ldr	r0, [pc, #152]	; (8000548 <taskLED+0xbc>)
 80004ae:	f006 f9f5 	bl	800689c <MLX90393_Init>
 80004b2:	4603      	mov	r3, r0
 80004b4:	461a      	mov	r2, r3
 80004b6:	7dfb      	ldrb	r3, [r7, #23]
 80004b8:	4313      	orrs	r3, r2
 80004ba:	75fb      	strb	r3, [r7, #23]

	if(i2cStatus == HAL_ERROR)  { /* Error condition */ }

	enableIRQ();
 80004bc:	f7ff ff28 	bl	8000310 <enableIRQ>

	BaseType_t xReturnIMU = xTaskCreate ( taskSensorIMU, "IMU", 100, NULL, 3, &tasIMU_Handler );
 80004c0:	4b22      	ldr	r3, [pc, #136]	; (800054c <taskLED+0xc0>)
 80004c2:	9301      	str	r3, [sp, #4]
 80004c4:	2303      	movs	r3, #3
 80004c6:	9300      	str	r3, [sp, #0]
 80004c8:	2300      	movs	r3, #0
 80004ca:	2264      	movs	r2, #100	; 0x64
 80004cc:	4920      	ldr	r1, [pc, #128]	; (8000550 <taskLED+0xc4>)
 80004ce:	4821      	ldr	r0, [pc, #132]	; (8000554 <taskLED+0xc8>)
 80004d0:	f003 ff57 	bl	8004382 <xTaskCreate>
 80004d4:	6138      	str	r0, [r7, #16]
	BaseType_t xReturnMAG = xTaskCreate ( taskSensorMAG, "MAG", 100, NULL, 3, &taskMAG_Handler );
 80004d6:	4b20      	ldr	r3, [pc, #128]	; (8000558 <taskLED+0xcc>)
 80004d8:	9301      	str	r3, [sp, #4]
 80004da:	2303      	movs	r3, #3
 80004dc:	9300      	str	r3, [sp, #0]
 80004de:	2300      	movs	r3, #0
 80004e0:	2264      	movs	r2, #100	; 0x64
 80004e2:	491e      	ldr	r1, [pc, #120]	; (800055c <taskLED+0xd0>)
 80004e4:	481e      	ldr	r0, [pc, #120]	; (8000560 <taskLED+0xd4>)
 80004e6:	f003 ff4c 	bl	8004382 <xTaskCreate>
 80004ea:	60f8      	str	r0, [r7, #12]
	if( ( xReturnIMU | xReturnMAG ) == pdFALSE )  { /* Error condition */ }


	while(1)
	{
		vTaskDelay(150 / portTICK_PERIOD_MS);
 80004ec:	2096      	movs	r0, #150	; 0x96
 80004ee:	f004 f88d 	bl	800460c <vTaskDelay>

		pin_state = !pin_state;
 80004f2:	4b1c      	ldr	r3, [pc, #112]	; (8000564 <taskLED+0xd8>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	bf0c      	ite	eq
 80004fa:	2301      	moveq	r3, #1
 80004fc:	2300      	movne	r3, #0
 80004fe:	b2db      	uxtb	r3, r3
 8000500:	461a      	mov	r2, r3
 8000502:	4b18      	ldr	r3, [pc, #96]	; (8000564 <taskLED+0xd8>)
 8000504:	601a      	str	r2, [r3, #0]

		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, pin_state);
 8000506:	4b17      	ldr	r3, [pc, #92]	; (8000564 <taskLED+0xd8>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	b2db      	uxtb	r3, r3
 800050c:	461a      	mov	r2, r3
 800050e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000512:	4815      	ldr	r0, [pc, #84]	; (8000568 <taskLED+0xdc>)
 8000514:	f000 fc90 	bl	8000e38 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8000518:	2032      	movs	r0, #50	; 0x32
 800051a:	f000 f9dd 	bl	80008d8 <HAL_Delay>

		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, !pin_state);
 800051e:	4b11      	ldr	r3, [pc, #68]	; (8000564 <taskLED+0xd8>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	2b00      	cmp	r3, #0
 8000524:	bf0c      	ite	eq
 8000526:	2301      	moveq	r3, #1
 8000528:	2300      	movne	r3, #0
 800052a:	b2db      	uxtb	r3, r3
 800052c:	461a      	mov	r2, r3
 800052e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000532:	480d      	ldr	r0, [pc, #52]	; (8000568 <taskLED+0xdc>)
 8000534:	f000 fc80 	bl	8000e38 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8000538:	2032      	movs	r0, #50	; 0x32
 800053a:	f000 f9cd 	bl	80008d8 <HAL_Delay>
		vTaskDelay(150 / portTICK_PERIOD_MS);
 800053e:	e7d5      	b.n	80004ec <taskLED+0x60>
 8000540:	2000190c 	.word	0x2000190c
 8000544:	20001958 	.word	0x20001958
 8000548:	2000196c 	.word	0x2000196c
 800054c:	20000034 	.word	0x20000034
 8000550:	08006b14 	.word	0x08006b14
 8000554:	08000479 	.word	0x08000479
 8000558:	20000030 	.word	0x20000030
 800055c:	08006b18 	.word	0x08006b18
 8000560:	08000459 	.word	0x08000459
 8000564:	20000038 	.word	0x20000038
 8000568:	48000800 	.word	0x48000800

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000572:	f000 f93c 	bl	80007ee <HAL_Init>

  /* USER CODE BEGIN Init */

  /* Initialize init task */
  BaseType_t xReturnLED  = xTaskCreate ( taskLED, "t_LED", 100, NULL, 2, &taskLED_Handler );
 8000576:	4b0c      	ldr	r3, [pc, #48]	; (80005a8 <main+0x3c>)
 8000578:	9301      	str	r3, [sp, #4]
 800057a:	2302      	movs	r3, #2
 800057c:	9300      	str	r3, [sp, #0]
 800057e:	2300      	movs	r3, #0
 8000580:	2264      	movs	r2, #100	; 0x64
 8000582:	490a      	ldr	r1, [pc, #40]	; (80005ac <main+0x40>)
 8000584:	480a      	ldr	r0, [pc, #40]	; (80005b0 <main+0x44>)
 8000586:	f003 fefc 	bl	8004382 <xTaskCreate>
 800058a:	6078      	str	r0, [r7, #4]


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058c:	f000 f812 	bl	80005b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000590:	f7ff fe40 	bl	8000214 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000594:	f7ff fec4 	bl	8000320 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000598:	f002 fde0 	bl	800315c <osKernelInitialize>
  MX_FREERTOS_Init();
 800059c:	f7ff fe20 	bl	80001e0 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80005a0:	f002 fe00 	bl	80031a4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005a4:	e7fe      	b.n	80005a4 <main+0x38>
 80005a6:	bf00      	nop
 80005a8:	2000002c 	.word	0x2000002c
 80005ac:	08006b1c 	.word	0x08006b1c
 80005b0:	0800048d 	.word	0x0800048d

080005b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b096      	sub	sp, #88	; 0x58
 80005b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ba:	f107 0314 	add.w	r3, r7, #20
 80005be:	2244      	movs	r2, #68	; 0x44
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f006 fa8c 	bl	8006ae0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c8:	463b      	mov	r3, r7
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	605a      	str	r2, [r3, #4]
 80005d0:	609a      	str	r2, [r3, #8]
 80005d2:	60da      	str	r2, [r3, #12]
 80005d4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005d6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005da:	f001 fc1b 	bl	8001e14 <HAL_PWREx_ControlVoltageScaling>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005e4:	f000 f835 	bl	8000652 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005e8:	2301      	movs	r3, #1
 80005ea:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005f0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f2:	2302      	movs	r3, #2
 80005f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005f6:	2303      	movs	r3, #3
 80005f8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 80005fa:	2302      	movs	r3, #2
 80005fc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80005fe:	2310      	movs	r3, #16
 8000600:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000602:	2307      	movs	r3, #7
 8000604:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000606:	2302      	movs	r3, #2
 8000608:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800060a:	2302      	movs	r3, #2
 800060c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060e:	f107 0314 	add.w	r3, r7, #20
 8000612:	4618      	mov	r0, r3
 8000614:	f001 fc54 	bl	8001ec0 <HAL_RCC_OscConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800061e:	f000 f818 	bl	8000652 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000622:	230f      	movs	r3, #15
 8000624:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000626:	2303      	movs	r3, #3
 8000628:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062a:	2300      	movs	r3, #0
 800062c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800062e:	2300      	movs	r3, #0
 8000630:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000632:	2300      	movs	r3, #0
 8000634:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000636:	463b      	mov	r3, r7
 8000638:	2104      	movs	r1, #4
 800063a:	4618      	mov	r0, r3
 800063c:	f002 f860 	bl	8002700 <HAL_RCC_ClockConfig>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000646:	f000 f804 	bl	8000652 <Error_Handler>
  }
}
 800064a:	bf00      	nop
 800064c:	3758      	adds	r7, #88	; 0x58
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}

08000652 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000652:	b480      	push	{r7}
 8000654:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000656:	b672      	cpsid	i
}
 8000658:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800065a:	e7fe      	b.n	800065a <Error_Handler+0x8>

0800065c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000662:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <HAL_MspInit+0x4c>)
 8000664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000666:	4a10      	ldr	r2, [pc, #64]	; (80006a8 <HAL_MspInit+0x4c>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	6613      	str	r3, [r2, #96]	; 0x60
 800066e:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <HAL_MspInit+0x4c>)
 8000670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800067a:	4b0b      	ldr	r3, [pc, #44]	; (80006a8 <HAL_MspInit+0x4c>)
 800067c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800067e:	4a0a      	ldr	r2, [pc, #40]	; (80006a8 <HAL_MspInit+0x4c>)
 8000680:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000684:	6593      	str	r3, [r2, #88]	; 0x58
 8000686:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <HAL_MspInit+0x4c>)
 8000688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800068a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800068e:	603b      	str	r3, [r7, #0]
 8000690:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000692:	2200      	movs	r2, #0
 8000694:	210f      	movs	r1, #15
 8000696:	f06f 0001 	mvn.w	r0, #1
 800069a:	f000 fa1c 	bl	8000ad6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800069e:	bf00      	nop
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40021000 	.word	0x40021000

080006ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <NMI_Handler+0x4>

080006b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006b2:	b480      	push	{r7}
 80006b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006b6:	e7fe      	b.n	80006b6 <HardFault_Handler+0x4>

080006b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006bc:	e7fe      	b.n	80006bc <MemManage_Handler+0x4>

080006be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006be:	b480      	push	{r7}
 80006c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006c2:	e7fe      	b.n	80006c2 <BusFault_Handler+0x4>

080006c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006c8:	e7fe      	b.n	80006c8 <UsageFault_Handler+0x4>

080006ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006ca:	b480      	push	{r7}
 80006cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr

080006d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006dc:	f000 f8dc 	bl	8000898 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80006e0:	f004 fc10 	bl	8004f04 <xTaskGetSchedulerState>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b01      	cmp	r3, #1
 80006e8:	d001      	beq.n	80006ee <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80006ea:	f005 faf5 	bl	8005cd8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
	...

080006f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	/* REqads pending register 1 from external interrupt struct */
	uint32_t pending = EXTI->PR1;
 80006fa:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <EXTI15_10_IRQHandler+0x40>)
 80006fc:	695b      	ldr	r3, [r3, #20]
 80006fe:	607b      	str	r3, [r7, #4]


	if( pending & (1 << 12) )
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000706:	2b00      	cmp	r3, #0
 8000708:	d005      	beq.n	8000716 <EXTI15_10_IRQHandler+0x22>
	{
		IIM42652_DRDYCallback();
 800070a:	f005 ffff 	bl	800670c <IIM42652_DRDYCallback>
		__HAL_GPIO_EXTI_CLEAR_IT(INT_IMU_Pin);
 800070e:	4b09      	ldr	r3, [pc, #36]	; (8000734 <EXTI15_10_IRQHandler+0x40>)
 8000710:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000714:	615a      	str	r2, [r3, #20]
	}

	if( pending & (1 << 15) )
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800071c:	2b00      	cmp	r3, #0
 800071e:	d005      	beq.n	800072c <EXTI15_10_IRQHandler+0x38>
	{
		MLX90393_DRDYCallback();
 8000720:	f006 f984 	bl	8006a2c <MLX90393_DRDYCallback>
		__HAL_GPIO_EXTI_CLEAR_IT(INT_MAG_Pin);
 8000724:	4b03      	ldr	r3, [pc, #12]	; (8000734 <EXTI15_10_IRQHandler+0x40>)
 8000726:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800072a:	615a      	str	r2, [r3, #20]
  //HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */


  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800072c:	bf00      	nop
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40010400 	.word	0x40010400

08000738 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800073c:	4b15      	ldr	r3, [pc, #84]	; (8000794 <SystemInit+0x5c>)
 800073e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000742:	4a14      	ldr	r2, [pc, #80]	; (8000794 <SystemInit+0x5c>)
 8000744:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000748:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <SystemInit+0x60>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a11      	ldr	r2, [pc, #68]	; (8000798 <SystemInit+0x60>)
 8000752:	f043 0301 	orr.w	r3, r3, #1
 8000756:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <SystemInit+0x60>)
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800075e:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <SystemInit+0x60>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4a0d      	ldr	r2, [pc, #52]	; (8000798 <SystemInit+0x60>)
 8000764:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000768:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800076c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800076e:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <SystemInit+0x60>)
 8000770:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000774:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000776:	4b08      	ldr	r3, [pc, #32]	; (8000798 <SystemInit+0x60>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4a07      	ldr	r2, [pc, #28]	; (8000798 <SystemInit+0x60>)
 800077c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000780:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000782:	4b05      	ldr	r3, [pc, #20]	; (8000798 <SystemInit+0x60>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
}
 8000788:	bf00      	nop
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	e000ed00 	.word	0xe000ed00
 8000798:	40021000 	.word	0x40021000

0800079c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800079c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007d4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007a0:	f7ff ffca 	bl	8000738 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80007a4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80007a6:	e003      	b.n	80007b0 <LoopCopyDataInit>

080007a8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80007a8:	4b0b      	ldr	r3, [pc, #44]	; (80007d8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80007aa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80007ac:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80007ae:	3104      	adds	r1, #4

080007b0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80007b0:	480a      	ldr	r0, [pc, #40]	; (80007dc <LoopForever+0xa>)
	ldr	r3, =_edata
 80007b2:	4b0b      	ldr	r3, [pc, #44]	; (80007e0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80007b4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80007b6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80007b8:	d3f6      	bcc.n	80007a8 <CopyDataInit>
	ldr	r2, =_sbss
 80007ba:	4a0a      	ldr	r2, [pc, #40]	; (80007e4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80007bc:	e002      	b.n	80007c4 <LoopFillZerobss>

080007be <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80007be:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80007c0:	f842 3b04 	str.w	r3, [r2], #4

080007c4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80007c4:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <LoopForever+0x16>)
	cmp	r2, r3
 80007c6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80007c8:	d3f9      	bcc.n	80007be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007ca:	f006 f957 	bl	8006a7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007ce:	f7ff fecd 	bl	800056c <main>

080007d2 <LoopForever>:

LoopForever:
    b LoopForever
 80007d2:	e7fe      	b.n	80007d2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80007d4:	20020000 	.word	0x20020000
	ldr	r3, =_sidata
 80007d8:	08006ba8 	.word	0x08006ba8
	ldr	r0, =_sdata
 80007dc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80007e0:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 80007e4:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 80007e8:	200019cc 	.word	0x200019cc

080007ec <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007ec:	e7fe      	b.n	80007ec <ADC1_IRQHandler>

080007ee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b082      	sub	sp, #8
 80007f2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007f4:	2300      	movs	r3, #0
 80007f6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007f8:	2003      	movs	r0, #3
 80007fa:	f000 f961 	bl	8000ac0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007fe:	200f      	movs	r0, #15
 8000800:	f000 f80e 	bl	8000820 <HAL_InitTick>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d002      	beq.n	8000810 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800080a:	2301      	movs	r3, #1
 800080c:	71fb      	strb	r3, [r7, #7]
 800080e:	e001      	b.n	8000814 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000810:	f7ff ff24 	bl	800065c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000814:	79fb      	ldrb	r3, [r7, #7]
}
 8000816:	4618      	mov	r0, r3
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
	...

08000820 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000828:	2300      	movs	r3, #0
 800082a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800082c:	4b17      	ldr	r3, [pc, #92]	; (800088c <HAL_InitTick+0x6c>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d023      	beq.n	800087c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000834:	4b16      	ldr	r3, [pc, #88]	; (8000890 <HAL_InitTick+0x70>)
 8000836:	681a      	ldr	r2, [r3, #0]
 8000838:	4b14      	ldr	r3, [pc, #80]	; (800088c <HAL_InitTick+0x6c>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	4619      	mov	r1, r3
 800083e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000842:	fbb3 f3f1 	udiv	r3, r3, r1
 8000846:	fbb2 f3f3 	udiv	r3, r2, r3
 800084a:	4618      	mov	r0, r3
 800084c:	f000 f96d 	bl	8000b2a <HAL_SYSTICK_Config>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d10f      	bne.n	8000876 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	2b0f      	cmp	r3, #15
 800085a:	d809      	bhi.n	8000870 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800085c:	2200      	movs	r2, #0
 800085e:	6879      	ldr	r1, [r7, #4]
 8000860:	f04f 30ff 	mov.w	r0, #4294967295
 8000864:	f000 f937 	bl	8000ad6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000868:	4a0a      	ldr	r2, [pc, #40]	; (8000894 <HAL_InitTick+0x74>)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	6013      	str	r3, [r2, #0]
 800086e:	e007      	b.n	8000880 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000870:	2301      	movs	r3, #1
 8000872:	73fb      	strb	r3, [r7, #15]
 8000874:	e004      	b.n	8000880 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000876:	2301      	movs	r3, #1
 8000878:	73fb      	strb	r3, [r7, #15]
 800087a:	e001      	b.n	8000880 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800087c:	2301      	movs	r3, #1
 800087e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000880:	7bfb      	ldrb	r3, [r7, #15]
}
 8000882:	4618      	mov	r0, r3
 8000884:	3710      	adds	r7, #16
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000008 	.word	0x20000008
 8000890:	20000000 	.word	0x20000000
 8000894:	20000004 	.word	0x20000004

08000898 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800089c:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <HAL_IncTick+0x20>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	461a      	mov	r2, r3
 80008a2:	4b06      	ldr	r3, [pc, #24]	; (80008bc <HAL_IncTick+0x24>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4413      	add	r3, r2
 80008a8:	4a04      	ldr	r2, [pc, #16]	; (80008bc <HAL_IncTick+0x24>)
 80008aa:	6013      	str	r3, [r2, #0]
}
 80008ac:	bf00      	nop
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	20000008 	.word	0x20000008
 80008bc:	20001980 	.word	0x20001980

080008c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  return uwTick;
 80008c4:	4b03      	ldr	r3, [pc, #12]	; (80008d4 <HAL_GetTick+0x14>)
 80008c6:	681b      	ldr	r3, [r3, #0]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	20001980 	.word	0x20001980

080008d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008e0:	f7ff ffee 	bl	80008c0 <HAL_GetTick>
 80008e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008f0:	d005      	beq.n	80008fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80008f2:	4b0a      	ldr	r3, [pc, #40]	; (800091c <HAL_Delay+0x44>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	461a      	mov	r2, r3
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	4413      	add	r3, r2
 80008fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008fe:	bf00      	nop
 8000900:	f7ff ffde 	bl	80008c0 <HAL_GetTick>
 8000904:	4602      	mov	r2, r0
 8000906:	68bb      	ldr	r3, [r7, #8]
 8000908:	1ad3      	subs	r3, r2, r3
 800090a:	68fa      	ldr	r2, [r7, #12]
 800090c:	429a      	cmp	r2, r3
 800090e:	d8f7      	bhi.n	8000900 <HAL_Delay+0x28>
  {
  }
}
 8000910:	bf00      	nop
 8000912:	bf00      	nop
 8000914:	3710      	adds	r7, #16
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	20000008 	.word	0x20000008

08000920 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000920:	b480      	push	{r7}
 8000922:	b085      	sub	sp, #20
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	f003 0307 	and.w	r3, r3, #7
 800092e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <__NVIC_SetPriorityGrouping+0x44>)
 8000932:	68db      	ldr	r3, [r3, #12]
 8000934:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000936:	68ba      	ldr	r2, [r7, #8]
 8000938:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800093c:	4013      	ands	r3, r2
 800093e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000948:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800094c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000950:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000952:	4a04      	ldr	r2, [pc, #16]	; (8000964 <__NVIC_SetPriorityGrouping+0x44>)
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	60d3      	str	r3, [r2, #12]
}
 8000958:	bf00      	nop
 800095a:	3714      	adds	r7, #20
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr
 8000964:	e000ed00 	.word	0xe000ed00

08000968 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800096c:	4b04      	ldr	r3, [pc, #16]	; (8000980 <__NVIC_GetPriorityGrouping+0x18>)
 800096e:	68db      	ldr	r3, [r3, #12]
 8000970:	0a1b      	lsrs	r3, r3, #8
 8000972:	f003 0307 	and.w	r3, r3, #7
}
 8000976:	4618      	mov	r0, r3
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr
 8000980:	e000ed00 	.word	0xe000ed00

08000984 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800098e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000992:	2b00      	cmp	r3, #0
 8000994:	db0b      	blt.n	80009ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	f003 021f 	and.w	r2, r3, #31
 800099c:	4907      	ldr	r1, [pc, #28]	; (80009bc <__NVIC_EnableIRQ+0x38>)
 800099e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a2:	095b      	lsrs	r3, r3, #5
 80009a4:	2001      	movs	r0, #1
 80009a6:	fa00 f202 	lsl.w	r2, r0, r2
 80009aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80009ae:	bf00      	nop
 80009b0:	370c      	adds	r7, #12
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	e000e100 	.word	0xe000e100

080009c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	6039      	str	r1, [r7, #0]
 80009ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	db0a      	blt.n	80009ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	b2da      	uxtb	r2, r3
 80009d8:	490c      	ldr	r1, [pc, #48]	; (8000a0c <__NVIC_SetPriority+0x4c>)
 80009da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009de:	0112      	lsls	r2, r2, #4
 80009e0:	b2d2      	uxtb	r2, r2
 80009e2:	440b      	add	r3, r1
 80009e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009e8:	e00a      	b.n	8000a00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	b2da      	uxtb	r2, r3
 80009ee:	4908      	ldr	r1, [pc, #32]	; (8000a10 <__NVIC_SetPriority+0x50>)
 80009f0:	79fb      	ldrb	r3, [r7, #7]
 80009f2:	f003 030f 	and.w	r3, r3, #15
 80009f6:	3b04      	subs	r3, #4
 80009f8:	0112      	lsls	r2, r2, #4
 80009fa:	b2d2      	uxtb	r2, r2
 80009fc:	440b      	add	r3, r1
 80009fe:	761a      	strb	r2, [r3, #24]
}
 8000a00:	bf00      	nop
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr
 8000a0c:	e000e100 	.word	0xe000e100
 8000a10:	e000ed00 	.word	0xe000ed00

08000a14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b089      	sub	sp, #36	; 0x24
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	60f8      	str	r0, [r7, #12]
 8000a1c:	60b9      	str	r1, [r7, #8]
 8000a1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	f003 0307 	and.w	r3, r3, #7
 8000a26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a28:	69fb      	ldr	r3, [r7, #28]
 8000a2a:	f1c3 0307 	rsb	r3, r3, #7
 8000a2e:	2b04      	cmp	r3, #4
 8000a30:	bf28      	it	cs
 8000a32:	2304      	movcs	r3, #4
 8000a34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a36:	69fb      	ldr	r3, [r7, #28]
 8000a38:	3304      	adds	r3, #4
 8000a3a:	2b06      	cmp	r3, #6
 8000a3c:	d902      	bls.n	8000a44 <NVIC_EncodePriority+0x30>
 8000a3e:	69fb      	ldr	r3, [r7, #28]
 8000a40:	3b03      	subs	r3, #3
 8000a42:	e000      	b.n	8000a46 <NVIC_EncodePriority+0x32>
 8000a44:	2300      	movs	r3, #0
 8000a46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a48:	f04f 32ff 	mov.w	r2, #4294967295
 8000a4c:	69bb      	ldr	r3, [r7, #24]
 8000a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a52:	43da      	mvns	r2, r3
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	401a      	ands	r2, r3
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	fa01 f303 	lsl.w	r3, r1, r3
 8000a66:	43d9      	mvns	r1, r3
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a6c:	4313      	orrs	r3, r2
         );
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3724      	adds	r7, #36	; 0x24
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
	...

08000a7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	3b01      	subs	r3, #1
 8000a88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a8c:	d301      	bcc.n	8000a92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a8e:	2301      	movs	r3, #1
 8000a90:	e00f      	b.n	8000ab2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a92:	4a0a      	ldr	r2, [pc, #40]	; (8000abc <SysTick_Config+0x40>)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	3b01      	subs	r3, #1
 8000a98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a9a:	210f      	movs	r1, #15
 8000a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa0:	f7ff ff8e 	bl	80009c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000aa4:	4b05      	ldr	r3, [pc, #20]	; (8000abc <SysTick_Config+0x40>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aaa:	4b04      	ldr	r3, [pc, #16]	; (8000abc <SysTick_Config+0x40>)
 8000aac:	2207      	movs	r2, #7
 8000aae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	e000e010 	.word	0xe000e010

08000ac0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ac8:	6878      	ldr	r0, [r7, #4]
 8000aca:	f7ff ff29 	bl	8000920 <__NVIC_SetPriorityGrouping>
}
 8000ace:	bf00      	nop
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}

08000ad6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	b086      	sub	sp, #24
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	4603      	mov	r3, r0
 8000ade:	60b9      	str	r1, [r7, #8]
 8000ae0:	607a      	str	r2, [r7, #4]
 8000ae2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ae8:	f7ff ff3e 	bl	8000968 <__NVIC_GetPriorityGrouping>
 8000aec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aee:	687a      	ldr	r2, [r7, #4]
 8000af0:	68b9      	ldr	r1, [r7, #8]
 8000af2:	6978      	ldr	r0, [r7, #20]
 8000af4:	f7ff ff8e 	bl	8000a14 <NVIC_EncodePriority>
 8000af8:	4602      	mov	r2, r0
 8000afa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000afe:	4611      	mov	r1, r2
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff ff5d 	bl	80009c0 <__NVIC_SetPriority>
}
 8000b06:	bf00      	nop
 8000b08:	3718      	adds	r7, #24
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b082      	sub	sp, #8
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	4603      	mov	r3, r0
 8000b16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff ff31 	bl	8000984 <__NVIC_EnableIRQ>
}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	b082      	sub	sp, #8
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b32:	6878      	ldr	r0, [r7, #4]
 8000b34:	f7ff ffa2 	bl	8000a7c <SysTick_Config>
 8000b38:	4603      	mov	r3, r0
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
	...

08000b44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b087      	sub	sp, #28
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b52:	e154      	b.n	8000dfe <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	2101      	movs	r1, #1
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b60:	4013      	ands	r3, r2
 8000b62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	f000 8146 	beq.w	8000df8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d00b      	beq.n	8000b8c <HAL_GPIO_Init+0x48>
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	2b02      	cmp	r3, #2
 8000b7a:	d007      	beq.n	8000b8c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b80:	2b11      	cmp	r3, #17
 8000b82:	d003      	beq.n	8000b8c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	2b12      	cmp	r3, #18
 8000b8a:	d130      	bne.n	8000bee <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	689b      	ldr	r3, [r3, #8]
 8000b90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	2203      	movs	r2, #3
 8000b98:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9c:	43db      	mvns	r3, r3
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	68da      	ldr	r2, [r3, #12]
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb0:	693a      	ldr	r2, [r7, #16]
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	693a      	ldr	r2, [r7, #16]
 8000bba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bca:	43db      	mvns	r3, r3
 8000bcc:	693a      	ldr	r2, [r7, #16]
 8000bce:	4013      	ands	r3, r2
 8000bd0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	091b      	lsrs	r3, r3, #4
 8000bd8:	f003 0201 	and.w	r2, r3, #1
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	fa02 f303 	lsl.w	r3, r2, r3
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	68db      	ldr	r3, [r3, #12]
 8000bf2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	2203      	movs	r2, #3
 8000bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfe:	43db      	mvns	r3, r3
 8000c00:	693a      	ldr	r2, [r7, #16]
 8000c02:	4013      	ands	r3, r2
 8000c04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	689a      	ldr	r2, [r3, #8]
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	4313      	orrs	r3, r2
 8000c16:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	2b02      	cmp	r3, #2
 8000c24:	d003      	beq.n	8000c2e <HAL_GPIO_Init+0xea>
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	2b12      	cmp	r3, #18
 8000c2c:	d123      	bne.n	8000c76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	08da      	lsrs	r2, r3, #3
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	3208      	adds	r2, #8
 8000c36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	f003 0307 	and.w	r3, r3, #7
 8000c42:	009b      	lsls	r3, r3, #2
 8000c44:	220f      	movs	r2, #15
 8000c46:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4a:	43db      	mvns	r3, r3
 8000c4c:	693a      	ldr	r2, [r7, #16]
 8000c4e:	4013      	ands	r3, r2
 8000c50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	691a      	ldr	r2, [r3, #16]
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	f003 0307 	and.w	r3, r3, #7
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	08da      	lsrs	r2, r3, #3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	3208      	adds	r2, #8
 8000c70:	6939      	ldr	r1, [r7, #16]
 8000c72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	005b      	lsls	r3, r3, #1
 8000c80:	2203      	movs	r2, #3
 8000c82:	fa02 f303 	lsl.w	r3, r2, r3
 8000c86:	43db      	mvns	r3, r3
 8000c88:	693a      	ldr	r2, [r7, #16]
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	f003 0203 	and.w	r2, r3, #3
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	005b      	lsls	r3, r3, #1
 8000c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	f000 80a0 	beq.w	8000df8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb8:	4b58      	ldr	r3, [pc, #352]	; (8000e1c <HAL_GPIO_Init+0x2d8>)
 8000cba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cbc:	4a57      	ldr	r2, [pc, #348]	; (8000e1c <HAL_GPIO_Init+0x2d8>)
 8000cbe:	f043 0301 	orr.w	r3, r3, #1
 8000cc2:	6613      	str	r3, [r2, #96]	; 0x60
 8000cc4:	4b55      	ldr	r3, [pc, #340]	; (8000e1c <HAL_GPIO_Init+0x2d8>)
 8000cc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cc8:	f003 0301 	and.w	r3, r3, #1
 8000ccc:	60bb      	str	r3, [r7, #8]
 8000cce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000cd0:	4a53      	ldr	r2, [pc, #332]	; (8000e20 <HAL_GPIO_Init+0x2dc>)
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	089b      	lsrs	r3, r3, #2
 8000cd6:	3302      	adds	r3, #2
 8000cd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	f003 0303 	and.w	r3, r3, #3
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	220f      	movs	r2, #15
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	43db      	mvns	r3, r3
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000cfa:	d019      	beq.n	8000d30 <HAL_GPIO_Init+0x1ec>
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	4a49      	ldr	r2, [pc, #292]	; (8000e24 <HAL_GPIO_Init+0x2e0>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d013      	beq.n	8000d2c <HAL_GPIO_Init+0x1e8>
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	4a48      	ldr	r2, [pc, #288]	; (8000e28 <HAL_GPIO_Init+0x2e4>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d00d      	beq.n	8000d28 <HAL_GPIO_Init+0x1e4>
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	4a47      	ldr	r2, [pc, #284]	; (8000e2c <HAL_GPIO_Init+0x2e8>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d007      	beq.n	8000d24 <HAL_GPIO_Init+0x1e0>
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	4a46      	ldr	r2, [pc, #280]	; (8000e30 <HAL_GPIO_Init+0x2ec>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d101      	bne.n	8000d20 <HAL_GPIO_Init+0x1dc>
 8000d1c:	2304      	movs	r3, #4
 8000d1e:	e008      	b.n	8000d32 <HAL_GPIO_Init+0x1ee>
 8000d20:	2307      	movs	r3, #7
 8000d22:	e006      	b.n	8000d32 <HAL_GPIO_Init+0x1ee>
 8000d24:	2303      	movs	r3, #3
 8000d26:	e004      	b.n	8000d32 <HAL_GPIO_Init+0x1ee>
 8000d28:	2302      	movs	r3, #2
 8000d2a:	e002      	b.n	8000d32 <HAL_GPIO_Init+0x1ee>
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	e000      	b.n	8000d32 <HAL_GPIO_Init+0x1ee>
 8000d30:	2300      	movs	r3, #0
 8000d32:	697a      	ldr	r2, [r7, #20]
 8000d34:	f002 0203 	and.w	r2, r2, #3
 8000d38:	0092      	lsls	r2, r2, #2
 8000d3a:	4093      	lsls	r3, r2
 8000d3c:	693a      	ldr	r2, [r7, #16]
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d42:	4937      	ldr	r1, [pc, #220]	; (8000e20 <HAL_GPIO_Init+0x2dc>)
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	089b      	lsrs	r3, r3, #2
 8000d48:	3302      	adds	r3, #2
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000d50:	4b38      	ldr	r3, [pc, #224]	; (8000e34 <HAL_GPIO_Init+0x2f0>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	43db      	mvns	r3, r3
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d003      	beq.n	8000d74 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000d6c:	693a      	ldr	r2, [r7, #16]
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000d74:	4a2f      	ldr	r2, [pc, #188]	; (8000e34 <HAL_GPIO_Init+0x2f0>)
 8000d76:	693b      	ldr	r3, [r7, #16]
 8000d78:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000d7a:	4b2e      	ldr	r3, [pc, #184]	; (8000e34 <HAL_GPIO_Init+0x2f0>)
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	43db      	mvns	r3, r3
 8000d84:	693a      	ldr	r2, [r7, #16]
 8000d86:	4013      	ands	r3, r2
 8000d88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d003      	beq.n	8000d9e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000d9e:	4a25      	ldr	r2, [pc, #148]	; (8000e34 <HAL_GPIO_Init+0x2f0>)
 8000da0:	693b      	ldr	r3, [r7, #16]
 8000da2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000da4:	4b23      	ldr	r3, [pc, #140]	; (8000e34 <HAL_GPIO_Init+0x2f0>)
 8000da6:	689b      	ldr	r3, [r3, #8]
 8000da8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	43db      	mvns	r3, r3
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	4013      	ands	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d003      	beq.n	8000dc8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000dc0:	693a      	ldr	r2, [r7, #16]
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000dc8:	4a1a      	ldr	r2, [pc, #104]	; (8000e34 <HAL_GPIO_Init+0x2f0>)
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000dce:	4b19      	ldr	r3, [pc, #100]	; (8000e34 <HAL_GPIO_Init+0x2f0>)
 8000dd0:	68db      	ldr	r3, [r3, #12]
 8000dd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	43db      	mvns	r3, r3
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d003      	beq.n	8000df2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000df2:	4a10      	ldr	r2, [pc, #64]	; (8000e34 <HAL_GPIO_Init+0x2f0>)
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	fa22 f303 	lsr.w	r3, r2, r3
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	f47f aea3 	bne.w	8000b54 <HAL_GPIO_Init+0x10>
  }
}
 8000e0e:	bf00      	nop
 8000e10:	bf00      	nop
 8000e12:	371c      	adds	r7, #28
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	40021000 	.word	0x40021000
 8000e20:	40010000 	.word	0x40010000
 8000e24:	48000400 	.word	0x48000400
 8000e28:	48000800 	.word	0x48000800
 8000e2c:	48000c00 	.word	0x48000c00
 8000e30:	48001000 	.word	0x48001000
 8000e34:	40010400 	.word	0x40010400

08000e38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	460b      	mov	r3, r1
 8000e42:	807b      	strh	r3, [r7, #2]
 8000e44:	4613      	mov	r3, r2
 8000e46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e48:	787b      	ldrb	r3, [r7, #1]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d003      	beq.n	8000e56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e4e:	887a      	ldrh	r2, [r7, #2]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e54:	e002      	b.n	8000e5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e56:	887a      	ldrh	r2, [r7, #2]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e5c:	bf00      	nop
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d101      	bne.n	8000e7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	e081      	b.n	8000f7e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d106      	bne.n	8000e94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2200      	movs	r2, #0
 8000e8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	f7ff fa86 	bl	80003a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2224      	movs	r2, #36	; 0x24
 8000e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f022 0201 	bic.w	r2, r2, #1
 8000eaa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	685a      	ldr	r2, [r3, #4]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000eb8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	689a      	ldr	r2, [r3, #8]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000ec8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	68db      	ldr	r3, [r3, #12]
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d107      	bne.n	8000ee2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	689a      	ldr	r2, [r3, #8]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	e006      	b.n	8000ef0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	689a      	ldr	r2, [r3, #8]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000eee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	2b02      	cmp	r3, #2
 8000ef6:	d104      	bne.n	8000f02 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f00:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	6812      	ldr	r2, [r2, #0]
 8000f0c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f14:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	68da      	ldr	r2, [r3, #12]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f24:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	691a      	ldr	r2, [r3, #16]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	695b      	ldr	r3, [r3, #20]
 8000f2e:	ea42 0103 	orr.w	r1, r2, r3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	699b      	ldr	r3, [r3, #24]
 8000f36:	021a      	lsls	r2, r3, #8
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	430a      	orrs	r2, r1
 8000f3e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	69d9      	ldr	r1, [r3, #28]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6a1a      	ldr	r2, [r3, #32]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	430a      	orrs	r2, r1
 8000f4e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f042 0201 	orr.w	r2, r2, #1
 8000f5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2200      	movs	r2, #0
 8000f64:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2220      	movs	r2, #32
 8000f6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2200      	movs	r2, #0
 8000f72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2200      	movs	r2, #0
 8000f78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
	...

08000f88 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b088      	sub	sp, #32
 8000f8c:	af02      	add	r7, sp, #8
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	607a      	str	r2, [r7, #4]
 8000f92:	461a      	mov	r2, r3
 8000f94:	460b      	mov	r3, r1
 8000f96:	817b      	strh	r3, [r7, #10]
 8000f98:	4613      	mov	r3, r2
 8000f9a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	2b20      	cmp	r3, #32
 8000fa6:	f040 80da 	bne.w	800115e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d101      	bne.n	8000fb8 <HAL_I2C_Master_Transmit+0x30>
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	e0d3      	b.n	8001160 <HAL_I2C_Master_Transmit+0x1d8>
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	2201      	movs	r2, #1
 8000fbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000fc0:	f7ff fc7e 	bl	80008c0 <HAL_GetTick>
 8000fc4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	2319      	movs	r3, #25
 8000fcc:	2201      	movs	r2, #1
 8000fce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fd2:	68f8      	ldr	r0, [r7, #12]
 8000fd4:	f000 fcbc 	bl	8001950 <I2C_WaitOnFlagUntilTimeout>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e0be      	b.n	8001160 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	2221      	movs	r2, #33	; 0x21
 8000fe6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	2210      	movs	r2, #16
 8000fee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	893a      	ldrh	r2, [r7, #8]
 8001002:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	2200      	movs	r2, #0
 8001008:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800100e:	b29b      	uxth	r3, r3
 8001010:	2bff      	cmp	r3, #255	; 0xff
 8001012:	d90e      	bls.n	8001032 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	22ff      	movs	r2, #255	; 0xff
 8001018:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800101e:	b2da      	uxtb	r2, r3
 8001020:	8979      	ldrh	r1, [r7, #10]
 8001022:	4b51      	ldr	r3, [pc, #324]	; (8001168 <HAL_I2C_Master_Transmit+0x1e0>)
 8001024:	9300      	str	r3, [sp, #0]
 8001026:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800102a:	68f8      	ldr	r0, [r7, #12]
 800102c:	f000 fe1e 	bl	8001c6c <I2C_TransferConfig>
 8001030:	e06c      	b.n	800110c <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001036:	b29a      	uxth	r2, r3
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001040:	b2da      	uxtb	r2, r3
 8001042:	8979      	ldrh	r1, [r7, #10]
 8001044:	4b48      	ldr	r3, [pc, #288]	; (8001168 <HAL_I2C_Master_Transmit+0x1e0>)
 8001046:	9300      	str	r3, [sp, #0]
 8001048:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800104c:	68f8      	ldr	r0, [r7, #12]
 800104e:	f000 fe0d 	bl	8001c6c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001052:	e05b      	b.n	800110c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001054:	697a      	ldr	r2, [r7, #20]
 8001056:	6a39      	ldr	r1, [r7, #32]
 8001058:	68f8      	ldr	r0, [r7, #12]
 800105a:	f000 fcb9 	bl	80019d0 <I2C_WaitOnTXISFlagUntilTimeout>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	e07b      	b.n	8001160 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800106c:	781a      	ldrb	r2, [r3, #0]
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001078:	1c5a      	adds	r2, r3, #1
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001082:	b29b      	uxth	r3, r3
 8001084:	3b01      	subs	r3, #1
 8001086:	b29a      	uxth	r2, r3
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001090:	3b01      	subs	r3, #1
 8001092:	b29a      	uxth	r2, r3
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800109c:	b29b      	uxth	r3, r3
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d034      	beq.n	800110c <HAL_I2C_Master_Transmit+0x184>
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d130      	bne.n	800110c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	9300      	str	r3, [sp, #0]
 80010ae:	6a3b      	ldr	r3, [r7, #32]
 80010b0:	2200      	movs	r2, #0
 80010b2:	2180      	movs	r1, #128	; 0x80
 80010b4:	68f8      	ldr	r0, [r7, #12]
 80010b6:	f000 fc4b 	bl	8001950 <I2C_WaitOnFlagUntilTimeout>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80010c0:	2301      	movs	r3, #1
 80010c2:	e04d      	b.n	8001160 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	2bff      	cmp	r3, #255	; 0xff
 80010cc:	d90e      	bls.n	80010ec <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	22ff      	movs	r2, #255	; 0xff
 80010d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010d8:	b2da      	uxtb	r2, r3
 80010da:	8979      	ldrh	r1, [r7, #10]
 80010dc:	2300      	movs	r3, #0
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010e4:	68f8      	ldr	r0, [r7, #12]
 80010e6:	f000 fdc1 	bl	8001c6c <I2C_TransferConfig>
 80010ea:	e00f      	b.n	800110c <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010f0:	b29a      	uxth	r2, r3
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010fa:	b2da      	uxtb	r2, r3
 80010fc:	8979      	ldrh	r1, [r7, #10]
 80010fe:	2300      	movs	r3, #0
 8001100:	9300      	str	r3, [sp, #0]
 8001102:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001106:	68f8      	ldr	r0, [r7, #12]
 8001108:	f000 fdb0 	bl	8001c6c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001110:	b29b      	uxth	r3, r3
 8001112:	2b00      	cmp	r3, #0
 8001114:	d19e      	bne.n	8001054 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001116:	697a      	ldr	r2, [r7, #20]
 8001118:	6a39      	ldr	r1, [r7, #32]
 800111a:	68f8      	ldr	r0, [r7, #12]
 800111c:	f000 fc98 	bl	8001a50 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e01a      	b.n	8001160 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2220      	movs	r2, #32
 8001130:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	6859      	ldr	r1, [r3, #4]
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	4b0b      	ldr	r3, [pc, #44]	; (800116c <HAL_I2C_Master_Transmit+0x1e4>)
 800113e:	400b      	ands	r3, r1
 8001140:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	2220      	movs	r2, #32
 8001146:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	2200      	movs	r2, #0
 800114e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	2200      	movs	r2, #0
 8001156:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800115a:	2300      	movs	r3, #0
 800115c:	e000      	b.n	8001160 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800115e:	2302      	movs	r3, #2
  }
}
 8001160:	4618      	mov	r0, r3
 8001162:	3718      	adds	r7, #24
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	80002000 	.word	0x80002000
 800116c:	fe00e800 	.word	0xfe00e800

08001170 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b088      	sub	sp, #32
 8001174:	af02      	add	r7, sp, #8
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	607a      	str	r2, [r7, #4]
 800117a:	461a      	mov	r2, r3
 800117c:	460b      	mov	r3, r1
 800117e:	817b      	strh	r3, [r7, #10]
 8001180:	4613      	mov	r3, r2
 8001182:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800118a:	b2db      	uxtb	r3, r3
 800118c:	2b20      	cmp	r3, #32
 800118e:	f040 80db 	bne.w	8001348 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001198:	2b01      	cmp	r3, #1
 800119a:	d101      	bne.n	80011a0 <HAL_I2C_Master_Receive+0x30>
 800119c:	2302      	movs	r3, #2
 800119e:	e0d4      	b.n	800134a <HAL_I2C_Master_Receive+0x1da>
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	2201      	movs	r2, #1
 80011a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80011a8:	f7ff fb8a 	bl	80008c0 <HAL_GetTick>
 80011ac:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	9300      	str	r3, [sp, #0]
 80011b2:	2319      	movs	r3, #25
 80011b4:	2201      	movs	r2, #1
 80011b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011ba:	68f8      	ldr	r0, [r7, #12]
 80011bc:	f000 fbc8 	bl	8001950 <I2C_WaitOnFlagUntilTimeout>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e0bf      	b.n	800134a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	2222      	movs	r2, #34	; 0x22
 80011ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	2210      	movs	r2, #16
 80011d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	2200      	movs	r2, #0
 80011de:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	893a      	ldrh	r2, [r7, #8]
 80011ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	2200      	movs	r2, #0
 80011f0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	2bff      	cmp	r3, #255	; 0xff
 80011fa:	d90e      	bls.n	800121a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	22ff      	movs	r2, #255	; 0xff
 8001200:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001206:	b2da      	uxtb	r2, r3
 8001208:	8979      	ldrh	r1, [r7, #10]
 800120a:	4b52      	ldr	r3, [pc, #328]	; (8001354 <HAL_I2C_Master_Receive+0x1e4>)
 800120c:	9300      	str	r3, [sp, #0]
 800120e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001212:	68f8      	ldr	r0, [r7, #12]
 8001214:	f000 fd2a 	bl	8001c6c <I2C_TransferConfig>
 8001218:	e06d      	b.n	80012f6 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800121e:	b29a      	uxth	r2, r3
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001228:	b2da      	uxtb	r2, r3
 800122a:	8979      	ldrh	r1, [r7, #10]
 800122c:	4b49      	ldr	r3, [pc, #292]	; (8001354 <HAL_I2C_Master_Receive+0x1e4>)
 800122e:	9300      	str	r3, [sp, #0]
 8001230:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001234:	68f8      	ldr	r0, [r7, #12]
 8001236:	f000 fd19 	bl	8001c6c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800123a:	e05c      	b.n	80012f6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800123c:	697a      	ldr	r2, [r7, #20]
 800123e:	6a39      	ldr	r1, [r7, #32]
 8001240:	68f8      	ldr	r0, [r7, #12]
 8001242:	f000 fc41 	bl	8001ac8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800124c:	2301      	movs	r3, #1
 800124e:	e07c      	b.n	800134a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800125a:	b2d2      	uxtb	r2, r2
 800125c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001262:	1c5a      	adds	r2, r3, #1
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800126c:	3b01      	subs	r3, #1
 800126e:	b29a      	uxth	r2, r3
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001278:	b29b      	uxth	r3, r3
 800127a:	3b01      	subs	r3, #1
 800127c:	b29a      	uxth	r2, r3
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001286:	b29b      	uxth	r3, r3
 8001288:	2b00      	cmp	r3, #0
 800128a:	d034      	beq.n	80012f6 <HAL_I2C_Master_Receive+0x186>
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001290:	2b00      	cmp	r3, #0
 8001292:	d130      	bne.n	80012f6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	9300      	str	r3, [sp, #0]
 8001298:	6a3b      	ldr	r3, [r7, #32]
 800129a:	2200      	movs	r2, #0
 800129c:	2180      	movs	r1, #128	; 0x80
 800129e:	68f8      	ldr	r0, [r7, #12]
 80012a0:	f000 fb56 	bl	8001950 <I2C_WaitOnFlagUntilTimeout>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e04d      	b.n	800134a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	2bff      	cmp	r3, #255	; 0xff
 80012b6:	d90e      	bls.n	80012d6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	22ff      	movs	r2, #255	; 0xff
 80012bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012c2:	b2da      	uxtb	r2, r3
 80012c4:	8979      	ldrh	r1, [r7, #10]
 80012c6:	2300      	movs	r3, #0
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012ce:	68f8      	ldr	r0, [r7, #12]
 80012d0:	f000 fccc 	bl	8001c6c <I2C_TransferConfig>
 80012d4:	e00f      	b.n	80012f6 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012da:	b29a      	uxth	r2, r3
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012e4:	b2da      	uxtb	r2, r3
 80012e6:	8979      	ldrh	r1, [r7, #10]
 80012e8:	2300      	movs	r3, #0
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012f0:	68f8      	ldr	r0, [r7, #12]
 80012f2:	f000 fcbb 	bl	8001c6c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d19d      	bne.n	800123c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001300:	697a      	ldr	r2, [r7, #20]
 8001302:	6a39      	ldr	r1, [r7, #32]
 8001304:	68f8      	ldr	r0, [r7, #12]
 8001306:	f000 fba3 	bl	8001a50 <I2C_WaitOnSTOPFlagUntilTimeout>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	e01a      	b.n	800134a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2220      	movs	r2, #32
 800131a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	6859      	ldr	r1, [r3, #4]
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <HAL_I2C_Master_Receive+0x1e8>)
 8001328:	400b      	ands	r3, r1
 800132a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	2220      	movs	r2, #32
 8001330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	2200      	movs	r2, #0
 8001338:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	2200      	movs	r2, #0
 8001340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001344:	2300      	movs	r3, #0
 8001346:	e000      	b.n	800134a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001348:	2302      	movs	r3, #2
  }
}
 800134a:	4618      	mov	r0, r3
 800134c:	3718      	adds	r7, #24
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	80002400 	.word	0x80002400
 8001358:	fe00e800 	.word	0xfe00e800

0800135c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b088      	sub	sp, #32
 8001360:	af02      	add	r7, sp, #8
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	4608      	mov	r0, r1
 8001366:	4611      	mov	r1, r2
 8001368:	461a      	mov	r2, r3
 800136a:	4603      	mov	r3, r0
 800136c:	817b      	strh	r3, [r7, #10]
 800136e:	460b      	mov	r3, r1
 8001370:	813b      	strh	r3, [r7, #8]
 8001372:	4613      	mov	r3, r2
 8001374:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800137c:	b2db      	uxtb	r3, r3
 800137e:	2b20      	cmp	r3, #32
 8001380:	f040 80f9 	bne.w	8001576 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001384:	6a3b      	ldr	r3, [r7, #32]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d002      	beq.n	8001390 <HAL_I2C_Mem_Write+0x34>
 800138a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800138c:	2b00      	cmp	r3, #0
 800138e:	d105      	bne.n	800139c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001396:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e0ed      	b.n	8001578 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d101      	bne.n	80013aa <HAL_I2C_Mem_Write+0x4e>
 80013a6:	2302      	movs	r3, #2
 80013a8:	e0e6      	b.n	8001578 <HAL_I2C_Mem_Write+0x21c>
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	2201      	movs	r2, #1
 80013ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80013b2:	f7ff fa85 	bl	80008c0 <HAL_GetTick>
 80013b6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	9300      	str	r3, [sp, #0]
 80013bc:	2319      	movs	r3, #25
 80013be:	2201      	movs	r2, #1
 80013c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013c4:	68f8      	ldr	r0, [r7, #12]
 80013c6:	f000 fac3 	bl	8001950 <I2C_WaitOnFlagUntilTimeout>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e0d1      	b.n	8001578 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	2221      	movs	r2, #33	; 0x21
 80013d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	2240      	movs	r2, #64	; 0x40
 80013e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	2200      	movs	r2, #0
 80013e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	6a3a      	ldr	r2, [r7, #32]
 80013ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80013f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	2200      	movs	r2, #0
 80013fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80013fc:	88f8      	ldrh	r0, [r7, #6]
 80013fe:	893a      	ldrh	r2, [r7, #8]
 8001400:	8979      	ldrh	r1, [r7, #10]
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	9301      	str	r3, [sp, #4]
 8001406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001408:	9300      	str	r3, [sp, #0]
 800140a:	4603      	mov	r3, r0
 800140c:	68f8      	ldr	r0, [r7, #12]
 800140e:	f000 f9d3 	bl	80017b8 <I2C_RequestMemoryWrite>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d005      	beq.n	8001424 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	2200      	movs	r2, #0
 800141c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e0a9      	b.n	8001578 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001428:	b29b      	uxth	r3, r3
 800142a:	2bff      	cmp	r3, #255	; 0xff
 800142c:	d90e      	bls.n	800144c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	22ff      	movs	r2, #255	; 0xff
 8001432:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001438:	b2da      	uxtb	r2, r3
 800143a:	8979      	ldrh	r1, [r7, #10]
 800143c:	2300      	movs	r3, #0
 800143e:	9300      	str	r3, [sp, #0]
 8001440:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001444:	68f8      	ldr	r0, [r7, #12]
 8001446:	f000 fc11 	bl	8001c6c <I2C_TransferConfig>
 800144a:	e00f      	b.n	800146c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001450:	b29a      	uxth	r2, r3
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800145a:	b2da      	uxtb	r2, r3
 800145c:	8979      	ldrh	r1, [r7, #10]
 800145e:	2300      	movs	r3, #0
 8001460:	9300      	str	r3, [sp, #0]
 8001462:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001466:	68f8      	ldr	r0, [r7, #12]
 8001468:	f000 fc00 	bl	8001c6c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800146c:	697a      	ldr	r2, [r7, #20]
 800146e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001470:	68f8      	ldr	r0, [r7, #12]
 8001472:	f000 faad 	bl	80019d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e07b      	b.n	8001578 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001484:	781a      	ldrb	r2, [r3, #0]
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001490:	1c5a      	adds	r2, r3, #1
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800149a:	b29b      	uxth	r3, r3
 800149c:	3b01      	subs	r3, #1
 800149e:	b29a      	uxth	r2, r3
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014a8:	3b01      	subs	r3, #1
 80014aa:	b29a      	uxth	r2, r3
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d034      	beq.n	8001524 <HAL_I2C_Mem_Write+0x1c8>
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d130      	bne.n	8001524 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	9300      	str	r3, [sp, #0]
 80014c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014c8:	2200      	movs	r2, #0
 80014ca:	2180      	movs	r1, #128	; 0x80
 80014cc:	68f8      	ldr	r0, [r7, #12]
 80014ce:	f000 fa3f 	bl	8001950 <I2C_WaitOnFlagUntilTimeout>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e04d      	b.n	8001578 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	2bff      	cmp	r3, #255	; 0xff
 80014e4:	d90e      	bls.n	8001504 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	22ff      	movs	r2, #255	; 0xff
 80014ea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014f0:	b2da      	uxtb	r2, r3
 80014f2:	8979      	ldrh	r1, [r7, #10]
 80014f4:	2300      	movs	r3, #0
 80014f6:	9300      	str	r3, [sp, #0]
 80014f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014fc:	68f8      	ldr	r0, [r7, #12]
 80014fe:	f000 fbb5 	bl	8001c6c <I2C_TransferConfig>
 8001502:	e00f      	b.n	8001524 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001508:	b29a      	uxth	r2, r3
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001512:	b2da      	uxtb	r2, r3
 8001514:	8979      	ldrh	r1, [r7, #10]
 8001516:	2300      	movs	r3, #0
 8001518:	9300      	str	r3, [sp, #0]
 800151a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800151e:	68f8      	ldr	r0, [r7, #12]
 8001520:	f000 fba4 	bl	8001c6c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001528:	b29b      	uxth	r3, r3
 800152a:	2b00      	cmp	r3, #0
 800152c:	d19e      	bne.n	800146c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800152e:	697a      	ldr	r2, [r7, #20]
 8001530:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001532:	68f8      	ldr	r0, [r7, #12]
 8001534:	f000 fa8c 	bl	8001a50 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e01a      	b.n	8001578 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2220      	movs	r2, #32
 8001548:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	6859      	ldr	r1, [r3, #4]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <HAL_I2C_Mem_Write+0x224>)
 8001556:	400b      	ands	r3, r1
 8001558:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	2220      	movs	r2, #32
 800155e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	2200      	movs	r2, #0
 8001566:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2200      	movs	r2, #0
 800156e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001572:	2300      	movs	r3, #0
 8001574:	e000      	b.n	8001578 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001576:	2302      	movs	r3, #2
  }
}
 8001578:	4618      	mov	r0, r3
 800157a:	3718      	adds	r7, #24
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	fe00e800 	.word	0xfe00e800

08001584 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b088      	sub	sp, #32
 8001588:	af02      	add	r7, sp, #8
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	4608      	mov	r0, r1
 800158e:	4611      	mov	r1, r2
 8001590:	461a      	mov	r2, r3
 8001592:	4603      	mov	r3, r0
 8001594:	817b      	strh	r3, [r7, #10]
 8001596:	460b      	mov	r3, r1
 8001598:	813b      	strh	r3, [r7, #8]
 800159a:	4613      	mov	r3, r2
 800159c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	2b20      	cmp	r3, #32
 80015a8:	f040 80fd 	bne.w	80017a6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80015ac:	6a3b      	ldr	r3, [r7, #32]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d002      	beq.n	80015b8 <HAL_I2C_Mem_Read+0x34>
 80015b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d105      	bne.n	80015c4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015be:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e0f1      	b.n	80017a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d101      	bne.n	80015d2 <HAL_I2C_Mem_Read+0x4e>
 80015ce:	2302      	movs	r3, #2
 80015d0:	e0ea      	b.n	80017a8 <HAL_I2C_Mem_Read+0x224>
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	2201      	movs	r2, #1
 80015d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80015da:	f7ff f971 	bl	80008c0 <HAL_GetTick>
 80015de:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	9300      	str	r3, [sp, #0]
 80015e4:	2319      	movs	r3, #25
 80015e6:	2201      	movs	r2, #1
 80015e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015ec:	68f8      	ldr	r0, [r7, #12]
 80015ee:	f000 f9af 	bl	8001950 <I2C_WaitOnFlagUntilTimeout>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e0d5      	b.n	80017a8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2222      	movs	r2, #34	; 0x22
 8001600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2240      	movs	r2, #64	; 0x40
 8001608:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2200      	movs	r2, #0
 8001610:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	6a3a      	ldr	r2, [r7, #32]
 8001616:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800161c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	2200      	movs	r2, #0
 8001622:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001624:	88f8      	ldrh	r0, [r7, #6]
 8001626:	893a      	ldrh	r2, [r7, #8]
 8001628:	8979      	ldrh	r1, [r7, #10]
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	9301      	str	r3, [sp, #4]
 800162e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001630:	9300      	str	r3, [sp, #0]
 8001632:	4603      	mov	r3, r0
 8001634:	68f8      	ldr	r0, [r7, #12]
 8001636:	f000 f913 	bl	8001860 <I2C_RequestMemoryRead>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d005      	beq.n	800164c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2200      	movs	r2, #0
 8001644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e0ad      	b.n	80017a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001650:	b29b      	uxth	r3, r3
 8001652:	2bff      	cmp	r3, #255	; 0xff
 8001654:	d90e      	bls.n	8001674 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	22ff      	movs	r2, #255	; 0xff
 800165a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001660:	b2da      	uxtb	r2, r3
 8001662:	8979      	ldrh	r1, [r7, #10]
 8001664:	4b52      	ldr	r3, [pc, #328]	; (80017b0 <HAL_I2C_Mem_Read+0x22c>)
 8001666:	9300      	str	r3, [sp, #0]
 8001668:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800166c:	68f8      	ldr	r0, [r7, #12]
 800166e:	f000 fafd 	bl	8001c6c <I2C_TransferConfig>
 8001672:	e00f      	b.n	8001694 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001678:	b29a      	uxth	r2, r3
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001682:	b2da      	uxtb	r2, r3
 8001684:	8979      	ldrh	r1, [r7, #10]
 8001686:	4b4a      	ldr	r3, [pc, #296]	; (80017b0 <HAL_I2C_Mem_Read+0x22c>)
 8001688:	9300      	str	r3, [sp, #0]
 800168a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800168e:	68f8      	ldr	r0, [r7, #12]
 8001690:	f000 faec 	bl	8001c6c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	9300      	str	r3, [sp, #0]
 8001698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800169a:	2200      	movs	r2, #0
 800169c:	2104      	movs	r1, #4
 800169e:	68f8      	ldr	r0, [r7, #12]
 80016a0:	f000 f956 	bl	8001950 <I2C_WaitOnFlagUntilTimeout>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e07c      	b.n	80017a8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b8:	b2d2      	uxtb	r2, r2
 80016ba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c0:	1c5a      	adds	r2, r3, #1
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016ca:	3b01      	subs	r3, #1
 80016cc:	b29a      	uxth	r2, r3
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	3b01      	subs	r3, #1
 80016da:	b29a      	uxth	r2, r3
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d034      	beq.n	8001754 <HAL_I2C_Mem_Read+0x1d0>
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d130      	bne.n	8001754 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	9300      	str	r3, [sp, #0]
 80016f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016f8:	2200      	movs	r2, #0
 80016fa:	2180      	movs	r1, #128	; 0x80
 80016fc:	68f8      	ldr	r0, [r7, #12]
 80016fe:	f000 f927 	bl	8001950 <I2C_WaitOnFlagUntilTimeout>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e04d      	b.n	80017a8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001710:	b29b      	uxth	r3, r3
 8001712:	2bff      	cmp	r3, #255	; 0xff
 8001714:	d90e      	bls.n	8001734 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	22ff      	movs	r2, #255	; 0xff
 800171a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001720:	b2da      	uxtb	r2, r3
 8001722:	8979      	ldrh	r1, [r7, #10]
 8001724:	2300      	movs	r3, #0
 8001726:	9300      	str	r3, [sp, #0]
 8001728:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800172c:	68f8      	ldr	r0, [r7, #12]
 800172e:	f000 fa9d 	bl	8001c6c <I2C_TransferConfig>
 8001732:	e00f      	b.n	8001754 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001738:	b29a      	uxth	r2, r3
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001742:	b2da      	uxtb	r2, r3
 8001744:	8979      	ldrh	r1, [r7, #10]
 8001746:	2300      	movs	r3, #0
 8001748:	9300      	str	r3, [sp, #0]
 800174a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800174e:	68f8      	ldr	r0, [r7, #12]
 8001750:	f000 fa8c 	bl	8001c6c <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001758:	b29b      	uxth	r3, r3
 800175a:	2b00      	cmp	r3, #0
 800175c:	d19a      	bne.n	8001694 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800175e:	697a      	ldr	r2, [r7, #20]
 8001760:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001762:	68f8      	ldr	r0, [r7, #12]
 8001764:	f000 f974 	bl	8001a50 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e01a      	b.n	80017a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2220      	movs	r2, #32
 8001778:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	6859      	ldr	r1, [r3, #4]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	4b0b      	ldr	r3, [pc, #44]	; (80017b4 <HAL_I2C_Mem_Read+0x230>)
 8001786:	400b      	ands	r3, r1
 8001788:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	2220      	movs	r2, #32
 800178e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2200      	movs	r2, #0
 8001796:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	2200      	movs	r2, #0
 800179e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80017a2:	2300      	movs	r3, #0
 80017a4:	e000      	b.n	80017a8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80017a6:	2302      	movs	r3, #2
  }
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3718      	adds	r7, #24
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	80002400 	.word	0x80002400
 80017b4:	fe00e800 	.word	0xfe00e800

080017b8 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af02      	add	r7, sp, #8
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	4608      	mov	r0, r1
 80017c2:	4611      	mov	r1, r2
 80017c4:	461a      	mov	r2, r3
 80017c6:	4603      	mov	r3, r0
 80017c8:	817b      	strh	r3, [r7, #10]
 80017ca:	460b      	mov	r3, r1
 80017cc:	813b      	strh	r3, [r7, #8]
 80017ce:	4613      	mov	r3, r2
 80017d0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80017d2:	88fb      	ldrh	r3, [r7, #6]
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	8979      	ldrh	r1, [r7, #10]
 80017d8:	4b20      	ldr	r3, [pc, #128]	; (800185c <I2C_RequestMemoryWrite+0xa4>)
 80017da:	9300      	str	r3, [sp, #0]
 80017dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017e0:	68f8      	ldr	r0, [r7, #12]
 80017e2:	f000 fa43 	bl	8001c6c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80017e6:	69fa      	ldr	r2, [r7, #28]
 80017e8:	69b9      	ldr	r1, [r7, #24]
 80017ea:	68f8      	ldr	r0, [r7, #12]
 80017ec:	f000 f8f0 	bl	80019d0 <I2C_WaitOnTXISFlagUntilTimeout>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e02c      	b.n	8001854 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80017fa:	88fb      	ldrh	r3, [r7, #6]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d105      	bne.n	800180c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001800:	893b      	ldrh	r3, [r7, #8]
 8001802:	b2da      	uxtb	r2, r3
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	629a      	str	r2, [r3, #40]	; 0x28
 800180a:	e015      	b.n	8001838 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800180c:	893b      	ldrh	r3, [r7, #8]
 800180e:	0a1b      	lsrs	r3, r3, #8
 8001810:	b29b      	uxth	r3, r3
 8001812:	b2da      	uxtb	r2, r3
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800181a:	69fa      	ldr	r2, [r7, #28]
 800181c:	69b9      	ldr	r1, [r7, #24]
 800181e:	68f8      	ldr	r0, [r7, #12]
 8001820:	f000 f8d6 	bl	80019d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e012      	b.n	8001854 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800182e:	893b      	ldrh	r3, [r7, #8]
 8001830:	b2da      	uxtb	r2, r3
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	9300      	str	r3, [sp, #0]
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	2200      	movs	r2, #0
 8001840:	2180      	movs	r1, #128	; 0x80
 8001842:	68f8      	ldr	r0, [r7, #12]
 8001844:	f000 f884 	bl	8001950 <I2C_WaitOnFlagUntilTimeout>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e000      	b.n	8001854 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001852:	2300      	movs	r3, #0
}
 8001854:	4618      	mov	r0, r3
 8001856:	3710      	adds	r7, #16
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	80002000 	.word	0x80002000

08001860 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af02      	add	r7, sp, #8
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	4608      	mov	r0, r1
 800186a:	4611      	mov	r1, r2
 800186c:	461a      	mov	r2, r3
 800186e:	4603      	mov	r3, r0
 8001870:	817b      	strh	r3, [r7, #10]
 8001872:	460b      	mov	r3, r1
 8001874:	813b      	strh	r3, [r7, #8]
 8001876:	4613      	mov	r3, r2
 8001878:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800187a:	88fb      	ldrh	r3, [r7, #6]
 800187c:	b2da      	uxtb	r2, r3
 800187e:	8979      	ldrh	r1, [r7, #10]
 8001880:	4b20      	ldr	r3, [pc, #128]	; (8001904 <I2C_RequestMemoryRead+0xa4>)
 8001882:	9300      	str	r3, [sp, #0]
 8001884:	2300      	movs	r3, #0
 8001886:	68f8      	ldr	r0, [r7, #12]
 8001888:	f000 f9f0 	bl	8001c6c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800188c:	69fa      	ldr	r2, [r7, #28]
 800188e:	69b9      	ldr	r1, [r7, #24]
 8001890:	68f8      	ldr	r0, [r7, #12]
 8001892:	f000 f89d 	bl	80019d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e02c      	b.n	80018fa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80018a0:	88fb      	ldrh	r3, [r7, #6]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d105      	bne.n	80018b2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80018a6:	893b      	ldrh	r3, [r7, #8]
 80018a8:	b2da      	uxtb	r2, r3
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	629a      	str	r2, [r3, #40]	; 0x28
 80018b0:	e015      	b.n	80018de <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80018b2:	893b      	ldrh	r3, [r7, #8]
 80018b4:	0a1b      	lsrs	r3, r3, #8
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	b2da      	uxtb	r2, r3
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018c0:	69fa      	ldr	r2, [r7, #28]
 80018c2:	69b9      	ldr	r1, [r7, #24]
 80018c4:	68f8      	ldr	r0, [r7, #12]
 80018c6:	f000 f883 	bl	80019d0 <I2C_WaitOnTXISFlagUntilTimeout>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e012      	b.n	80018fa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80018d4:	893b      	ldrh	r3, [r7, #8]
 80018d6:	b2da      	uxtb	r2, r3
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	9300      	str	r3, [sp, #0]
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	2200      	movs	r2, #0
 80018e6:	2140      	movs	r1, #64	; 0x40
 80018e8:	68f8      	ldr	r0, [r7, #12]
 80018ea:	f000 f831 	bl	8001950 <I2C_WaitOnFlagUntilTimeout>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e000      	b.n	80018fa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3710      	adds	r7, #16
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	80002000 	.word	0x80002000

08001908 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	699b      	ldr	r3, [r3, #24]
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	2b02      	cmp	r3, #2
 800191c:	d103      	bne.n	8001926 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2200      	movs	r2, #0
 8001924:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	f003 0301 	and.w	r3, r3, #1
 8001930:	2b01      	cmp	r3, #1
 8001932:	d007      	beq.n	8001944 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	699a      	ldr	r2, [r3, #24]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f042 0201 	orr.w	r2, r2, #1
 8001942:	619a      	str	r2, [r3, #24]
  }
}
 8001944:	bf00      	nop
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	603b      	str	r3, [r7, #0]
 800195c:	4613      	mov	r3, r2
 800195e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001960:	e022      	b.n	80019a8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001968:	d01e      	beq.n	80019a8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800196a:	f7fe ffa9 	bl	80008c0 <HAL_GetTick>
 800196e:	4602      	mov	r2, r0
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	429a      	cmp	r2, r3
 8001978:	d302      	bcc.n	8001980 <I2C_WaitOnFlagUntilTimeout+0x30>
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d113      	bne.n	80019a8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001984:	f043 0220 	orr.w	r2, r3, #32
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2220      	movs	r2, #32
 8001990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	2200      	movs	r2, #0
 8001998:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2200      	movs	r2, #0
 80019a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e00f      	b.n	80019c8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	699a      	ldr	r2, [r3, #24]
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	4013      	ands	r3, r2
 80019b2:	68ba      	ldr	r2, [r7, #8]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	bf0c      	ite	eq
 80019b8:	2301      	moveq	r3, #1
 80019ba:	2300      	movne	r3, #0
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	461a      	mov	r2, r3
 80019c0:	79fb      	ldrb	r3, [r7, #7]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d0cd      	beq.n	8001962 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80019c6:	2300      	movs	r3, #0
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3710      	adds	r7, #16
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80019dc:	e02c      	b.n	8001a38 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	68b9      	ldr	r1, [r7, #8]
 80019e2:	68f8      	ldr	r0, [r7, #12]
 80019e4:	f000 f8dc 	bl	8001ba0 <I2C_IsAcknowledgeFailed>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e02a      	b.n	8001a48 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019f8:	d01e      	beq.n	8001a38 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019fa:	f7fe ff61 	bl	80008c0 <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	68ba      	ldr	r2, [r7, #8]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d302      	bcc.n	8001a10 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d113      	bne.n	8001a38 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a14:	f043 0220 	orr.w	r2, r3, #32
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2220      	movs	r2, #32
 8001a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2200      	movs	r2, #0
 8001a28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e007      	b.n	8001a48 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	699b      	ldr	r3, [r3, #24]
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d1cb      	bne.n	80019de <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001a46:	2300      	movs	r3, #0
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3710      	adds	r7, #16
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a5c:	e028      	b.n	8001ab0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	68b9      	ldr	r1, [r7, #8]
 8001a62:	68f8      	ldr	r0, [r7, #12]
 8001a64:	f000 f89c 	bl	8001ba0 <I2C_IsAcknowledgeFailed>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e026      	b.n	8001ac0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a72:	f7fe ff25 	bl	80008c0 <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	68ba      	ldr	r2, [r7, #8]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d302      	bcc.n	8001a88 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d113      	bne.n	8001ab0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8c:	f043 0220 	orr.w	r2, r3, #32
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2220      	movs	r2, #32
 8001a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e007      	b.n	8001ac0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	699b      	ldr	r3, [r3, #24]
 8001ab6:	f003 0320 	and.w	r3, r3, #32
 8001aba:	2b20      	cmp	r3, #32
 8001abc:	d1cf      	bne.n	8001a5e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3710      	adds	r7, #16
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001ad4:	e055      	b.n	8001b82 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	68b9      	ldr	r1, [r7, #8]
 8001ada:	68f8      	ldr	r0, [r7, #12]
 8001adc:	f000 f860 	bl	8001ba0 <I2C_IsAcknowledgeFailed>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e053      	b.n	8001b92 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	f003 0320 	and.w	r3, r3, #32
 8001af4:	2b20      	cmp	r3, #32
 8001af6:	d129      	bne.n	8001b4c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	699b      	ldr	r3, [r3, #24]
 8001afe:	f003 0304 	and.w	r3, r3, #4
 8001b02:	2b04      	cmp	r3, #4
 8001b04:	d105      	bne.n	8001b12 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	e03f      	b.n	8001b92 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2220      	movs	r2, #32
 8001b18:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	6859      	ldr	r1, [r3, #4]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	4b1d      	ldr	r3, [pc, #116]	; (8001b9c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8001b26:	400b      	ands	r3, r1
 8001b28:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2220      	movs	r2, #32
 8001b34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2200      	movs	r2, #0
 8001b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e022      	b.n	8001b92 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b4c:	f7fe feb8 	bl	80008c0 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	68ba      	ldr	r2, [r7, #8]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d302      	bcc.n	8001b62 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d10f      	bne.n	8001b82 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b66:	f043 0220 	orr.w	r2, r3, #32
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2220      	movs	r2, #32
 8001b72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e007      	b.n	8001b92 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	f003 0304 	and.w	r3, r3, #4
 8001b8c:	2b04      	cmp	r3, #4
 8001b8e:	d1a2      	bne.n	8001ad6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	fe00e800 	.word	0xfe00e800

08001ba0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	699b      	ldr	r3, [r3, #24]
 8001bb2:	f003 0310 	and.w	r3, r3, #16
 8001bb6:	2b10      	cmp	r3, #16
 8001bb8:	d151      	bne.n	8001c5e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001bba:	e022      	b.n	8001c02 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc2:	d01e      	beq.n	8001c02 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bc4:	f7fe fe7c 	bl	80008c0 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	68ba      	ldr	r2, [r7, #8]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d302      	bcc.n	8001bda <I2C_IsAcknowledgeFailed+0x3a>
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d113      	bne.n	8001c02 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bde:	f043 0220 	orr.w	r2, r3, #32
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2220      	movs	r2, #32
 8001bea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e02e      	b.n	8001c60 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	f003 0320 	and.w	r3, r3, #32
 8001c0c:	2b20      	cmp	r3, #32
 8001c0e:	d1d5      	bne.n	8001bbc <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2210      	movs	r2, #16
 8001c16:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2220      	movs	r2, #32
 8001c1e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001c20:	68f8      	ldr	r0, [r7, #12]
 8001c22:	f7ff fe71 	bl	8001908 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	6859      	ldr	r1, [r3, #4]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	4b0d      	ldr	r3, [pc, #52]	; (8001c68 <I2C_IsAcknowledgeFailed+0xc8>)
 8001c32:	400b      	ands	r3, r1
 8001c34:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3a:	f043 0204 	orr.w	r2, r3, #4
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2220      	movs	r2, #32
 8001c46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e000      	b.n	8001c60 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3710      	adds	r7, #16
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	fe00e800 	.word	0xfe00e800

08001c6c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	607b      	str	r3, [r7, #4]
 8001c76:	460b      	mov	r3, r1
 8001c78:	817b      	strh	r3, [r7, #10]
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	685a      	ldr	r2, [r3, #4]
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	0d5b      	lsrs	r3, r3, #21
 8001c88:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001c8c:	4b0d      	ldr	r3, [pc, #52]	; (8001cc4 <I2C_TransferConfig+0x58>)
 8001c8e:	430b      	orrs	r3, r1
 8001c90:	43db      	mvns	r3, r3
 8001c92:	ea02 0103 	and.w	r1, r2, r3
 8001c96:	897b      	ldrh	r3, [r7, #10]
 8001c98:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c9c:	7a7b      	ldrb	r3, [r7, #9]
 8001c9e:	041b      	lsls	r3, r3, #16
 8001ca0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001ca4:	431a      	orrs	r2, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	431a      	orrs	r2, r3
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	431a      	orrs	r2, r3
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001cb6:	bf00      	nop
 8001cb8:	3714      	adds	r7, #20
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	03ff63ff 	.word	0x03ff63ff

08001cc8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	2b20      	cmp	r3, #32
 8001cdc:	d138      	bne.n	8001d50 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d101      	bne.n	8001cec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001ce8:	2302      	movs	r3, #2
 8001cea:	e032      	b.n	8001d52 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2224      	movs	r2, #36	; 0x24
 8001cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f022 0201 	bic.w	r2, r2, #1
 8001d0a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d1a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	6819      	ldr	r1, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	683a      	ldr	r2, [r7, #0]
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f042 0201 	orr.w	r2, r2, #1
 8001d3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2220      	movs	r2, #32
 8001d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	e000      	b.n	8001d52 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001d50:	2302      	movs	r3, #2
  }
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr

08001d5e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	b085      	sub	sp, #20
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
 8001d66:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	2b20      	cmp	r3, #32
 8001d72:	d139      	bne.n	8001de8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d101      	bne.n	8001d82 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001d7e:	2302      	movs	r3, #2
 8001d80:	e033      	b.n	8001dea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2201      	movs	r2, #1
 8001d86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2224      	movs	r2, #36	; 0x24
 8001d8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f022 0201 	bic.w	r2, r2, #1
 8001da0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001db0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	021b      	lsls	r3, r3, #8
 8001db6:	68fa      	ldr	r2, [r7, #12]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	68fa      	ldr	r2, [r7, #12]
 8001dc2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f042 0201 	orr.w	r2, r2, #1
 8001dd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2220      	movs	r2, #32
 8001dd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001de4:	2300      	movs	r3, #0
 8001de6:	e000      	b.n	8001dea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001de8:	2302      	movs	r3, #2
  }
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3714      	adds	r7, #20
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
	...

08001df8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001dfc:	4b04      	ldr	r3, [pc, #16]	; (8001e10 <HAL_PWREx_GetVoltageRange+0x18>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	40007000 	.word	0x40007000

08001e14 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e22:	d130      	bne.n	8001e86 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e24:	4b23      	ldr	r3, [pc, #140]	; (8001eb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e30:	d038      	beq.n	8001ea4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e32:	4b20      	ldr	r3, [pc, #128]	; (8001eb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e3a:	4a1e      	ldr	r2, [pc, #120]	; (8001eb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e40:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e42:	4b1d      	ldr	r3, [pc, #116]	; (8001eb8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2232      	movs	r2, #50	; 0x32
 8001e48:	fb02 f303 	mul.w	r3, r2, r3
 8001e4c:	4a1b      	ldr	r2, [pc, #108]	; (8001ebc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e52:	0c9b      	lsrs	r3, r3, #18
 8001e54:	3301      	adds	r3, #1
 8001e56:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e58:	e002      	b.n	8001e60 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e60:	4b14      	ldr	r3, [pc, #80]	; (8001eb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e62:	695b      	ldr	r3, [r3, #20]
 8001e64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e6c:	d102      	bne.n	8001e74 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d1f2      	bne.n	8001e5a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e74:	4b0f      	ldr	r3, [pc, #60]	; (8001eb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e76:	695b      	ldr	r3, [r3, #20]
 8001e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e80:	d110      	bne.n	8001ea4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e00f      	b.n	8001ea6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e86:	4b0b      	ldr	r3, [pc, #44]	; (8001eb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e92:	d007      	beq.n	8001ea4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e94:	4b07      	ldr	r3, [pc, #28]	; (8001eb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e9c:	4a05      	ldr	r2, [pc, #20]	; (8001eb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ea2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3714      	adds	r7, #20
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	40007000 	.word	0x40007000
 8001eb8:	20000000 	.word	0x20000000
 8001ebc:	431bde83 	.word	0x431bde83

08001ec0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b088      	sub	sp, #32
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d102      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	f000 bc11 	b.w	80026f6 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ed4:	4ba0      	ldr	r3, [pc, #640]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f003 030c 	and.w	r3, r3, #12
 8001edc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ede:	4b9e      	ldr	r3, [pc, #632]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	f003 0303 	and.w	r3, r3, #3
 8001ee6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0310 	and.w	r3, r3, #16
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	f000 80e4 	beq.w	80020be <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d007      	beq.n	8001f0c <HAL_RCC_OscConfig+0x4c>
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	2b0c      	cmp	r3, #12
 8001f00:	f040 808b 	bne.w	800201a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	f040 8087 	bne.w	800201a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f0c:	4b92      	ldr	r3, [pc, #584]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d005      	beq.n	8001f24 <HAL_RCC_OscConfig+0x64>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d101      	bne.n	8001f24 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e3e8      	b.n	80026f6 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a1a      	ldr	r2, [r3, #32]
 8001f28:	4b8b      	ldr	r3, [pc, #556]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0308 	and.w	r3, r3, #8
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d004      	beq.n	8001f3e <HAL_RCC_OscConfig+0x7e>
 8001f34:	4b88      	ldr	r3, [pc, #544]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f3c:	e005      	b.n	8001f4a <HAL_RCC_OscConfig+0x8a>
 8001f3e:	4b86      	ldr	r3, [pc, #536]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 8001f40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f44:	091b      	lsrs	r3, r3, #4
 8001f46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d223      	bcs.n	8001f96 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a1b      	ldr	r3, [r3, #32]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f000 fd42 	bl	80029dc <RCC_SetFlashLatencyFromMSIRange>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e3c9      	b.n	80026f6 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f62:	4b7d      	ldr	r3, [pc, #500]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a7c      	ldr	r2, [pc, #496]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 8001f68:	f043 0308 	orr.w	r3, r3, #8
 8001f6c:	6013      	str	r3, [r2, #0]
 8001f6e:	4b7a      	ldr	r3, [pc, #488]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a1b      	ldr	r3, [r3, #32]
 8001f7a:	4977      	ldr	r1, [pc, #476]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f80:	4b75      	ldr	r3, [pc, #468]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	69db      	ldr	r3, [r3, #28]
 8001f8c:	021b      	lsls	r3, r3, #8
 8001f8e:	4972      	ldr	r1, [pc, #456]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 8001f90:	4313      	orrs	r3, r2
 8001f92:	604b      	str	r3, [r1, #4]
 8001f94:	e025      	b.n	8001fe2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f96:	4b70      	ldr	r3, [pc, #448]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a6f      	ldr	r2, [pc, #444]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 8001f9c:	f043 0308 	orr.w	r3, r3, #8
 8001fa0:	6013      	str	r3, [r2, #0]
 8001fa2:	4b6d      	ldr	r3, [pc, #436]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a1b      	ldr	r3, [r3, #32]
 8001fae:	496a      	ldr	r1, [pc, #424]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fb4:	4b68      	ldr	r3, [pc, #416]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	69db      	ldr	r3, [r3, #28]
 8001fc0:	021b      	lsls	r3, r3, #8
 8001fc2:	4965      	ldr	r1, [pc, #404]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d109      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a1b      	ldr	r3, [r3, #32]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f000 fd02 	bl	80029dc <RCC_SetFlashLatencyFromMSIRange>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e389      	b.n	80026f6 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fe2:	f000 fc6f 	bl	80028c4 <HAL_RCC_GetSysClockFreq>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	4b5b      	ldr	r3, [pc, #364]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	091b      	lsrs	r3, r3, #4
 8001fee:	f003 030f 	and.w	r3, r3, #15
 8001ff2:	495a      	ldr	r1, [pc, #360]	; (800215c <HAL_RCC_OscConfig+0x29c>)
 8001ff4:	5ccb      	ldrb	r3, [r1, r3]
 8001ff6:	f003 031f 	and.w	r3, r3, #31
 8001ffa:	fa22 f303 	lsr.w	r3, r2, r3
 8001ffe:	4a58      	ldr	r2, [pc, #352]	; (8002160 <HAL_RCC_OscConfig+0x2a0>)
 8002000:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002002:	4b58      	ldr	r3, [pc, #352]	; (8002164 <HAL_RCC_OscConfig+0x2a4>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4618      	mov	r0, r3
 8002008:	f7fe fc0a 	bl	8000820 <HAL_InitTick>
 800200c:	4603      	mov	r3, r0
 800200e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002010:	7bfb      	ldrb	r3, [r7, #15]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d052      	beq.n	80020bc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002016:	7bfb      	ldrb	r3, [r7, #15]
 8002018:	e36d      	b.n	80026f6 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d032      	beq.n	8002088 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002022:	4b4d      	ldr	r3, [pc, #308]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a4c      	ldr	r2, [pc, #304]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 8002028:	f043 0301 	orr.w	r3, r3, #1
 800202c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800202e:	f7fe fc47 	bl	80008c0 <HAL_GetTick>
 8002032:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002034:	e008      	b.n	8002048 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002036:	f7fe fc43 	bl	80008c0 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	2b02      	cmp	r3, #2
 8002042:	d901      	bls.n	8002048 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e356      	b.n	80026f6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002048:	4b43      	ldr	r3, [pc, #268]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d0f0      	beq.n	8002036 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002054:	4b40      	ldr	r3, [pc, #256]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a3f      	ldr	r2, [pc, #252]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 800205a:	f043 0308 	orr.w	r3, r3, #8
 800205e:	6013      	str	r3, [r2, #0]
 8002060:	4b3d      	ldr	r3, [pc, #244]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a1b      	ldr	r3, [r3, #32]
 800206c:	493a      	ldr	r1, [pc, #232]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 800206e:	4313      	orrs	r3, r2
 8002070:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002072:	4b39      	ldr	r3, [pc, #228]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	69db      	ldr	r3, [r3, #28]
 800207e:	021b      	lsls	r3, r3, #8
 8002080:	4935      	ldr	r1, [pc, #212]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 8002082:	4313      	orrs	r3, r2
 8002084:	604b      	str	r3, [r1, #4]
 8002086:	e01a      	b.n	80020be <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002088:	4b33      	ldr	r3, [pc, #204]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a32      	ldr	r2, [pc, #200]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 800208e:	f023 0301 	bic.w	r3, r3, #1
 8002092:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002094:	f7fe fc14 	bl	80008c0 <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800209c:	f7fe fc10 	bl	80008c0 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e323      	b.n	80026f6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020ae:	4b2a      	ldr	r3, [pc, #168]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1f0      	bne.n	800209c <HAL_RCC_OscConfig+0x1dc>
 80020ba:	e000      	b.n	80020be <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d073      	beq.n	80021b2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	2b08      	cmp	r3, #8
 80020ce:	d005      	beq.n	80020dc <HAL_RCC_OscConfig+0x21c>
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	2b0c      	cmp	r3, #12
 80020d4:	d10e      	bne.n	80020f4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	2b03      	cmp	r3, #3
 80020da:	d10b      	bne.n	80020f4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020dc:	4b1e      	ldr	r3, [pc, #120]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d063      	beq.n	80021b0 <HAL_RCC_OscConfig+0x2f0>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d15f      	bne.n	80021b0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e300      	b.n	80026f6 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020fc:	d106      	bne.n	800210c <HAL_RCC_OscConfig+0x24c>
 80020fe:	4b16      	ldr	r3, [pc, #88]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a15      	ldr	r2, [pc, #84]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 8002104:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002108:	6013      	str	r3, [r2, #0]
 800210a:	e01d      	b.n	8002148 <HAL_RCC_OscConfig+0x288>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002114:	d10c      	bne.n	8002130 <HAL_RCC_OscConfig+0x270>
 8002116:	4b10      	ldr	r3, [pc, #64]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a0f      	ldr	r2, [pc, #60]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 800211c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002120:	6013      	str	r3, [r2, #0]
 8002122:	4b0d      	ldr	r3, [pc, #52]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a0c      	ldr	r2, [pc, #48]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 8002128:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800212c:	6013      	str	r3, [r2, #0]
 800212e:	e00b      	b.n	8002148 <HAL_RCC_OscConfig+0x288>
 8002130:	4b09      	ldr	r3, [pc, #36]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a08      	ldr	r2, [pc, #32]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 8002136:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800213a:	6013      	str	r3, [r2, #0]
 800213c:	4b06      	ldr	r3, [pc, #24]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a05      	ldr	r2, [pc, #20]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 8002142:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002146:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d01b      	beq.n	8002188 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002150:	f7fe fbb6 	bl	80008c0 <HAL_GetTick>
 8002154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002156:	e010      	b.n	800217a <HAL_RCC_OscConfig+0x2ba>
 8002158:	40021000 	.word	0x40021000
 800215c:	08006b60 	.word	0x08006b60
 8002160:	20000000 	.word	0x20000000
 8002164:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002168:	f7fe fbaa 	bl	80008c0 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b64      	cmp	r3, #100	; 0x64
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e2bd      	b.n	80026f6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800217a:	4baf      	ldr	r3, [pc, #700]	; (8002438 <HAL_RCC_OscConfig+0x578>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d0f0      	beq.n	8002168 <HAL_RCC_OscConfig+0x2a8>
 8002186:	e014      	b.n	80021b2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002188:	f7fe fb9a 	bl	80008c0 <HAL_GetTick>
 800218c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800218e:	e008      	b.n	80021a2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002190:	f7fe fb96 	bl	80008c0 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b64      	cmp	r3, #100	; 0x64
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e2a9      	b.n	80026f6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021a2:	4ba5      	ldr	r3, [pc, #660]	; (8002438 <HAL_RCC_OscConfig+0x578>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1f0      	bne.n	8002190 <HAL_RCC_OscConfig+0x2d0>
 80021ae:	e000      	b.n	80021b2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d060      	beq.n	8002280 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	2b04      	cmp	r3, #4
 80021c2:	d005      	beq.n	80021d0 <HAL_RCC_OscConfig+0x310>
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	2b0c      	cmp	r3, #12
 80021c8:	d119      	bne.n	80021fe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d116      	bne.n	80021fe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021d0:	4b99      	ldr	r3, [pc, #612]	; (8002438 <HAL_RCC_OscConfig+0x578>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d005      	beq.n	80021e8 <HAL_RCC_OscConfig+0x328>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d101      	bne.n	80021e8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e286      	b.n	80026f6 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021e8:	4b93      	ldr	r3, [pc, #588]	; (8002438 <HAL_RCC_OscConfig+0x578>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	061b      	lsls	r3, r3, #24
 80021f6:	4990      	ldr	r1, [pc, #576]	; (8002438 <HAL_RCC_OscConfig+0x578>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021fc:	e040      	b.n	8002280 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d023      	beq.n	800224e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002206:	4b8c      	ldr	r3, [pc, #560]	; (8002438 <HAL_RCC_OscConfig+0x578>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a8b      	ldr	r2, [pc, #556]	; (8002438 <HAL_RCC_OscConfig+0x578>)
 800220c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002210:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002212:	f7fe fb55 	bl	80008c0 <HAL_GetTick>
 8002216:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002218:	e008      	b.n	800222c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800221a:	f7fe fb51 	bl	80008c0 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d901      	bls.n	800222c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e264      	b.n	80026f6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800222c:	4b82      	ldr	r3, [pc, #520]	; (8002438 <HAL_RCC_OscConfig+0x578>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002234:	2b00      	cmp	r3, #0
 8002236:	d0f0      	beq.n	800221a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002238:	4b7f      	ldr	r3, [pc, #508]	; (8002438 <HAL_RCC_OscConfig+0x578>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	691b      	ldr	r3, [r3, #16]
 8002244:	061b      	lsls	r3, r3, #24
 8002246:	497c      	ldr	r1, [pc, #496]	; (8002438 <HAL_RCC_OscConfig+0x578>)
 8002248:	4313      	orrs	r3, r2
 800224a:	604b      	str	r3, [r1, #4]
 800224c:	e018      	b.n	8002280 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800224e:	4b7a      	ldr	r3, [pc, #488]	; (8002438 <HAL_RCC_OscConfig+0x578>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a79      	ldr	r2, [pc, #484]	; (8002438 <HAL_RCC_OscConfig+0x578>)
 8002254:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002258:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225a:	f7fe fb31 	bl	80008c0 <HAL_GetTick>
 800225e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002260:	e008      	b.n	8002274 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002262:	f7fe fb2d 	bl	80008c0 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d901      	bls.n	8002274 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e240      	b.n	80026f6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002274:	4b70      	ldr	r3, [pc, #448]	; (8002438 <HAL_RCC_OscConfig+0x578>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800227c:	2b00      	cmp	r3, #0
 800227e:	d1f0      	bne.n	8002262 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0308 	and.w	r3, r3, #8
 8002288:	2b00      	cmp	r3, #0
 800228a:	d03c      	beq.n	8002306 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	695b      	ldr	r3, [r3, #20]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d01c      	beq.n	80022ce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002294:	4b68      	ldr	r3, [pc, #416]	; (8002438 <HAL_RCC_OscConfig+0x578>)
 8002296:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800229a:	4a67      	ldr	r2, [pc, #412]	; (8002438 <HAL_RCC_OscConfig+0x578>)
 800229c:	f043 0301 	orr.w	r3, r3, #1
 80022a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022a4:	f7fe fb0c 	bl	80008c0 <HAL_GetTick>
 80022a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022aa:	e008      	b.n	80022be <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022ac:	f7fe fb08 	bl	80008c0 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e21b      	b.n	80026f6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022be:	4b5e      	ldr	r3, [pc, #376]	; (8002438 <HAL_RCC_OscConfig+0x578>)
 80022c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d0ef      	beq.n	80022ac <HAL_RCC_OscConfig+0x3ec>
 80022cc:	e01b      	b.n	8002306 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022ce:	4b5a      	ldr	r3, [pc, #360]	; (8002438 <HAL_RCC_OscConfig+0x578>)
 80022d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022d4:	4a58      	ldr	r2, [pc, #352]	; (8002438 <HAL_RCC_OscConfig+0x578>)
 80022d6:	f023 0301 	bic.w	r3, r3, #1
 80022da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022de:	f7fe faef 	bl	80008c0 <HAL_GetTick>
 80022e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022e4:	e008      	b.n	80022f8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022e6:	f7fe faeb 	bl	80008c0 <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d901      	bls.n	80022f8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e1fe      	b.n	80026f6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022f8:	4b4f      	ldr	r3, [pc, #316]	; (8002438 <HAL_RCC_OscConfig+0x578>)
 80022fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1ef      	bne.n	80022e6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0304 	and.w	r3, r3, #4
 800230e:	2b00      	cmp	r3, #0
 8002310:	f000 80a6 	beq.w	8002460 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002314:	2300      	movs	r3, #0
 8002316:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002318:	4b47      	ldr	r3, [pc, #284]	; (8002438 <HAL_RCC_OscConfig+0x578>)
 800231a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800231c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d10d      	bne.n	8002340 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002324:	4b44      	ldr	r3, [pc, #272]	; (8002438 <HAL_RCC_OscConfig+0x578>)
 8002326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002328:	4a43      	ldr	r2, [pc, #268]	; (8002438 <HAL_RCC_OscConfig+0x578>)
 800232a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800232e:	6593      	str	r3, [r2, #88]	; 0x58
 8002330:	4b41      	ldr	r3, [pc, #260]	; (8002438 <HAL_RCC_OscConfig+0x578>)
 8002332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002334:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002338:	60bb      	str	r3, [r7, #8]
 800233a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800233c:	2301      	movs	r3, #1
 800233e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002340:	4b3e      	ldr	r3, [pc, #248]	; (800243c <HAL_RCC_OscConfig+0x57c>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002348:	2b00      	cmp	r3, #0
 800234a:	d118      	bne.n	800237e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800234c:	4b3b      	ldr	r3, [pc, #236]	; (800243c <HAL_RCC_OscConfig+0x57c>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a3a      	ldr	r2, [pc, #232]	; (800243c <HAL_RCC_OscConfig+0x57c>)
 8002352:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002356:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002358:	f7fe fab2 	bl	80008c0 <HAL_GetTick>
 800235c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800235e:	e008      	b.n	8002372 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002360:	f7fe faae 	bl	80008c0 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b02      	cmp	r3, #2
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e1c1      	b.n	80026f6 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002372:	4b32      	ldr	r3, [pc, #200]	; (800243c <HAL_RCC_OscConfig+0x57c>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800237a:	2b00      	cmp	r3, #0
 800237c:	d0f0      	beq.n	8002360 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d108      	bne.n	8002398 <HAL_RCC_OscConfig+0x4d8>
 8002386:	4b2c      	ldr	r3, [pc, #176]	; (8002438 <HAL_RCC_OscConfig+0x578>)
 8002388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800238c:	4a2a      	ldr	r2, [pc, #168]	; (8002438 <HAL_RCC_OscConfig+0x578>)
 800238e:	f043 0301 	orr.w	r3, r3, #1
 8002392:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002396:	e024      	b.n	80023e2 <HAL_RCC_OscConfig+0x522>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	2b05      	cmp	r3, #5
 800239e:	d110      	bne.n	80023c2 <HAL_RCC_OscConfig+0x502>
 80023a0:	4b25      	ldr	r3, [pc, #148]	; (8002438 <HAL_RCC_OscConfig+0x578>)
 80023a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023a6:	4a24      	ldr	r2, [pc, #144]	; (8002438 <HAL_RCC_OscConfig+0x578>)
 80023a8:	f043 0304 	orr.w	r3, r3, #4
 80023ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023b0:	4b21      	ldr	r3, [pc, #132]	; (8002438 <HAL_RCC_OscConfig+0x578>)
 80023b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b6:	4a20      	ldr	r2, [pc, #128]	; (8002438 <HAL_RCC_OscConfig+0x578>)
 80023b8:	f043 0301 	orr.w	r3, r3, #1
 80023bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023c0:	e00f      	b.n	80023e2 <HAL_RCC_OscConfig+0x522>
 80023c2:	4b1d      	ldr	r3, [pc, #116]	; (8002438 <HAL_RCC_OscConfig+0x578>)
 80023c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c8:	4a1b      	ldr	r2, [pc, #108]	; (8002438 <HAL_RCC_OscConfig+0x578>)
 80023ca:	f023 0301 	bic.w	r3, r3, #1
 80023ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023d2:	4b19      	ldr	r3, [pc, #100]	; (8002438 <HAL_RCC_OscConfig+0x578>)
 80023d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d8:	4a17      	ldr	r2, [pc, #92]	; (8002438 <HAL_RCC_OscConfig+0x578>)
 80023da:	f023 0304 	bic.w	r3, r3, #4
 80023de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d016      	beq.n	8002418 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ea:	f7fe fa69 	bl	80008c0 <HAL_GetTick>
 80023ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023f0:	e00a      	b.n	8002408 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023f2:	f7fe fa65 	bl	80008c0 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002400:	4293      	cmp	r3, r2
 8002402:	d901      	bls.n	8002408 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e176      	b.n	80026f6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002408:	4b0b      	ldr	r3, [pc, #44]	; (8002438 <HAL_RCC_OscConfig+0x578>)
 800240a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d0ed      	beq.n	80023f2 <HAL_RCC_OscConfig+0x532>
 8002416:	e01a      	b.n	800244e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002418:	f7fe fa52 	bl	80008c0 <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800241e:	e00f      	b.n	8002440 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002420:	f7fe fa4e 	bl	80008c0 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	f241 3288 	movw	r2, #5000	; 0x1388
 800242e:	4293      	cmp	r3, r2
 8002430:	d906      	bls.n	8002440 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e15f      	b.n	80026f6 <HAL_RCC_OscConfig+0x836>
 8002436:	bf00      	nop
 8002438:	40021000 	.word	0x40021000
 800243c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002440:	4baa      	ldr	r3, [pc, #680]	; (80026ec <HAL_RCC_OscConfig+0x82c>)
 8002442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d1e8      	bne.n	8002420 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800244e:	7ffb      	ldrb	r3, [r7, #31]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d105      	bne.n	8002460 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002454:	4ba5      	ldr	r3, [pc, #660]	; (80026ec <HAL_RCC_OscConfig+0x82c>)
 8002456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002458:	4aa4      	ldr	r2, [pc, #656]	; (80026ec <HAL_RCC_OscConfig+0x82c>)
 800245a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800245e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0320 	and.w	r3, r3, #32
 8002468:	2b00      	cmp	r3, #0
 800246a:	d03c      	beq.n	80024e6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002470:	2b00      	cmp	r3, #0
 8002472:	d01c      	beq.n	80024ae <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002474:	4b9d      	ldr	r3, [pc, #628]	; (80026ec <HAL_RCC_OscConfig+0x82c>)
 8002476:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800247a:	4a9c      	ldr	r2, [pc, #624]	; (80026ec <HAL_RCC_OscConfig+0x82c>)
 800247c:	f043 0301 	orr.w	r3, r3, #1
 8002480:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002484:	f7fe fa1c 	bl	80008c0 <HAL_GetTick>
 8002488:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800248a:	e008      	b.n	800249e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800248c:	f7fe fa18 	bl	80008c0 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b02      	cmp	r3, #2
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e12b      	b.n	80026f6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800249e:	4b93      	ldr	r3, [pc, #588]	; (80026ec <HAL_RCC_OscConfig+0x82c>)
 80024a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d0ef      	beq.n	800248c <HAL_RCC_OscConfig+0x5cc>
 80024ac:	e01b      	b.n	80024e6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80024ae:	4b8f      	ldr	r3, [pc, #572]	; (80026ec <HAL_RCC_OscConfig+0x82c>)
 80024b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024b4:	4a8d      	ldr	r2, [pc, #564]	; (80026ec <HAL_RCC_OscConfig+0x82c>)
 80024b6:	f023 0301 	bic.w	r3, r3, #1
 80024ba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024be:	f7fe f9ff 	bl	80008c0 <HAL_GetTick>
 80024c2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80024c4:	e008      	b.n	80024d8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024c6:	f7fe f9fb 	bl	80008c0 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d901      	bls.n	80024d8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e10e      	b.n	80026f6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80024d8:	4b84      	ldr	r3, [pc, #528]	; (80026ec <HAL_RCC_OscConfig+0x82c>)
 80024da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1ef      	bne.n	80024c6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f000 8102 	beq.w	80026f4 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	f040 80c5 	bne.w	8002684 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80024fa:	4b7c      	ldr	r3, [pc, #496]	; (80026ec <HAL_RCC_OscConfig+0x82c>)
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	f003 0203 	and.w	r2, r3, #3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800250a:	429a      	cmp	r2, r3
 800250c:	d12c      	bne.n	8002568 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002518:	3b01      	subs	r3, #1
 800251a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800251c:	429a      	cmp	r2, r3
 800251e:	d123      	bne.n	8002568 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800252a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800252c:	429a      	cmp	r2, r3
 800252e:	d11b      	bne.n	8002568 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800253a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800253c:	429a      	cmp	r2, r3
 800253e:	d113      	bne.n	8002568 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800254a:	085b      	lsrs	r3, r3, #1
 800254c:	3b01      	subs	r3, #1
 800254e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002550:	429a      	cmp	r2, r3
 8002552:	d109      	bne.n	8002568 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255e:	085b      	lsrs	r3, r3, #1
 8002560:	3b01      	subs	r3, #1
 8002562:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002564:	429a      	cmp	r2, r3
 8002566:	d067      	beq.n	8002638 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	2b0c      	cmp	r3, #12
 800256c:	d062      	beq.n	8002634 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800256e:	4b5f      	ldr	r3, [pc, #380]	; (80026ec <HAL_RCC_OscConfig+0x82c>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e0bb      	b.n	80026f6 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800257e:	4b5b      	ldr	r3, [pc, #364]	; (80026ec <HAL_RCC_OscConfig+0x82c>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a5a      	ldr	r2, [pc, #360]	; (80026ec <HAL_RCC_OscConfig+0x82c>)
 8002584:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002588:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800258a:	f7fe f999 	bl	80008c0 <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002590:	e008      	b.n	80025a4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002592:	f7fe f995 	bl	80008c0 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e0a8      	b.n	80026f6 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025a4:	4b51      	ldr	r3, [pc, #324]	; (80026ec <HAL_RCC_OscConfig+0x82c>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d1f0      	bne.n	8002592 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025b0:	4b4e      	ldr	r3, [pc, #312]	; (80026ec <HAL_RCC_OscConfig+0x82c>)
 80025b2:	68da      	ldr	r2, [r3, #12]
 80025b4:	4b4e      	ldr	r3, [pc, #312]	; (80026f0 <HAL_RCC_OscConfig+0x830>)
 80025b6:	4013      	ands	r3, r2
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80025c0:	3a01      	subs	r2, #1
 80025c2:	0112      	lsls	r2, r2, #4
 80025c4:	4311      	orrs	r1, r2
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80025ca:	0212      	lsls	r2, r2, #8
 80025cc:	4311      	orrs	r1, r2
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80025d2:	0852      	lsrs	r2, r2, #1
 80025d4:	3a01      	subs	r2, #1
 80025d6:	0552      	lsls	r2, r2, #21
 80025d8:	4311      	orrs	r1, r2
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80025de:	0852      	lsrs	r2, r2, #1
 80025e0:	3a01      	subs	r2, #1
 80025e2:	0652      	lsls	r2, r2, #25
 80025e4:	4311      	orrs	r1, r2
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80025ea:	06d2      	lsls	r2, r2, #27
 80025ec:	430a      	orrs	r2, r1
 80025ee:	493f      	ldr	r1, [pc, #252]	; (80026ec <HAL_RCC_OscConfig+0x82c>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80025f4:	4b3d      	ldr	r3, [pc, #244]	; (80026ec <HAL_RCC_OscConfig+0x82c>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a3c      	ldr	r2, [pc, #240]	; (80026ec <HAL_RCC_OscConfig+0x82c>)
 80025fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025fe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002600:	4b3a      	ldr	r3, [pc, #232]	; (80026ec <HAL_RCC_OscConfig+0x82c>)
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	4a39      	ldr	r2, [pc, #228]	; (80026ec <HAL_RCC_OscConfig+0x82c>)
 8002606:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800260a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800260c:	f7fe f958 	bl	80008c0 <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002614:	f7fe f954 	bl	80008c0 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e067      	b.n	80026f6 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002626:	4b31      	ldr	r3, [pc, #196]	; (80026ec <HAL_RCC_OscConfig+0x82c>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d0f0      	beq.n	8002614 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002632:	e05f      	b.n	80026f4 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e05e      	b.n	80026f6 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002638:	4b2c      	ldr	r3, [pc, #176]	; (80026ec <HAL_RCC_OscConfig+0x82c>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d157      	bne.n	80026f4 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002644:	4b29      	ldr	r3, [pc, #164]	; (80026ec <HAL_RCC_OscConfig+0x82c>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a28      	ldr	r2, [pc, #160]	; (80026ec <HAL_RCC_OscConfig+0x82c>)
 800264a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800264e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002650:	4b26      	ldr	r3, [pc, #152]	; (80026ec <HAL_RCC_OscConfig+0x82c>)
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	4a25      	ldr	r2, [pc, #148]	; (80026ec <HAL_RCC_OscConfig+0x82c>)
 8002656:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800265a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800265c:	f7fe f930 	bl	80008c0 <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002664:	f7fe f92c 	bl	80008c0 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e03f      	b.n	80026f6 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002676:	4b1d      	ldr	r3, [pc, #116]	; (80026ec <HAL_RCC_OscConfig+0x82c>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d0f0      	beq.n	8002664 <HAL_RCC_OscConfig+0x7a4>
 8002682:	e037      	b.n	80026f4 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	2b0c      	cmp	r3, #12
 8002688:	d02d      	beq.n	80026e6 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800268a:	4b18      	ldr	r3, [pc, #96]	; (80026ec <HAL_RCC_OscConfig+0x82c>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a17      	ldr	r2, [pc, #92]	; (80026ec <HAL_RCC_OscConfig+0x82c>)
 8002690:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002694:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002696:	4b15      	ldr	r3, [pc, #84]	; (80026ec <HAL_RCC_OscConfig+0x82c>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d105      	bne.n	80026ae <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80026a2:	4b12      	ldr	r3, [pc, #72]	; (80026ec <HAL_RCC_OscConfig+0x82c>)
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	4a11      	ldr	r2, [pc, #68]	; (80026ec <HAL_RCC_OscConfig+0x82c>)
 80026a8:	f023 0303 	bic.w	r3, r3, #3
 80026ac:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80026ae:	4b0f      	ldr	r3, [pc, #60]	; (80026ec <HAL_RCC_OscConfig+0x82c>)
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	4a0e      	ldr	r2, [pc, #56]	; (80026ec <HAL_RCC_OscConfig+0x82c>)
 80026b4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80026b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026bc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026be:	f7fe f8ff 	bl	80008c0 <HAL_GetTick>
 80026c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026c4:	e008      	b.n	80026d8 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026c6:	f7fe f8fb 	bl	80008c0 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d901      	bls.n	80026d8 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e00e      	b.n	80026f6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026d8:	4b04      	ldr	r3, [pc, #16]	; (80026ec <HAL_RCC_OscConfig+0x82c>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d1f0      	bne.n	80026c6 <HAL_RCC_OscConfig+0x806>
 80026e4:	e006      	b.n	80026f4 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e005      	b.n	80026f6 <HAL_RCC_OscConfig+0x836>
 80026ea:	bf00      	nop
 80026ec:	40021000 	.word	0x40021000
 80026f0:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3720      	adds	r7, #32
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop

08002700 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d101      	bne.n	8002714 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e0c8      	b.n	80028a6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002714:	4b66      	ldr	r3, [pc, #408]	; (80028b0 <HAL_RCC_ClockConfig+0x1b0>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0307 	and.w	r3, r3, #7
 800271c:	683a      	ldr	r2, [r7, #0]
 800271e:	429a      	cmp	r2, r3
 8002720:	d910      	bls.n	8002744 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002722:	4b63      	ldr	r3, [pc, #396]	; (80028b0 <HAL_RCC_ClockConfig+0x1b0>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f023 0207 	bic.w	r2, r3, #7
 800272a:	4961      	ldr	r1, [pc, #388]	; (80028b0 <HAL_RCC_ClockConfig+0x1b0>)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	4313      	orrs	r3, r2
 8002730:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002732:	4b5f      	ldr	r3, [pc, #380]	; (80028b0 <HAL_RCC_ClockConfig+0x1b0>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0307 	and.w	r3, r3, #7
 800273a:	683a      	ldr	r2, [r7, #0]
 800273c:	429a      	cmp	r2, r3
 800273e:	d001      	beq.n	8002744 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e0b0      	b.n	80028a6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	2b00      	cmp	r3, #0
 800274e:	d04c      	beq.n	80027ea <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	2b03      	cmp	r3, #3
 8002756:	d107      	bne.n	8002768 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002758:	4b56      	ldr	r3, [pc, #344]	; (80028b4 <HAL_RCC_ClockConfig+0x1b4>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d121      	bne.n	80027a8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e09e      	b.n	80028a6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	2b02      	cmp	r3, #2
 800276e:	d107      	bne.n	8002780 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002770:	4b50      	ldr	r3, [pc, #320]	; (80028b4 <HAL_RCC_ClockConfig+0x1b4>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d115      	bne.n	80027a8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e092      	b.n	80028a6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d107      	bne.n	8002798 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002788:	4b4a      	ldr	r3, [pc, #296]	; (80028b4 <HAL_RCC_ClockConfig+0x1b4>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d109      	bne.n	80027a8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e086      	b.n	80028a6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002798:	4b46      	ldr	r3, [pc, #280]	; (80028b4 <HAL_RCC_ClockConfig+0x1b4>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d101      	bne.n	80027a8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e07e      	b.n	80028a6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027a8:	4b42      	ldr	r3, [pc, #264]	; (80028b4 <HAL_RCC_ClockConfig+0x1b4>)
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f023 0203 	bic.w	r2, r3, #3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	493f      	ldr	r1, [pc, #252]	; (80028b4 <HAL_RCC_ClockConfig+0x1b4>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027ba:	f7fe f881 	bl	80008c0 <HAL_GetTick>
 80027be:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027c0:	e00a      	b.n	80027d8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027c2:	f7fe f87d 	bl	80008c0 <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e066      	b.n	80028a6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027d8:	4b36      	ldr	r3, [pc, #216]	; (80028b4 <HAL_RCC_ClockConfig+0x1b4>)
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f003 020c 	and.w	r2, r3, #12
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d1eb      	bne.n	80027c2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d008      	beq.n	8002808 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027f6:	4b2f      	ldr	r3, [pc, #188]	; (80028b4 <HAL_RCC_ClockConfig+0x1b4>)
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	492c      	ldr	r1, [pc, #176]	; (80028b4 <HAL_RCC_ClockConfig+0x1b4>)
 8002804:	4313      	orrs	r3, r2
 8002806:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002808:	4b29      	ldr	r3, [pc, #164]	; (80028b0 <HAL_RCC_ClockConfig+0x1b0>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0307 	and.w	r3, r3, #7
 8002810:	683a      	ldr	r2, [r7, #0]
 8002812:	429a      	cmp	r2, r3
 8002814:	d210      	bcs.n	8002838 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002816:	4b26      	ldr	r3, [pc, #152]	; (80028b0 <HAL_RCC_ClockConfig+0x1b0>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f023 0207 	bic.w	r2, r3, #7
 800281e:	4924      	ldr	r1, [pc, #144]	; (80028b0 <HAL_RCC_ClockConfig+0x1b0>)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	4313      	orrs	r3, r2
 8002824:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002826:	4b22      	ldr	r3, [pc, #136]	; (80028b0 <HAL_RCC_ClockConfig+0x1b0>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0307 	and.w	r3, r3, #7
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	429a      	cmp	r2, r3
 8002832:	d001      	beq.n	8002838 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e036      	b.n	80028a6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0304 	and.w	r3, r3, #4
 8002840:	2b00      	cmp	r3, #0
 8002842:	d008      	beq.n	8002856 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002844:	4b1b      	ldr	r3, [pc, #108]	; (80028b4 <HAL_RCC_ClockConfig+0x1b4>)
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	4918      	ldr	r1, [pc, #96]	; (80028b4 <HAL_RCC_ClockConfig+0x1b4>)
 8002852:	4313      	orrs	r3, r2
 8002854:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0308 	and.w	r3, r3, #8
 800285e:	2b00      	cmp	r3, #0
 8002860:	d009      	beq.n	8002876 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002862:	4b14      	ldr	r3, [pc, #80]	; (80028b4 <HAL_RCC_ClockConfig+0x1b4>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	4910      	ldr	r1, [pc, #64]	; (80028b4 <HAL_RCC_ClockConfig+0x1b4>)
 8002872:	4313      	orrs	r3, r2
 8002874:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002876:	f000 f825 	bl	80028c4 <HAL_RCC_GetSysClockFreq>
 800287a:	4602      	mov	r2, r0
 800287c:	4b0d      	ldr	r3, [pc, #52]	; (80028b4 <HAL_RCC_ClockConfig+0x1b4>)
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	091b      	lsrs	r3, r3, #4
 8002882:	f003 030f 	and.w	r3, r3, #15
 8002886:	490c      	ldr	r1, [pc, #48]	; (80028b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002888:	5ccb      	ldrb	r3, [r1, r3]
 800288a:	f003 031f 	and.w	r3, r3, #31
 800288e:	fa22 f303 	lsr.w	r3, r2, r3
 8002892:	4a0a      	ldr	r2, [pc, #40]	; (80028bc <HAL_RCC_ClockConfig+0x1bc>)
 8002894:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002896:	4b0a      	ldr	r3, [pc, #40]	; (80028c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4618      	mov	r0, r3
 800289c:	f7fd ffc0 	bl	8000820 <HAL_InitTick>
 80028a0:	4603      	mov	r3, r0
 80028a2:	72fb      	strb	r3, [r7, #11]

  return status;
 80028a4:	7afb      	ldrb	r3, [r7, #11]
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	40022000 	.word	0x40022000
 80028b4:	40021000 	.word	0x40021000
 80028b8:	08006b60 	.word	0x08006b60
 80028bc:	20000000 	.word	0x20000000
 80028c0:	20000004 	.word	0x20000004

080028c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b089      	sub	sp, #36	; 0x24
 80028c8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80028ca:	2300      	movs	r3, #0
 80028cc:	61fb      	str	r3, [r7, #28]
 80028ce:	2300      	movs	r3, #0
 80028d0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028d2:	4b3e      	ldr	r3, [pc, #248]	; (80029cc <HAL_RCC_GetSysClockFreq+0x108>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f003 030c 	and.w	r3, r3, #12
 80028da:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028dc:	4b3b      	ldr	r3, [pc, #236]	; (80029cc <HAL_RCC_GetSysClockFreq+0x108>)
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	f003 0303 	and.w	r3, r3, #3
 80028e4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d005      	beq.n	80028f8 <HAL_RCC_GetSysClockFreq+0x34>
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	2b0c      	cmp	r3, #12
 80028f0:	d121      	bne.n	8002936 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d11e      	bne.n	8002936 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80028f8:	4b34      	ldr	r3, [pc, #208]	; (80029cc <HAL_RCC_GetSysClockFreq+0x108>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0308 	and.w	r3, r3, #8
 8002900:	2b00      	cmp	r3, #0
 8002902:	d107      	bne.n	8002914 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002904:	4b31      	ldr	r3, [pc, #196]	; (80029cc <HAL_RCC_GetSysClockFreq+0x108>)
 8002906:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800290a:	0a1b      	lsrs	r3, r3, #8
 800290c:	f003 030f 	and.w	r3, r3, #15
 8002910:	61fb      	str	r3, [r7, #28]
 8002912:	e005      	b.n	8002920 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002914:	4b2d      	ldr	r3, [pc, #180]	; (80029cc <HAL_RCC_GetSysClockFreq+0x108>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	091b      	lsrs	r3, r3, #4
 800291a:	f003 030f 	and.w	r3, r3, #15
 800291e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002920:	4a2b      	ldr	r2, [pc, #172]	; (80029d0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002928:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d10d      	bne.n	800294c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002934:	e00a      	b.n	800294c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	2b04      	cmp	r3, #4
 800293a:	d102      	bne.n	8002942 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800293c:	4b25      	ldr	r3, [pc, #148]	; (80029d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800293e:	61bb      	str	r3, [r7, #24]
 8002940:	e004      	b.n	800294c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	2b08      	cmp	r3, #8
 8002946:	d101      	bne.n	800294c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002948:	4b23      	ldr	r3, [pc, #140]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x114>)
 800294a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	2b0c      	cmp	r3, #12
 8002950:	d134      	bne.n	80029bc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002952:	4b1e      	ldr	r3, [pc, #120]	; (80029cc <HAL_RCC_GetSysClockFreq+0x108>)
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	f003 0303 	and.w	r3, r3, #3
 800295a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	2b02      	cmp	r3, #2
 8002960:	d003      	beq.n	800296a <HAL_RCC_GetSysClockFreq+0xa6>
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	2b03      	cmp	r3, #3
 8002966:	d003      	beq.n	8002970 <HAL_RCC_GetSysClockFreq+0xac>
 8002968:	e005      	b.n	8002976 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800296a:	4b1a      	ldr	r3, [pc, #104]	; (80029d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800296c:	617b      	str	r3, [r7, #20]
      break;
 800296e:	e005      	b.n	800297c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002970:	4b19      	ldr	r3, [pc, #100]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002972:	617b      	str	r3, [r7, #20]
      break;
 8002974:	e002      	b.n	800297c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	617b      	str	r3, [r7, #20]
      break;
 800297a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800297c:	4b13      	ldr	r3, [pc, #76]	; (80029cc <HAL_RCC_GetSysClockFreq+0x108>)
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	091b      	lsrs	r3, r3, #4
 8002982:	f003 0307 	and.w	r3, r3, #7
 8002986:	3301      	adds	r3, #1
 8002988:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800298a:	4b10      	ldr	r3, [pc, #64]	; (80029cc <HAL_RCC_GetSysClockFreq+0x108>)
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	0a1b      	lsrs	r3, r3, #8
 8002990:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002994:	697a      	ldr	r2, [r7, #20]
 8002996:	fb02 f203 	mul.w	r2, r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80029a2:	4b0a      	ldr	r3, [pc, #40]	; (80029cc <HAL_RCC_GetSysClockFreq+0x108>)
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	0e5b      	lsrs	r3, r3, #25
 80029a8:	f003 0303 	and.w	r3, r3, #3
 80029ac:	3301      	adds	r3, #1
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80029b2:	697a      	ldr	r2, [r7, #20]
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80029bc:	69bb      	ldr	r3, [r7, #24]
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3724      	adds	r7, #36	; 0x24
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	40021000 	.word	0x40021000
 80029d0:	08006b70 	.word	0x08006b70
 80029d4:	00f42400 	.word	0x00f42400
 80029d8:	01312d00 	.word	0x01312d00

080029dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b086      	sub	sp, #24
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80029e4:	2300      	movs	r3, #0
 80029e6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80029e8:	4b2a      	ldr	r3, [pc, #168]	; (8002a94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d003      	beq.n	80029fc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80029f4:	f7ff fa00 	bl	8001df8 <HAL_PWREx_GetVoltageRange>
 80029f8:	6178      	str	r0, [r7, #20]
 80029fa:	e014      	b.n	8002a26 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80029fc:	4b25      	ldr	r3, [pc, #148]	; (8002a94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a00:	4a24      	ldr	r2, [pc, #144]	; (8002a94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a06:	6593      	str	r3, [r2, #88]	; 0x58
 8002a08:	4b22      	ldr	r3, [pc, #136]	; (8002a94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a10:	60fb      	str	r3, [r7, #12]
 8002a12:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002a14:	f7ff f9f0 	bl	8001df8 <HAL_PWREx_GetVoltageRange>
 8002a18:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002a1a:	4b1e      	ldr	r3, [pc, #120]	; (8002a94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a1e:	4a1d      	ldr	r2, [pc, #116]	; (8002a94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a24:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a2c:	d10b      	bne.n	8002a46 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2b80      	cmp	r3, #128	; 0x80
 8002a32:	d919      	bls.n	8002a68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2ba0      	cmp	r3, #160	; 0xa0
 8002a38:	d902      	bls.n	8002a40 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	613b      	str	r3, [r7, #16]
 8002a3e:	e013      	b.n	8002a68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a40:	2301      	movs	r3, #1
 8002a42:	613b      	str	r3, [r7, #16]
 8002a44:	e010      	b.n	8002a68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2b80      	cmp	r3, #128	; 0x80
 8002a4a:	d902      	bls.n	8002a52 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	613b      	str	r3, [r7, #16]
 8002a50:	e00a      	b.n	8002a68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2b80      	cmp	r3, #128	; 0x80
 8002a56:	d102      	bne.n	8002a5e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a58:	2302      	movs	r3, #2
 8002a5a:	613b      	str	r3, [r7, #16]
 8002a5c:	e004      	b.n	8002a68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2b70      	cmp	r3, #112	; 0x70
 8002a62:	d101      	bne.n	8002a68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a64:	2301      	movs	r3, #1
 8002a66:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a68:	4b0b      	ldr	r3, [pc, #44]	; (8002a98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f023 0207 	bic.w	r2, r3, #7
 8002a70:	4909      	ldr	r1, [pc, #36]	; (8002a98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002a78:	4b07      	ldr	r3, [pc, #28]	; (8002a98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0307 	and.w	r3, r3, #7
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d001      	beq.n	8002a8a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e000      	b.n	8002a8c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3718      	adds	r7, #24
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	40021000 	.word	0x40021000
 8002a98:	40022000 	.word	0x40022000

08002a9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b086      	sub	sp, #24
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d031      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002abc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ac0:	d01a      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002ac2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ac6:	d814      	bhi.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d009      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002acc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ad0:	d10f      	bne.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002ad2:	4b5d      	ldr	r3, [pc, #372]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	4a5c      	ldr	r2, [pc, #368]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ad8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002adc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ade:	e00c      	b.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	3304      	adds	r3, #4
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f000 fa12 	bl	8002f10 <RCCEx_PLLSAI1_Config>
 8002aec:	4603      	mov	r3, r0
 8002aee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002af0:	e003      	b.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	74fb      	strb	r3, [r7, #19]
      break;
 8002af6:	e000      	b.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002af8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002afa:	7cfb      	ldrb	r3, [r7, #19]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d10b      	bne.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b00:	4b51      	ldr	r3, [pc, #324]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b06:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b0e:	494e      	ldr	r1, [pc, #312]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002b16:	e001      	b.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b18:	7cfb      	ldrb	r3, [r7, #19]
 8002b1a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	f000 809e 	beq.w	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b2e:	4b46      	ldr	r3, [pc, #280]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e000      	b.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002b3e:	2300      	movs	r3, #0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d00d      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b44:	4b40      	ldr	r3, [pc, #256]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b48:	4a3f      	ldr	r2, [pc, #252]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b4e:	6593      	str	r3, [r2, #88]	; 0x58
 8002b50:	4b3d      	ldr	r3, [pc, #244]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b58:	60bb      	str	r3, [r7, #8]
 8002b5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b60:	4b3a      	ldr	r3, [pc, #232]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a39      	ldr	r2, [pc, #228]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002b66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b6a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b6c:	f7fd fea8 	bl	80008c0 <HAL_GetTick>
 8002b70:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b72:	e009      	b.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b74:	f7fd fea4 	bl	80008c0 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d902      	bls.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	74fb      	strb	r3, [r7, #19]
        break;
 8002b86:	e005      	b.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b88:	4b30      	ldr	r3, [pc, #192]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d0ef      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002b94:	7cfb      	ldrb	r3, [r7, #19]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d15a      	bne.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b9a:	4b2b      	ldr	r3, [pc, #172]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ba0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ba4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d01e      	beq.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bb0:	697a      	ldr	r2, [r7, #20]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d019      	beq.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002bb6:	4b24      	ldr	r3, [pc, #144]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bc0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002bc2:	4b21      	ldr	r3, [pc, #132]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc8:	4a1f      	ldr	r2, [pc, #124]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002bd2:	4b1d      	ldr	r3, [pc, #116]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd8:	4a1b      	ldr	r2, [pc, #108]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002be2:	4a19      	ldr	r2, [pc, #100]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d016      	beq.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf4:	f7fd fe64 	bl	80008c0 <HAL_GetTick>
 8002bf8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bfa:	e00b      	b.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bfc:	f7fd fe60 	bl	80008c0 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d902      	bls.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	74fb      	strb	r3, [r7, #19]
            break;
 8002c12:	e006      	b.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c14:	4b0c      	ldr	r3, [pc, #48]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d0ec      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002c22:	7cfb      	ldrb	r3, [r7, #19]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d10b      	bne.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c28:	4b07      	ldr	r3, [pc, #28]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c2e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c36:	4904      	ldr	r1, [pc, #16]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002c3e:	e009      	b.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c40:	7cfb      	ldrb	r3, [r7, #19]
 8002c42:	74bb      	strb	r3, [r7, #18]
 8002c44:	e006      	b.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002c46:	bf00      	nop
 8002c48:	40021000 	.word	0x40021000
 8002c4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c50:	7cfb      	ldrb	r3, [r7, #19]
 8002c52:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c54:	7c7b      	ldrb	r3, [r7, #17]
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d105      	bne.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c5a:	4bac      	ldr	r3, [pc, #688]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c5e:	4aab      	ldr	r2, [pc, #684]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002c60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c64:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00a      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c72:	4ba6      	ldr	r3, [pc, #664]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c78:	f023 0203 	bic.w	r2, r3, #3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a1b      	ldr	r3, [r3, #32]
 8002c80:	49a2      	ldr	r1, [pc, #648]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0302 	and.w	r3, r3, #2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d00a      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c94:	4b9d      	ldr	r3, [pc, #628]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c9a:	f023 020c 	bic.w	r2, r3, #12
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca2:	499a      	ldr	r1, [pc, #616]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0304 	and.w	r3, r3, #4
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00a      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002cb6:	4b95      	ldr	r3, [pc, #596]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cbc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc4:	4991      	ldr	r1, [pc, #580]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0308 	and.w	r3, r3, #8
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d00a      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002cd8:	4b8c      	ldr	r3, [pc, #560]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cde:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce6:	4989      	ldr	r1, [pc, #548]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0320 	and.w	r3, r3, #32
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00a      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002cfa:	4b84      	ldr	r3, [pc, #528]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d00:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d08:	4980      	ldr	r1, [pc, #512]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d00a      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d1c:	4b7b      	ldr	r3, [pc, #492]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d22:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2a:	4978      	ldr	r1, [pc, #480]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00a      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d3e:	4b73      	ldr	r3, [pc, #460]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d44:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d4c:	496f      	ldr	r1, [pc, #444]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d00a      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d60:	4b6a      	ldr	r3, [pc, #424]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d66:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d6e:	4967      	ldr	r1, [pc, #412]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00a      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d82:	4b62      	ldr	r3, [pc, #392]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d88:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d90:	495e      	ldr	r1, [pc, #376]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00a      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002da4:	4b59      	ldr	r3, [pc, #356]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002daa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db2:	4956      	ldr	r1, [pc, #344]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00a      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002dc6:	4b51      	ldr	r3, [pc, #324]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002dc8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002dcc:	f023 0203 	bic.w	r2, r3, #3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd4:	494d      	ldr	r1, [pc, #308]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d028      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002de8:	4b48      	ldr	r3, [pc, #288]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002df6:	4945      	ldr	r1, [pc, #276]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e06:	d106      	bne.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e08:	4b40      	ldr	r3, [pc, #256]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	4a3f      	ldr	r2, [pc, #252]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002e0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e12:	60d3      	str	r3, [r2, #12]
 8002e14:	e011      	b.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e1a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e1e:	d10c      	bne.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	3304      	adds	r3, #4
 8002e24:	2101      	movs	r1, #1
 8002e26:	4618      	mov	r0, r3
 8002e28:	f000 f872 	bl	8002f10 <RCCEx_PLLSAI1_Config>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e30:	7cfb      	ldrb	r3, [r7, #19]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* set overall return value */
        status = ret;
 8002e36:	7cfb      	ldrb	r3, [r7, #19]
 8002e38:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d028      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e46:	4b31      	ldr	r3, [pc, #196]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e4c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e54:	492d      	ldr	r1, [pc, #180]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e64:	d106      	bne.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e66:	4b29      	ldr	r3, [pc, #164]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	4a28      	ldr	r2, [pc, #160]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002e6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e70:	60d3      	str	r3, [r2, #12]
 8002e72:	e011      	b.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e7c:	d10c      	bne.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	3304      	adds	r3, #4
 8002e82:	2101      	movs	r1, #1
 8002e84:	4618      	mov	r0, r3
 8002e86:	f000 f843 	bl	8002f10 <RCCEx_PLLSAI1_Config>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e8e:	7cfb      	ldrb	r3, [r7, #19]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d001      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8002e94:	7cfb      	ldrb	r3, [r7, #19]
 8002e96:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d01c      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ea4:	4b19      	ldr	r3, [pc, #100]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eaa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb2:	4916      	ldr	r1, [pc, #88]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ebe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ec2:	d10c      	bne.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	3304      	adds	r3, #4
 8002ec8:	2102      	movs	r1, #2
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f000 f820 	bl	8002f10 <RCCEx_PLLSAI1_Config>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ed4:	7cfb      	ldrb	r3, [r7, #19]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x442>
      {
        /* set overall return value */
        status = ret;
 8002eda:	7cfb      	ldrb	r3, [r7, #19]
 8002edc:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00a      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x464>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002eea:	4b08      	ldr	r3, [pc, #32]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef8:	4904      	ldr	r1, [pc, #16]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002f00:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3718      	adds	r7, #24
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	40021000 	.word	0x40021000

08002f10 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f1e:	4b74      	ldr	r3, [pc, #464]	; (80030f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	f003 0303 	and.w	r3, r3, #3
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d018      	beq.n	8002f5c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002f2a:	4b71      	ldr	r3, [pc, #452]	; (80030f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	f003 0203 	and.w	r2, r3, #3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d10d      	bne.n	8002f56 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
       ||
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d009      	beq.n	8002f56 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002f42:	4b6b      	ldr	r3, [pc, #428]	; (80030f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	091b      	lsrs	r3, r3, #4
 8002f48:	f003 0307 	and.w	r3, r3, #7
 8002f4c:	1c5a      	adds	r2, r3, #1
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
       ||
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d047      	beq.n	8002fe6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	73fb      	strb	r3, [r7, #15]
 8002f5a:	e044      	b.n	8002fe6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2b03      	cmp	r3, #3
 8002f62:	d018      	beq.n	8002f96 <RCCEx_PLLSAI1_Config+0x86>
 8002f64:	2b03      	cmp	r3, #3
 8002f66:	d825      	bhi.n	8002fb4 <RCCEx_PLLSAI1_Config+0xa4>
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d002      	beq.n	8002f72 <RCCEx_PLLSAI1_Config+0x62>
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d009      	beq.n	8002f84 <RCCEx_PLLSAI1_Config+0x74>
 8002f70:	e020      	b.n	8002fb4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f72:	4b5f      	ldr	r3, [pc, #380]	; (80030f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d11d      	bne.n	8002fba <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f82:	e01a      	b.n	8002fba <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f84:	4b5a      	ldr	r3, [pc, #360]	; (80030f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d116      	bne.n	8002fbe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f94:	e013      	b.n	8002fbe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f96:	4b56      	ldr	r3, [pc, #344]	; (80030f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d10f      	bne.n	8002fc2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002fa2:	4b53      	ldr	r3, [pc, #332]	; (80030f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d109      	bne.n	8002fc2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002fb2:	e006      	b.n	8002fc2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	73fb      	strb	r3, [r7, #15]
      break;
 8002fb8:	e004      	b.n	8002fc4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002fba:	bf00      	nop
 8002fbc:	e002      	b.n	8002fc4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002fbe:	bf00      	nop
 8002fc0:	e000      	b.n	8002fc4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002fc2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002fc4:	7bfb      	ldrb	r3, [r7, #15]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d10d      	bne.n	8002fe6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002fca:	4b49      	ldr	r3, [pc, #292]	; (80030f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6819      	ldr	r1, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	011b      	lsls	r3, r3, #4
 8002fde:	430b      	orrs	r3, r1
 8002fe0:	4943      	ldr	r1, [pc, #268]	; (80030f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002fe6:	7bfb      	ldrb	r3, [r7, #15]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d17c      	bne.n	80030e6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002fec:	4b40      	ldr	r3, [pc, #256]	; (80030f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a3f      	ldr	r2, [pc, #252]	; (80030f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ff2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ff6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ff8:	f7fd fc62 	bl	80008c0 <HAL_GetTick>
 8002ffc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ffe:	e009      	b.n	8003014 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003000:	f7fd fc5e 	bl	80008c0 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b02      	cmp	r3, #2
 800300c:	d902      	bls.n	8003014 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	73fb      	strb	r3, [r7, #15]
        break;
 8003012:	e005      	b.n	8003020 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003014:	4b36      	ldr	r3, [pc, #216]	; (80030f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d1ef      	bne.n	8003000 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003020:	7bfb      	ldrb	r3, [r7, #15]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d15f      	bne.n	80030e6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d110      	bne.n	800304e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800302c:	4b30      	ldr	r3, [pc, #192]	; (80030f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800302e:	691b      	ldr	r3, [r3, #16]
 8003030:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003034:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	6892      	ldr	r2, [r2, #8]
 800303c:	0211      	lsls	r1, r2, #8
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	68d2      	ldr	r2, [r2, #12]
 8003042:	06d2      	lsls	r2, r2, #27
 8003044:	430a      	orrs	r2, r1
 8003046:	492a      	ldr	r1, [pc, #168]	; (80030f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003048:	4313      	orrs	r3, r2
 800304a:	610b      	str	r3, [r1, #16]
 800304c:	e027      	b.n	800309e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d112      	bne.n	800307a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003054:	4b26      	ldr	r3, [pc, #152]	; (80030f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003056:	691b      	ldr	r3, [r3, #16]
 8003058:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800305c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	6892      	ldr	r2, [r2, #8]
 8003064:	0211      	lsls	r1, r2, #8
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	6912      	ldr	r2, [r2, #16]
 800306a:	0852      	lsrs	r2, r2, #1
 800306c:	3a01      	subs	r2, #1
 800306e:	0552      	lsls	r2, r2, #21
 8003070:	430a      	orrs	r2, r1
 8003072:	491f      	ldr	r1, [pc, #124]	; (80030f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003074:	4313      	orrs	r3, r2
 8003076:	610b      	str	r3, [r1, #16]
 8003078:	e011      	b.n	800309e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800307a:	4b1d      	ldr	r3, [pc, #116]	; (80030f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003082:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	6892      	ldr	r2, [r2, #8]
 800308a:	0211      	lsls	r1, r2, #8
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	6952      	ldr	r2, [r2, #20]
 8003090:	0852      	lsrs	r2, r2, #1
 8003092:	3a01      	subs	r2, #1
 8003094:	0652      	lsls	r2, r2, #25
 8003096:	430a      	orrs	r2, r1
 8003098:	4915      	ldr	r1, [pc, #84]	; (80030f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800309a:	4313      	orrs	r3, r2
 800309c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800309e:	4b14      	ldr	r3, [pc, #80]	; (80030f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a13      	ldr	r2, [pc, #76]	; (80030f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80030a8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030aa:	f7fd fc09 	bl	80008c0 <HAL_GetTick>
 80030ae:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80030b0:	e009      	b.n	80030c6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030b2:	f7fd fc05 	bl	80008c0 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d902      	bls.n	80030c6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	73fb      	strb	r3, [r7, #15]
          break;
 80030c4:	e005      	b.n	80030d2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80030c6:	4b0a      	ldr	r3, [pc, #40]	; (80030f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d0ef      	beq.n	80030b2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80030d2:	7bfb      	ldrb	r3, [r7, #15]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d106      	bne.n	80030e6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80030d8:	4b05      	ldr	r3, [pc, #20]	; (80030f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030da:	691a      	ldr	r2, [r3, #16]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	4903      	ldr	r1, [pc, #12]	; (80030f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80030e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3710      	adds	r7, #16
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	40021000 	.word	0x40021000

080030f4 <__NVIC_SetPriority>:
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	4603      	mov	r3, r0
 80030fc:	6039      	str	r1, [r7, #0]
 80030fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003104:	2b00      	cmp	r3, #0
 8003106:	db0a      	blt.n	800311e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	b2da      	uxtb	r2, r3
 800310c:	490c      	ldr	r1, [pc, #48]	; (8003140 <__NVIC_SetPriority+0x4c>)
 800310e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003112:	0112      	lsls	r2, r2, #4
 8003114:	b2d2      	uxtb	r2, r2
 8003116:	440b      	add	r3, r1
 8003118:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800311c:	e00a      	b.n	8003134 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	b2da      	uxtb	r2, r3
 8003122:	4908      	ldr	r1, [pc, #32]	; (8003144 <__NVIC_SetPriority+0x50>)
 8003124:	79fb      	ldrb	r3, [r7, #7]
 8003126:	f003 030f 	and.w	r3, r3, #15
 800312a:	3b04      	subs	r3, #4
 800312c:	0112      	lsls	r2, r2, #4
 800312e:	b2d2      	uxtb	r2, r2
 8003130:	440b      	add	r3, r1
 8003132:	761a      	strb	r2, [r3, #24]
}
 8003134:	bf00      	nop
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr
 8003140:	e000e100 	.word	0xe000e100
 8003144:	e000ed00 	.word	0xe000ed00

08003148 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003148:	b580      	push	{r7, lr}
 800314a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800314c:	2100      	movs	r1, #0
 800314e:	f06f 0004 	mvn.w	r0, #4
 8003152:	f7ff ffcf 	bl	80030f4 <__NVIC_SetPriority>
#endif
}
 8003156:	bf00      	nop
 8003158:	bd80      	pop	{r7, pc}
	...

0800315c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003162:	f3ef 8305 	mrs	r3, IPSR
 8003166:	603b      	str	r3, [r7, #0]
  return(result);
 8003168:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800316a:	2b00      	cmp	r3, #0
 800316c:	d003      	beq.n	8003176 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800316e:	f06f 0305 	mvn.w	r3, #5
 8003172:	607b      	str	r3, [r7, #4]
 8003174:	e00c      	b.n	8003190 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003176:	4b0a      	ldr	r3, [pc, #40]	; (80031a0 <osKernelInitialize+0x44>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d105      	bne.n	800318a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800317e:	4b08      	ldr	r3, [pc, #32]	; (80031a0 <osKernelInitialize+0x44>)
 8003180:	2201      	movs	r2, #1
 8003182:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003184:	2300      	movs	r3, #0
 8003186:	607b      	str	r3, [r7, #4]
 8003188:	e002      	b.n	8003190 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800318a:	f04f 33ff 	mov.w	r3, #4294967295
 800318e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003190:	687b      	ldr	r3, [r7, #4]
}
 8003192:	4618      	mov	r0, r3
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	2000003c 	.word	0x2000003c

080031a4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80031aa:	f3ef 8305 	mrs	r3, IPSR
 80031ae:	603b      	str	r3, [r7, #0]
  return(result);
 80031b0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d003      	beq.n	80031be <osKernelStart+0x1a>
    stat = osErrorISR;
 80031b6:	f06f 0305 	mvn.w	r3, #5
 80031ba:	607b      	str	r3, [r7, #4]
 80031bc:	e010      	b.n	80031e0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80031be:	4b0b      	ldr	r3, [pc, #44]	; (80031ec <osKernelStart+0x48>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d109      	bne.n	80031da <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80031c6:	f7ff ffbf 	bl	8003148 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80031ca:	4b08      	ldr	r3, [pc, #32]	; (80031ec <osKernelStart+0x48>)
 80031cc:	2202      	movs	r2, #2
 80031ce:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80031d0:	f001 fa50 	bl	8004674 <vTaskStartScheduler>
      stat = osOK;
 80031d4:	2300      	movs	r3, #0
 80031d6:	607b      	str	r3, [r7, #4]
 80031d8:	e002      	b.n	80031e0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80031da:	f04f 33ff 	mov.w	r3, #4294967295
 80031de:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80031e0:	687b      	ldr	r3, [r7, #4]
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3708      	adds	r7, #8
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	2000003c 	.word	0x2000003c

080031f0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b08e      	sub	sp, #56	; 0x38
 80031f4:	af04      	add	r7, sp, #16
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80031fc:	2300      	movs	r3, #0
 80031fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003200:	f3ef 8305 	mrs	r3, IPSR
 8003204:	617b      	str	r3, [r7, #20]
  return(result);
 8003206:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003208:	2b00      	cmp	r3, #0
 800320a:	d17e      	bne.n	800330a <osThreadNew+0x11a>
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d07b      	beq.n	800330a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003212:	2380      	movs	r3, #128	; 0x80
 8003214:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003216:	2318      	movs	r3, #24
 8003218:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800321a:	2300      	movs	r3, #0
 800321c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800321e:	f04f 33ff 	mov.w	r3, #4294967295
 8003222:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d045      	beq.n	80032b6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d002      	beq.n	8003238 <osThreadNew+0x48>
        name = attr->name;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	699b      	ldr	r3, [r3, #24]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d002      	beq.n	8003246 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d008      	beq.n	800325e <osThreadNew+0x6e>
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	2b38      	cmp	r3, #56	; 0x38
 8003250:	d805      	bhi.n	800325e <osThreadNew+0x6e>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <osThreadNew+0x72>
        return (NULL);
 800325e:	2300      	movs	r3, #0
 8003260:	e054      	b.n	800330c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d003      	beq.n	8003272 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	089b      	lsrs	r3, r3, #2
 8003270:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00e      	beq.n	8003298 <osThreadNew+0xa8>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	2b5b      	cmp	r3, #91	; 0x5b
 8003280:	d90a      	bls.n	8003298 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003286:	2b00      	cmp	r3, #0
 8003288:	d006      	beq.n	8003298 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d002      	beq.n	8003298 <osThreadNew+0xa8>
        mem = 1;
 8003292:	2301      	movs	r3, #1
 8003294:	61bb      	str	r3, [r7, #24]
 8003296:	e010      	b.n	80032ba <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d10c      	bne.n	80032ba <osThreadNew+0xca>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d108      	bne.n	80032ba <osThreadNew+0xca>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d104      	bne.n	80032ba <osThreadNew+0xca>
          mem = 0;
 80032b0:	2300      	movs	r3, #0
 80032b2:	61bb      	str	r3, [r7, #24]
 80032b4:	e001      	b.n	80032ba <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80032b6:	2300      	movs	r3, #0
 80032b8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d110      	bne.n	80032e2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80032c8:	9202      	str	r2, [sp, #8]
 80032ca:	9301      	str	r3, [sp, #4]
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	9300      	str	r3, [sp, #0]
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	6a3a      	ldr	r2, [r7, #32]
 80032d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	f000 fff6 	bl	80042c8 <xTaskCreateStatic>
 80032dc:	4603      	mov	r3, r0
 80032de:	613b      	str	r3, [r7, #16]
 80032e0:	e013      	b.n	800330a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d110      	bne.n	800330a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80032e8:	6a3b      	ldr	r3, [r7, #32]
 80032ea:	b29a      	uxth	r2, r3
 80032ec:	f107 0310 	add.w	r3, r7, #16
 80032f0:	9301      	str	r3, [sp, #4]
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	9300      	str	r3, [sp, #0]
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032fa:	68f8      	ldr	r0, [r7, #12]
 80032fc:	f001 f841 	bl	8004382 <xTaskCreate>
 8003300:	4603      	mov	r3, r0
 8003302:	2b01      	cmp	r3, #1
 8003304:	d001      	beq.n	800330a <osThreadNew+0x11a>
            hTask = NULL;
 8003306:	2300      	movs	r3, #0
 8003308:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800330a:	693b      	ldr	r3, [r7, #16]
}
 800330c:	4618      	mov	r0, r3
 800330e:	3728      	adds	r7, #40	; 0x28
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800331c:	f3ef 8305 	mrs	r3, IPSR
 8003320:	60bb      	str	r3, [r7, #8]
  return(result);
 8003322:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003324:	2b00      	cmp	r3, #0
 8003326:	d003      	beq.n	8003330 <osDelay+0x1c>
    stat = osErrorISR;
 8003328:	f06f 0305 	mvn.w	r3, #5
 800332c:	60fb      	str	r3, [r7, #12]
 800332e:	e007      	b.n	8003340 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003330:	2300      	movs	r3, #0
 8003332:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d002      	beq.n	8003340 <osDelay+0x2c>
      vTaskDelay(ticks);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f001 f966 	bl	800460c <vTaskDelay>
    }
  }

  return (stat);
 8003340:	68fb      	ldr	r3, [r7, #12]
}
 8003342:	4618      	mov	r0, r3
 8003344:	3710      	adds	r7, #16
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
	...

0800334c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800334c:	b480      	push	{r7}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	4a07      	ldr	r2, [pc, #28]	; (8003378 <vApplicationGetIdleTaskMemory+0x2c>)
 800335c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	4a06      	ldr	r2, [pc, #24]	; (800337c <vApplicationGetIdleTaskMemory+0x30>)
 8003362:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2280      	movs	r2, #128	; 0x80
 8003368:	601a      	str	r2, [r3, #0]
}
 800336a:	bf00      	nop
 800336c:	3714      	adds	r7, #20
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	20000040 	.word	0x20000040
 800337c:	2000009c 	.word	0x2000009c

08003380 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003380:	b480      	push	{r7}
 8003382:	b085      	sub	sp, #20
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	4a07      	ldr	r2, [pc, #28]	; (80033ac <vApplicationGetTimerTaskMemory+0x2c>)
 8003390:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	4a06      	ldr	r2, [pc, #24]	; (80033b0 <vApplicationGetTimerTaskMemory+0x30>)
 8003396:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800339e:	601a      	str	r2, [r3, #0]
}
 80033a0:	bf00      	nop
 80033a2:	3714      	adds	r7, #20
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr
 80033ac:	2000029c 	.word	0x2000029c
 80033b0:	200002f8 	.word	0x200002f8

080033b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f103 0208 	add.w	r2, r3, #8
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f04f 32ff 	mov.w	r2, #4294967295
 80033cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f103 0208 	add.w	r2, r3, #8
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f103 0208 	add.w	r2, r3, #8
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003402:	bf00      	nop
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr

0800340e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800340e:	b480      	push	{r7}
 8003410:	b085      	sub	sp, #20
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
 8003416:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	68fa      	ldr	r2, [r7, #12]
 8003422:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	689a      	ldr	r2, [r3, #8]
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	683a      	ldr	r2, [r7, #0]
 8003432:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	683a      	ldr	r2, [r7, #0]
 8003438:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	1c5a      	adds	r2, r3, #1
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	601a      	str	r2, [r3, #0]
}
 800344a:	bf00      	nop
 800344c:	3714      	adds	r7, #20
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr

08003456 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003456:	b480      	push	{r7}
 8003458:	b085      	sub	sp, #20
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
 800345e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800346c:	d103      	bne.n	8003476 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	60fb      	str	r3, [r7, #12]
 8003474:	e00c      	b.n	8003490 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	3308      	adds	r3, #8
 800347a:	60fb      	str	r3, [r7, #12]
 800347c:	e002      	b.n	8003484 <vListInsert+0x2e>
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	60fb      	str	r3, [r7, #12]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68ba      	ldr	r2, [r7, #8]
 800348c:	429a      	cmp	r2, r3
 800348e:	d2f6      	bcs.n	800347e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	685a      	ldr	r2, [r3, #4]
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	683a      	ldr	r2, [r7, #0]
 800349e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	683a      	ldr	r2, [r7, #0]
 80034aa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	1c5a      	adds	r2, r3, #1
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	601a      	str	r2, [r3, #0]
}
 80034bc:	bf00      	nop
 80034be:	3714      	adds	r7, #20
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80034c8:	b480      	push	{r7}
 80034ca:	b085      	sub	sp, #20
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	691b      	ldr	r3, [r3, #16]
 80034d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	6892      	ldr	r2, [r2, #8]
 80034de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	6852      	ldr	r2, [r2, #4]
 80034e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d103      	bne.n	80034fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689a      	ldr	r2, [r3, #8]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	1e5a      	subs	r2, r3, #1
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
}
 8003510:	4618      	mov	r0, r3
 8003512:	3714      	adds	r7, #20
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d10a      	bne.n	8003546 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003534:	f383 8811 	msr	BASEPRI, r3
 8003538:	f3bf 8f6f 	isb	sy
 800353c:	f3bf 8f4f 	dsb	sy
 8003540:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003542:	bf00      	nop
 8003544:	e7fe      	b.n	8003544 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003546:	f002 fb35 	bl	8005bb4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003552:	68f9      	ldr	r1, [r7, #12]
 8003554:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003556:	fb01 f303 	mul.w	r3, r1, r3
 800355a:	441a      	add	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003576:	3b01      	subs	r3, #1
 8003578:	68f9      	ldr	r1, [r7, #12]
 800357a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800357c:	fb01 f303 	mul.w	r3, r1, r3
 8003580:	441a      	add	r2, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	22ff      	movs	r2, #255	; 0xff
 800358a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	22ff      	movs	r2, #255	; 0xff
 8003592:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d114      	bne.n	80035c6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d01a      	beq.n	80035da <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	3310      	adds	r3, #16
 80035a8:	4618      	mov	r0, r3
 80035aa:	f001 faed 	bl	8004b88 <xTaskRemoveFromEventList>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d012      	beq.n	80035da <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80035b4:	4b0c      	ldr	r3, [pc, #48]	; (80035e8 <xQueueGenericReset+0xcc>)
 80035b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035ba:	601a      	str	r2, [r3, #0]
 80035bc:	f3bf 8f4f 	dsb	sy
 80035c0:	f3bf 8f6f 	isb	sy
 80035c4:	e009      	b.n	80035da <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	3310      	adds	r3, #16
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7ff fef2 	bl	80033b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	3324      	adds	r3, #36	; 0x24
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7ff feed 	bl	80033b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80035da:	f002 fb1b 	bl	8005c14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80035de:	2301      	movs	r3, #1
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3710      	adds	r7, #16
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	e000ed04 	.word	0xe000ed04

080035ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b08e      	sub	sp, #56	; 0x38
 80035f0:	af02      	add	r7, sp, #8
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	607a      	str	r2, [r7, #4]
 80035f8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d10a      	bne.n	8003616 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003604:	f383 8811 	msr	BASEPRI, r3
 8003608:	f3bf 8f6f 	isb	sy
 800360c:	f3bf 8f4f 	dsb	sy
 8003610:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003612:	bf00      	nop
 8003614:	e7fe      	b.n	8003614 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d10a      	bne.n	8003632 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800361c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003620:	f383 8811 	msr	BASEPRI, r3
 8003624:	f3bf 8f6f 	isb	sy
 8003628:	f3bf 8f4f 	dsb	sy
 800362c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800362e:	bf00      	nop
 8003630:	e7fe      	b.n	8003630 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d002      	beq.n	800363e <xQueueGenericCreateStatic+0x52>
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d001      	beq.n	8003642 <xQueueGenericCreateStatic+0x56>
 800363e:	2301      	movs	r3, #1
 8003640:	e000      	b.n	8003644 <xQueueGenericCreateStatic+0x58>
 8003642:	2300      	movs	r3, #0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d10a      	bne.n	800365e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800364c:	f383 8811 	msr	BASEPRI, r3
 8003650:	f3bf 8f6f 	isb	sy
 8003654:	f3bf 8f4f 	dsb	sy
 8003658:	623b      	str	r3, [r7, #32]
}
 800365a:	bf00      	nop
 800365c:	e7fe      	b.n	800365c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d102      	bne.n	800366a <xQueueGenericCreateStatic+0x7e>
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <xQueueGenericCreateStatic+0x82>
 800366a:	2301      	movs	r3, #1
 800366c:	e000      	b.n	8003670 <xQueueGenericCreateStatic+0x84>
 800366e:	2300      	movs	r3, #0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d10a      	bne.n	800368a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003678:	f383 8811 	msr	BASEPRI, r3
 800367c:	f3bf 8f6f 	isb	sy
 8003680:	f3bf 8f4f 	dsb	sy
 8003684:	61fb      	str	r3, [r7, #28]
}
 8003686:	bf00      	nop
 8003688:	e7fe      	b.n	8003688 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800368a:	2350      	movs	r3, #80	; 0x50
 800368c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	2b50      	cmp	r3, #80	; 0x50
 8003692:	d00a      	beq.n	80036aa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003698:	f383 8811 	msr	BASEPRI, r3
 800369c:	f3bf 8f6f 	isb	sy
 80036a0:	f3bf 8f4f 	dsb	sy
 80036a4:	61bb      	str	r3, [r7, #24]
}
 80036a6:	bf00      	nop
 80036a8:	e7fe      	b.n	80036a8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80036aa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80036b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00d      	beq.n	80036d2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80036b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b8:	2201      	movs	r2, #1
 80036ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80036be:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80036c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c4:	9300      	str	r3, [sp, #0]
 80036c6:	4613      	mov	r3, r2
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	68b9      	ldr	r1, [r7, #8]
 80036cc:	68f8      	ldr	r0, [r7, #12]
 80036ce:	f000 f83f 	bl	8003750 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80036d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3730      	adds	r7, #48	; 0x30
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b08a      	sub	sp, #40	; 0x28
 80036e0:	af02      	add	r7, sp, #8
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	4613      	mov	r3, r2
 80036e8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d10a      	bne.n	8003706 <xQueueGenericCreate+0x2a>
	__asm volatile
 80036f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f4:	f383 8811 	msr	BASEPRI, r3
 80036f8:	f3bf 8f6f 	isb	sy
 80036fc:	f3bf 8f4f 	dsb	sy
 8003700:	613b      	str	r3, [r7, #16]
}
 8003702:	bf00      	nop
 8003704:	e7fe      	b.n	8003704 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	68ba      	ldr	r2, [r7, #8]
 800370a:	fb02 f303 	mul.w	r3, r2, r3
 800370e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	3350      	adds	r3, #80	; 0x50
 8003714:	4618      	mov	r0, r3
 8003716:	f002 fb6f 	bl	8005df8 <pvPortMalloc>
 800371a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d011      	beq.n	8003746 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	3350      	adds	r3, #80	; 0x50
 800372a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003734:	79fa      	ldrb	r2, [r7, #7]
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	9300      	str	r3, [sp, #0]
 800373a:	4613      	mov	r3, r2
 800373c:	697a      	ldr	r2, [r7, #20]
 800373e:	68b9      	ldr	r1, [r7, #8]
 8003740:	68f8      	ldr	r0, [r7, #12]
 8003742:	f000 f805 	bl	8003750 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003746:	69bb      	ldr	r3, [r7, #24]
	}
 8003748:	4618      	mov	r0, r3
 800374a:	3720      	adds	r7, #32
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	60b9      	str	r1, [r7, #8]
 800375a:	607a      	str	r2, [r7, #4]
 800375c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d103      	bne.n	800376c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	69ba      	ldr	r2, [r7, #24]
 8003768:	601a      	str	r2, [r3, #0]
 800376a:	e002      	b.n	8003772 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	68fa      	ldr	r2, [r7, #12]
 8003776:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	68ba      	ldr	r2, [r7, #8]
 800377c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800377e:	2101      	movs	r1, #1
 8003780:	69b8      	ldr	r0, [r7, #24]
 8003782:	f7ff fecb 	bl	800351c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	78fa      	ldrb	r2, [r7, #3]
 800378a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800378e:	bf00      	nop
 8003790:	3710      	adds	r7, #16
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
	...

08003798 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b08e      	sub	sp, #56	; 0x38
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]
 80037a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80037a6:	2300      	movs	r3, #0
 80037a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80037ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10a      	bne.n	80037ca <xQueueGenericSend+0x32>
	__asm volatile
 80037b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b8:	f383 8811 	msr	BASEPRI, r3
 80037bc:	f3bf 8f6f 	isb	sy
 80037c0:	f3bf 8f4f 	dsb	sy
 80037c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80037c6:	bf00      	nop
 80037c8:	e7fe      	b.n	80037c8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d103      	bne.n	80037d8 <xQueueGenericSend+0x40>
 80037d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d101      	bne.n	80037dc <xQueueGenericSend+0x44>
 80037d8:	2301      	movs	r3, #1
 80037da:	e000      	b.n	80037de <xQueueGenericSend+0x46>
 80037dc:	2300      	movs	r3, #0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d10a      	bne.n	80037f8 <xQueueGenericSend+0x60>
	__asm volatile
 80037e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e6:	f383 8811 	msr	BASEPRI, r3
 80037ea:	f3bf 8f6f 	isb	sy
 80037ee:	f3bf 8f4f 	dsb	sy
 80037f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80037f4:	bf00      	nop
 80037f6:	e7fe      	b.n	80037f6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d103      	bne.n	8003806 <xQueueGenericSend+0x6e>
 80037fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003802:	2b01      	cmp	r3, #1
 8003804:	d101      	bne.n	800380a <xQueueGenericSend+0x72>
 8003806:	2301      	movs	r3, #1
 8003808:	e000      	b.n	800380c <xQueueGenericSend+0x74>
 800380a:	2300      	movs	r3, #0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d10a      	bne.n	8003826 <xQueueGenericSend+0x8e>
	__asm volatile
 8003810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003814:	f383 8811 	msr	BASEPRI, r3
 8003818:	f3bf 8f6f 	isb	sy
 800381c:	f3bf 8f4f 	dsb	sy
 8003820:	623b      	str	r3, [r7, #32]
}
 8003822:	bf00      	nop
 8003824:	e7fe      	b.n	8003824 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003826:	f001 fb6d 	bl	8004f04 <xTaskGetSchedulerState>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d102      	bne.n	8003836 <xQueueGenericSend+0x9e>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d101      	bne.n	800383a <xQueueGenericSend+0xa2>
 8003836:	2301      	movs	r3, #1
 8003838:	e000      	b.n	800383c <xQueueGenericSend+0xa4>
 800383a:	2300      	movs	r3, #0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d10a      	bne.n	8003856 <xQueueGenericSend+0xbe>
	__asm volatile
 8003840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003844:	f383 8811 	msr	BASEPRI, r3
 8003848:	f3bf 8f6f 	isb	sy
 800384c:	f3bf 8f4f 	dsb	sy
 8003850:	61fb      	str	r3, [r7, #28]
}
 8003852:	bf00      	nop
 8003854:	e7fe      	b.n	8003854 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003856:	f002 f9ad 	bl	8005bb4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800385a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800385c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800385e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003862:	429a      	cmp	r2, r3
 8003864:	d302      	bcc.n	800386c <xQueueGenericSend+0xd4>
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	2b02      	cmp	r3, #2
 800386a:	d129      	bne.n	80038c0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800386c:	683a      	ldr	r2, [r7, #0]
 800386e:	68b9      	ldr	r1, [r7, #8]
 8003870:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003872:	f000 fbbb 	bl	8003fec <prvCopyDataToQueue>
 8003876:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800387a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387c:	2b00      	cmp	r3, #0
 800387e:	d010      	beq.n	80038a2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003882:	3324      	adds	r3, #36	; 0x24
 8003884:	4618      	mov	r0, r3
 8003886:	f001 f97f 	bl	8004b88 <xTaskRemoveFromEventList>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d013      	beq.n	80038b8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003890:	4b3f      	ldr	r3, [pc, #252]	; (8003990 <xQueueGenericSend+0x1f8>)
 8003892:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003896:	601a      	str	r2, [r3, #0]
 8003898:	f3bf 8f4f 	dsb	sy
 800389c:	f3bf 8f6f 	isb	sy
 80038a0:	e00a      	b.n	80038b8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80038a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d007      	beq.n	80038b8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80038a8:	4b39      	ldr	r3, [pc, #228]	; (8003990 <xQueueGenericSend+0x1f8>)
 80038aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038ae:	601a      	str	r2, [r3, #0]
 80038b0:	f3bf 8f4f 	dsb	sy
 80038b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80038b8:	f002 f9ac 	bl	8005c14 <vPortExitCritical>
				return pdPASS;
 80038bc:	2301      	movs	r3, #1
 80038be:	e063      	b.n	8003988 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d103      	bne.n	80038ce <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80038c6:	f002 f9a5 	bl	8005c14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80038ca:	2300      	movs	r3, #0
 80038cc:	e05c      	b.n	8003988 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80038ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d106      	bne.n	80038e2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80038d4:	f107 0314 	add.w	r3, r7, #20
 80038d8:	4618      	mov	r0, r3
 80038da:	f001 f9b9 	bl	8004c50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80038de:	2301      	movs	r3, #1
 80038e0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80038e2:	f002 f997 	bl	8005c14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80038e6:	f000 ff2b 	bl	8004740 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80038ea:	f002 f963 	bl	8005bb4 <vPortEnterCritical>
 80038ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80038f4:	b25b      	sxtb	r3, r3
 80038f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038fa:	d103      	bne.n	8003904 <xQueueGenericSend+0x16c>
 80038fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003906:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800390a:	b25b      	sxtb	r3, r3
 800390c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003910:	d103      	bne.n	800391a <xQueueGenericSend+0x182>
 8003912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003914:	2200      	movs	r2, #0
 8003916:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800391a:	f002 f97b 	bl	8005c14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800391e:	1d3a      	adds	r2, r7, #4
 8003920:	f107 0314 	add.w	r3, r7, #20
 8003924:	4611      	mov	r1, r2
 8003926:	4618      	mov	r0, r3
 8003928:	f001 f9a8 	bl	8004c7c <xTaskCheckForTimeOut>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d124      	bne.n	800397c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003932:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003934:	f000 fc52 	bl	80041dc <prvIsQueueFull>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d018      	beq.n	8003970 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800393e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003940:	3310      	adds	r3, #16
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	4611      	mov	r1, r2
 8003946:	4618      	mov	r0, r3
 8003948:	f001 f8ce 	bl	8004ae8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800394c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800394e:	f000 fbdd 	bl	800410c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003952:	f000 ff03 	bl	800475c <xTaskResumeAll>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	f47f af7c 	bne.w	8003856 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800395e:	4b0c      	ldr	r3, [pc, #48]	; (8003990 <xQueueGenericSend+0x1f8>)
 8003960:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003964:	601a      	str	r2, [r3, #0]
 8003966:	f3bf 8f4f 	dsb	sy
 800396a:	f3bf 8f6f 	isb	sy
 800396e:	e772      	b.n	8003856 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003970:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003972:	f000 fbcb 	bl	800410c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003976:	f000 fef1 	bl	800475c <xTaskResumeAll>
 800397a:	e76c      	b.n	8003856 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800397c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800397e:	f000 fbc5 	bl	800410c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003982:	f000 feeb 	bl	800475c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003986:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003988:	4618      	mov	r0, r3
 800398a:	3738      	adds	r7, #56	; 0x38
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	e000ed04 	.word	0xe000ed04

08003994 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b090      	sub	sp, #64	; 0x40
 8003998:	af00      	add	r7, sp, #0
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]
 80039a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80039a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d10a      	bne.n	80039c2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80039ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b0:	f383 8811 	msr	BASEPRI, r3
 80039b4:	f3bf 8f6f 	isb	sy
 80039b8:	f3bf 8f4f 	dsb	sy
 80039bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80039be:	bf00      	nop
 80039c0:	e7fe      	b.n	80039c0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d103      	bne.n	80039d0 <xQueueGenericSendFromISR+0x3c>
 80039c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d101      	bne.n	80039d4 <xQueueGenericSendFromISR+0x40>
 80039d0:	2301      	movs	r3, #1
 80039d2:	e000      	b.n	80039d6 <xQueueGenericSendFromISR+0x42>
 80039d4:	2300      	movs	r3, #0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d10a      	bne.n	80039f0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80039da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039de:	f383 8811 	msr	BASEPRI, r3
 80039e2:	f3bf 8f6f 	isb	sy
 80039e6:	f3bf 8f4f 	dsb	sy
 80039ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 80039ec:	bf00      	nop
 80039ee:	e7fe      	b.n	80039ee <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d103      	bne.n	80039fe <xQueueGenericSendFromISR+0x6a>
 80039f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d101      	bne.n	8003a02 <xQueueGenericSendFromISR+0x6e>
 80039fe:	2301      	movs	r3, #1
 8003a00:	e000      	b.n	8003a04 <xQueueGenericSendFromISR+0x70>
 8003a02:	2300      	movs	r3, #0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d10a      	bne.n	8003a1e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a0c:	f383 8811 	msr	BASEPRI, r3
 8003a10:	f3bf 8f6f 	isb	sy
 8003a14:	f3bf 8f4f 	dsb	sy
 8003a18:	623b      	str	r3, [r7, #32]
}
 8003a1a:	bf00      	nop
 8003a1c:	e7fe      	b.n	8003a1c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003a1e:	f002 f9ab 	bl	8005d78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003a22:	f3ef 8211 	mrs	r2, BASEPRI
 8003a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a2a:	f383 8811 	msr	BASEPRI, r3
 8003a2e:	f3bf 8f6f 	isb	sy
 8003a32:	f3bf 8f4f 	dsb	sy
 8003a36:	61fa      	str	r2, [r7, #28]
 8003a38:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003a3a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003a3c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d302      	bcc.n	8003a50 <xQueueGenericSendFromISR+0xbc>
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d12f      	bne.n	8003ab0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003a60:	683a      	ldr	r2, [r7, #0]
 8003a62:	68b9      	ldr	r1, [r7, #8]
 8003a64:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003a66:	f000 fac1 	bl	8003fec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003a6a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a72:	d112      	bne.n	8003a9a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d016      	beq.n	8003aaa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a7e:	3324      	adds	r3, #36	; 0x24
 8003a80:	4618      	mov	r0, r3
 8003a82:	f001 f881 	bl	8004b88 <xTaskRemoveFromEventList>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00e      	beq.n	8003aaa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00b      	beq.n	8003aaa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2201      	movs	r2, #1
 8003a96:	601a      	str	r2, [r3, #0]
 8003a98:	e007      	b.n	8003aaa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003a9a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	b25a      	sxtb	r2, r3
 8003aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aa6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003aae:	e001      	b.n	8003ab4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ab6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003abe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003ac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3740      	adds	r7, #64	; 0x40
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003aca:	b580      	push	{r7, lr}
 8003acc:	b08e      	sub	sp, #56	; 0x38
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
 8003ad2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10a      	bne.n	8003af4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8003ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae2:	f383 8811 	msr	BASEPRI, r3
 8003ae6:	f3bf 8f6f 	isb	sy
 8003aea:	f3bf 8f4f 	dsb	sy
 8003aee:	623b      	str	r3, [r7, #32]
}
 8003af0:	bf00      	nop
 8003af2:	e7fe      	b.n	8003af2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00a      	beq.n	8003b12 <xQueueGiveFromISR+0x48>
	__asm volatile
 8003afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b00:	f383 8811 	msr	BASEPRI, r3
 8003b04:	f3bf 8f6f 	isb	sy
 8003b08:	f3bf 8f4f 	dsb	sy
 8003b0c:	61fb      	str	r3, [r7, #28]
}
 8003b0e:	bf00      	nop
 8003b10:	e7fe      	b.n	8003b10 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d103      	bne.n	8003b22 <xQueueGiveFromISR+0x58>
 8003b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d101      	bne.n	8003b26 <xQueueGiveFromISR+0x5c>
 8003b22:	2301      	movs	r3, #1
 8003b24:	e000      	b.n	8003b28 <xQueueGiveFromISR+0x5e>
 8003b26:	2300      	movs	r3, #0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d10a      	bne.n	8003b42 <xQueueGiveFromISR+0x78>
	__asm volatile
 8003b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b30:	f383 8811 	msr	BASEPRI, r3
 8003b34:	f3bf 8f6f 	isb	sy
 8003b38:	f3bf 8f4f 	dsb	sy
 8003b3c:	61bb      	str	r3, [r7, #24]
}
 8003b3e:	bf00      	nop
 8003b40:	e7fe      	b.n	8003b40 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003b42:	f002 f919 	bl	8005d78 <vPortValidateInterruptPriority>
	__asm volatile
 8003b46:	f3ef 8211 	mrs	r2, BASEPRI
 8003b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b4e:	f383 8811 	msr	BASEPRI, r3
 8003b52:	f3bf 8f6f 	isb	sy
 8003b56:	f3bf 8f4f 	dsb	sy
 8003b5a:	617a      	str	r2, [r7, #20]
 8003b5c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8003b5e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003b60:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b66:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d22b      	bcs.n	8003bca <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b7e:	1c5a      	adds	r2, r3, #1
 8003b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b82:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003b84:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b8c:	d112      	bne.n	8003bb4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d016      	beq.n	8003bc4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b98:	3324      	adds	r3, #36	; 0x24
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f000 fff4 	bl	8004b88 <xTaskRemoveFromEventList>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00e      	beq.n	8003bc4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00b      	beq.n	8003bc4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	601a      	str	r2, [r3, #0]
 8003bb2:	e007      	b.n	8003bc4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003bb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003bb8:	3301      	adds	r3, #1
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	b25a      	sxtb	r2, r3
 8003bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	637b      	str	r3, [r7, #52]	; 0x34
 8003bc8:	e001      	b.n	8003bce <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	637b      	str	r3, [r7, #52]	; 0x34
 8003bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f383 8811 	msr	BASEPRI, r3
}
 8003bd8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3738      	adds	r7, #56	; 0x38
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b08c      	sub	sp, #48	; 0x30
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d10a      	bne.n	8003c14 <xQueueReceive+0x30>
	__asm volatile
 8003bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c02:	f383 8811 	msr	BASEPRI, r3
 8003c06:	f3bf 8f6f 	isb	sy
 8003c0a:	f3bf 8f4f 	dsb	sy
 8003c0e:	623b      	str	r3, [r7, #32]
}
 8003c10:	bf00      	nop
 8003c12:	e7fe      	b.n	8003c12 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d103      	bne.n	8003c22 <xQueueReceive+0x3e>
 8003c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <xQueueReceive+0x42>
 8003c22:	2301      	movs	r3, #1
 8003c24:	e000      	b.n	8003c28 <xQueueReceive+0x44>
 8003c26:	2300      	movs	r3, #0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d10a      	bne.n	8003c42 <xQueueReceive+0x5e>
	__asm volatile
 8003c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c30:	f383 8811 	msr	BASEPRI, r3
 8003c34:	f3bf 8f6f 	isb	sy
 8003c38:	f3bf 8f4f 	dsb	sy
 8003c3c:	61fb      	str	r3, [r7, #28]
}
 8003c3e:	bf00      	nop
 8003c40:	e7fe      	b.n	8003c40 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c42:	f001 f95f 	bl	8004f04 <xTaskGetSchedulerState>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d102      	bne.n	8003c52 <xQueueReceive+0x6e>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d101      	bne.n	8003c56 <xQueueReceive+0x72>
 8003c52:	2301      	movs	r3, #1
 8003c54:	e000      	b.n	8003c58 <xQueueReceive+0x74>
 8003c56:	2300      	movs	r3, #0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d10a      	bne.n	8003c72 <xQueueReceive+0x8e>
	__asm volatile
 8003c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c60:	f383 8811 	msr	BASEPRI, r3
 8003c64:	f3bf 8f6f 	isb	sy
 8003c68:	f3bf 8f4f 	dsb	sy
 8003c6c:	61bb      	str	r3, [r7, #24]
}
 8003c6e:	bf00      	nop
 8003c70:	e7fe      	b.n	8003c70 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c72:	f001 ff9f 	bl	8005bb4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d01f      	beq.n	8003cc2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003c82:	68b9      	ldr	r1, [r7, #8]
 8003c84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c86:	f000 fa1b 	bl	80040c0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8c:	1e5a      	subs	r2, r3, #1
 8003c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c90:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00f      	beq.n	8003cba <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c9c:	3310      	adds	r3, #16
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f000 ff72 	bl	8004b88 <xTaskRemoveFromEventList>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d007      	beq.n	8003cba <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003caa:	4b3d      	ldr	r3, [pc, #244]	; (8003da0 <xQueueReceive+0x1bc>)
 8003cac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cb0:	601a      	str	r2, [r3, #0]
 8003cb2:	f3bf 8f4f 	dsb	sy
 8003cb6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003cba:	f001 ffab 	bl	8005c14 <vPortExitCritical>
				return pdPASS;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e069      	b.n	8003d96 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d103      	bne.n	8003cd0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003cc8:	f001 ffa4 	bl	8005c14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	e062      	b.n	8003d96 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d106      	bne.n	8003ce4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003cd6:	f107 0310 	add.w	r3, r7, #16
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f000 ffb8 	bl	8004c50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ce4:	f001 ff96 	bl	8005c14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ce8:	f000 fd2a 	bl	8004740 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003cec:	f001 ff62 	bl	8005bb4 <vPortEnterCritical>
 8003cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003cf6:	b25b      	sxtb	r3, r3
 8003cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cfc:	d103      	bne.n	8003d06 <xQueueReceive+0x122>
 8003cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d0c:	b25b      	sxtb	r3, r3
 8003d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d12:	d103      	bne.n	8003d1c <xQueueReceive+0x138>
 8003d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d1c:	f001 ff7a 	bl	8005c14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d20:	1d3a      	adds	r2, r7, #4
 8003d22:	f107 0310 	add.w	r3, r7, #16
 8003d26:	4611      	mov	r1, r2
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f000 ffa7 	bl	8004c7c <xTaskCheckForTimeOut>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d123      	bne.n	8003d7c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d36:	f000 fa3b 	bl	80041b0 <prvIsQueueEmpty>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d017      	beq.n	8003d70 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d42:	3324      	adds	r3, #36	; 0x24
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	4611      	mov	r1, r2
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f000 fecd 	bl	8004ae8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003d4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d50:	f000 f9dc 	bl	800410c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003d54:	f000 fd02 	bl	800475c <xTaskResumeAll>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d189      	bne.n	8003c72 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003d5e:	4b10      	ldr	r3, [pc, #64]	; (8003da0 <xQueueReceive+0x1bc>)
 8003d60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d64:	601a      	str	r2, [r3, #0]
 8003d66:	f3bf 8f4f 	dsb	sy
 8003d6a:	f3bf 8f6f 	isb	sy
 8003d6e:	e780      	b.n	8003c72 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003d70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d72:	f000 f9cb 	bl	800410c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d76:	f000 fcf1 	bl	800475c <xTaskResumeAll>
 8003d7a:	e77a      	b.n	8003c72 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003d7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d7e:	f000 f9c5 	bl	800410c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d82:	f000 fceb 	bl	800475c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d88:	f000 fa12 	bl	80041b0 <prvIsQueueEmpty>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	f43f af6f 	beq.w	8003c72 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003d94:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3730      	adds	r7, #48	; 0x30
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	e000ed04 	.word	0xe000ed04

08003da4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b08e      	sub	sp, #56	; 0x38
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003dae:	2300      	movs	r3, #0
 8003db0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003db6:	2300      	movs	r3, #0
 8003db8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d10a      	bne.n	8003dd6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc4:	f383 8811 	msr	BASEPRI, r3
 8003dc8:	f3bf 8f6f 	isb	sy
 8003dcc:	f3bf 8f4f 	dsb	sy
 8003dd0:	623b      	str	r3, [r7, #32]
}
 8003dd2:	bf00      	nop
 8003dd4:	e7fe      	b.n	8003dd4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00a      	beq.n	8003df4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8003dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de2:	f383 8811 	msr	BASEPRI, r3
 8003de6:	f3bf 8f6f 	isb	sy
 8003dea:	f3bf 8f4f 	dsb	sy
 8003dee:	61fb      	str	r3, [r7, #28]
}
 8003df0:	bf00      	nop
 8003df2:	e7fe      	b.n	8003df2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003df4:	f001 f886 	bl	8004f04 <xTaskGetSchedulerState>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d102      	bne.n	8003e04 <xQueueSemaphoreTake+0x60>
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d101      	bne.n	8003e08 <xQueueSemaphoreTake+0x64>
 8003e04:	2301      	movs	r3, #1
 8003e06:	e000      	b.n	8003e0a <xQueueSemaphoreTake+0x66>
 8003e08:	2300      	movs	r3, #0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10a      	bne.n	8003e24 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8003e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e12:	f383 8811 	msr	BASEPRI, r3
 8003e16:	f3bf 8f6f 	isb	sy
 8003e1a:	f3bf 8f4f 	dsb	sy
 8003e1e:	61bb      	str	r3, [r7, #24]
}
 8003e20:	bf00      	nop
 8003e22:	e7fe      	b.n	8003e22 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e24:	f001 fec6 	bl	8005bb4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e2c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d024      	beq.n	8003e7e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e36:	1e5a      	subs	r2, r3, #1
 8003e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e3a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d104      	bne.n	8003e4e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003e44:	f001 f9d4 	bl	80051f0 <pvTaskIncrementMutexHeldCount>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e4c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00f      	beq.n	8003e76 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e58:	3310      	adds	r3, #16
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f000 fe94 	bl	8004b88 <xTaskRemoveFromEventList>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d007      	beq.n	8003e76 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003e66:	4b54      	ldr	r3, [pc, #336]	; (8003fb8 <xQueueSemaphoreTake+0x214>)
 8003e68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e6c:	601a      	str	r2, [r3, #0]
 8003e6e:	f3bf 8f4f 	dsb	sy
 8003e72:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003e76:	f001 fecd 	bl	8005c14 <vPortExitCritical>
				return pdPASS;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e097      	b.n	8003fae <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d111      	bne.n	8003ea8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00a      	beq.n	8003ea0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8003e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e8e:	f383 8811 	msr	BASEPRI, r3
 8003e92:	f3bf 8f6f 	isb	sy
 8003e96:	f3bf 8f4f 	dsb	sy
 8003e9a:	617b      	str	r3, [r7, #20]
}
 8003e9c:	bf00      	nop
 8003e9e:	e7fe      	b.n	8003e9e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003ea0:	f001 feb8 	bl	8005c14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	e082      	b.n	8003fae <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d106      	bne.n	8003ebc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003eae:	f107 030c 	add.w	r3, r7, #12
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f000 fecc 	bl	8004c50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ebc:	f001 feaa 	bl	8005c14 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ec0:	f000 fc3e 	bl	8004740 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003ec4:	f001 fe76 	bl	8005bb4 <vPortEnterCritical>
 8003ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ece:	b25b      	sxtb	r3, r3
 8003ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed4:	d103      	bne.n	8003ede <xQueueSemaphoreTake+0x13a>
 8003ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ee0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ee4:	b25b      	sxtb	r3, r3
 8003ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eea:	d103      	bne.n	8003ef4 <xQueueSemaphoreTake+0x150>
 8003eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ef4:	f001 fe8e 	bl	8005c14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ef8:	463a      	mov	r2, r7
 8003efa:	f107 030c 	add.w	r3, r7, #12
 8003efe:	4611      	mov	r1, r2
 8003f00:	4618      	mov	r0, r3
 8003f02:	f000 febb 	bl	8004c7c <xTaskCheckForTimeOut>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d132      	bne.n	8003f72 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f0e:	f000 f94f 	bl	80041b0 <prvIsQueueEmpty>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d026      	beq.n	8003f66 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d109      	bne.n	8003f34 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003f20:	f001 fe48 	bl	8005bb4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f001 f809 	bl	8004f40 <xTaskPriorityInherit>
 8003f2e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003f30:	f001 fe70 	bl	8005c14 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f36:	3324      	adds	r3, #36	; 0x24
 8003f38:	683a      	ldr	r2, [r7, #0]
 8003f3a:	4611      	mov	r1, r2
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f000 fdd3 	bl	8004ae8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003f42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f44:	f000 f8e2 	bl	800410c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003f48:	f000 fc08 	bl	800475c <xTaskResumeAll>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	f47f af68 	bne.w	8003e24 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003f54:	4b18      	ldr	r3, [pc, #96]	; (8003fb8 <xQueueSemaphoreTake+0x214>)
 8003f56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f5a:	601a      	str	r2, [r3, #0]
 8003f5c:	f3bf 8f4f 	dsb	sy
 8003f60:	f3bf 8f6f 	isb	sy
 8003f64:	e75e      	b.n	8003e24 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003f66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f68:	f000 f8d0 	bl	800410c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f6c:	f000 fbf6 	bl	800475c <xTaskResumeAll>
 8003f70:	e758      	b.n	8003e24 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003f72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f74:	f000 f8ca 	bl	800410c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f78:	f000 fbf0 	bl	800475c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f7e:	f000 f917 	bl	80041b0 <prvIsQueueEmpty>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	f43f af4d 	beq.w	8003e24 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00d      	beq.n	8003fac <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8003f90:	f001 fe10 	bl	8005bb4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003f94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f96:	f000 f811 	bl	8003fbc <prvGetDisinheritPriorityAfterTimeout>
 8003f9a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f001 f8a2 	bl	80050ec <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003fa8:	f001 fe34 	bl	8005c14 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003fac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3738      	adds	r7, #56	; 0x38
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	e000ed04 	.word	0xe000ed04

08003fbc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d006      	beq.n	8003fda <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8003fd6:	60fb      	str	r3, [r7, #12]
 8003fd8:	e001      	b.n	8003fde <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003fde:	68fb      	ldr	r3, [r7, #12]
	}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3714      	adds	r7, #20
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b086      	sub	sp, #24
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	60b9      	str	r1, [r7, #8]
 8003ff6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004000:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004006:	2b00      	cmp	r3, #0
 8004008:	d10d      	bne.n	8004026 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d14d      	bne.n	80040ae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	4618      	mov	r0, r3
 8004018:	f000 fffa 	bl	8005010 <xTaskPriorityDisinherit>
 800401c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2200      	movs	r2, #0
 8004022:	609a      	str	r2, [r3, #8]
 8004024:	e043      	b.n	80040ae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d119      	bne.n	8004060 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6858      	ldr	r0, [r3, #4]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004034:	461a      	mov	r2, r3
 8004036:	68b9      	ldr	r1, [r7, #8]
 8004038:	f002 fd44 	bl	8006ac4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	685a      	ldr	r2, [r3, #4]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004044:	441a      	add	r2, r3
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	685a      	ldr	r2, [r3, #4]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	429a      	cmp	r2, r3
 8004054:	d32b      	bcc.n	80040ae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	605a      	str	r2, [r3, #4]
 800405e:	e026      	b.n	80040ae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	68d8      	ldr	r0, [r3, #12]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004068:	461a      	mov	r2, r3
 800406a:	68b9      	ldr	r1, [r7, #8]
 800406c:	f002 fd2a 	bl	8006ac4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	68da      	ldr	r2, [r3, #12]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004078:	425b      	negs	r3, r3
 800407a:	441a      	add	r2, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	68da      	ldr	r2, [r3, #12]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	429a      	cmp	r2, r3
 800408a:	d207      	bcs.n	800409c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	689a      	ldr	r2, [r3, #8]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004094:	425b      	negs	r3, r3
 8004096:	441a      	add	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d105      	bne.n	80040ae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d002      	beq.n	80040ae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	3b01      	subs	r3, #1
 80040ac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	1c5a      	adds	r2, r3, #1
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80040b6:	697b      	ldr	r3, [r7, #20]
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3718      	adds	r7, #24
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d018      	beq.n	8004104 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	68da      	ldr	r2, [r3, #12]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040da:	441a      	add	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	68da      	ldr	r2, [r3, #12]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d303      	bcc.n	80040f4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	68d9      	ldr	r1, [r3, #12]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fc:	461a      	mov	r2, r3
 80040fe:	6838      	ldr	r0, [r7, #0]
 8004100:	f002 fce0 	bl	8006ac4 <memcpy>
	}
}
 8004104:	bf00      	nop
 8004106:	3708      	adds	r7, #8
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004114:	f001 fd4e 	bl	8005bb4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800411e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004120:	e011      	b.n	8004146 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004126:	2b00      	cmp	r3, #0
 8004128:	d012      	beq.n	8004150 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	3324      	adds	r3, #36	; 0x24
 800412e:	4618      	mov	r0, r3
 8004130:	f000 fd2a 	bl	8004b88 <xTaskRemoveFromEventList>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d001      	beq.n	800413e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800413a:	f000 fe01 	bl	8004d40 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800413e:	7bfb      	ldrb	r3, [r7, #15]
 8004140:	3b01      	subs	r3, #1
 8004142:	b2db      	uxtb	r3, r3
 8004144:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004146:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800414a:	2b00      	cmp	r3, #0
 800414c:	dce9      	bgt.n	8004122 <prvUnlockQueue+0x16>
 800414e:	e000      	b.n	8004152 <prvUnlockQueue+0x46>
					break;
 8004150:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	22ff      	movs	r2, #255	; 0xff
 8004156:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800415a:	f001 fd5b 	bl	8005c14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800415e:	f001 fd29 	bl	8005bb4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004168:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800416a:	e011      	b.n	8004190 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	691b      	ldr	r3, [r3, #16]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d012      	beq.n	800419a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	3310      	adds	r3, #16
 8004178:	4618      	mov	r0, r3
 800417a:	f000 fd05 	bl	8004b88 <xTaskRemoveFromEventList>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d001      	beq.n	8004188 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004184:	f000 fddc 	bl	8004d40 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004188:	7bbb      	ldrb	r3, [r7, #14]
 800418a:	3b01      	subs	r3, #1
 800418c:	b2db      	uxtb	r3, r3
 800418e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004190:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004194:	2b00      	cmp	r3, #0
 8004196:	dce9      	bgt.n	800416c <prvUnlockQueue+0x60>
 8004198:	e000      	b.n	800419c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800419a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	22ff      	movs	r2, #255	; 0xff
 80041a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80041a4:	f001 fd36 	bl	8005c14 <vPortExitCritical>
}
 80041a8:	bf00      	nop
 80041aa:	3710      	adds	r7, #16
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80041b8:	f001 fcfc 	bl	8005bb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d102      	bne.n	80041ca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80041c4:	2301      	movs	r3, #1
 80041c6:	60fb      	str	r3, [r7, #12]
 80041c8:	e001      	b.n	80041ce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80041ca:	2300      	movs	r3, #0
 80041cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80041ce:	f001 fd21 	bl	8005c14 <vPortExitCritical>

	return xReturn;
 80041d2:	68fb      	ldr	r3, [r7, #12]
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3710      	adds	r7, #16
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80041e4:	f001 fce6 	bl	8005bb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d102      	bne.n	80041fa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80041f4:	2301      	movs	r3, #1
 80041f6:	60fb      	str	r3, [r7, #12]
 80041f8:	e001      	b.n	80041fe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80041fa:	2300      	movs	r3, #0
 80041fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80041fe:	f001 fd09 	bl	8005c14 <vPortExitCritical>

	return xReturn;
 8004202:	68fb      	ldr	r3, [r7, #12]
}
 8004204:	4618      	mov	r0, r3
 8004206:	3710      	adds	r7, #16
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800420c:	b480      	push	{r7}
 800420e:	b085      	sub	sp, #20
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004216:	2300      	movs	r3, #0
 8004218:	60fb      	str	r3, [r7, #12]
 800421a:	e014      	b.n	8004246 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800421c:	4a0f      	ldr	r2, [pc, #60]	; (800425c <vQueueAddToRegistry+0x50>)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d10b      	bne.n	8004240 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004228:	490c      	ldr	r1, [pc, #48]	; (800425c <vQueueAddToRegistry+0x50>)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	683a      	ldr	r2, [r7, #0]
 800422e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004232:	4a0a      	ldr	r2, [pc, #40]	; (800425c <vQueueAddToRegistry+0x50>)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	00db      	lsls	r3, r3, #3
 8004238:	4413      	add	r3, r2
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800423e:	e006      	b.n	800424e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	3301      	adds	r3, #1
 8004244:	60fb      	str	r3, [r7, #12]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2b07      	cmp	r3, #7
 800424a:	d9e7      	bls.n	800421c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800424c:	bf00      	nop
 800424e:	bf00      	nop
 8004250:	3714      	adds	r7, #20
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop
 800425c:	20001984 	.word	0x20001984

08004260 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004260:	b580      	push	{r7, lr}
 8004262:	b086      	sub	sp, #24
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004270:	f001 fca0 	bl	8005bb4 <vPortEnterCritical>
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800427a:	b25b      	sxtb	r3, r3
 800427c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004280:	d103      	bne.n	800428a <vQueueWaitForMessageRestricted+0x2a>
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004290:	b25b      	sxtb	r3, r3
 8004292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004296:	d103      	bne.n	80042a0 <vQueueWaitForMessageRestricted+0x40>
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	2200      	movs	r2, #0
 800429c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042a0:	f001 fcb8 	bl	8005c14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d106      	bne.n	80042ba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	3324      	adds	r3, #36	; 0x24
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	68b9      	ldr	r1, [r7, #8]
 80042b4:	4618      	mov	r0, r3
 80042b6:	f000 fc3b 	bl	8004b30 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80042ba:	6978      	ldr	r0, [r7, #20]
 80042bc:	f7ff ff26 	bl	800410c <prvUnlockQueue>
	}
 80042c0:	bf00      	nop
 80042c2:	3718      	adds	r7, #24
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b08e      	sub	sp, #56	; 0x38
 80042cc:	af04      	add	r7, sp, #16
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	607a      	str	r2, [r7, #4]
 80042d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80042d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d10a      	bne.n	80042f2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80042dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e0:	f383 8811 	msr	BASEPRI, r3
 80042e4:	f3bf 8f6f 	isb	sy
 80042e8:	f3bf 8f4f 	dsb	sy
 80042ec:	623b      	str	r3, [r7, #32]
}
 80042ee:	bf00      	nop
 80042f0:	e7fe      	b.n	80042f0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80042f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d10a      	bne.n	800430e <xTaskCreateStatic+0x46>
	__asm volatile
 80042f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042fc:	f383 8811 	msr	BASEPRI, r3
 8004300:	f3bf 8f6f 	isb	sy
 8004304:	f3bf 8f4f 	dsb	sy
 8004308:	61fb      	str	r3, [r7, #28]
}
 800430a:	bf00      	nop
 800430c:	e7fe      	b.n	800430c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800430e:	235c      	movs	r3, #92	; 0x5c
 8004310:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	2b5c      	cmp	r3, #92	; 0x5c
 8004316:	d00a      	beq.n	800432e <xTaskCreateStatic+0x66>
	__asm volatile
 8004318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800431c:	f383 8811 	msr	BASEPRI, r3
 8004320:	f3bf 8f6f 	isb	sy
 8004324:	f3bf 8f4f 	dsb	sy
 8004328:	61bb      	str	r3, [r7, #24]
}
 800432a:	bf00      	nop
 800432c:	e7fe      	b.n	800432c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800432e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004332:	2b00      	cmp	r3, #0
 8004334:	d01e      	beq.n	8004374 <xTaskCreateStatic+0xac>
 8004336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004338:	2b00      	cmp	r3, #0
 800433a:	d01b      	beq.n	8004374 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800433c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800433e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004342:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004344:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004348:	2202      	movs	r2, #2
 800434a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800434e:	2300      	movs	r3, #0
 8004350:	9303      	str	r3, [sp, #12]
 8004352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004354:	9302      	str	r3, [sp, #8]
 8004356:	f107 0314 	add.w	r3, r7, #20
 800435a:	9301      	str	r3, [sp, #4]
 800435c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800435e:	9300      	str	r3, [sp, #0]
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	68b9      	ldr	r1, [r7, #8]
 8004366:	68f8      	ldr	r0, [r7, #12]
 8004368:	f000 f850 	bl	800440c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800436c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800436e:	f000 f8dd 	bl	800452c <prvAddNewTaskToReadyList>
 8004372:	e001      	b.n	8004378 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004374:	2300      	movs	r3, #0
 8004376:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004378:	697b      	ldr	r3, [r7, #20]
	}
 800437a:	4618      	mov	r0, r3
 800437c:	3728      	adds	r7, #40	; 0x28
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}

08004382 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004382:	b580      	push	{r7, lr}
 8004384:	b08c      	sub	sp, #48	; 0x30
 8004386:	af04      	add	r7, sp, #16
 8004388:	60f8      	str	r0, [r7, #12]
 800438a:	60b9      	str	r1, [r7, #8]
 800438c:	603b      	str	r3, [r7, #0]
 800438e:	4613      	mov	r3, r2
 8004390:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004392:	88fb      	ldrh	r3, [r7, #6]
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	4618      	mov	r0, r3
 8004398:	f001 fd2e 	bl	8005df8 <pvPortMalloc>
 800439c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d00e      	beq.n	80043c2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80043a4:	205c      	movs	r0, #92	; 0x5c
 80043a6:	f001 fd27 	bl	8005df8 <pvPortMalloc>
 80043aa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d003      	beq.n	80043ba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	697a      	ldr	r2, [r7, #20]
 80043b6:	631a      	str	r2, [r3, #48]	; 0x30
 80043b8:	e005      	b.n	80043c6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80043ba:	6978      	ldr	r0, [r7, #20]
 80043bc:	f001 fde8 	bl	8005f90 <vPortFree>
 80043c0:	e001      	b.n	80043c6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80043c2:	2300      	movs	r3, #0
 80043c4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d017      	beq.n	80043fc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80043d4:	88fa      	ldrh	r2, [r7, #6]
 80043d6:	2300      	movs	r3, #0
 80043d8:	9303      	str	r3, [sp, #12]
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	9302      	str	r3, [sp, #8]
 80043de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e0:	9301      	str	r3, [sp, #4]
 80043e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e4:	9300      	str	r3, [sp, #0]
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	68b9      	ldr	r1, [r7, #8]
 80043ea:	68f8      	ldr	r0, [r7, #12]
 80043ec:	f000 f80e 	bl	800440c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80043f0:	69f8      	ldr	r0, [r7, #28]
 80043f2:	f000 f89b 	bl	800452c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80043f6:	2301      	movs	r3, #1
 80043f8:	61bb      	str	r3, [r7, #24]
 80043fa:	e002      	b.n	8004402 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80043fc:	f04f 33ff 	mov.w	r3, #4294967295
 8004400:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004402:	69bb      	ldr	r3, [r7, #24]
	}
 8004404:	4618      	mov	r0, r3
 8004406:	3720      	adds	r7, #32
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}

0800440c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b088      	sub	sp, #32
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]
 8004418:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800441a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800441c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	461a      	mov	r2, r3
 8004424:	21a5      	movs	r1, #165	; 0xa5
 8004426:	f002 fb5b 	bl	8006ae0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800442a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800442c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004434:	3b01      	subs	r3, #1
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	4413      	add	r3, r2
 800443a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	f023 0307 	bic.w	r3, r3, #7
 8004442:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	f003 0307 	and.w	r3, r3, #7
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00a      	beq.n	8004464 <prvInitialiseNewTask+0x58>
	__asm volatile
 800444e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004452:	f383 8811 	msr	BASEPRI, r3
 8004456:	f3bf 8f6f 	isb	sy
 800445a:	f3bf 8f4f 	dsb	sy
 800445e:	617b      	str	r3, [r7, #20]
}
 8004460:	bf00      	nop
 8004462:	e7fe      	b.n	8004462 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d01f      	beq.n	80044aa <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800446a:	2300      	movs	r3, #0
 800446c:	61fb      	str	r3, [r7, #28]
 800446e:	e012      	b.n	8004496 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004470:	68ba      	ldr	r2, [r7, #8]
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	4413      	add	r3, r2
 8004476:	7819      	ldrb	r1, [r3, #0]
 8004478:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	4413      	add	r3, r2
 800447e:	3334      	adds	r3, #52	; 0x34
 8004480:	460a      	mov	r2, r1
 8004482:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004484:	68ba      	ldr	r2, [r7, #8]
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	4413      	add	r3, r2
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d006      	beq.n	800449e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	3301      	adds	r3, #1
 8004494:	61fb      	str	r3, [r7, #28]
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	2b0f      	cmp	r3, #15
 800449a:	d9e9      	bls.n	8004470 <prvInitialiseNewTask+0x64>
 800449c:	e000      	b.n	80044a0 <prvInitialiseNewTask+0x94>
			{
				break;
 800449e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80044a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044a8:	e003      	b.n	80044b2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80044aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80044b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b4:	2b37      	cmp	r3, #55	; 0x37
 80044b6:	d901      	bls.n	80044bc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80044b8:	2337      	movs	r3, #55	; 0x37
 80044ba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80044bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044c0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80044c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044c6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80044c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ca:	2200      	movs	r2, #0
 80044cc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80044ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d0:	3304      	adds	r3, #4
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7fe ff8e 	bl	80033f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80044d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044da:	3318      	adds	r3, #24
 80044dc:	4618      	mov	r0, r3
 80044de:	f7fe ff89 	bl	80033f4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80044e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044e6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80044ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80044f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044f6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80044f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044fa:	2200      	movs	r2, #0
 80044fc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80044fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004500:	2200      	movs	r2, #0
 8004502:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004506:	683a      	ldr	r2, [r7, #0]
 8004508:	68f9      	ldr	r1, [r7, #12]
 800450a:	69b8      	ldr	r0, [r7, #24]
 800450c:	f001 fa26 	bl	800595c <pxPortInitialiseStack>
 8004510:	4602      	mov	r2, r0
 8004512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004514:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004518:	2b00      	cmp	r3, #0
 800451a:	d002      	beq.n	8004522 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800451c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800451e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004520:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004522:	bf00      	nop
 8004524:	3720      	adds	r7, #32
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
	...

0800452c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004534:	f001 fb3e 	bl	8005bb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004538:	4b2d      	ldr	r3, [pc, #180]	; (80045f0 <prvAddNewTaskToReadyList+0xc4>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	3301      	adds	r3, #1
 800453e:	4a2c      	ldr	r2, [pc, #176]	; (80045f0 <prvAddNewTaskToReadyList+0xc4>)
 8004540:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004542:	4b2c      	ldr	r3, [pc, #176]	; (80045f4 <prvAddNewTaskToReadyList+0xc8>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d109      	bne.n	800455e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800454a:	4a2a      	ldr	r2, [pc, #168]	; (80045f4 <prvAddNewTaskToReadyList+0xc8>)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004550:	4b27      	ldr	r3, [pc, #156]	; (80045f0 <prvAddNewTaskToReadyList+0xc4>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d110      	bne.n	800457a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004558:	f000 fc16 	bl	8004d88 <prvInitialiseTaskLists>
 800455c:	e00d      	b.n	800457a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800455e:	4b26      	ldr	r3, [pc, #152]	; (80045f8 <prvAddNewTaskToReadyList+0xcc>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d109      	bne.n	800457a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004566:	4b23      	ldr	r3, [pc, #140]	; (80045f4 <prvAddNewTaskToReadyList+0xc8>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004570:	429a      	cmp	r2, r3
 8004572:	d802      	bhi.n	800457a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004574:	4a1f      	ldr	r2, [pc, #124]	; (80045f4 <prvAddNewTaskToReadyList+0xc8>)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800457a:	4b20      	ldr	r3, [pc, #128]	; (80045fc <prvAddNewTaskToReadyList+0xd0>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	3301      	adds	r3, #1
 8004580:	4a1e      	ldr	r2, [pc, #120]	; (80045fc <prvAddNewTaskToReadyList+0xd0>)
 8004582:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004584:	4b1d      	ldr	r3, [pc, #116]	; (80045fc <prvAddNewTaskToReadyList+0xd0>)
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004590:	4b1b      	ldr	r3, [pc, #108]	; (8004600 <prvAddNewTaskToReadyList+0xd4>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	429a      	cmp	r2, r3
 8004596:	d903      	bls.n	80045a0 <prvAddNewTaskToReadyList+0x74>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800459c:	4a18      	ldr	r2, [pc, #96]	; (8004600 <prvAddNewTaskToReadyList+0xd4>)
 800459e:	6013      	str	r3, [r2, #0]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045a4:	4613      	mov	r3, r2
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	4413      	add	r3, r2
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	4a15      	ldr	r2, [pc, #84]	; (8004604 <prvAddNewTaskToReadyList+0xd8>)
 80045ae:	441a      	add	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	3304      	adds	r3, #4
 80045b4:	4619      	mov	r1, r3
 80045b6:	4610      	mov	r0, r2
 80045b8:	f7fe ff29 	bl	800340e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80045bc:	f001 fb2a 	bl	8005c14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80045c0:	4b0d      	ldr	r3, [pc, #52]	; (80045f8 <prvAddNewTaskToReadyList+0xcc>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d00e      	beq.n	80045e6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80045c8:	4b0a      	ldr	r3, [pc, #40]	; (80045f4 <prvAddNewTaskToReadyList+0xc8>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d207      	bcs.n	80045e6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80045d6:	4b0c      	ldr	r3, [pc, #48]	; (8004608 <prvAddNewTaskToReadyList+0xdc>)
 80045d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045dc:	601a      	str	r2, [r3, #0]
 80045de:	f3bf 8f4f 	dsb	sy
 80045e2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045e6:	bf00      	nop
 80045e8:	3708      	adds	r7, #8
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	20000bcc 	.word	0x20000bcc
 80045f4:	200006f8 	.word	0x200006f8
 80045f8:	20000bd8 	.word	0x20000bd8
 80045fc:	20000be8 	.word	0x20000be8
 8004600:	20000bd4 	.word	0x20000bd4
 8004604:	200006fc 	.word	0x200006fc
 8004608:	e000ed04 	.word	0xe000ed04

0800460c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004614:	2300      	movs	r3, #0
 8004616:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d017      	beq.n	800464e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800461e:	4b13      	ldr	r3, [pc, #76]	; (800466c <vTaskDelay+0x60>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00a      	beq.n	800463c <vTaskDelay+0x30>
	__asm volatile
 8004626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462a:	f383 8811 	msr	BASEPRI, r3
 800462e:	f3bf 8f6f 	isb	sy
 8004632:	f3bf 8f4f 	dsb	sy
 8004636:	60bb      	str	r3, [r7, #8]
}
 8004638:	bf00      	nop
 800463a:	e7fe      	b.n	800463a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800463c:	f000 f880 	bl	8004740 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004640:	2100      	movs	r1, #0
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 fde8 	bl	8005218 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004648:	f000 f888 	bl	800475c <xTaskResumeAll>
 800464c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d107      	bne.n	8004664 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004654:	4b06      	ldr	r3, [pc, #24]	; (8004670 <vTaskDelay+0x64>)
 8004656:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800465a:	601a      	str	r2, [r3, #0]
 800465c:	f3bf 8f4f 	dsb	sy
 8004660:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004664:	bf00      	nop
 8004666:	3710      	adds	r7, #16
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}
 800466c:	20000bf4 	.word	0x20000bf4
 8004670:	e000ed04 	.word	0xe000ed04

08004674 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b08a      	sub	sp, #40	; 0x28
 8004678:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800467a:	2300      	movs	r3, #0
 800467c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800467e:	2300      	movs	r3, #0
 8004680:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004682:	463a      	mov	r2, r7
 8004684:	1d39      	adds	r1, r7, #4
 8004686:	f107 0308 	add.w	r3, r7, #8
 800468a:	4618      	mov	r0, r3
 800468c:	f7fe fe5e 	bl	800334c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004690:	6839      	ldr	r1, [r7, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	68ba      	ldr	r2, [r7, #8]
 8004696:	9202      	str	r2, [sp, #8]
 8004698:	9301      	str	r3, [sp, #4]
 800469a:	2300      	movs	r3, #0
 800469c:	9300      	str	r3, [sp, #0]
 800469e:	2300      	movs	r3, #0
 80046a0:	460a      	mov	r2, r1
 80046a2:	4921      	ldr	r1, [pc, #132]	; (8004728 <vTaskStartScheduler+0xb4>)
 80046a4:	4821      	ldr	r0, [pc, #132]	; (800472c <vTaskStartScheduler+0xb8>)
 80046a6:	f7ff fe0f 	bl	80042c8 <xTaskCreateStatic>
 80046aa:	4603      	mov	r3, r0
 80046ac:	4a20      	ldr	r2, [pc, #128]	; (8004730 <vTaskStartScheduler+0xbc>)
 80046ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80046b0:	4b1f      	ldr	r3, [pc, #124]	; (8004730 <vTaskStartScheduler+0xbc>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d002      	beq.n	80046be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80046b8:	2301      	movs	r3, #1
 80046ba:	617b      	str	r3, [r7, #20]
 80046bc:	e001      	b.n	80046c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80046be:	2300      	movs	r3, #0
 80046c0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d102      	bne.n	80046ce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80046c8:	f000 fdfa 	bl	80052c0 <xTimerCreateTimerTask>
 80046cc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d116      	bne.n	8004702 <vTaskStartScheduler+0x8e>
	__asm volatile
 80046d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d8:	f383 8811 	msr	BASEPRI, r3
 80046dc:	f3bf 8f6f 	isb	sy
 80046e0:	f3bf 8f4f 	dsb	sy
 80046e4:	613b      	str	r3, [r7, #16]
}
 80046e6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80046e8:	4b12      	ldr	r3, [pc, #72]	; (8004734 <vTaskStartScheduler+0xc0>)
 80046ea:	f04f 32ff 	mov.w	r2, #4294967295
 80046ee:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80046f0:	4b11      	ldr	r3, [pc, #68]	; (8004738 <vTaskStartScheduler+0xc4>)
 80046f2:	2201      	movs	r2, #1
 80046f4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80046f6:	4b11      	ldr	r3, [pc, #68]	; (800473c <vTaskStartScheduler+0xc8>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80046fc:	f001 f9b8 	bl	8005a70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004700:	e00e      	b.n	8004720 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004708:	d10a      	bne.n	8004720 <vTaskStartScheduler+0xac>
	__asm volatile
 800470a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800470e:	f383 8811 	msr	BASEPRI, r3
 8004712:	f3bf 8f6f 	isb	sy
 8004716:	f3bf 8f4f 	dsb	sy
 800471a:	60fb      	str	r3, [r7, #12]
}
 800471c:	bf00      	nop
 800471e:	e7fe      	b.n	800471e <vTaskStartScheduler+0xaa>
}
 8004720:	bf00      	nop
 8004722:	3718      	adds	r7, #24
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}
 8004728:	08006b24 	.word	0x08006b24
 800472c:	08004d59 	.word	0x08004d59
 8004730:	20000bf0 	.word	0x20000bf0
 8004734:	20000bec 	.word	0x20000bec
 8004738:	20000bd8 	.word	0x20000bd8
 800473c:	20000bd0 	.word	0x20000bd0

08004740 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004740:	b480      	push	{r7}
 8004742:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004744:	4b04      	ldr	r3, [pc, #16]	; (8004758 <vTaskSuspendAll+0x18>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	3301      	adds	r3, #1
 800474a:	4a03      	ldr	r2, [pc, #12]	; (8004758 <vTaskSuspendAll+0x18>)
 800474c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800474e:	bf00      	nop
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr
 8004758:	20000bf4 	.word	0x20000bf4

0800475c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004762:	2300      	movs	r3, #0
 8004764:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004766:	2300      	movs	r3, #0
 8004768:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800476a:	4b42      	ldr	r3, [pc, #264]	; (8004874 <xTaskResumeAll+0x118>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d10a      	bne.n	8004788 <xTaskResumeAll+0x2c>
	__asm volatile
 8004772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004776:	f383 8811 	msr	BASEPRI, r3
 800477a:	f3bf 8f6f 	isb	sy
 800477e:	f3bf 8f4f 	dsb	sy
 8004782:	603b      	str	r3, [r7, #0]
}
 8004784:	bf00      	nop
 8004786:	e7fe      	b.n	8004786 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004788:	f001 fa14 	bl	8005bb4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800478c:	4b39      	ldr	r3, [pc, #228]	; (8004874 <xTaskResumeAll+0x118>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	3b01      	subs	r3, #1
 8004792:	4a38      	ldr	r2, [pc, #224]	; (8004874 <xTaskResumeAll+0x118>)
 8004794:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004796:	4b37      	ldr	r3, [pc, #220]	; (8004874 <xTaskResumeAll+0x118>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d162      	bne.n	8004864 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800479e:	4b36      	ldr	r3, [pc, #216]	; (8004878 <xTaskResumeAll+0x11c>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d05e      	beq.n	8004864 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80047a6:	e02f      	b.n	8004808 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047a8:	4b34      	ldr	r3, [pc, #208]	; (800487c <xTaskResumeAll+0x120>)
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	3318      	adds	r3, #24
 80047b4:	4618      	mov	r0, r3
 80047b6:	f7fe fe87 	bl	80034c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	3304      	adds	r3, #4
 80047be:	4618      	mov	r0, r3
 80047c0:	f7fe fe82 	bl	80034c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047c8:	4b2d      	ldr	r3, [pc, #180]	; (8004880 <xTaskResumeAll+0x124>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d903      	bls.n	80047d8 <xTaskResumeAll+0x7c>
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d4:	4a2a      	ldr	r2, [pc, #168]	; (8004880 <xTaskResumeAll+0x124>)
 80047d6:	6013      	str	r3, [r2, #0]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047dc:	4613      	mov	r3, r2
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	4413      	add	r3, r2
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	4a27      	ldr	r2, [pc, #156]	; (8004884 <xTaskResumeAll+0x128>)
 80047e6:	441a      	add	r2, r3
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	3304      	adds	r3, #4
 80047ec:	4619      	mov	r1, r3
 80047ee:	4610      	mov	r0, r2
 80047f0:	f7fe fe0d 	bl	800340e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047f8:	4b23      	ldr	r3, [pc, #140]	; (8004888 <xTaskResumeAll+0x12c>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047fe:	429a      	cmp	r2, r3
 8004800:	d302      	bcc.n	8004808 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004802:	4b22      	ldr	r3, [pc, #136]	; (800488c <xTaskResumeAll+0x130>)
 8004804:	2201      	movs	r2, #1
 8004806:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004808:	4b1c      	ldr	r3, [pc, #112]	; (800487c <xTaskResumeAll+0x120>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d1cb      	bne.n	80047a8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d001      	beq.n	800481a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004816:	f000 fb55 	bl	8004ec4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800481a:	4b1d      	ldr	r3, [pc, #116]	; (8004890 <xTaskResumeAll+0x134>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d010      	beq.n	8004848 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004826:	f000 f847 	bl	80048b8 <xTaskIncrementTick>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d002      	beq.n	8004836 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004830:	4b16      	ldr	r3, [pc, #88]	; (800488c <xTaskResumeAll+0x130>)
 8004832:	2201      	movs	r2, #1
 8004834:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	3b01      	subs	r3, #1
 800483a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1f1      	bne.n	8004826 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004842:	4b13      	ldr	r3, [pc, #76]	; (8004890 <xTaskResumeAll+0x134>)
 8004844:	2200      	movs	r2, #0
 8004846:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004848:	4b10      	ldr	r3, [pc, #64]	; (800488c <xTaskResumeAll+0x130>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d009      	beq.n	8004864 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004850:	2301      	movs	r3, #1
 8004852:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004854:	4b0f      	ldr	r3, [pc, #60]	; (8004894 <xTaskResumeAll+0x138>)
 8004856:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800485a:	601a      	str	r2, [r3, #0]
 800485c:	f3bf 8f4f 	dsb	sy
 8004860:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004864:	f001 f9d6 	bl	8005c14 <vPortExitCritical>

	return xAlreadyYielded;
 8004868:	68bb      	ldr	r3, [r7, #8]
}
 800486a:	4618      	mov	r0, r3
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	20000bf4 	.word	0x20000bf4
 8004878:	20000bcc 	.word	0x20000bcc
 800487c:	20000b8c 	.word	0x20000b8c
 8004880:	20000bd4 	.word	0x20000bd4
 8004884:	200006fc 	.word	0x200006fc
 8004888:	200006f8 	.word	0x200006f8
 800488c:	20000be0 	.word	0x20000be0
 8004890:	20000bdc 	.word	0x20000bdc
 8004894:	e000ed04 	.word	0xe000ed04

08004898 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800489e:	4b05      	ldr	r3, [pc, #20]	; (80048b4 <xTaskGetTickCount+0x1c>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80048a4:	687b      	ldr	r3, [r7, #4]
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	370c      	adds	r7, #12
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	20000bd0 	.word	0x20000bd0

080048b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b086      	sub	sp, #24
 80048bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80048be:	2300      	movs	r3, #0
 80048c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048c2:	4b4f      	ldr	r3, [pc, #316]	; (8004a00 <xTaskIncrementTick+0x148>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	f040 808f 	bne.w	80049ea <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80048cc:	4b4d      	ldr	r3, [pc, #308]	; (8004a04 <xTaskIncrementTick+0x14c>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	3301      	adds	r3, #1
 80048d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80048d4:	4a4b      	ldr	r2, [pc, #300]	; (8004a04 <xTaskIncrementTick+0x14c>)
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d120      	bne.n	8004922 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80048e0:	4b49      	ldr	r3, [pc, #292]	; (8004a08 <xTaskIncrementTick+0x150>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00a      	beq.n	8004900 <xTaskIncrementTick+0x48>
	__asm volatile
 80048ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ee:	f383 8811 	msr	BASEPRI, r3
 80048f2:	f3bf 8f6f 	isb	sy
 80048f6:	f3bf 8f4f 	dsb	sy
 80048fa:	603b      	str	r3, [r7, #0]
}
 80048fc:	bf00      	nop
 80048fe:	e7fe      	b.n	80048fe <xTaskIncrementTick+0x46>
 8004900:	4b41      	ldr	r3, [pc, #260]	; (8004a08 <xTaskIncrementTick+0x150>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	60fb      	str	r3, [r7, #12]
 8004906:	4b41      	ldr	r3, [pc, #260]	; (8004a0c <xTaskIncrementTick+0x154>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a3f      	ldr	r2, [pc, #252]	; (8004a08 <xTaskIncrementTick+0x150>)
 800490c:	6013      	str	r3, [r2, #0]
 800490e:	4a3f      	ldr	r2, [pc, #252]	; (8004a0c <xTaskIncrementTick+0x154>)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6013      	str	r3, [r2, #0]
 8004914:	4b3e      	ldr	r3, [pc, #248]	; (8004a10 <xTaskIncrementTick+0x158>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	3301      	adds	r3, #1
 800491a:	4a3d      	ldr	r2, [pc, #244]	; (8004a10 <xTaskIncrementTick+0x158>)
 800491c:	6013      	str	r3, [r2, #0]
 800491e:	f000 fad1 	bl	8004ec4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004922:	4b3c      	ldr	r3, [pc, #240]	; (8004a14 <xTaskIncrementTick+0x15c>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	693a      	ldr	r2, [r7, #16]
 8004928:	429a      	cmp	r2, r3
 800492a:	d349      	bcc.n	80049c0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800492c:	4b36      	ldr	r3, [pc, #216]	; (8004a08 <xTaskIncrementTick+0x150>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d104      	bne.n	8004940 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004936:	4b37      	ldr	r3, [pc, #220]	; (8004a14 <xTaskIncrementTick+0x15c>)
 8004938:	f04f 32ff 	mov.w	r2, #4294967295
 800493c:	601a      	str	r2, [r3, #0]
					break;
 800493e:	e03f      	b.n	80049c0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004940:	4b31      	ldr	r3, [pc, #196]	; (8004a08 <xTaskIncrementTick+0x150>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004950:	693a      	ldr	r2, [r7, #16]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	429a      	cmp	r2, r3
 8004956:	d203      	bcs.n	8004960 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004958:	4a2e      	ldr	r2, [pc, #184]	; (8004a14 <xTaskIncrementTick+0x15c>)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800495e:	e02f      	b.n	80049c0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	3304      	adds	r3, #4
 8004964:	4618      	mov	r0, r3
 8004966:	f7fe fdaf 	bl	80034c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800496e:	2b00      	cmp	r3, #0
 8004970:	d004      	beq.n	800497c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	3318      	adds	r3, #24
 8004976:	4618      	mov	r0, r3
 8004978:	f7fe fda6 	bl	80034c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004980:	4b25      	ldr	r3, [pc, #148]	; (8004a18 <xTaskIncrementTick+0x160>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	429a      	cmp	r2, r3
 8004986:	d903      	bls.n	8004990 <xTaskIncrementTick+0xd8>
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800498c:	4a22      	ldr	r2, [pc, #136]	; (8004a18 <xTaskIncrementTick+0x160>)
 800498e:	6013      	str	r3, [r2, #0]
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004994:	4613      	mov	r3, r2
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	4413      	add	r3, r2
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	4a1f      	ldr	r2, [pc, #124]	; (8004a1c <xTaskIncrementTick+0x164>)
 800499e:	441a      	add	r2, r3
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	3304      	adds	r3, #4
 80049a4:	4619      	mov	r1, r3
 80049a6:	4610      	mov	r0, r2
 80049a8:	f7fe fd31 	bl	800340e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049b0:	4b1b      	ldr	r3, [pc, #108]	; (8004a20 <xTaskIncrementTick+0x168>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d3b8      	bcc.n	800492c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80049ba:	2301      	movs	r3, #1
 80049bc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049be:	e7b5      	b.n	800492c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80049c0:	4b17      	ldr	r3, [pc, #92]	; (8004a20 <xTaskIncrementTick+0x168>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049c6:	4915      	ldr	r1, [pc, #84]	; (8004a1c <xTaskIncrementTick+0x164>)
 80049c8:	4613      	mov	r3, r2
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	4413      	add	r3, r2
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	440b      	add	r3, r1
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d901      	bls.n	80049dc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80049d8:	2301      	movs	r3, #1
 80049da:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80049dc:	4b11      	ldr	r3, [pc, #68]	; (8004a24 <xTaskIncrementTick+0x16c>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d007      	beq.n	80049f4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80049e4:	2301      	movs	r3, #1
 80049e6:	617b      	str	r3, [r7, #20]
 80049e8:	e004      	b.n	80049f4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80049ea:	4b0f      	ldr	r3, [pc, #60]	; (8004a28 <xTaskIncrementTick+0x170>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	3301      	adds	r3, #1
 80049f0:	4a0d      	ldr	r2, [pc, #52]	; (8004a28 <xTaskIncrementTick+0x170>)
 80049f2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80049f4:	697b      	ldr	r3, [r7, #20]
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3718      	adds	r7, #24
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	20000bf4 	.word	0x20000bf4
 8004a04:	20000bd0 	.word	0x20000bd0
 8004a08:	20000b84 	.word	0x20000b84
 8004a0c:	20000b88 	.word	0x20000b88
 8004a10:	20000be4 	.word	0x20000be4
 8004a14:	20000bec 	.word	0x20000bec
 8004a18:	20000bd4 	.word	0x20000bd4
 8004a1c:	200006fc 	.word	0x200006fc
 8004a20:	200006f8 	.word	0x200006f8
 8004a24:	20000be0 	.word	0x20000be0
 8004a28:	20000bdc 	.word	0x20000bdc

08004a2c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004a32:	4b28      	ldr	r3, [pc, #160]	; (8004ad4 <vTaskSwitchContext+0xa8>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d003      	beq.n	8004a42 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004a3a:	4b27      	ldr	r3, [pc, #156]	; (8004ad8 <vTaskSwitchContext+0xac>)
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004a40:	e041      	b.n	8004ac6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004a42:	4b25      	ldr	r3, [pc, #148]	; (8004ad8 <vTaskSwitchContext+0xac>)
 8004a44:	2200      	movs	r2, #0
 8004a46:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a48:	4b24      	ldr	r3, [pc, #144]	; (8004adc <vTaskSwitchContext+0xb0>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	60fb      	str	r3, [r7, #12]
 8004a4e:	e010      	b.n	8004a72 <vTaskSwitchContext+0x46>
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d10a      	bne.n	8004a6c <vTaskSwitchContext+0x40>
	__asm volatile
 8004a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a5a:	f383 8811 	msr	BASEPRI, r3
 8004a5e:	f3bf 8f6f 	isb	sy
 8004a62:	f3bf 8f4f 	dsb	sy
 8004a66:	607b      	str	r3, [r7, #4]
}
 8004a68:	bf00      	nop
 8004a6a:	e7fe      	b.n	8004a6a <vTaskSwitchContext+0x3e>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	60fb      	str	r3, [r7, #12]
 8004a72:	491b      	ldr	r1, [pc, #108]	; (8004ae0 <vTaskSwitchContext+0xb4>)
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	4613      	mov	r3, r2
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	4413      	add	r3, r2
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	440b      	add	r3, r1
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d0e4      	beq.n	8004a50 <vTaskSwitchContext+0x24>
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	4613      	mov	r3, r2
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	4413      	add	r3, r2
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	4a13      	ldr	r2, [pc, #76]	; (8004ae0 <vTaskSwitchContext+0xb4>)
 8004a92:	4413      	add	r3, r2
 8004a94:	60bb      	str	r3, [r7, #8]
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	685a      	ldr	r2, [r3, #4]
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	605a      	str	r2, [r3, #4]
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	685a      	ldr	r2, [r3, #4]
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	3308      	adds	r3, #8
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d104      	bne.n	8004ab6 <vTaskSwitchContext+0x8a>
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	685a      	ldr	r2, [r3, #4]
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	605a      	str	r2, [r3, #4]
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	4a09      	ldr	r2, [pc, #36]	; (8004ae4 <vTaskSwitchContext+0xb8>)
 8004abe:	6013      	str	r3, [r2, #0]
 8004ac0:	4a06      	ldr	r2, [pc, #24]	; (8004adc <vTaskSwitchContext+0xb0>)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6013      	str	r3, [r2, #0]
}
 8004ac6:	bf00      	nop
 8004ac8:	3714      	adds	r7, #20
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	20000bf4 	.word	0x20000bf4
 8004ad8:	20000be0 	.word	0x20000be0
 8004adc:	20000bd4 	.word	0x20000bd4
 8004ae0:	200006fc 	.word	0x200006fc
 8004ae4:	200006f8 	.word	0x200006f8

08004ae8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d10a      	bne.n	8004b0e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004afc:	f383 8811 	msr	BASEPRI, r3
 8004b00:	f3bf 8f6f 	isb	sy
 8004b04:	f3bf 8f4f 	dsb	sy
 8004b08:	60fb      	str	r3, [r7, #12]
}
 8004b0a:	bf00      	nop
 8004b0c:	e7fe      	b.n	8004b0c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b0e:	4b07      	ldr	r3, [pc, #28]	; (8004b2c <vTaskPlaceOnEventList+0x44>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	3318      	adds	r3, #24
 8004b14:	4619      	mov	r1, r3
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f7fe fc9d 	bl	8003456 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004b1c:	2101      	movs	r1, #1
 8004b1e:	6838      	ldr	r0, [r7, #0]
 8004b20:	f000 fb7a 	bl	8005218 <prvAddCurrentTaskToDelayedList>
}
 8004b24:	bf00      	nop
 8004b26:	3710      	adds	r7, #16
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	200006f8 	.word	0x200006f8

08004b30 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b086      	sub	sp, #24
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d10a      	bne.n	8004b58 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b46:	f383 8811 	msr	BASEPRI, r3
 8004b4a:	f3bf 8f6f 	isb	sy
 8004b4e:	f3bf 8f4f 	dsb	sy
 8004b52:	617b      	str	r3, [r7, #20]
}
 8004b54:	bf00      	nop
 8004b56:	e7fe      	b.n	8004b56 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b58:	4b0a      	ldr	r3, [pc, #40]	; (8004b84 <vTaskPlaceOnEventListRestricted+0x54>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	3318      	adds	r3, #24
 8004b5e:	4619      	mov	r1, r3
 8004b60:	68f8      	ldr	r0, [r7, #12]
 8004b62:	f7fe fc54 	bl	800340e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d002      	beq.n	8004b72 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004b6c:	f04f 33ff 	mov.w	r3, #4294967295
 8004b70:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004b72:	6879      	ldr	r1, [r7, #4]
 8004b74:	68b8      	ldr	r0, [r7, #8]
 8004b76:	f000 fb4f 	bl	8005218 <prvAddCurrentTaskToDelayedList>
	}
 8004b7a:	bf00      	nop
 8004b7c:	3718      	adds	r7, #24
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	200006f8 	.word	0x200006f8

08004b88 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b086      	sub	sp, #24
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d10a      	bne.n	8004bb4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba2:	f383 8811 	msr	BASEPRI, r3
 8004ba6:	f3bf 8f6f 	isb	sy
 8004baa:	f3bf 8f4f 	dsb	sy
 8004bae:	60fb      	str	r3, [r7, #12]
}
 8004bb0:	bf00      	nop
 8004bb2:	e7fe      	b.n	8004bb2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	3318      	adds	r3, #24
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f7fe fc85 	bl	80034c8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bbe:	4b1e      	ldr	r3, [pc, #120]	; (8004c38 <xTaskRemoveFromEventList+0xb0>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d11d      	bne.n	8004c02 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	3304      	adds	r3, #4
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f7fe fc7c 	bl	80034c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bd4:	4b19      	ldr	r3, [pc, #100]	; (8004c3c <xTaskRemoveFromEventList+0xb4>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d903      	bls.n	8004be4 <xTaskRemoveFromEventList+0x5c>
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be0:	4a16      	ldr	r2, [pc, #88]	; (8004c3c <xTaskRemoveFromEventList+0xb4>)
 8004be2:	6013      	str	r3, [r2, #0]
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004be8:	4613      	mov	r3, r2
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	4413      	add	r3, r2
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	4a13      	ldr	r2, [pc, #76]	; (8004c40 <xTaskRemoveFromEventList+0xb8>)
 8004bf2:	441a      	add	r2, r3
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	3304      	adds	r3, #4
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	4610      	mov	r0, r2
 8004bfc:	f7fe fc07 	bl	800340e <vListInsertEnd>
 8004c00:	e005      	b.n	8004c0e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	3318      	adds	r3, #24
 8004c06:	4619      	mov	r1, r3
 8004c08:	480e      	ldr	r0, [pc, #56]	; (8004c44 <xTaskRemoveFromEventList+0xbc>)
 8004c0a:	f7fe fc00 	bl	800340e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c12:	4b0d      	ldr	r3, [pc, #52]	; (8004c48 <xTaskRemoveFromEventList+0xc0>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d905      	bls.n	8004c28 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004c20:	4b0a      	ldr	r3, [pc, #40]	; (8004c4c <xTaskRemoveFromEventList+0xc4>)
 8004c22:	2201      	movs	r2, #1
 8004c24:	601a      	str	r2, [r3, #0]
 8004c26:	e001      	b.n	8004c2c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004c2c:	697b      	ldr	r3, [r7, #20]
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3718      	adds	r7, #24
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	20000bf4 	.word	0x20000bf4
 8004c3c:	20000bd4 	.word	0x20000bd4
 8004c40:	200006fc 	.word	0x200006fc
 8004c44:	20000b8c 	.word	0x20000b8c
 8004c48:	200006f8 	.word	0x200006f8
 8004c4c:	20000be0 	.word	0x20000be0

08004c50 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004c58:	4b06      	ldr	r3, [pc, #24]	; (8004c74 <vTaskInternalSetTimeOutState+0x24>)
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004c60:	4b05      	ldr	r3, [pc, #20]	; (8004c78 <vTaskInternalSetTimeOutState+0x28>)
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	605a      	str	r2, [r3, #4]
}
 8004c68:	bf00      	nop
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr
 8004c74:	20000be4 	.word	0x20000be4
 8004c78:	20000bd0 	.word	0x20000bd0

08004c7c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b088      	sub	sp, #32
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d10a      	bne.n	8004ca2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c90:	f383 8811 	msr	BASEPRI, r3
 8004c94:	f3bf 8f6f 	isb	sy
 8004c98:	f3bf 8f4f 	dsb	sy
 8004c9c:	613b      	str	r3, [r7, #16]
}
 8004c9e:	bf00      	nop
 8004ca0:	e7fe      	b.n	8004ca0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d10a      	bne.n	8004cbe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cac:	f383 8811 	msr	BASEPRI, r3
 8004cb0:	f3bf 8f6f 	isb	sy
 8004cb4:	f3bf 8f4f 	dsb	sy
 8004cb8:	60fb      	str	r3, [r7, #12]
}
 8004cba:	bf00      	nop
 8004cbc:	e7fe      	b.n	8004cbc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004cbe:	f000 ff79 	bl	8005bb4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004cc2:	4b1d      	ldr	r3, [pc, #116]	; (8004d38 <xTaskCheckForTimeOut+0xbc>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	69ba      	ldr	r2, [r7, #24]
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cda:	d102      	bne.n	8004ce2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	61fb      	str	r3, [r7, #28]
 8004ce0:	e023      	b.n	8004d2a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	4b15      	ldr	r3, [pc, #84]	; (8004d3c <xTaskCheckForTimeOut+0xc0>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d007      	beq.n	8004cfe <xTaskCheckForTimeOut+0x82>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	69ba      	ldr	r2, [r7, #24]
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d302      	bcc.n	8004cfe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	61fb      	str	r3, [r7, #28]
 8004cfc:	e015      	b.n	8004d2a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	697a      	ldr	r2, [r7, #20]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d20b      	bcs.n	8004d20 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	1ad2      	subs	r2, r2, r3
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f7ff ff9b 	bl	8004c50 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	61fb      	str	r3, [r7, #28]
 8004d1e:	e004      	b.n	8004d2a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	2200      	movs	r2, #0
 8004d24:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004d26:	2301      	movs	r3, #1
 8004d28:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004d2a:	f000 ff73 	bl	8005c14 <vPortExitCritical>

	return xReturn;
 8004d2e:	69fb      	ldr	r3, [r7, #28]
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3720      	adds	r7, #32
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	20000bd0 	.word	0x20000bd0
 8004d3c:	20000be4 	.word	0x20000be4

08004d40 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004d40:	b480      	push	{r7}
 8004d42:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004d44:	4b03      	ldr	r3, [pc, #12]	; (8004d54 <vTaskMissedYield+0x14>)
 8004d46:	2201      	movs	r2, #1
 8004d48:	601a      	str	r2, [r3, #0]
}
 8004d4a:	bf00      	nop
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr
 8004d54:	20000be0 	.word	0x20000be0

08004d58 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b082      	sub	sp, #8
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004d60:	f000 f852 	bl	8004e08 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004d64:	4b06      	ldr	r3, [pc, #24]	; (8004d80 <prvIdleTask+0x28>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d9f9      	bls.n	8004d60 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004d6c:	4b05      	ldr	r3, [pc, #20]	; (8004d84 <prvIdleTask+0x2c>)
 8004d6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d72:	601a      	str	r2, [r3, #0]
 8004d74:	f3bf 8f4f 	dsb	sy
 8004d78:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004d7c:	e7f0      	b.n	8004d60 <prvIdleTask+0x8>
 8004d7e:	bf00      	nop
 8004d80:	200006fc 	.word	0x200006fc
 8004d84:	e000ed04 	.word	0xe000ed04

08004d88 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d8e:	2300      	movs	r3, #0
 8004d90:	607b      	str	r3, [r7, #4]
 8004d92:	e00c      	b.n	8004dae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	4613      	mov	r3, r2
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	4413      	add	r3, r2
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	4a12      	ldr	r2, [pc, #72]	; (8004de8 <prvInitialiseTaskLists+0x60>)
 8004da0:	4413      	add	r3, r2
 8004da2:	4618      	mov	r0, r3
 8004da4:	f7fe fb06 	bl	80033b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	3301      	adds	r3, #1
 8004dac:	607b      	str	r3, [r7, #4]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2b37      	cmp	r3, #55	; 0x37
 8004db2:	d9ef      	bls.n	8004d94 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004db4:	480d      	ldr	r0, [pc, #52]	; (8004dec <prvInitialiseTaskLists+0x64>)
 8004db6:	f7fe fafd 	bl	80033b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004dba:	480d      	ldr	r0, [pc, #52]	; (8004df0 <prvInitialiseTaskLists+0x68>)
 8004dbc:	f7fe fafa 	bl	80033b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004dc0:	480c      	ldr	r0, [pc, #48]	; (8004df4 <prvInitialiseTaskLists+0x6c>)
 8004dc2:	f7fe faf7 	bl	80033b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004dc6:	480c      	ldr	r0, [pc, #48]	; (8004df8 <prvInitialiseTaskLists+0x70>)
 8004dc8:	f7fe faf4 	bl	80033b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004dcc:	480b      	ldr	r0, [pc, #44]	; (8004dfc <prvInitialiseTaskLists+0x74>)
 8004dce:	f7fe faf1 	bl	80033b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004dd2:	4b0b      	ldr	r3, [pc, #44]	; (8004e00 <prvInitialiseTaskLists+0x78>)
 8004dd4:	4a05      	ldr	r2, [pc, #20]	; (8004dec <prvInitialiseTaskLists+0x64>)
 8004dd6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004dd8:	4b0a      	ldr	r3, [pc, #40]	; (8004e04 <prvInitialiseTaskLists+0x7c>)
 8004dda:	4a05      	ldr	r2, [pc, #20]	; (8004df0 <prvInitialiseTaskLists+0x68>)
 8004ddc:	601a      	str	r2, [r3, #0]
}
 8004dde:	bf00      	nop
 8004de0:	3708      	adds	r7, #8
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	200006fc 	.word	0x200006fc
 8004dec:	20000b5c 	.word	0x20000b5c
 8004df0:	20000b70 	.word	0x20000b70
 8004df4:	20000b8c 	.word	0x20000b8c
 8004df8:	20000ba0 	.word	0x20000ba0
 8004dfc:	20000bb8 	.word	0x20000bb8
 8004e00:	20000b84 	.word	0x20000b84
 8004e04:	20000b88 	.word	0x20000b88

08004e08 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e0e:	e019      	b.n	8004e44 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004e10:	f000 fed0 	bl	8005bb4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e14:	4b10      	ldr	r3, [pc, #64]	; (8004e58 <prvCheckTasksWaitingTermination+0x50>)
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	3304      	adds	r3, #4
 8004e20:	4618      	mov	r0, r3
 8004e22:	f7fe fb51 	bl	80034c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004e26:	4b0d      	ldr	r3, [pc, #52]	; (8004e5c <prvCheckTasksWaitingTermination+0x54>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	4a0b      	ldr	r2, [pc, #44]	; (8004e5c <prvCheckTasksWaitingTermination+0x54>)
 8004e2e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004e30:	4b0b      	ldr	r3, [pc, #44]	; (8004e60 <prvCheckTasksWaitingTermination+0x58>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	3b01      	subs	r3, #1
 8004e36:	4a0a      	ldr	r2, [pc, #40]	; (8004e60 <prvCheckTasksWaitingTermination+0x58>)
 8004e38:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004e3a:	f000 feeb 	bl	8005c14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 f810 	bl	8004e64 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e44:	4b06      	ldr	r3, [pc, #24]	; (8004e60 <prvCheckTasksWaitingTermination+0x58>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d1e1      	bne.n	8004e10 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004e4c:	bf00      	nop
 8004e4e:	bf00      	nop
 8004e50:	3708      	adds	r7, #8
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	20000ba0 	.word	0x20000ba0
 8004e5c:	20000bcc 	.word	0x20000bcc
 8004e60:	20000bb4 	.word	0x20000bb4

08004e64 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d108      	bne.n	8004e88 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f001 f888 	bl	8005f90 <vPortFree>
				vPortFree( pxTCB );
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f001 f885 	bl	8005f90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004e86:	e018      	b.n	8004eba <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d103      	bne.n	8004e9a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f001 f87c 	bl	8005f90 <vPortFree>
	}
 8004e98:	e00f      	b.n	8004eba <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d00a      	beq.n	8004eba <prvDeleteTCB+0x56>
	__asm volatile
 8004ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea8:	f383 8811 	msr	BASEPRI, r3
 8004eac:	f3bf 8f6f 	isb	sy
 8004eb0:	f3bf 8f4f 	dsb	sy
 8004eb4:	60fb      	str	r3, [r7, #12]
}
 8004eb6:	bf00      	nop
 8004eb8:	e7fe      	b.n	8004eb8 <prvDeleteTCB+0x54>
	}
 8004eba:	bf00      	nop
 8004ebc:	3710      	adds	r7, #16
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
	...

08004ec4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004eca:	4b0c      	ldr	r3, [pc, #48]	; (8004efc <prvResetNextTaskUnblockTime+0x38>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d104      	bne.n	8004ede <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004ed4:	4b0a      	ldr	r3, [pc, #40]	; (8004f00 <prvResetNextTaskUnblockTime+0x3c>)
 8004ed6:	f04f 32ff 	mov.w	r2, #4294967295
 8004eda:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004edc:	e008      	b.n	8004ef0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ede:	4b07      	ldr	r3, [pc, #28]	; (8004efc <prvResetNextTaskUnblockTime+0x38>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	4a04      	ldr	r2, [pc, #16]	; (8004f00 <prvResetNextTaskUnblockTime+0x3c>)
 8004eee:	6013      	str	r3, [r2, #0]
}
 8004ef0:	bf00      	nop
 8004ef2:	370c      	adds	r7, #12
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr
 8004efc:	20000b84 	.word	0x20000b84
 8004f00:	20000bec 	.word	0x20000bec

08004f04 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004f0a:	4b0b      	ldr	r3, [pc, #44]	; (8004f38 <xTaskGetSchedulerState+0x34>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d102      	bne.n	8004f18 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004f12:	2301      	movs	r3, #1
 8004f14:	607b      	str	r3, [r7, #4]
 8004f16:	e008      	b.n	8004f2a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f18:	4b08      	ldr	r3, [pc, #32]	; (8004f3c <xTaskGetSchedulerState+0x38>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d102      	bne.n	8004f26 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004f20:	2302      	movs	r3, #2
 8004f22:	607b      	str	r3, [r7, #4]
 8004f24:	e001      	b.n	8004f2a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004f26:	2300      	movs	r3, #0
 8004f28:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004f2a:	687b      	ldr	r3, [r7, #4]
	}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr
 8004f38:	20000bd8 	.word	0x20000bd8
 8004f3c:	20000bf4 	.word	0x20000bf4

08004f40 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d051      	beq.n	8004ffa <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f5a:	4b2a      	ldr	r3, [pc, #168]	; (8005004 <xTaskPriorityInherit+0xc4>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d241      	bcs.n	8004fe8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	699b      	ldr	r3, [r3, #24]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	db06      	blt.n	8004f7a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f6c:	4b25      	ldr	r3, [pc, #148]	; (8005004 <xTaskPriorityInherit+0xc4>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f72:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	6959      	ldr	r1, [r3, #20]
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f82:	4613      	mov	r3, r2
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	4413      	add	r3, r2
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	4a1f      	ldr	r2, [pc, #124]	; (8005008 <xTaskPriorityInherit+0xc8>)
 8004f8c:	4413      	add	r3, r2
 8004f8e:	4299      	cmp	r1, r3
 8004f90:	d122      	bne.n	8004fd8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	3304      	adds	r3, #4
 8004f96:	4618      	mov	r0, r3
 8004f98:	f7fe fa96 	bl	80034c8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004f9c:	4b19      	ldr	r3, [pc, #100]	; (8005004 <xTaskPriorityInherit+0xc4>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004faa:	4b18      	ldr	r3, [pc, #96]	; (800500c <xTaskPriorityInherit+0xcc>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d903      	bls.n	8004fba <xTaskPriorityInherit+0x7a>
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb6:	4a15      	ldr	r2, [pc, #84]	; (800500c <xTaskPriorityInherit+0xcc>)
 8004fb8:	6013      	str	r3, [r2, #0]
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	4413      	add	r3, r2
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	4a10      	ldr	r2, [pc, #64]	; (8005008 <xTaskPriorityInherit+0xc8>)
 8004fc8:	441a      	add	r2, r3
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	3304      	adds	r3, #4
 8004fce:	4619      	mov	r1, r3
 8004fd0:	4610      	mov	r0, r2
 8004fd2:	f7fe fa1c 	bl	800340e <vListInsertEnd>
 8004fd6:	e004      	b.n	8004fe2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004fd8:	4b0a      	ldr	r3, [pc, #40]	; (8005004 <xTaskPriorityInherit+0xc4>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	60fb      	str	r3, [r7, #12]
 8004fe6:	e008      	b.n	8004ffa <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004fec:	4b05      	ldr	r3, [pc, #20]	; (8005004 <xTaskPriorityInherit+0xc4>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d201      	bcs.n	8004ffa <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
	}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3710      	adds	r7, #16
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	200006f8 	.word	0x200006f8
 8005008:	200006fc 	.word	0x200006fc
 800500c:	20000bd4 	.word	0x20000bd4

08005010 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005010:	b580      	push	{r7, lr}
 8005012:	b086      	sub	sp, #24
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800501c:	2300      	movs	r3, #0
 800501e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d056      	beq.n	80050d4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005026:	4b2e      	ldr	r3, [pc, #184]	; (80050e0 <xTaskPriorityDisinherit+0xd0>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	693a      	ldr	r2, [r7, #16]
 800502c:	429a      	cmp	r2, r3
 800502e:	d00a      	beq.n	8005046 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005034:	f383 8811 	msr	BASEPRI, r3
 8005038:	f3bf 8f6f 	isb	sy
 800503c:	f3bf 8f4f 	dsb	sy
 8005040:	60fb      	str	r3, [r7, #12]
}
 8005042:	bf00      	nop
 8005044:	e7fe      	b.n	8005044 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800504a:	2b00      	cmp	r3, #0
 800504c:	d10a      	bne.n	8005064 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800504e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005052:	f383 8811 	msr	BASEPRI, r3
 8005056:	f3bf 8f6f 	isb	sy
 800505a:	f3bf 8f4f 	dsb	sy
 800505e:	60bb      	str	r3, [r7, #8]
}
 8005060:	bf00      	nop
 8005062:	e7fe      	b.n	8005062 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005068:	1e5a      	subs	r2, r3, #1
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005076:	429a      	cmp	r2, r3
 8005078:	d02c      	beq.n	80050d4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800507e:	2b00      	cmp	r3, #0
 8005080:	d128      	bne.n	80050d4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	3304      	adds	r3, #4
 8005086:	4618      	mov	r0, r3
 8005088:	f7fe fa1e 	bl	80034c8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005098:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050a4:	4b0f      	ldr	r3, [pc, #60]	; (80050e4 <xTaskPriorityDisinherit+0xd4>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d903      	bls.n	80050b4 <xTaskPriorityDisinherit+0xa4>
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b0:	4a0c      	ldr	r2, [pc, #48]	; (80050e4 <xTaskPriorityDisinherit+0xd4>)
 80050b2:	6013      	str	r3, [r2, #0]
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050b8:	4613      	mov	r3, r2
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	4413      	add	r3, r2
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	4a09      	ldr	r2, [pc, #36]	; (80050e8 <xTaskPriorityDisinherit+0xd8>)
 80050c2:	441a      	add	r2, r3
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	3304      	adds	r3, #4
 80050c8:	4619      	mov	r1, r3
 80050ca:	4610      	mov	r0, r2
 80050cc:	f7fe f99f 	bl	800340e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80050d0:	2301      	movs	r3, #1
 80050d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80050d4:	697b      	ldr	r3, [r7, #20]
	}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3718      	adds	r7, #24
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	200006f8 	.word	0x200006f8
 80050e4:	20000bd4 	.word	0x20000bd4
 80050e8:	200006fc 	.word	0x200006fc

080050ec <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b088      	sub	sp, #32
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80050fa:	2301      	movs	r3, #1
 80050fc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d06a      	beq.n	80051da <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005104:	69bb      	ldr	r3, [r7, #24]
 8005106:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005108:	2b00      	cmp	r3, #0
 800510a:	d10a      	bne.n	8005122 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800510c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005110:	f383 8811 	msr	BASEPRI, r3
 8005114:	f3bf 8f6f 	isb	sy
 8005118:	f3bf 8f4f 	dsb	sy
 800511c:	60fb      	str	r3, [r7, #12]
}
 800511e:	bf00      	nop
 8005120:	e7fe      	b.n	8005120 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005126:	683a      	ldr	r2, [r7, #0]
 8005128:	429a      	cmp	r2, r3
 800512a:	d902      	bls.n	8005132 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	61fb      	str	r3, [r7, #28]
 8005130:	e002      	b.n	8005138 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005136:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513c:	69fa      	ldr	r2, [r7, #28]
 800513e:	429a      	cmp	r2, r3
 8005140:	d04b      	beq.n	80051da <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005142:	69bb      	ldr	r3, [r7, #24]
 8005144:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005146:	697a      	ldr	r2, [r7, #20]
 8005148:	429a      	cmp	r2, r3
 800514a:	d146      	bne.n	80051da <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800514c:	4b25      	ldr	r3, [pc, #148]	; (80051e4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	69ba      	ldr	r2, [r7, #24]
 8005152:	429a      	cmp	r2, r3
 8005154:	d10a      	bne.n	800516c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8005156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800515a:	f383 8811 	msr	BASEPRI, r3
 800515e:	f3bf 8f6f 	isb	sy
 8005162:	f3bf 8f4f 	dsb	sy
 8005166:	60bb      	str	r3, [r7, #8]
}
 8005168:	bf00      	nop
 800516a:	e7fe      	b.n	800516a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005170:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	69fa      	ldr	r2, [r7, #28]
 8005176:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005178:	69bb      	ldr	r3, [r7, #24]
 800517a:	699b      	ldr	r3, [r3, #24]
 800517c:	2b00      	cmp	r3, #0
 800517e:	db04      	blt.n	800518a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	6959      	ldr	r1, [r3, #20]
 800518e:	693a      	ldr	r2, [r7, #16]
 8005190:	4613      	mov	r3, r2
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	4413      	add	r3, r2
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	4a13      	ldr	r2, [pc, #76]	; (80051e8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800519a:	4413      	add	r3, r2
 800519c:	4299      	cmp	r1, r3
 800519e:	d11c      	bne.n	80051da <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	3304      	adds	r3, #4
 80051a4:	4618      	mov	r0, r3
 80051a6:	f7fe f98f 	bl	80034c8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051ae:	4b0f      	ldr	r3, [pc, #60]	; (80051ec <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d903      	bls.n	80051be <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ba:	4a0c      	ldr	r2, [pc, #48]	; (80051ec <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80051bc:	6013      	str	r3, [r2, #0]
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051c2:	4613      	mov	r3, r2
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	4413      	add	r3, r2
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	4a07      	ldr	r2, [pc, #28]	; (80051e8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80051cc:	441a      	add	r2, r3
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	3304      	adds	r3, #4
 80051d2:	4619      	mov	r1, r3
 80051d4:	4610      	mov	r0, r2
 80051d6:	f7fe f91a 	bl	800340e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80051da:	bf00      	nop
 80051dc:	3720      	adds	r7, #32
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop
 80051e4:	200006f8 	.word	0x200006f8
 80051e8:	200006fc 	.word	0x200006fc
 80051ec:	20000bd4 	.word	0x20000bd4

080051f0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80051f0:	b480      	push	{r7}
 80051f2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80051f4:	4b07      	ldr	r3, [pc, #28]	; (8005214 <pvTaskIncrementMutexHeldCount+0x24>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d004      	beq.n	8005206 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80051fc:	4b05      	ldr	r3, [pc, #20]	; (8005214 <pvTaskIncrementMutexHeldCount+0x24>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005202:	3201      	adds	r2, #1
 8005204:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8005206:	4b03      	ldr	r3, [pc, #12]	; (8005214 <pvTaskIncrementMutexHeldCount+0x24>)
 8005208:	681b      	ldr	r3, [r3, #0]
	}
 800520a:	4618      	mov	r0, r3
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr
 8005214:	200006f8 	.word	0x200006f8

08005218 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005222:	4b21      	ldr	r3, [pc, #132]	; (80052a8 <prvAddCurrentTaskToDelayedList+0x90>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005228:	4b20      	ldr	r3, [pc, #128]	; (80052ac <prvAddCurrentTaskToDelayedList+0x94>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	3304      	adds	r3, #4
 800522e:	4618      	mov	r0, r3
 8005230:	f7fe f94a 	bl	80034c8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800523a:	d10a      	bne.n	8005252 <prvAddCurrentTaskToDelayedList+0x3a>
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d007      	beq.n	8005252 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005242:	4b1a      	ldr	r3, [pc, #104]	; (80052ac <prvAddCurrentTaskToDelayedList+0x94>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	3304      	adds	r3, #4
 8005248:	4619      	mov	r1, r3
 800524a:	4819      	ldr	r0, [pc, #100]	; (80052b0 <prvAddCurrentTaskToDelayedList+0x98>)
 800524c:	f7fe f8df 	bl	800340e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005250:	e026      	b.n	80052a0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4413      	add	r3, r2
 8005258:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800525a:	4b14      	ldr	r3, [pc, #80]	; (80052ac <prvAddCurrentTaskToDelayedList+0x94>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	68ba      	ldr	r2, [r7, #8]
 8005260:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005262:	68ba      	ldr	r2, [r7, #8]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	429a      	cmp	r2, r3
 8005268:	d209      	bcs.n	800527e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800526a:	4b12      	ldr	r3, [pc, #72]	; (80052b4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	4b0f      	ldr	r3, [pc, #60]	; (80052ac <prvAddCurrentTaskToDelayedList+0x94>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	3304      	adds	r3, #4
 8005274:	4619      	mov	r1, r3
 8005276:	4610      	mov	r0, r2
 8005278:	f7fe f8ed 	bl	8003456 <vListInsert>
}
 800527c:	e010      	b.n	80052a0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800527e:	4b0e      	ldr	r3, [pc, #56]	; (80052b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	4b0a      	ldr	r3, [pc, #40]	; (80052ac <prvAddCurrentTaskToDelayedList+0x94>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	3304      	adds	r3, #4
 8005288:	4619      	mov	r1, r3
 800528a:	4610      	mov	r0, r2
 800528c:	f7fe f8e3 	bl	8003456 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005290:	4b0a      	ldr	r3, [pc, #40]	; (80052bc <prvAddCurrentTaskToDelayedList+0xa4>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68ba      	ldr	r2, [r7, #8]
 8005296:	429a      	cmp	r2, r3
 8005298:	d202      	bcs.n	80052a0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800529a:	4a08      	ldr	r2, [pc, #32]	; (80052bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	6013      	str	r3, [r2, #0]
}
 80052a0:	bf00      	nop
 80052a2:	3710      	adds	r7, #16
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	20000bd0 	.word	0x20000bd0
 80052ac:	200006f8 	.word	0x200006f8
 80052b0:	20000bb8 	.word	0x20000bb8
 80052b4:	20000b88 	.word	0x20000b88
 80052b8:	20000b84 	.word	0x20000b84
 80052bc:	20000bec 	.word	0x20000bec

080052c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b08a      	sub	sp, #40	; 0x28
 80052c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80052c6:	2300      	movs	r3, #0
 80052c8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80052ca:	f000 fb07 	bl	80058dc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80052ce:	4b1c      	ldr	r3, [pc, #112]	; (8005340 <xTimerCreateTimerTask+0x80>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d021      	beq.n	800531a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80052d6:	2300      	movs	r3, #0
 80052d8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80052da:	2300      	movs	r3, #0
 80052dc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80052de:	1d3a      	adds	r2, r7, #4
 80052e0:	f107 0108 	add.w	r1, r7, #8
 80052e4:	f107 030c 	add.w	r3, r7, #12
 80052e8:	4618      	mov	r0, r3
 80052ea:	f7fe f849 	bl	8003380 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80052ee:	6879      	ldr	r1, [r7, #4]
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	9202      	str	r2, [sp, #8]
 80052f6:	9301      	str	r3, [sp, #4]
 80052f8:	2302      	movs	r3, #2
 80052fa:	9300      	str	r3, [sp, #0]
 80052fc:	2300      	movs	r3, #0
 80052fe:	460a      	mov	r2, r1
 8005300:	4910      	ldr	r1, [pc, #64]	; (8005344 <xTimerCreateTimerTask+0x84>)
 8005302:	4811      	ldr	r0, [pc, #68]	; (8005348 <xTimerCreateTimerTask+0x88>)
 8005304:	f7fe ffe0 	bl	80042c8 <xTaskCreateStatic>
 8005308:	4603      	mov	r3, r0
 800530a:	4a10      	ldr	r2, [pc, #64]	; (800534c <xTimerCreateTimerTask+0x8c>)
 800530c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800530e:	4b0f      	ldr	r3, [pc, #60]	; (800534c <xTimerCreateTimerTask+0x8c>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d001      	beq.n	800531a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005316:	2301      	movs	r3, #1
 8005318:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d10a      	bne.n	8005336 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005324:	f383 8811 	msr	BASEPRI, r3
 8005328:	f3bf 8f6f 	isb	sy
 800532c:	f3bf 8f4f 	dsb	sy
 8005330:	613b      	str	r3, [r7, #16]
}
 8005332:	bf00      	nop
 8005334:	e7fe      	b.n	8005334 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005336:	697b      	ldr	r3, [r7, #20]
}
 8005338:	4618      	mov	r0, r3
 800533a:	3718      	adds	r7, #24
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}
 8005340:	20000c28 	.word	0x20000c28
 8005344:	08006b2c 	.word	0x08006b2c
 8005348:	08005485 	.word	0x08005485
 800534c:	20000c2c 	.word	0x20000c2c

08005350 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b08a      	sub	sp, #40	; 0x28
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	607a      	str	r2, [r7, #4]
 800535c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800535e:	2300      	movs	r3, #0
 8005360:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d10a      	bne.n	800537e <xTimerGenericCommand+0x2e>
	__asm volatile
 8005368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800536c:	f383 8811 	msr	BASEPRI, r3
 8005370:	f3bf 8f6f 	isb	sy
 8005374:	f3bf 8f4f 	dsb	sy
 8005378:	623b      	str	r3, [r7, #32]
}
 800537a:	bf00      	nop
 800537c:	e7fe      	b.n	800537c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800537e:	4b1a      	ldr	r3, [pc, #104]	; (80053e8 <xTimerGenericCommand+0x98>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d02a      	beq.n	80053dc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	2b05      	cmp	r3, #5
 8005396:	dc18      	bgt.n	80053ca <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005398:	f7ff fdb4 	bl	8004f04 <xTaskGetSchedulerState>
 800539c:	4603      	mov	r3, r0
 800539e:	2b02      	cmp	r3, #2
 80053a0:	d109      	bne.n	80053b6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80053a2:	4b11      	ldr	r3, [pc, #68]	; (80053e8 <xTimerGenericCommand+0x98>)
 80053a4:	6818      	ldr	r0, [r3, #0]
 80053a6:	f107 0110 	add.w	r1, r7, #16
 80053aa:	2300      	movs	r3, #0
 80053ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053ae:	f7fe f9f3 	bl	8003798 <xQueueGenericSend>
 80053b2:	6278      	str	r0, [r7, #36]	; 0x24
 80053b4:	e012      	b.n	80053dc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80053b6:	4b0c      	ldr	r3, [pc, #48]	; (80053e8 <xTimerGenericCommand+0x98>)
 80053b8:	6818      	ldr	r0, [r3, #0]
 80053ba:	f107 0110 	add.w	r1, r7, #16
 80053be:	2300      	movs	r3, #0
 80053c0:	2200      	movs	r2, #0
 80053c2:	f7fe f9e9 	bl	8003798 <xQueueGenericSend>
 80053c6:	6278      	str	r0, [r7, #36]	; 0x24
 80053c8:	e008      	b.n	80053dc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80053ca:	4b07      	ldr	r3, [pc, #28]	; (80053e8 <xTimerGenericCommand+0x98>)
 80053cc:	6818      	ldr	r0, [r3, #0]
 80053ce:	f107 0110 	add.w	r1, r7, #16
 80053d2:	2300      	movs	r3, #0
 80053d4:	683a      	ldr	r2, [r7, #0]
 80053d6:	f7fe fadd 	bl	8003994 <xQueueGenericSendFromISR>
 80053da:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80053dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3728      	adds	r7, #40	; 0x28
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	20000c28 	.word	0x20000c28

080053ec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b088      	sub	sp, #32
 80053f0:	af02      	add	r7, sp, #8
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053f6:	4b22      	ldr	r3, [pc, #136]	; (8005480 <prvProcessExpiredTimer+0x94>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	3304      	adds	r3, #4
 8005404:	4618      	mov	r0, r3
 8005406:	f7fe f85f 	bl	80034c8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005410:	f003 0304 	and.w	r3, r3, #4
 8005414:	2b00      	cmp	r3, #0
 8005416:	d022      	beq.n	800545e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	699a      	ldr	r2, [r3, #24]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	18d1      	adds	r1, r2, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	683a      	ldr	r2, [r7, #0]
 8005424:	6978      	ldr	r0, [r7, #20]
 8005426:	f000 f8d1 	bl	80055cc <prvInsertTimerInActiveList>
 800542a:	4603      	mov	r3, r0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d01f      	beq.n	8005470 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005430:	2300      	movs	r3, #0
 8005432:	9300      	str	r3, [sp, #0]
 8005434:	2300      	movs	r3, #0
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	2100      	movs	r1, #0
 800543a:	6978      	ldr	r0, [r7, #20]
 800543c:	f7ff ff88 	bl	8005350 <xTimerGenericCommand>
 8005440:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d113      	bne.n	8005470 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800544c:	f383 8811 	msr	BASEPRI, r3
 8005450:	f3bf 8f6f 	isb	sy
 8005454:	f3bf 8f4f 	dsb	sy
 8005458:	60fb      	str	r3, [r7, #12]
}
 800545a:	bf00      	nop
 800545c:	e7fe      	b.n	800545c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005464:	f023 0301 	bic.w	r3, r3, #1
 8005468:	b2da      	uxtb	r2, r3
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	6a1b      	ldr	r3, [r3, #32]
 8005474:	6978      	ldr	r0, [r7, #20]
 8005476:	4798      	blx	r3
}
 8005478:	bf00      	nop
 800547a:	3718      	adds	r7, #24
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}
 8005480:	20000c20 	.word	0x20000c20

08005484 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800548c:	f107 0308 	add.w	r3, r7, #8
 8005490:	4618      	mov	r0, r3
 8005492:	f000 f857 	bl	8005544 <prvGetNextExpireTime>
 8005496:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	4619      	mov	r1, r3
 800549c:	68f8      	ldr	r0, [r7, #12]
 800549e:	f000 f803 	bl	80054a8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80054a2:	f000 f8d5 	bl	8005650 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80054a6:	e7f1      	b.n	800548c <prvTimerTask+0x8>

080054a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80054b2:	f7ff f945 	bl	8004740 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80054b6:	f107 0308 	add.w	r3, r7, #8
 80054ba:	4618      	mov	r0, r3
 80054bc:	f000 f866 	bl	800558c <prvSampleTimeNow>
 80054c0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d130      	bne.n	800552a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d10a      	bne.n	80054e4 <prvProcessTimerOrBlockTask+0x3c>
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d806      	bhi.n	80054e4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80054d6:	f7ff f941 	bl	800475c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80054da:	68f9      	ldr	r1, [r7, #12]
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f7ff ff85 	bl	80053ec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80054e2:	e024      	b.n	800552e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d008      	beq.n	80054fc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80054ea:	4b13      	ldr	r3, [pc, #76]	; (8005538 <prvProcessTimerOrBlockTask+0x90>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d101      	bne.n	80054f8 <prvProcessTimerOrBlockTask+0x50>
 80054f4:	2301      	movs	r3, #1
 80054f6:	e000      	b.n	80054fa <prvProcessTimerOrBlockTask+0x52>
 80054f8:	2300      	movs	r3, #0
 80054fa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80054fc:	4b0f      	ldr	r3, [pc, #60]	; (800553c <prvProcessTimerOrBlockTask+0x94>)
 80054fe:	6818      	ldr	r0, [r3, #0]
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	683a      	ldr	r2, [r7, #0]
 8005508:	4619      	mov	r1, r3
 800550a:	f7fe fea9 	bl	8004260 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800550e:	f7ff f925 	bl	800475c <xTaskResumeAll>
 8005512:	4603      	mov	r3, r0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d10a      	bne.n	800552e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005518:	4b09      	ldr	r3, [pc, #36]	; (8005540 <prvProcessTimerOrBlockTask+0x98>)
 800551a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800551e:	601a      	str	r2, [r3, #0]
 8005520:	f3bf 8f4f 	dsb	sy
 8005524:	f3bf 8f6f 	isb	sy
}
 8005528:	e001      	b.n	800552e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800552a:	f7ff f917 	bl	800475c <xTaskResumeAll>
}
 800552e:	bf00      	nop
 8005530:	3710      	adds	r7, #16
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	20000c24 	.word	0x20000c24
 800553c:	20000c28 	.word	0x20000c28
 8005540:	e000ed04 	.word	0xe000ed04

08005544 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005544:	b480      	push	{r7}
 8005546:	b085      	sub	sp, #20
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800554c:	4b0e      	ldr	r3, [pc, #56]	; (8005588 <prvGetNextExpireTime+0x44>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d101      	bne.n	800555a <prvGetNextExpireTime+0x16>
 8005556:	2201      	movs	r2, #1
 8005558:	e000      	b.n	800555c <prvGetNextExpireTime+0x18>
 800555a:	2200      	movs	r2, #0
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d105      	bne.n	8005574 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005568:	4b07      	ldr	r3, [pc, #28]	; (8005588 <prvGetNextExpireTime+0x44>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	60fb      	str	r3, [r7, #12]
 8005572:	e001      	b.n	8005578 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005574:	2300      	movs	r3, #0
 8005576:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005578:	68fb      	ldr	r3, [r7, #12]
}
 800557a:	4618      	mov	r0, r3
 800557c:	3714      	adds	r7, #20
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr
 8005586:	bf00      	nop
 8005588:	20000c20 	.word	0x20000c20

0800558c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005594:	f7ff f980 	bl	8004898 <xTaskGetTickCount>
 8005598:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800559a:	4b0b      	ldr	r3, [pc, #44]	; (80055c8 <prvSampleTimeNow+0x3c>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d205      	bcs.n	80055b0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80055a4:	f000 f936 	bl	8005814 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	601a      	str	r2, [r3, #0]
 80055ae:	e002      	b.n	80055b6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80055b6:	4a04      	ldr	r2, [pc, #16]	; (80055c8 <prvSampleTimeNow+0x3c>)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80055bc:	68fb      	ldr	r3, [r7, #12]
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3710      	adds	r7, #16
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	bf00      	nop
 80055c8:	20000c30 	.word	0x20000c30

080055cc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b086      	sub	sp, #24
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	60b9      	str	r1, [r7, #8]
 80055d6:	607a      	str	r2, [r7, #4]
 80055d8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80055da:	2300      	movs	r3, #0
 80055dc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	68ba      	ldr	r2, [r7, #8]
 80055e2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	68fa      	ldr	r2, [r7, #12]
 80055e8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80055ea:	68ba      	ldr	r2, [r7, #8]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d812      	bhi.n	8005618 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	1ad2      	subs	r2, r2, r3
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	699b      	ldr	r3, [r3, #24]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d302      	bcc.n	8005606 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005600:	2301      	movs	r3, #1
 8005602:	617b      	str	r3, [r7, #20]
 8005604:	e01b      	b.n	800563e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005606:	4b10      	ldr	r3, [pc, #64]	; (8005648 <prvInsertTimerInActiveList+0x7c>)
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	3304      	adds	r3, #4
 800560e:	4619      	mov	r1, r3
 8005610:	4610      	mov	r0, r2
 8005612:	f7fd ff20 	bl	8003456 <vListInsert>
 8005616:	e012      	b.n	800563e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	429a      	cmp	r2, r3
 800561e:	d206      	bcs.n	800562e <prvInsertTimerInActiveList+0x62>
 8005620:	68ba      	ldr	r2, [r7, #8]
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	429a      	cmp	r2, r3
 8005626:	d302      	bcc.n	800562e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005628:	2301      	movs	r3, #1
 800562a:	617b      	str	r3, [r7, #20]
 800562c:	e007      	b.n	800563e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800562e:	4b07      	ldr	r3, [pc, #28]	; (800564c <prvInsertTimerInActiveList+0x80>)
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	3304      	adds	r3, #4
 8005636:	4619      	mov	r1, r3
 8005638:	4610      	mov	r0, r2
 800563a:	f7fd ff0c 	bl	8003456 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800563e:	697b      	ldr	r3, [r7, #20]
}
 8005640:	4618      	mov	r0, r3
 8005642:	3718      	adds	r7, #24
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}
 8005648:	20000c24 	.word	0x20000c24
 800564c:	20000c20 	.word	0x20000c20

08005650 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b08e      	sub	sp, #56	; 0x38
 8005654:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005656:	e0ca      	b.n	80057ee <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2b00      	cmp	r3, #0
 800565c:	da18      	bge.n	8005690 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800565e:	1d3b      	adds	r3, r7, #4
 8005660:	3304      	adds	r3, #4
 8005662:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005666:	2b00      	cmp	r3, #0
 8005668:	d10a      	bne.n	8005680 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800566a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800566e:	f383 8811 	msr	BASEPRI, r3
 8005672:	f3bf 8f6f 	isb	sy
 8005676:	f3bf 8f4f 	dsb	sy
 800567a:	61fb      	str	r3, [r7, #28]
}
 800567c:	bf00      	nop
 800567e:	e7fe      	b.n	800567e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005686:	6850      	ldr	r0, [r2, #4]
 8005688:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800568a:	6892      	ldr	r2, [r2, #8]
 800568c:	4611      	mov	r1, r2
 800568e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2b00      	cmp	r3, #0
 8005694:	f2c0 80aa 	blt.w	80057ec <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800569c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800569e:	695b      	ldr	r3, [r3, #20]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d004      	beq.n	80056ae <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80056a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a6:	3304      	adds	r3, #4
 80056a8:	4618      	mov	r0, r3
 80056aa:	f7fd ff0d 	bl	80034c8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80056ae:	463b      	mov	r3, r7
 80056b0:	4618      	mov	r0, r3
 80056b2:	f7ff ff6b 	bl	800558c <prvSampleTimeNow>
 80056b6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2b09      	cmp	r3, #9
 80056bc:	f200 8097 	bhi.w	80057ee <prvProcessReceivedCommands+0x19e>
 80056c0:	a201      	add	r2, pc, #4	; (adr r2, 80056c8 <prvProcessReceivedCommands+0x78>)
 80056c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c6:	bf00      	nop
 80056c8:	080056f1 	.word	0x080056f1
 80056cc:	080056f1 	.word	0x080056f1
 80056d0:	080056f1 	.word	0x080056f1
 80056d4:	08005765 	.word	0x08005765
 80056d8:	08005779 	.word	0x08005779
 80056dc:	080057c3 	.word	0x080057c3
 80056e0:	080056f1 	.word	0x080056f1
 80056e4:	080056f1 	.word	0x080056f1
 80056e8:	08005765 	.word	0x08005765
 80056ec:	08005779 	.word	0x08005779
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80056f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056f6:	f043 0301 	orr.w	r3, r3, #1
 80056fa:	b2da      	uxtb	r2, r3
 80056fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005702:	68ba      	ldr	r2, [r7, #8]
 8005704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005706:	699b      	ldr	r3, [r3, #24]
 8005708:	18d1      	adds	r1, r2, r3
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800570e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005710:	f7ff ff5c 	bl	80055cc <prvInsertTimerInActiveList>
 8005714:	4603      	mov	r3, r0
 8005716:	2b00      	cmp	r3, #0
 8005718:	d069      	beq.n	80057ee <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800571a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571c:	6a1b      	ldr	r3, [r3, #32]
 800571e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005720:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005724:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005728:	f003 0304 	and.w	r3, r3, #4
 800572c:	2b00      	cmp	r3, #0
 800572e:	d05e      	beq.n	80057ee <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005730:	68ba      	ldr	r2, [r7, #8]
 8005732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	441a      	add	r2, r3
 8005738:	2300      	movs	r3, #0
 800573a:	9300      	str	r3, [sp, #0]
 800573c:	2300      	movs	r3, #0
 800573e:	2100      	movs	r1, #0
 8005740:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005742:	f7ff fe05 	bl	8005350 <xTimerGenericCommand>
 8005746:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005748:	6a3b      	ldr	r3, [r7, #32]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d14f      	bne.n	80057ee <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800574e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005752:	f383 8811 	msr	BASEPRI, r3
 8005756:	f3bf 8f6f 	isb	sy
 800575a:	f3bf 8f4f 	dsb	sy
 800575e:	61bb      	str	r3, [r7, #24]
}
 8005760:	bf00      	nop
 8005762:	e7fe      	b.n	8005762 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005766:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800576a:	f023 0301 	bic.w	r3, r3, #1
 800576e:	b2da      	uxtb	r2, r3
 8005770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005772:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005776:	e03a      	b.n	80057ee <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800577a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800577e:	f043 0301 	orr.w	r3, r3, #1
 8005782:	b2da      	uxtb	r2, r3
 8005784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005786:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800578a:	68ba      	ldr	r2, [r7, #8]
 800578c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800578e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005792:	699b      	ldr	r3, [r3, #24]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d10a      	bne.n	80057ae <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800579c:	f383 8811 	msr	BASEPRI, r3
 80057a0:	f3bf 8f6f 	isb	sy
 80057a4:	f3bf 8f4f 	dsb	sy
 80057a8:	617b      	str	r3, [r7, #20]
}
 80057aa:	bf00      	nop
 80057ac:	e7fe      	b.n	80057ac <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80057ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b0:	699a      	ldr	r2, [r3, #24]
 80057b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b4:	18d1      	adds	r1, r2, r3
 80057b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057bc:	f7ff ff06 	bl	80055cc <prvInsertTimerInActiveList>
					break;
 80057c0:	e015      	b.n	80057ee <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80057c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057c8:	f003 0302 	and.w	r3, r3, #2
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d103      	bne.n	80057d8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80057d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057d2:	f000 fbdd 	bl	8005f90 <vPortFree>
 80057d6:	e00a      	b.n	80057ee <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80057d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057de:	f023 0301 	bic.w	r3, r3, #1
 80057e2:	b2da      	uxtb	r2, r3
 80057e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80057ea:	e000      	b.n	80057ee <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80057ec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80057ee:	4b08      	ldr	r3, [pc, #32]	; (8005810 <prvProcessReceivedCommands+0x1c0>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	1d39      	adds	r1, r7, #4
 80057f4:	2200      	movs	r2, #0
 80057f6:	4618      	mov	r0, r3
 80057f8:	f7fe f9f4 	bl	8003be4 <xQueueReceive>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	f47f af2a 	bne.w	8005658 <prvProcessReceivedCommands+0x8>
	}
}
 8005804:	bf00      	nop
 8005806:	bf00      	nop
 8005808:	3730      	adds	r7, #48	; 0x30
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
 800580e:	bf00      	nop
 8005810:	20000c28 	.word	0x20000c28

08005814 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b088      	sub	sp, #32
 8005818:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800581a:	e048      	b.n	80058ae <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800581c:	4b2d      	ldr	r3, [pc, #180]	; (80058d4 <prvSwitchTimerLists+0xc0>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005826:	4b2b      	ldr	r3, [pc, #172]	; (80058d4 <prvSwitchTimerLists+0xc0>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	3304      	adds	r3, #4
 8005834:	4618      	mov	r0, r3
 8005836:	f7fd fe47 	bl	80034c8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6a1b      	ldr	r3, [r3, #32]
 800583e:	68f8      	ldr	r0, [r7, #12]
 8005840:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005848:	f003 0304 	and.w	r3, r3, #4
 800584c:	2b00      	cmp	r3, #0
 800584e:	d02e      	beq.n	80058ae <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	699b      	ldr	r3, [r3, #24]
 8005854:	693a      	ldr	r2, [r7, #16]
 8005856:	4413      	add	r3, r2
 8005858:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800585a:	68ba      	ldr	r2, [r7, #8]
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	429a      	cmp	r2, r3
 8005860:	d90e      	bls.n	8005880 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	68ba      	ldr	r2, [r7, #8]
 8005866:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	68fa      	ldr	r2, [r7, #12]
 800586c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800586e:	4b19      	ldr	r3, [pc, #100]	; (80058d4 <prvSwitchTimerLists+0xc0>)
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	3304      	adds	r3, #4
 8005876:	4619      	mov	r1, r3
 8005878:	4610      	mov	r0, r2
 800587a:	f7fd fdec 	bl	8003456 <vListInsert>
 800587e:	e016      	b.n	80058ae <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005880:	2300      	movs	r3, #0
 8005882:	9300      	str	r3, [sp, #0]
 8005884:	2300      	movs	r3, #0
 8005886:	693a      	ldr	r2, [r7, #16]
 8005888:	2100      	movs	r1, #0
 800588a:	68f8      	ldr	r0, [r7, #12]
 800588c:	f7ff fd60 	bl	8005350 <xTimerGenericCommand>
 8005890:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d10a      	bne.n	80058ae <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800589c:	f383 8811 	msr	BASEPRI, r3
 80058a0:	f3bf 8f6f 	isb	sy
 80058a4:	f3bf 8f4f 	dsb	sy
 80058a8:	603b      	str	r3, [r7, #0]
}
 80058aa:	bf00      	nop
 80058ac:	e7fe      	b.n	80058ac <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80058ae:	4b09      	ldr	r3, [pc, #36]	; (80058d4 <prvSwitchTimerLists+0xc0>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d1b1      	bne.n	800581c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80058b8:	4b06      	ldr	r3, [pc, #24]	; (80058d4 <prvSwitchTimerLists+0xc0>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80058be:	4b06      	ldr	r3, [pc, #24]	; (80058d8 <prvSwitchTimerLists+0xc4>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a04      	ldr	r2, [pc, #16]	; (80058d4 <prvSwitchTimerLists+0xc0>)
 80058c4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80058c6:	4a04      	ldr	r2, [pc, #16]	; (80058d8 <prvSwitchTimerLists+0xc4>)
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	6013      	str	r3, [r2, #0]
}
 80058cc:	bf00      	nop
 80058ce:	3718      	adds	r7, #24
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}
 80058d4:	20000c20 	.word	0x20000c20
 80058d8:	20000c24 	.word	0x20000c24

080058dc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b082      	sub	sp, #8
 80058e0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80058e2:	f000 f967 	bl	8005bb4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80058e6:	4b15      	ldr	r3, [pc, #84]	; (800593c <prvCheckForValidListAndQueue+0x60>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d120      	bne.n	8005930 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80058ee:	4814      	ldr	r0, [pc, #80]	; (8005940 <prvCheckForValidListAndQueue+0x64>)
 80058f0:	f7fd fd60 	bl	80033b4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80058f4:	4813      	ldr	r0, [pc, #76]	; (8005944 <prvCheckForValidListAndQueue+0x68>)
 80058f6:	f7fd fd5d 	bl	80033b4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80058fa:	4b13      	ldr	r3, [pc, #76]	; (8005948 <prvCheckForValidListAndQueue+0x6c>)
 80058fc:	4a10      	ldr	r2, [pc, #64]	; (8005940 <prvCheckForValidListAndQueue+0x64>)
 80058fe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005900:	4b12      	ldr	r3, [pc, #72]	; (800594c <prvCheckForValidListAndQueue+0x70>)
 8005902:	4a10      	ldr	r2, [pc, #64]	; (8005944 <prvCheckForValidListAndQueue+0x68>)
 8005904:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005906:	2300      	movs	r3, #0
 8005908:	9300      	str	r3, [sp, #0]
 800590a:	4b11      	ldr	r3, [pc, #68]	; (8005950 <prvCheckForValidListAndQueue+0x74>)
 800590c:	4a11      	ldr	r2, [pc, #68]	; (8005954 <prvCheckForValidListAndQueue+0x78>)
 800590e:	2110      	movs	r1, #16
 8005910:	200a      	movs	r0, #10
 8005912:	f7fd fe6b 	bl	80035ec <xQueueGenericCreateStatic>
 8005916:	4603      	mov	r3, r0
 8005918:	4a08      	ldr	r2, [pc, #32]	; (800593c <prvCheckForValidListAndQueue+0x60>)
 800591a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800591c:	4b07      	ldr	r3, [pc, #28]	; (800593c <prvCheckForValidListAndQueue+0x60>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d005      	beq.n	8005930 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005924:	4b05      	ldr	r3, [pc, #20]	; (800593c <prvCheckForValidListAndQueue+0x60>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	490b      	ldr	r1, [pc, #44]	; (8005958 <prvCheckForValidListAndQueue+0x7c>)
 800592a:	4618      	mov	r0, r3
 800592c:	f7fe fc6e 	bl	800420c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005930:	f000 f970 	bl	8005c14 <vPortExitCritical>
}
 8005934:	bf00      	nop
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	20000c28 	.word	0x20000c28
 8005940:	20000bf8 	.word	0x20000bf8
 8005944:	20000c0c 	.word	0x20000c0c
 8005948:	20000c20 	.word	0x20000c20
 800594c:	20000c24 	.word	0x20000c24
 8005950:	20000cd4 	.word	0x20000cd4
 8005954:	20000c34 	.word	0x20000c34
 8005958:	08006b34 	.word	0x08006b34

0800595c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800595c:	b480      	push	{r7}
 800595e:	b085      	sub	sp, #20
 8005960:	af00      	add	r7, sp, #0
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	60b9      	str	r1, [r7, #8]
 8005966:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	3b04      	subs	r3, #4
 800596c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005974:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	3b04      	subs	r3, #4
 800597a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	f023 0201 	bic.w	r2, r3, #1
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	3b04      	subs	r3, #4
 800598a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800598c:	4a0c      	ldr	r2, [pc, #48]	; (80059c0 <pxPortInitialiseStack+0x64>)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	3b14      	subs	r3, #20
 8005996:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	3b04      	subs	r3, #4
 80059a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f06f 0202 	mvn.w	r2, #2
 80059aa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	3b20      	subs	r3, #32
 80059b0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80059b2:	68fb      	ldr	r3, [r7, #12]
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3714      	adds	r7, #20
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr
 80059c0:	080059c5 	.word	0x080059c5

080059c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80059c4:	b480      	push	{r7}
 80059c6:	b085      	sub	sp, #20
 80059c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80059ca:	2300      	movs	r3, #0
 80059cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80059ce:	4b12      	ldr	r3, [pc, #72]	; (8005a18 <prvTaskExitError+0x54>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059d6:	d00a      	beq.n	80059ee <prvTaskExitError+0x2a>
	__asm volatile
 80059d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059dc:	f383 8811 	msr	BASEPRI, r3
 80059e0:	f3bf 8f6f 	isb	sy
 80059e4:	f3bf 8f4f 	dsb	sy
 80059e8:	60fb      	str	r3, [r7, #12]
}
 80059ea:	bf00      	nop
 80059ec:	e7fe      	b.n	80059ec <prvTaskExitError+0x28>
	__asm volatile
 80059ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f2:	f383 8811 	msr	BASEPRI, r3
 80059f6:	f3bf 8f6f 	isb	sy
 80059fa:	f3bf 8f4f 	dsb	sy
 80059fe:	60bb      	str	r3, [r7, #8]
}
 8005a00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005a02:	bf00      	nop
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d0fc      	beq.n	8005a04 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005a0a:	bf00      	nop
 8005a0c:	bf00      	nop
 8005a0e:	3714      	adds	r7, #20
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr
 8005a18:	2000000c 	.word	0x2000000c
 8005a1c:	00000000 	.word	0x00000000

08005a20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005a20:	4b07      	ldr	r3, [pc, #28]	; (8005a40 <pxCurrentTCBConst2>)
 8005a22:	6819      	ldr	r1, [r3, #0]
 8005a24:	6808      	ldr	r0, [r1, #0]
 8005a26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a2a:	f380 8809 	msr	PSP, r0
 8005a2e:	f3bf 8f6f 	isb	sy
 8005a32:	f04f 0000 	mov.w	r0, #0
 8005a36:	f380 8811 	msr	BASEPRI, r0
 8005a3a:	4770      	bx	lr
 8005a3c:	f3af 8000 	nop.w

08005a40 <pxCurrentTCBConst2>:
 8005a40:	200006f8 	.word	0x200006f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005a44:	bf00      	nop
 8005a46:	bf00      	nop

08005a48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005a48:	4808      	ldr	r0, [pc, #32]	; (8005a6c <prvPortStartFirstTask+0x24>)
 8005a4a:	6800      	ldr	r0, [r0, #0]
 8005a4c:	6800      	ldr	r0, [r0, #0]
 8005a4e:	f380 8808 	msr	MSP, r0
 8005a52:	f04f 0000 	mov.w	r0, #0
 8005a56:	f380 8814 	msr	CONTROL, r0
 8005a5a:	b662      	cpsie	i
 8005a5c:	b661      	cpsie	f
 8005a5e:	f3bf 8f4f 	dsb	sy
 8005a62:	f3bf 8f6f 	isb	sy
 8005a66:	df00      	svc	0
 8005a68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005a6a:	bf00      	nop
 8005a6c:	e000ed08 	.word	0xe000ed08

08005a70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b086      	sub	sp, #24
 8005a74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005a76:	4b46      	ldr	r3, [pc, #280]	; (8005b90 <xPortStartScheduler+0x120>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a46      	ldr	r2, [pc, #280]	; (8005b94 <xPortStartScheduler+0x124>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d10a      	bne.n	8005a96 <xPortStartScheduler+0x26>
	__asm volatile
 8005a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a84:	f383 8811 	msr	BASEPRI, r3
 8005a88:	f3bf 8f6f 	isb	sy
 8005a8c:	f3bf 8f4f 	dsb	sy
 8005a90:	613b      	str	r3, [r7, #16]
}
 8005a92:	bf00      	nop
 8005a94:	e7fe      	b.n	8005a94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005a96:	4b3e      	ldr	r3, [pc, #248]	; (8005b90 <xPortStartScheduler+0x120>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a3f      	ldr	r2, [pc, #252]	; (8005b98 <xPortStartScheduler+0x128>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d10a      	bne.n	8005ab6 <xPortStartScheduler+0x46>
	__asm volatile
 8005aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa4:	f383 8811 	msr	BASEPRI, r3
 8005aa8:	f3bf 8f6f 	isb	sy
 8005aac:	f3bf 8f4f 	dsb	sy
 8005ab0:	60fb      	str	r3, [r7, #12]
}
 8005ab2:	bf00      	nop
 8005ab4:	e7fe      	b.n	8005ab4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005ab6:	4b39      	ldr	r3, [pc, #228]	; (8005b9c <xPortStartScheduler+0x12c>)
 8005ab8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	22ff      	movs	r2, #255	; 0xff
 8005ac6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005ad0:	78fb      	ldrb	r3, [r7, #3]
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005ad8:	b2da      	uxtb	r2, r3
 8005ada:	4b31      	ldr	r3, [pc, #196]	; (8005ba0 <xPortStartScheduler+0x130>)
 8005adc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005ade:	4b31      	ldr	r3, [pc, #196]	; (8005ba4 <xPortStartScheduler+0x134>)
 8005ae0:	2207      	movs	r2, #7
 8005ae2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005ae4:	e009      	b.n	8005afa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005ae6:	4b2f      	ldr	r3, [pc, #188]	; (8005ba4 <xPortStartScheduler+0x134>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	3b01      	subs	r3, #1
 8005aec:	4a2d      	ldr	r2, [pc, #180]	; (8005ba4 <xPortStartScheduler+0x134>)
 8005aee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005af0:	78fb      	ldrb	r3, [r7, #3]
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	005b      	lsls	r3, r3, #1
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005afa:	78fb      	ldrb	r3, [r7, #3]
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b02:	2b80      	cmp	r3, #128	; 0x80
 8005b04:	d0ef      	beq.n	8005ae6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005b06:	4b27      	ldr	r3, [pc, #156]	; (8005ba4 <xPortStartScheduler+0x134>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f1c3 0307 	rsb	r3, r3, #7
 8005b0e:	2b04      	cmp	r3, #4
 8005b10:	d00a      	beq.n	8005b28 <xPortStartScheduler+0xb8>
	__asm volatile
 8005b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b16:	f383 8811 	msr	BASEPRI, r3
 8005b1a:	f3bf 8f6f 	isb	sy
 8005b1e:	f3bf 8f4f 	dsb	sy
 8005b22:	60bb      	str	r3, [r7, #8]
}
 8005b24:	bf00      	nop
 8005b26:	e7fe      	b.n	8005b26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005b28:	4b1e      	ldr	r3, [pc, #120]	; (8005ba4 <xPortStartScheduler+0x134>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	021b      	lsls	r3, r3, #8
 8005b2e:	4a1d      	ldr	r2, [pc, #116]	; (8005ba4 <xPortStartScheduler+0x134>)
 8005b30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005b32:	4b1c      	ldr	r3, [pc, #112]	; (8005ba4 <xPortStartScheduler+0x134>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b3a:	4a1a      	ldr	r2, [pc, #104]	; (8005ba4 <xPortStartScheduler+0x134>)
 8005b3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	b2da      	uxtb	r2, r3
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005b46:	4b18      	ldr	r3, [pc, #96]	; (8005ba8 <xPortStartScheduler+0x138>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a17      	ldr	r2, [pc, #92]	; (8005ba8 <xPortStartScheduler+0x138>)
 8005b4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005b50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005b52:	4b15      	ldr	r3, [pc, #84]	; (8005ba8 <xPortStartScheduler+0x138>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a14      	ldr	r2, [pc, #80]	; (8005ba8 <xPortStartScheduler+0x138>)
 8005b58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005b5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005b5e:	f000 f8dd 	bl	8005d1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005b62:	4b12      	ldr	r3, [pc, #72]	; (8005bac <xPortStartScheduler+0x13c>)
 8005b64:	2200      	movs	r2, #0
 8005b66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005b68:	f000 f8fc 	bl	8005d64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005b6c:	4b10      	ldr	r3, [pc, #64]	; (8005bb0 <xPortStartScheduler+0x140>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a0f      	ldr	r2, [pc, #60]	; (8005bb0 <xPortStartScheduler+0x140>)
 8005b72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005b76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005b78:	f7ff ff66 	bl	8005a48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005b7c:	f7fe ff56 	bl	8004a2c <vTaskSwitchContext>
	prvTaskExitError();
 8005b80:	f7ff ff20 	bl	80059c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005b84:	2300      	movs	r3, #0
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3718      	adds	r7, #24
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	bf00      	nop
 8005b90:	e000ed00 	.word	0xe000ed00
 8005b94:	410fc271 	.word	0x410fc271
 8005b98:	410fc270 	.word	0x410fc270
 8005b9c:	e000e400 	.word	0xe000e400
 8005ba0:	20000d24 	.word	0x20000d24
 8005ba4:	20000d28 	.word	0x20000d28
 8005ba8:	e000ed20 	.word	0xe000ed20
 8005bac:	2000000c 	.word	0x2000000c
 8005bb0:	e000ef34 	.word	0xe000ef34

08005bb4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b083      	sub	sp, #12
 8005bb8:	af00      	add	r7, sp, #0
	__asm volatile
 8005bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bbe:	f383 8811 	msr	BASEPRI, r3
 8005bc2:	f3bf 8f6f 	isb	sy
 8005bc6:	f3bf 8f4f 	dsb	sy
 8005bca:	607b      	str	r3, [r7, #4]
}
 8005bcc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005bce:	4b0f      	ldr	r3, [pc, #60]	; (8005c0c <vPortEnterCritical+0x58>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	4a0d      	ldr	r2, [pc, #52]	; (8005c0c <vPortEnterCritical+0x58>)
 8005bd6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005bd8:	4b0c      	ldr	r3, [pc, #48]	; (8005c0c <vPortEnterCritical+0x58>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d10f      	bne.n	8005c00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005be0:	4b0b      	ldr	r3, [pc, #44]	; (8005c10 <vPortEnterCritical+0x5c>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d00a      	beq.n	8005c00 <vPortEnterCritical+0x4c>
	__asm volatile
 8005bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bee:	f383 8811 	msr	BASEPRI, r3
 8005bf2:	f3bf 8f6f 	isb	sy
 8005bf6:	f3bf 8f4f 	dsb	sy
 8005bfa:	603b      	str	r3, [r7, #0]
}
 8005bfc:	bf00      	nop
 8005bfe:	e7fe      	b.n	8005bfe <vPortEnterCritical+0x4a>
	}
}
 8005c00:	bf00      	nop
 8005c02:	370c      	adds	r7, #12
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr
 8005c0c:	2000000c 	.word	0x2000000c
 8005c10:	e000ed04 	.word	0xe000ed04

08005c14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005c1a:	4b12      	ldr	r3, [pc, #72]	; (8005c64 <vPortExitCritical+0x50>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d10a      	bne.n	8005c38 <vPortExitCritical+0x24>
	__asm volatile
 8005c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c26:	f383 8811 	msr	BASEPRI, r3
 8005c2a:	f3bf 8f6f 	isb	sy
 8005c2e:	f3bf 8f4f 	dsb	sy
 8005c32:	607b      	str	r3, [r7, #4]
}
 8005c34:	bf00      	nop
 8005c36:	e7fe      	b.n	8005c36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005c38:	4b0a      	ldr	r3, [pc, #40]	; (8005c64 <vPortExitCritical+0x50>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	3b01      	subs	r3, #1
 8005c3e:	4a09      	ldr	r2, [pc, #36]	; (8005c64 <vPortExitCritical+0x50>)
 8005c40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005c42:	4b08      	ldr	r3, [pc, #32]	; (8005c64 <vPortExitCritical+0x50>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d105      	bne.n	8005c56 <vPortExitCritical+0x42>
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	f383 8811 	msr	BASEPRI, r3
}
 8005c54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005c56:	bf00      	nop
 8005c58:	370c      	adds	r7, #12
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr
 8005c62:	bf00      	nop
 8005c64:	2000000c 	.word	0x2000000c
	...

08005c70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005c70:	f3ef 8009 	mrs	r0, PSP
 8005c74:	f3bf 8f6f 	isb	sy
 8005c78:	4b15      	ldr	r3, [pc, #84]	; (8005cd0 <pxCurrentTCBConst>)
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	f01e 0f10 	tst.w	lr, #16
 8005c80:	bf08      	it	eq
 8005c82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005c86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c8a:	6010      	str	r0, [r2, #0]
 8005c8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005c90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005c94:	f380 8811 	msr	BASEPRI, r0
 8005c98:	f3bf 8f4f 	dsb	sy
 8005c9c:	f3bf 8f6f 	isb	sy
 8005ca0:	f7fe fec4 	bl	8004a2c <vTaskSwitchContext>
 8005ca4:	f04f 0000 	mov.w	r0, #0
 8005ca8:	f380 8811 	msr	BASEPRI, r0
 8005cac:	bc09      	pop	{r0, r3}
 8005cae:	6819      	ldr	r1, [r3, #0]
 8005cb0:	6808      	ldr	r0, [r1, #0]
 8005cb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cb6:	f01e 0f10 	tst.w	lr, #16
 8005cba:	bf08      	it	eq
 8005cbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005cc0:	f380 8809 	msr	PSP, r0
 8005cc4:	f3bf 8f6f 	isb	sy
 8005cc8:	4770      	bx	lr
 8005cca:	bf00      	nop
 8005ccc:	f3af 8000 	nop.w

08005cd0 <pxCurrentTCBConst>:
 8005cd0:	200006f8 	.word	0x200006f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005cd4:	bf00      	nop
 8005cd6:	bf00      	nop

08005cd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b082      	sub	sp, #8
 8005cdc:	af00      	add	r7, sp, #0
	__asm volatile
 8005cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce2:	f383 8811 	msr	BASEPRI, r3
 8005ce6:	f3bf 8f6f 	isb	sy
 8005cea:	f3bf 8f4f 	dsb	sy
 8005cee:	607b      	str	r3, [r7, #4]
}
 8005cf0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005cf2:	f7fe fde1 	bl	80048b8 <xTaskIncrementTick>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d003      	beq.n	8005d04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005cfc:	4b06      	ldr	r3, [pc, #24]	; (8005d18 <xPortSysTickHandler+0x40>)
 8005cfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d02:	601a      	str	r2, [r3, #0]
 8005d04:	2300      	movs	r3, #0
 8005d06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	f383 8811 	msr	BASEPRI, r3
}
 8005d0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005d10:	bf00      	nop
 8005d12:	3708      	adds	r7, #8
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	e000ed04 	.word	0xe000ed04

08005d1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005d20:	4b0b      	ldr	r3, [pc, #44]	; (8005d50 <vPortSetupTimerInterrupt+0x34>)
 8005d22:	2200      	movs	r2, #0
 8005d24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005d26:	4b0b      	ldr	r3, [pc, #44]	; (8005d54 <vPortSetupTimerInterrupt+0x38>)
 8005d28:	2200      	movs	r2, #0
 8005d2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005d2c:	4b0a      	ldr	r3, [pc, #40]	; (8005d58 <vPortSetupTimerInterrupt+0x3c>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a0a      	ldr	r2, [pc, #40]	; (8005d5c <vPortSetupTimerInterrupt+0x40>)
 8005d32:	fba2 2303 	umull	r2, r3, r2, r3
 8005d36:	099b      	lsrs	r3, r3, #6
 8005d38:	4a09      	ldr	r2, [pc, #36]	; (8005d60 <vPortSetupTimerInterrupt+0x44>)
 8005d3a:	3b01      	subs	r3, #1
 8005d3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005d3e:	4b04      	ldr	r3, [pc, #16]	; (8005d50 <vPortSetupTimerInterrupt+0x34>)
 8005d40:	2207      	movs	r2, #7
 8005d42:	601a      	str	r2, [r3, #0]
}
 8005d44:	bf00      	nop
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr
 8005d4e:	bf00      	nop
 8005d50:	e000e010 	.word	0xe000e010
 8005d54:	e000e018 	.word	0xe000e018
 8005d58:	20000000 	.word	0x20000000
 8005d5c:	10624dd3 	.word	0x10624dd3
 8005d60:	e000e014 	.word	0xe000e014

08005d64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005d64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005d74 <vPortEnableVFP+0x10>
 8005d68:	6801      	ldr	r1, [r0, #0]
 8005d6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005d6e:	6001      	str	r1, [r0, #0]
 8005d70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005d72:	bf00      	nop
 8005d74:	e000ed88 	.word	0xe000ed88

08005d78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005d78:	b480      	push	{r7}
 8005d7a:	b085      	sub	sp, #20
 8005d7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005d7e:	f3ef 8305 	mrs	r3, IPSR
 8005d82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2b0f      	cmp	r3, #15
 8005d88:	d914      	bls.n	8005db4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005d8a:	4a17      	ldr	r2, [pc, #92]	; (8005de8 <vPortValidateInterruptPriority+0x70>)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	4413      	add	r3, r2
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005d94:	4b15      	ldr	r3, [pc, #84]	; (8005dec <vPortValidateInterruptPriority+0x74>)
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	7afa      	ldrb	r2, [r7, #11]
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d20a      	bcs.n	8005db4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da2:	f383 8811 	msr	BASEPRI, r3
 8005da6:	f3bf 8f6f 	isb	sy
 8005daa:	f3bf 8f4f 	dsb	sy
 8005dae:	607b      	str	r3, [r7, #4]
}
 8005db0:	bf00      	nop
 8005db2:	e7fe      	b.n	8005db2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005db4:	4b0e      	ldr	r3, [pc, #56]	; (8005df0 <vPortValidateInterruptPriority+0x78>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005dbc:	4b0d      	ldr	r3, [pc, #52]	; (8005df4 <vPortValidateInterruptPriority+0x7c>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d90a      	bls.n	8005dda <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc8:	f383 8811 	msr	BASEPRI, r3
 8005dcc:	f3bf 8f6f 	isb	sy
 8005dd0:	f3bf 8f4f 	dsb	sy
 8005dd4:	603b      	str	r3, [r7, #0]
}
 8005dd6:	bf00      	nop
 8005dd8:	e7fe      	b.n	8005dd8 <vPortValidateInterruptPriority+0x60>
	}
 8005dda:	bf00      	nop
 8005ddc:	3714      	adds	r7, #20
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr
 8005de6:	bf00      	nop
 8005de8:	e000e3f0 	.word	0xe000e3f0
 8005dec:	20000d24 	.word	0x20000d24
 8005df0:	e000ed0c 	.word	0xe000ed0c
 8005df4:	20000d28 	.word	0x20000d28

08005df8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b08a      	sub	sp, #40	; 0x28
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005e00:	2300      	movs	r3, #0
 8005e02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005e04:	f7fe fc9c 	bl	8004740 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005e08:	4b5b      	ldr	r3, [pc, #364]	; (8005f78 <pvPortMalloc+0x180>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d101      	bne.n	8005e14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005e10:	f000 f920 	bl	8006054 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005e14:	4b59      	ldr	r3, [pc, #356]	; (8005f7c <pvPortMalloc+0x184>)
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	4013      	ands	r3, r2
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	f040 8093 	bne.w	8005f48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d01d      	beq.n	8005e64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005e28:	2208      	movs	r2, #8
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f003 0307 	and.w	r3, r3, #7
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d014      	beq.n	8005e64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f023 0307 	bic.w	r3, r3, #7
 8005e40:	3308      	adds	r3, #8
 8005e42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f003 0307 	and.w	r3, r3, #7
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d00a      	beq.n	8005e64 <pvPortMalloc+0x6c>
	__asm volatile
 8005e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e52:	f383 8811 	msr	BASEPRI, r3
 8005e56:	f3bf 8f6f 	isb	sy
 8005e5a:	f3bf 8f4f 	dsb	sy
 8005e5e:	617b      	str	r3, [r7, #20]
}
 8005e60:	bf00      	nop
 8005e62:	e7fe      	b.n	8005e62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d06e      	beq.n	8005f48 <pvPortMalloc+0x150>
 8005e6a:	4b45      	ldr	r3, [pc, #276]	; (8005f80 <pvPortMalloc+0x188>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d869      	bhi.n	8005f48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005e74:	4b43      	ldr	r3, [pc, #268]	; (8005f84 <pvPortMalloc+0x18c>)
 8005e76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005e78:	4b42      	ldr	r3, [pc, #264]	; (8005f84 <pvPortMalloc+0x18c>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e7e:	e004      	b.n	8005e8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d903      	bls.n	8005e9c <pvPortMalloc+0xa4>
 8005e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d1f1      	bne.n	8005e80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005e9c:	4b36      	ldr	r3, [pc, #216]	; (8005f78 <pvPortMalloc+0x180>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d050      	beq.n	8005f48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005ea6:	6a3b      	ldr	r3, [r7, #32]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	2208      	movs	r2, #8
 8005eac:	4413      	add	r3, r2
 8005eae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	6a3b      	ldr	r3, [r7, #32]
 8005eb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eba:	685a      	ldr	r2, [r3, #4]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	1ad2      	subs	r2, r2, r3
 8005ec0:	2308      	movs	r3, #8
 8005ec2:	005b      	lsls	r3, r3, #1
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d91f      	bls.n	8005f08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005ec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4413      	add	r3, r2
 8005ece:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ed0:	69bb      	ldr	r3, [r7, #24]
 8005ed2:	f003 0307 	and.w	r3, r3, #7
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d00a      	beq.n	8005ef0 <pvPortMalloc+0xf8>
	__asm volatile
 8005eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ede:	f383 8811 	msr	BASEPRI, r3
 8005ee2:	f3bf 8f6f 	isb	sy
 8005ee6:	f3bf 8f4f 	dsb	sy
 8005eea:	613b      	str	r3, [r7, #16]
}
 8005eec:	bf00      	nop
 8005eee:	e7fe      	b.n	8005eee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef2:	685a      	ldr	r2, [r3, #4]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	1ad2      	subs	r2, r2, r3
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005f02:	69b8      	ldr	r0, [r7, #24]
 8005f04:	f000 f908 	bl	8006118 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005f08:	4b1d      	ldr	r3, [pc, #116]	; (8005f80 <pvPortMalloc+0x188>)
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	1ad3      	subs	r3, r2, r3
 8005f12:	4a1b      	ldr	r2, [pc, #108]	; (8005f80 <pvPortMalloc+0x188>)
 8005f14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005f16:	4b1a      	ldr	r3, [pc, #104]	; (8005f80 <pvPortMalloc+0x188>)
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	4b1b      	ldr	r3, [pc, #108]	; (8005f88 <pvPortMalloc+0x190>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d203      	bcs.n	8005f2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005f22:	4b17      	ldr	r3, [pc, #92]	; (8005f80 <pvPortMalloc+0x188>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a18      	ldr	r2, [pc, #96]	; (8005f88 <pvPortMalloc+0x190>)
 8005f28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2c:	685a      	ldr	r2, [r3, #4]
 8005f2e:	4b13      	ldr	r3, [pc, #76]	; (8005f7c <pvPortMalloc+0x184>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	431a      	orrs	r2, r3
 8005f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005f3e:	4b13      	ldr	r3, [pc, #76]	; (8005f8c <pvPortMalloc+0x194>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	3301      	adds	r3, #1
 8005f44:	4a11      	ldr	r2, [pc, #68]	; (8005f8c <pvPortMalloc+0x194>)
 8005f46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005f48:	f7fe fc08 	bl	800475c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	f003 0307 	and.w	r3, r3, #7
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d00a      	beq.n	8005f6c <pvPortMalloc+0x174>
	__asm volatile
 8005f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f5a:	f383 8811 	msr	BASEPRI, r3
 8005f5e:	f3bf 8f6f 	isb	sy
 8005f62:	f3bf 8f4f 	dsb	sy
 8005f66:	60fb      	str	r3, [r7, #12]
}
 8005f68:	bf00      	nop
 8005f6a:	e7fe      	b.n	8005f6a <pvPortMalloc+0x172>
	return pvReturn;
 8005f6c:	69fb      	ldr	r3, [r7, #28]
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3728      	adds	r7, #40	; 0x28
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	bf00      	nop
 8005f78:	200018ec 	.word	0x200018ec
 8005f7c:	20001900 	.word	0x20001900
 8005f80:	200018f0 	.word	0x200018f0
 8005f84:	200018e4 	.word	0x200018e4
 8005f88:	200018f4 	.word	0x200018f4
 8005f8c:	200018f8 	.word	0x200018f8

08005f90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b086      	sub	sp, #24
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d04d      	beq.n	800603e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005fa2:	2308      	movs	r3, #8
 8005fa4:	425b      	negs	r3, r3
 8005fa6:	697a      	ldr	r2, [r7, #20]
 8005fa8:	4413      	add	r3, r2
 8005faa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	685a      	ldr	r2, [r3, #4]
 8005fb4:	4b24      	ldr	r3, [pc, #144]	; (8006048 <vPortFree+0xb8>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4013      	ands	r3, r2
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d10a      	bne.n	8005fd4 <vPortFree+0x44>
	__asm volatile
 8005fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc2:	f383 8811 	msr	BASEPRI, r3
 8005fc6:	f3bf 8f6f 	isb	sy
 8005fca:	f3bf 8f4f 	dsb	sy
 8005fce:	60fb      	str	r3, [r7, #12]
}
 8005fd0:	bf00      	nop
 8005fd2:	e7fe      	b.n	8005fd2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d00a      	beq.n	8005ff2 <vPortFree+0x62>
	__asm volatile
 8005fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe0:	f383 8811 	msr	BASEPRI, r3
 8005fe4:	f3bf 8f6f 	isb	sy
 8005fe8:	f3bf 8f4f 	dsb	sy
 8005fec:	60bb      	str	r3, [r7, #8]
}
 8005fee:	bf00      	nop
 8005ff0:	e7fe      	b.n	8005ff0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	685a      	ldr	r2, [r3, #4]
 8005ff6:	4b14      	ldr	r3, [pc, #80]	; (8006048 <vPortFree+0xb8>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d01e      	beq.n	800603e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d11a      	bne.n	800603e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	685a      	ldr	r2, [r3, #4]
 800600c:	4b0e      	ldr	r3, [pc, #56]	; (8006048 <vPortFree+0xb8>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	43db      	mvns	r3, r3
 8006012:	401a      	ands	r2, r3
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006018:	f7fe fb92 	bl	8004740 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	685a      	ldr	r2, [r3, #4]
 8006020:	4b0a      	ldr	r3, [pc, #40]	; (800604c <vPortFree+0xbc>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4413      	add	r3, r2
 8006026:	4a09      	ldr	r2, [pc, #36]	; (800604c <vPortFree+0xbc>)
 8006028:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800602a:	6938      	ldr	r0, [r7, #16]
 800602c:	f000 f874 	bl	8006118 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006030:	4b07      	ldr	r3, [pc, #28]	; (8006050 <vPortFree+0xc0>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	3301      	adds	r3, #1
 8006036:	4a06      	ldr	r2, [pc, #24]	; (8006050 <vPortFree+0xc0>)
 8006038:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800603a:	f7fe fb8f 	bl	800475c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800603e:	bf00      	nop
 8006040:	3718      	adds	r7, #24
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	20001900 	.word	0x20001900
 800604c:	200018f0 	.word	0x200018f0
 8006050:	200018fc 	.word	0x200018fc

08006054 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006054:	b480      	push	{r7}
 8006056:	b085      	sub	sp, #20
 8006058:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800605a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800605e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006060:	4b27      	ldr	r3, [pc, #156]	; (8006100 <prvHeapInit+0xac>)
 8006062:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f003 0307 	and.w	r3, r3, #7
 800606a:	2b00      	cmp	r3, #0
 800606c:	d00c      	beq.n	8006088 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	3307      	adds	r3, #7
 8006072:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f023 0307 	bic.w	r3, r3, #7
 800607a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800607c:	68ba      	ldr	r2, [r7, #8]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	4a1f      	ldr	r2, [pc, #124]	; (8006100 <prvHeapInit+0xac>)
 8006084:	4413      	add	r3, r2
 8006086:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800608c:	4a1d      	ldr	r2, [pc, #116]	; (8006104 <prvHeapInit+0xb0>)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006092:	4b1c      	ldr	r3, [pc, #112]	; (8006104 <prvHeapInit+0xb0>)
 8006094:	2200      	movs	r2, #0
 8006096:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	68ba      	ldr	r2, [r7, #8]
 800609c:	4413      	add	r3, r2
 800609e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80060a0:	2208      	movs	r2, #8
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	1a9b      	subs	r3, r3, r2
 80060a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f023 0307 	bic.w	r3, r3, #7
 80060ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	4a15      	ldr	r2, [pc, #84]	; (8006108 <prvHeapInit+0xb4>)
 80060b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80060b6:	4b14      	ldr	r3, [pc, #80]	; (8006108 <prvHeapInit+0xb4>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	2200      	movs	r2, #0
 80060bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80060be:	4b12      	ldr	r3, [pc, #72]	; (8006108 <prvHeapInit+0xb4>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	2200      	movs	r2, #0
 80060c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	68fa      	ldr	r2, [r7, #12]
 80060ce:	1ad2      	subs	r2, r2, r3
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80060d4:	4b0c      	ldr	r3, [pc, #48]	; (8006108 <prvHeapInit+0xb4>)
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	4a0a      	ldr	r2, [pc, #40]	; (800610c <prvHeapInit+0xb8>)
 80060e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	4a09      	ldr	r2, [pc, #36]	; (8006110 <prvHeapInit+0xbc>)
 80060ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80060ec:	4b09      	ldr	r3, [pc, #36]	; (8006114 <prvHeapInit+0xc0>)
 80060ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80060f2:	601a      	str	r2, [r3, #0]
}
 80060f4:	bf00      	nop
 80060f6:	3714      	adds	r7, #20
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr
 8006100:	20000d2c 	.word	0x20000d2c
 8006104:	200018e4 	.word	0x200018e4
 8006108:	200018ec 	.word	0x200018ec
 800610c:	200018f4 	.word	0x200018f4
 8006110:	200018f0 	.word	0x200018f0
 8006114:	20001900 	.word	0x20001900

08006118 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006118:	b480      	push	{r7}
 800611a:	b085      	sub	sp, #20
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006120:	4b28      	ldr	r3, [pc, #160]	; (80061c4 <prvInsertBlockIntoFreeList+0xac>)
 8006122:	60fb      	str	r3, [r7, #12]
 8006124:	e002      	b.n	800612c <prvInsertBlockIntoFreeList+0x14>
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	60fb      	str	r3, [r7, #12]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	429a      	cmp	r2, r3
 8006134:	d8f7      	bhi.n	8006126 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	68ba      	ldr	r2, [r7, #8]
 8006140:	4413      	add	r3, r2
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	429a      	cmp	r2, r3
 8006146:	d108      	bne.n	800615a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	685a      	ldr	r2, [r3, #4]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	441a      	add	r2, r3
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	68ba      	ldr	r2, [r7, #8]
 8006164:	441a      	add	r2, r3
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	429a      	cmp	r2, r3
 800616c:	d118      	bne.n	80061a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	4b15      	ldr	r3, [pc, #84]	; (80061c8 <prvInsertBlockIntoFreeList+0xb0>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	429a      	cmp	r2, r3
 8006178:	d00d      	beq.n	8006196 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	685a      	ldr	r2, [r3, #4]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	441a      	add	r2, r3
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	601a      	str	r2, [r3, #0]
 8006194:	e008      	b.n	80061a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006196:	4b0c      	ldr	r3, [pc, #48]	; (80061c8 <prvInsertBlockIntoFreeList+0xb0>)
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	601a      	str	r2, [r3, #0]
 800619e:	e003      	b.n	80061a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d002      	beq.n	80061b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80061b6:	bf00      	nop
 80061b8:	3714      	adds	r7, #20
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr
 80061c2:	bf00      	nop
 80061c4:	200018e4 	.word	0x200018e4
 80061c8:	200018ec 	.word	0x200018ec

080061cc <IIM42652_ReadRegister>:

SemaphoreHandle_t ImuIntSemaphore;	// Handler of semaphore that blocks the sensor reading function until the DRDY interrupt arrives.
uint8_t DRDY_IIMFlag = 0x00;		// Flags the occurrence of the DRDY interrupt from IIM42652.

HAL_StatusTypeDef IIM42652_ReadRegister( IIM42652 *dev, uint8_t reg, uint8_t *data )
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b088      	sub	sp, #32
 80061d0:	af04      	add	r7, sp, #16
 80061d2:	60f8      	str	r0, [r7, #12]
 80061d4:	460b      	mov	r3, r1
 80061d6:	607a      	str	r2, [r7, #4]
 80061d8:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Read( dev->i2cHandle, IIM42652_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6818      	ldr	r0, [r3, #0]
 80061de:	7afb      	ldrb	r3, [r7, #11]
 80061e0:	b29a      	uxth	r2, r3
 80061e2:	f04f 33ff 	mov.w	r3, #4294967295
 80061e6:	9302      	str	r3, [sp, #8]
 80061e8:	2301      	movs	r3, #1
 80061ea:	9301      	str	r3, [sp, #4]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	9300      	str	r3, [sp, #0]
 80061f0:	2301      	movs	r3, #1
 80061f2:	21d2      	movs	r1, #210	; 0xd2
 80061f4:	f7fb f9c6 	bl	8001584 <HAL_I2C_Mem_Read>
 80061f8:	4603      	mov	r3, r0
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3710      	adds	r7, #16
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}

08006202 <IIM42652_ReadMultipleRegisters>:


HAL_StatusTypeDef IIM42652_ReadMultipleRegisters( IIM42652 *dev, uint8_t reg, uint8_t *data, uint8_t length )
{
 8006202:	b580      	push	{r7, lr}
 8006204:	b088      	sub	sp, #32
 8006206:	af04      	add	r7, sp, #16
 8006208:	60f8      	str	r0, [r7, #12]
 800620a:	607a      	str	r2, [r7, #4]
 800620c:	461a      	mov	r2, r3
 800620e:	460b      	mov	r3, r1
 8006210:	72fb      	strb	r3, [r7, #11]
 8006212:	4613      	mov	r3, r2
 8006214:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read( dev->i2cHandle, IIM42652_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, length, HAL_MAX_DELAY);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	6818      	ldr	r0, [r3, #0]
 800621a:	7afb      	ldrb	r3, [r7, #11]
 800621c:	b29a      	uxth	r2, r3
 800621e:	7abb      	ldrb	r3, [r7, #10]
 8006220:	b29b      	uxth	r3, r3
 8006222:	f04f 31ff 	mov.w	r1, #4294967295
 8006226:	9102      	str	r1, [sp, #8]
 8006228:	9301      	str	r3, [sp, #4]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	9300      	str	r3, [sp, #0]
 800622e:	2301      	movs	r3, #1
 8006230:	21d2      	movs	r1, #210	; 0xd2
 8006232:	f7fb f9a7 	bl	8001584 <HAL_I2C_Mem_Read>
 8006236:	4603      	mov	r3, r0
}
 8006238:	4618      	mov	r0, r3
 800623a:	3710      	adds	r7, #16
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}

08006240 <IIM42652_WriteRegister>:


HAL_StatusTypeDef IIM42652_WriteRegister( IIM42652 *dev, uint8_t reg, uint8_t *data )
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b088      	sub	sp, #32
 8006244:	af04      	add	r7, sp, #16
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	460b      	mov	r3, r1
 800624a:	607a      	str	r2, [r7, #4]
 800624c:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Write( dev->i2cHandle, IIM42652_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6818      	ldr	r0, [r3, #0]
 8006252:	7afb      	ldrb	r3, [r7, #11]
 8006254:	b29a      	uxth	r2, r3
 8006256:	f04f 33ff 	mov.w	r3, #4294967295
 800625a:	9302      	str	r3, [sp, #8]
 800625c:	2301      	movs	r3, #1
 800625e:	9301      	str	r3, [sp, #4]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	9300      	str	r3, [sp, #0]
 8006264:	2301      	movs	r3, #1
 8006266:	21d2      	movs	r1, #210	; 0xd2
 8006268:	f7fb f878 	bl	800135c <HAL_I2C_Mem_Write>
 800626c:	4603      	mov	r3, r0
}
 800626e:	4618      	mov	r0, r3
 8006270:	3710      	adds	r7, #16
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}

08006276 <IIM42652_SoftReset>:


/* Function that performs a soft reset of device */
HAL_StatusTypeDef IIM42652_SoftReset( IIM42652 *dev )
{
 8006276:	b580      	push	{r7, lr}
 8006278:	b084      	sub	sp, #16
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef status;
	uint8_t config;

	/* Reads config register, enables reset bit and writes changes */
	status =  IIM42652_ReadRegister( dev, DEVICE_CONFIG_ADD, &config );
 800627e:	f107 030e 	add.w	r3, r7, #14
 8006282:	461a      	mov	r2, r3
 8006284:	2111      	movs	r1, #17
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f7ff ffa0 	bl	80061cc <IIM42652_ReadRegister>
 800628c:	4603      	mov	r3, r0
 800628e:	73fb      	strb	r3, [r7, #15]

	config |= 0x01;
 8006290:	7bbb      	ldrb	r3, [r7, #14]
 8006292:	f043 0301 	orr.w	r3, r3, #1
 8006296:	b2db      	uxtb	r3, r3
 8006298:	73bb      	strb	r3, [r7, #14]

	status |= IIM42652_WriteRegister( dev, DEVICE_CONFIG_ADD, &config );
 800629a:	f107 030e 	add.w	r3, r7, #14
 800629e:	461a      	mov	r2, r3
 80062a0:	2111      	movs	r1, #17
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f7ff ffcc 	bl	8006240 <IIM42652_WriteRegister>
 80062a8:	4603      	mov	r3, r0
 80062aa:	461a      	mov	r2, r3
 80062ac:	7bfb      	ldrb	r3, [r7, #15]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	73fb      	strb	r3, [r7, #15]

	/* Waits for reset */
	vTaskDelay( 5 / portTICK_PERIOD_MS );
 80062b2:	2005      	movs	r0, #5
 80062b4:	f7fe f9aa 	bl	800460c <vTaskDelay>

	return status;
 80062b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3710      	adds	r7, #16
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}

080062c2 <IIM42652_EnableGyro>:


/* Function enables gyroscope */
HAL_StatusTypeDef IIM42652_EnableGyro( IIM42652 *dev )
{
 80062c2:	b580      	push	{r7, lr}
 80062c4:	b084      	sub	sp, #16
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef status;
	uint8_t config;

	/* Reads config register, enables reset bit and writes changes */
	status =  IIM42652_ReadRegister( dev, PWR_MGMT0_ADD, &config );
 80062ca:	f107 030e 	add.w	r3, r7, #14
 80062ce:	461a      	mov	r2, r3
 80062d0:	214e      	movs	r1, #78	; 0x4e
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f7ff ff7a 	bl	80061cc <IIM42652_ReadRegister>
 80062d8:	4603      	mov	r3, r0
 80062da:	73fb      	strb	r3, [r7, #15]

	config |= IIM42652_SET_GYRO_TLOW_NOISE_MODE;
 80062dc:	7bbb      	ldrb	r3, [r7, #14]
 80062de:	f043 030c 	orr.w	r3, r3, #12
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	73bb      	strb	r3, [r7, #14]

	status |= IIM42652_WriteRegister( dev, PWR_MGMT0_ADD, &config );
 80062e6:	f107 030e 	add.w	r3, r7, #14
 80062ea:	461a      	mov	r2, r3
 80062ec:	214e      	movs	r1, #78	; 0x4e
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f7ff ffa6 	bl	8006240 <IIM42652_WriteRegister>
 80062f4:	4603      	mov	r3, r0
 80062f6:	461a      	mov	r2, r3
 80062f8:	7bfb      	ldrb	r3, [r7, #15]
 80062fa:	4313      	orrs	r3, r2
 80062fc:	73fb      	strb	r3, [r7, #15]

	/* Waits for gyroscope power on */
	vTaskDelay( 5 / portTICK_PERIOD_MS );
 80062fe:	2005      	movs	r0, #5
 8006300:	f7fe f984 	bl	800460c <vTaskDelay>

	return status;
 8006304:	7bfb      	ldrb	r3, [r7, #15]
}
 8006306:	4618      	mov	r0, r3
 8006308:	3710      	adds	r7, #16
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}

0800630e <IIM42652_EnableAccel>:


/* Function enables gyroscope */
HAL_StatusTypeDef IIM42652_EnableAccel( IIM42652 *dev )
{
 800630e:	b580      	push	{r7, lr}
 8006310:	b084      	sub	sp, #16
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef status;
	uint8_t config;

	/* Reads config register, enables reset bit and writes changes */
	status =  IIM42652_ReadRegister( dev, PWR_MGMT0_ADD, &config );
 8006316:	f107 030e 	add.w	r3, r7, #14
 800631a:	461a      	mov	r2, r3
 800631c:	214e      	movs	r1, #78	; 0x4e
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f7ff ff54 	bl	80061cc <IIM42652_ReadRegister>
 8006324:	4603      	mov	r3, r0
 8006326:	73fb      	strb	r3, [r7, #15]

	config |= IIM42652_SET_ACCEL_LOW_NOISE_MODE;
 8006328:	7bbb      	ldrb	r3, [r7, #14]
 800632a:	f043 0303 	orr.w	r3, r3, #3
 800632e:	b2db      	uxtb	r3, r3
 8006330:	73bb      	strb	r3, [r7, #14]

	status |= IIM42652_WriteRegister( dev, PWR_MGMT0_ADD, &config );
 8006332:	f107 030e 	add.w	r3, r7, #14
 8006336:	461a      	mov	r2, r3
 8006338:	214e      	movs	r1, #78	; 0x4e
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f7ff ff80 	bl	8006240 <IIM42652_WriteRegister>
 8006340:	4603      	mov	r3, r0
 8006342:	461a      	mov	r2, r3
 8006344:	7bfb      	ldrb	r3, [r7, #15]
 8006346:	4313      	orrs	r3, r2
 8006348:	73fb      	strb	r3, [r7, #15]

	/* Waits for accelerometer power on */
	vTaskDelay( 5 / portTICK_PERIOD_MS );
 800634a:	2005      	movs	r0, #5
 800634c:	f7fe f95e 	bl	800460c <vTaskDelay>

	return status;
 8006350:	7bfb      	ldrb	r3, [r7, #15]
}
 8006352:	4618      	mov	r0, r3
 8006354:	3710      	adds	r7, #16
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}

0800635a <IIM42652_setConfigGyro>:


/* Configures gyroscope parameters */
HAL_StatusTypeDef IIM42652_setConfigGyro( IIM42652 *dev, IIM42652_GYRO_CFG_t gyrCfg )
{
 800635a:	b580      	push	{r7, lr}
 800635c:	b086      	sub	sp, #24
 800635e:	af00      	add	r7, sp, #0
 8006360:	60f8      	str	r0, [r7, #12]
 8006362:	1d3b      	adds	r3, r7, #4
 8006364:	e883 0006 	stmia.w	r3, {r1, r2}
	uint8_t config = 0x00;
 8006368:	2300      	movs	r3, #0
 800636a:	75bb      	strb	r3, [r7, #22]
	HAL_StatusTypeDef status = HAL_OK;
 800636c:	2300      	movs	r3, #0
 800636e:	75fb      	strb	r3, [r7, #23]

	/* Writes gyroscope selected registers */

	config  = ( gyrCfg.gyro_fs_sel & ( BIT_MASK_BIT_2 | BIT_MASK_BIT_1 | BIT_MASK_BIT_0 ) ) << 5;
 8006370:	793b      	ldrb	r3, [r7, #4]
 8006372:	015b      	lsls	r3, r3, #5
 8006374:	b2db      	uxtb	r3, r3
 8006376:	75bb      	strb	r3, [r7, #22]
	config |=   gyrCfg.gyro_odr    & ( BIT_MASK_BIT_3 | BIT_MASK_BIT_2 | BIT_MASK_BIT_1 | BIT_MASK_BIT_0 );
 8006378:	797b      	ldrb	r3, [r7, #5]
 800637a:	b25b      	sxtb	r3, r3
 800637c:	f003 030f 	and.w	r3, r3, #15
 8006380:	b25a      	sxtb	r2, r3
 8006382:	7dbb      	ldrb	r3, [r7, #22]
 8006384:	b25b      	sxtb	r3, r3
 8006386:	4313      	orrs	r3, r2
 8006388:	b25b      	sxtb	r3, r3
 800638a:	b2db      	uxtb	r3, r3
 800638c:	75bb      	strb	r3, [r7, #22]

	status = IIM42652_WriteRegister( dev, GYRO_CONFIG0_ADD, &config );
 800638e:	f107 0316 	add.w	r3, r7, #22
 8006392:	461a      	mov	r2, r3
 8006394:	214f      	movs	r1, #79	; 0x4f
 8006396:	68f8      	ldr	r0, [r7, #12]
 8006398:	f7ff ff52 	bl	8006240 <IIM42652_WriteRegister>
 800639c:	4603      	mov	r3, r0
 800639e:	75fb      	strb	r3, [r7, #23]

	config  =  ( gyrCfg.gyro_ui_filt_ord  & ( BIT_MASK_BIT_1 | BIT_MASK_BIT_0 ) ) << 2;
 80063a0:	79bb      	ldrb	r3, [r7, #6]
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	f003 030c 	and.w	r3, r3, #12
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	75bb      	strb	r3, [r7, #22]
	config |=    gyrCfg.gyro_dec2_m2_ord  & ( BIT_MASK_BIT_1 | BIT_MASK_BIT_0 );
 80063ae:	79fb      	ldrb	r3, [r7, #7]
 80063b0:	b25b      	sxtb	r3, r3
 80063b2:	f003 0303 	and.w	r3, r3, #3
 80063b6:	b25a      	sxtb	r2, r3
 80063b8:	7dbb      	ldrb	r3, [r7, #22]
 80063ba:	b25b      	sxtb	r3, r3
 80063bc:	4313      	orrs	r3, r2
 80063be:	b25b      	sxtb	r3, r3
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	75bb      	strb	r3, [r7, #22]

	status |= IIM42652_WriteRegister( dev, GYRO_CONFIG1_ADD, &config );
 80063c4:	f107 0316 	add.w	r3, r7, #22
 80063c8:	461a      	mov	r2, r3
 80063ca:	2151      	movs	r1, #81	; 0x51
 80063cc:	68f8      	ldr	r0, [r7, #12]
 80063ce:	f7ff ff37 	bl	8006240 <IIM42652_WriteRegister>
 80063d2:	4603      	mov	r3, r0
 80063d4:	461a      	mov	r2, r3
 80063d6:	7dfb      	ldrb	r3, [r7, #23]
 80063d8:	4313      	orrs	r3, r2
 80063da:	75fb      	strb	r3, [r7, #23]


	status |=  IIM42652_ReadRegister( dev, GYR_ACC_CONFIG0_ADD, &config );
 80063dc:	f107 0316 	add.w	r3, r7, #22
 80063e0:	461a      	mov	r2, r3
 80063e2:	2152      	movs	r1, #82	; 0x52
 80063e4:	68f8      	ldr	r0, [r7, #12]
 80063e6:	f7ff fef1 	bl	80061cc <IIM42652_ReadRegister>
 80063ea:	4603      	mov	r3, r0
 80063ec:	461a      	mov	r2, r3
 80063ee:	7dfb      	ldrb	r3, [r7, #23]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	75fb      	strb	r3, [r7, #23]

	config |= gyrCfg.gyro_ui_filt_bw & ( BIT_MASK_BIT_3 | BIT_MASK_BIT_2 | BIT_MASK_BIT_1 | BIT_MASK_BIT_0 );
 80063f4:	7a3b      	ldrb	r3, [r7, #8]
 80063f6:	b25b      	sxtb	r3, r3
 80063f8:	f003 030f 	and.w	r3, r3, #15
 80063fc:	b25a      	sxtb	r2, r3
 80063fe:	7dbb      	ldrb	r3, [r7, #22]
 8006400:	b25b      	sxtb	r3, r3
 8006402:	4313      	orrs	r3, r2
 8006404:	b25b      	sxtb	r3, r3
 8006406:	b2db      	uxtb	r3, r3
 8006408:	75bb      	strb	r3, [r7, #22]

	status |= IIM42652_WriteRegister( dev, GYRO_CONFIG1_ADD, &config );
 800640a:	f107 0316 	add.w	r3, r7, #22
 800640e:	461a      	mov	r2, r3
 8006410:	2151      	movs	r1, #81	; 0x51
 8006412:	68f8      	ldr	r0, [r7, #12]
 8006414:	f7ff ff14 	bl	8006240 <IIM42652_WriteRegister>
 8006418:	4603      	mov	r3, r0
 800641a:	461a      	mov	r2, r3
 800641c:	7dfb      	ldrb	r3, [r7, #23]
 800641e:	4313      	orrs	r3, r2
 8006420:	75fb      	strb	r3, [r7, #23]


	return status;
 8006422:	7dfb      	ldrb	r3, [r7, #23]
}
 8006424:	4618      	mov	r0, r3
 8006426:	3718      	adds	r7, #24
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <IIM42652_setConfigAccel>:


/* Configure accelerometer parameters */
HAL_StatusTypeDef IIM42652_setConfigAccel( IIM42652 *dev, IIM42652_ACCL_CFG_t accCfg )
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b086      	sub	sp, #24
 8006430:	af00      	add	r7, sp, #0
 8006432:	60f8      	str	r0, [r7, #12]
 8006434:	1d3b      	adds	r3, r7, #4
 8006436:	e883 0006 	stmia.w	r3, {r1, r2}
	uint8_t config = 0x00;
 800643a:	2300      	movs	r3, #0
 800643c:	75bb      	strb	r3, [r7, #22]
	HAL_StatusTypeDef status = HAL_OK;
 800643e:	2300      	movs	r3, #0
 8006440:	75fb      	strb	r3, [r7, #23]

	/* Writes gyroscope selected registers */

	config  = ( accCfg.accel_fs_sel & ( BIT_MASK_BIT_2 | BIT_MASK_BIT_1 | BIT_MASK_BIT_0 ) ) << 5;
 8006442:	793b      	ldrb	r3, [r7, #4]
 8006444:	015b      	lsls	r3, r3, #5
 8006446:	b2db      	uxtb	r3, r3
 8006448:	75bb      	strb	r3, [r7, #22]
	config |=   accCfg.accel_odr    & ( BIT_MASK_BIT_3 | BIT_MASK_BIT_2 | BIT_MASK_BIT_1 | BIT_MASK_BIT_0 );
 800644a:	797b      	ldrb	r3, [r7, #5]
 800644c:	b25b      	sxtb	r3, r3
 800644e:	f003 030f 	and.w	r3, r3, #15
 8006452:	b25a      	sxtb	r2, r3
 8006454:	7dbb      	ldrb	r3, [r7, #22]
 8006456:	b25b      	sxtb	r3, r3
 8006458:	4313      	orrs	r3, r2
 800645a:	b25b      	sxtb	r3, r3
 800645c:	b2db      	uxtb	r3, r3
 800645e:	75bb      	strb	r3, [r7, #22]

	status |= IIM42652_WriteRegister( dev, ACCL_CONFIG0_ADD, &config );
 8006460:	f107 0316 	add.w	r3, r7, #22
 8006464:	461a      	mov	r2, r3
 8006466:	2150      	movs	r1, #80	; 0x50
 8006468:	68f8      	ldr	r0, [r7, #12]
 800646a:	f7ff fee9 	bl	8006240 <IIM42652_WriteRegister>
 800646e:	4603      	mov	r3, r0
 8006470:	461a      	mov	r2, r3
 8006472:	7dfb      	ldrb	r3, [r7, #23]
 8006474:	4313      	orrs	r3, r2
 8006476:	75fb      	strb	r3, [r7, #23]

	status |=  IIM42652_ReadRegister( dev, GYR_ACC_CONFIG0_ADD, &config );
 8006478:	f107 0316 	add.w	r3, r7, #22
 800647c:	461a      	mov	r2, r3
 800647e:	2152      	movs	r1, #82	; 0x52
 8006480:	68f8      	ldr	r0, [r7, #12]
 8006482:	f7ff fea3 	bl	80061cc <IIM42652_ReadRegister>
 8006486:	4603      	mov	r3, r0
 8006488:	461a      	mov	r2, r3
 800648a:	7dfb      	ldrb	r3, [r7, #23]
 800648c:	4313      	orrs	r3, r2
 800648e:	75fb      	strb	r3, [r7, #23]

	config |= ( accCfg.accel_ui_filt_bw & ( BIT_MASK_BIT_3 | BIT_MASK_BIT_2 | BIT_MASK_BIT_1 | BIT_MASK_BIT_0 ) ) << 4;
 8006490:	79bb      	ldrb	r3, [r7, #6]
 8006492:	011b      	lsls	r3, r3, #4
 8006494:	b25a      	sxtb	r2, r3
 8006496:	7dbb      	ldrb	r3, [r7, #22]
 8006498:	b25b      	sxtb	r3, r3
 800649a:	4313      	orrs	r3, r2
 800649c:	b25b      	sxtb	r3, r3
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	75bb      	strb	r3, [r7, #22]

	status |= IIM42652_WriteRegister( dev, GYR_ACC_CONFIG0_ADD, &config );
 80064a2:	f107 0316 	add.w	r3, r7, #22
 80064a6:	461a      	mov	r2, r3
 80064a8:	2152      	movs	r1, #82	; 0x52
 80064aa:	68f8      	ldr	r0, [r7, #12]
 80064ac:	f7ff fec8 	bl	8006240 <IIM42652_WriteRegister>
 80064b0:	4603      	mov	r3, r0
 80064b2:	461a      	mov	r2, r3
 80064b4:	7dfb      	ldrb	r3, [r7, #23]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	75fb      	strb	r3, [r7, #23]

	config  =  ( accCfg.accel_ui_filt_ord  & ( BIT_MASK_BIT_1 | BIT_MASK_BIT_0 ) ) << 3;
 80064ba:	79fb      	ldrb	r3, [r7, #7]
 80064bc:	00db      	lsls	r3, r3, #3
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	f003 0318 	and.w	r3, r3, #24
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	75bb      	strb	r3, [r7, #22]
	config |=  ( accCfg.accel_dec2_m2_ord  & ( BIT_MASK_BIT_1 | BIT_MASK_BIT_0 ) ) << 1;
 80064c8:	7a3b      	ldrb	r3, [r7, #8]
 80064ca:	005b      	lsls	r3, r3, #1
 80064cc:	b25b      	sxtb	r3, r3
 80064ce:	f003 0306 	and.w	r3, r3, #6
 80064d2:	b25a      	sxtb	r2, r3
 80064d4:	7dbb      	ldrb	r3, [r7, #22]
 80064d6:	b25b      	sxtb	r3, r3
 80064d8:	4313      	orrs	r3, r2
 80064da:	b25b      	sxtb	r3, r3
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	75bb      	strb	r3, [r7, #22]

	status |= IIM42652_WriteRegister( dev, ACCL_CONFIG1_ADD, &config );
 80064e0:	f107 0316 	add.w	r3, r7, #22
 80064e4:	461a      	mov	r2, r3
 80064e6:	2153      	movs	r1, #83	; 0x53
 80064e8:	68f8      	ldr	r0, [r7, #12]
 80064ea:	f7ff fea9 	bl	8006240 <IIM42652_WriteRegister>
 80064ee:	4603      	mov	r3, r0
 80064f0:	461a      	mov	r2, r3
 80064f2:	7dfb      	ldrb	r3, [r7, #23]
 80064f4:	4313      	orrs	r3, r2
 80064f6:	75fb      	strb	r3, [r7, #23]

	return status;
 80064f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3718      	adds	r7, #24
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}

08006502 <IIM42652_ConfigInterrupt>:


/* Configure interrupt parameters */
HAL_StatusTypeDef IIM42652_ConfigInterrupt( IIM42652 *dev )
{
 8006502:	b580      	push	{r7, lr}
 8006504:	b084      	sub	sp, #16
 8006506:	af00      	add	r7, sp, #0
 8006508:	6078      	str	r0, [r7, #4]
	uint8_t config = 0x00;
 800650a:	2300      	movs	r3, #0
 800650c:	73bb      	strb	r3, [r7, #14]
	HAL_StatusTypeDef status = HAL_OK;
 800650e:	2300      	movs	r3, #0
 8006510:	73fb      	strb	r3, [r7, #15]

	/* Implement interrupt configuration */
	//config = IIM42654_SET_INT1 | IIM42652_SET_INT_ACTIVE_HI | IIM42652_SET_INT2;
	config = 0x00;
 8006512:	2300      	movs	r3, #0
 8006514:	73bb      	strb	r3, [r7, #14]
	status = IIM42652_WriteRegister( dev, INT_CONFIG_ADD, &config );
 8006516:	f107 030e 	add.w	r3, r7, #14
 800651a:	461a      	mov	r2, r3
 800651c:	2114      	movs	r1, #20
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f7ff fe8e 	bl	8006240 <IIM42652_WriteRegister>
 8006524:	4603      	mov	r3, r0
 8006526:	73fb      	strb	r3, [r7, #15]

	config = IIM42652_SET_UI_DRDY_INT_CLEAR;
 8006528:	2320      	movs	r3, #32
 800652a:	73bb      	strb	r3, [r7, #14]
	status = IIM42652_WriteRegister( dev, INT_CONFIG0_ADD, &config );
 800652c:	f107 030e 	add.w	r3, r7, #14
 8006530:	461a      	mov	r2, r3
 8006532:	2163      	movs	r1, #99	; 0x63
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f7ff fe83 	bl	8006240 <IIM42652_WriteRegister>
 800653a:	4603      	mov	r3, r0
 800653c:	73fb      	strb	r3, [r7, #15]

	config = IIM42652_SET_UI_DRDY_INT1_EN;
 800653e:	2308      	movs	r3, #8
 8006540:	73bb      	strb	r3, [r7, #14]
	status = IIM42652_WriteRegister( dev, INT_SOURCE0_ADD, &config );
 8006542:	f107 030e 	add.w	r3, r7, #14
 8006546:	461a      	mov	r2, r3
 8006548:	2165      	movs	r1, #101	; 0x65
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f7ff fe78 	bl	8006240 <IIM42652_WriteRegister>
 8006550:	4603      	mov	r3, r0
 8006552:	73fb      	strb	r3, [r7, #15]

	return status;
 8006554:	7bfb      	ldrb	r3, [r7, #15]
}
 8006556:	4618      	mov	r0, r3
 8006558:	3710      	adds	r7, #16
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
	...

08006560 <IIM42652_Init>:


uint8_t IIM42652_Init( IIM42652 *dev, I2C_HandleTypeDef *i2cHandle )
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b088      	sub	sp, #32
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]

	IIM42652_ACCL_CFG_t ACC_CFG;
	IIM42652_GYRO_CFG_t GYR_CFG;

	/* Initialise structure parameters */
	dev->i2cHandle = i2cHandle;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	683a      	ldr	r2, [r7, #0]
 800656e:	601a      	str	r2, [r3, #0]

	dev->acc[0] = 0.0f;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2200      	movs	r2, #0
 8006574:	809a      	strh	r2, [r3, #4]
	dev->acc[1] = 0.0f;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	80da      	strh	r2, [r3, #6]
	dev->acc[2] = 0.0f;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2200      	movs	r2, #0
 8006580:	811a      	strh	r2, [r3, #8]

	dev->gyr[0] = 0.0f;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	815a      	strh	r2, [r3, #10]
	dev->gyr[1] = 0.0f;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	819a      	strh	r2, [r3, #12]
	dev->gyr[2] = 0.0f;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	81da      	strh	r2, [r3, #14]

	dev->temp_c = 0.0f;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f04f 0200 	mov.w	r2, #0
 800659a:	611a      	str	r2, [r3, #16]

	/* I2C transaction errors */
	uint8_t errNum = 0;
 800659c:	2300      	movs	r3, #0
 800659e:	77fb      	strb	r3, [r7, #31]
	HAL_StatusTypeDef status;

	/* Check for device ID */
	uint8_t regDataID;

	status = IIM42652_ReadRegister(dev, WHO_AM_I_ADD, &regDataID);
 80065a0:	f107 030f 	add.w	r3, r7, #15
 80065a4:	461a      	mov	r2, r3
 80065a6:	2175      	movs	r1, #117	; 0x75
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f7ff fe0f 	bl	80061cc <IIM42652_ReadRegister>
 80065ae:	4603      	mov	r3, r0
 80065b0:	77bb      	strb	r3, [r7, #30]
	errNum += ( status != HAL_OK );
 80065b2:	7fbb      	ldrb	r3, [r7, #30]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	bf14      	ite	ne
 80065b8:	2301      	movne	r3, #1
 80065ba:	2300      	moveq	r3, #0
 80065bc:	b2db      	uxtb	r3, r3
 80065be:	461a      	mov	r2, r3
 80065c0:	7ffb      	ldrb	r3, [r7, #31]
 80065c2:	4413      	add	r3, r2
 80065c4:	77fb      	strb	r3, [r7, #31]

	/* If ID not equal to IIM42652_I2C_ID, Init returns with an error code */
	if( regDataID != IIM42652_I2C_ID ) return HAL_ERROR;
 80065c6:	7bfb      	ldrb	r3, [r7, #15]
 80065c8:	2b6f      	cmp	r3, #111	; 0x6f
 80065ca:	d001      	beq.n	80065d0 <IIM42652_Init+0x70>
 80065cc:	2301      	movs	r3, #1
 80065ce:	e04a      	b.n	8006666 <IIM42652_Init+0x106>
	else {

		/* Initialize routine */
		status |= IIM42652_SoftReset  ( dev );
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f7ff fe50 	bl	8006276 <IIM42652_SoftReset>
 80065d6:	4603      	mov	r3, r0
 80065d8:	461a      	mov	r2, r3
 80065da:	7fbb      	ldrb	r3, [r7, #30]
 80065dc:	4313      	orrs	r3, r2
 80065de:	77bb      	strb	r3, [r7, #30]
	    status |= IIM42652_ConfigInterrupt( dev );
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f7ff ff8e 	bl	8006502 <IIM42652_ConfigInterrupt>
 80065e6:	4603      	mov	r3, r0
 80065e8:	461a      	mov	r2, r3
 80065ea:	7fbb      	ldrb	r3, [r7, #30]
 80065ec:	4313      	orrs	r3, r2
 80065ee:	77bb      	strb	r3, [r7, #30]
		status |= IIM42652_EnableGyro ( dev );
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f7ff fe66 	bl	80062c2 <IIM42652_EnableGyro>
 80065f6:	4603      	mov	r3, r0
 80065f8:	461a      	mov	r2, r3
 80065fa:	7fbb      	ldrb	r3, [r7, #30]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	77bb      	strb	r3, [r7, #30]
		status |= IIM42652_EnableAccel( dev );
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f7ff fe84 	bl	800630e <IIM42652_EnableAccel>
 8006606:	4603      	mov	r3, r0
 8006608:	461a      	mov	r2, r3
 800660a:	7fbb      	ldrb	r3, [r7, #30]
 800660c:	4313      	orrs	r3, r2
 800660e:	77bb      	strb	r3, [r7, #30]


		GYR_CFG.gyro_fs_sel      = IIM42652_SET_GYRO_FS_SEL_500_dps;
 8006610:	2302      	movs	r3, #2
 8006612:	743b      	strb	r3, [r7, #16]
		GYR_CFG.gyro_odr         = IIM42652_SET_GYRO_ODR_12_5Hz;
 8006614:	230b      	movs	r3, #11
 8006616:	747b      	strb	r3, [r7, #17]
		GYR_CFG.gyro_ui_filt_ord = IIM42652_SET_GYRO_UI_FILT_ORD_2st;
 8006618:	2301      	movs	r3, #1
 800661a:	74bb      	strb	r3, [r7, #18]
		GYR_CFG.gyro_dec2_m2_ord = IIM42652_SET_GYRO_DEC2_M2_ORD_3st;
 800661c:	2302      	movs	r3, #2
 800661e:	74fb      	strb	r3, [r7, #19]
		GYR_CFG.gyro_ui_filt_bw  = IIM42652_SET_GYRO_UI_FILT_BW_ODR_4;
 8006620:	2301      	movs	r3, #1
 8006622:	753b      	strb	r3, [r7, #20]
	    IIM42652_setConfigGyro( dev, GYR_CFG );
 8006624:	f107 0310 	add.w	r3, r7, #16
 8006628:	e893 0006 	ldmia.w	r3, {r1, r2}
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f7ff fe94 	bl	800635a <IIM42652_setConfigGyro>

	    ACC_CFG.accel_fs_sel      = IIM42652_SET_ACCEL_FS_SEL_8g;
 8006632:	2301      	movs	r3, #1
 8006634:	763b      	strb	r3, [r7, #24]
	    ACC_CFG.accel_odr         = IIM42652_SET_ACCEL_ODR_100Hz;
 8006636:	2308      	movs	r3, #8
 8006638:	767b      	strb	r3, [r7, #25]
	    ACC_CFG.accel_ui_filt_bw  = IIM42652_SET_ACCEL_UI_FILT_BW_ODR_4;
 800663a:	2301      	movs	r3, #1
 800663c:	76bb      	strb	r3, [r7, #26]
	    ACC_CFG.accel_ui_filt_ord = IIM42652_SET_ACCEL_UI_FILT_ORD_2st;
 800663e:	2301      	movs	r3, #1
 8006640:	76fb      	strb	r3, [r7, #27]
	    ACC_CFG.accel_dec2_m2_ord = IIM42652_SET_ACCEL_DEC2_M2_ORD_3st;
 8006642:	2302      	movs	r3, #2
 8006644:	773b      	strb	r3, [r7, #28]
	    IIM42652_setConfigAccel( dev, ACC_CFG );
 8006646:	f107 0318 	add.w	r3, r7, #24
 800664a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f7ff feec 	bl	800642c <IIM42652_setConfigAccel>

	    /* Initializes semaphore */
	    ImuIntSemaphore = xSemaphoreCreateBinary();
 8006654:	2203      	movs	r2, #3
 8006656:	2100      	movs	r1, #0
 8006658:	2001      	movs	r0, #1
 800665a:	f7fd f83f 	bl	80036dc <xQueueGenericCreate>
 800665e:	4603      	mov	r3, r0
 8006660:	4a03      	ldr	r2, [pc, #12]	; (8006670 <IIM42652_Init+0x110>)
 8006662:	6013      	str	r3, [r2, #0]
	}


	return 0;
 8006664:	2300      	movs	r3, #0
}
 8006666:	4618      	mov	r0, r3
 8006668:	3720      	adds	r7, #32
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
 800666e:	bf00      	nop
 8006670:	200019c4 	.word	0x200019c4

08006674 <IIM42652_ReadMeasurementAxisAll>:



HAL_StatusTypeDef IIM42652_ReadMeasurementAxisAll( IIM42652 *dev )
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b08a      	sub	sp, #40	; 0x28
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
	uint8_t rxBuffer[12];
	int16_t xAccRead, yAccRead, zAccRead;
	int16_t xGyrRead, yGyrRead, zGyrRead;

	/* Takes semaphore until DRDY is ready again */
	xSemaphoreTake( ImuIntSemaphore, portMAX_DELAY );
 800667c:	4b21      	ldr	r3, [pc, #132]	; (8006704 <IIM42652_ReadMeasurementAxisAll+0x90>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f04f 31ff 	mov.w	r1, #4294967295
 8006684:	4618      	mov	r0, r3
 8006686:	f7fd fb8d 	bl	8003da4 <xQueueSemaphoreTake>
	DRDY_IIMFlag = 0x00;
 800668a:	4b1f      	ldr	r3, [pc, #124]	; (8006708 <IIM42652_ReadMeasurementAxisAll+0x94>)
 800668c:	2200      	movs	r2, #0
 800668e:	701a      	strb	r2, [r3, #0]

	/* Reads Accelerometer and gyroscope data */
	readStatus = IIM42652_ReadMultipleRegisters( dev, ACCL_DATA_XHI_ADD, rxBuffer, 12 );
 8006690:	f107 020c 	add.w	r2, r7, #12
 8006694:	230c      	movs	r3, #12
 8006696:	211f      	movs	r1, #31
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f7ff fdb2 	bl	8006202 <IIM42652_ReadMultipleRegisters>
 800669e:	4603      	mov	r3, r0
 80066a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	xAccRead = (rxBuffer[0] << 8)  | rxBuffer[1];
 80066a4:	7b3b      	ldrb	r3, [r7, #12]
 80066a6:	021b      	lsls	r3, r3, #8
 80066a8:	b21a      	sxth	r2, r3
 80066aa:	7b7b      	ldrb	r3, [r7, #13]
 80066ac:	b21b      	sxth	r3, r3
 80066ae:	4313      	orrs	r3, r2
 80066b0:	84bb      	strh	r3, [r7, #36]	; 0x24
	yAccRead = (rxBuffer[2] << 8)  | rxBuffer[3];
 80066b2:	7bbb      	ldrb	r3, [r7, #14]
 80066b4:	021b      	lsls	r3, r3, #8
 80066b6:	b21a      	sxth	r2, r3
 80066b8:	7bfb      	ldrb	r3, [r7, #15]
 80066ba:	b21b      	sxth	r3, r3
 80066bc:	4313      	orrs	r3, r2
 80066be:	847b      	strh	r3, [r7, #34]	; 0x22
	zAccRead = (rxBuffer[4] << 8)  | rxBuffer[5];
 80066c0:	7c3b      	ldrb	r3, [r7, #16]
 80066c2:	021b      	lsls	r3, r3, #8
 80066c4:	b21a      	sxth	r2, r3
 80066c6:	7c7b      	ldrb	r3, [r7, #17]
 80066c8:	b21b      	sxth	r3, r3
 80066ca:	4313      	orrs	r3, r2
 80066cc:	843b      	strh	r3, [r7, #32]

	xGyrRead = (rxBuffer[6] << 8)  | rxBuffer[7];
 80066ce:	7cbb      	ldrb	r3, [r7, #18]
 80066d0:	021b      	lsls	r3, r3, #8
 80066d2:	b21a      	sxth	r2, r3
 80066d4:	7cfb      	ldrb	r3, [r7, #19]
 80066d6:	b21b      	sxth	r3, r3
 80066d8:	4313      	orrs	r3, r2
 80066da:	83fb      	strh	r3, [r7, #30]
	yGyrRead = (rxBuffer[8] << 8)  | rxBuffer[9];
 80066dc:	7d3b      	ldrb	r3, [r7, #20]
 80066de:	021b      	lsls	r3, r3, #8
 80066e0:	b21a      	sxth	r2, r3
 80066e2:	7d7b      	ldrb	r3, [r7, #21]
 80066e4:	b21b      	sxth	r3, r3
 80066e6:	4313      	orrs	r3, r2
 80066e8:	83bb      	strh	r3, [r7, #28]
	zGyrRead = (rxBuffer[10] << 8) | rxBuffer[11];
 80066ea:	7dbb      	ldrb	r3, [r7, #22]
 80066ec:	021b      	lsls	r3, r3, #8
 80066ee:	b21a      	sxth	r2, r3
 80066f0:	7dfb      	ldrb	r3, [r7, #23]
 80066f2:	b21b      	sxth	r3, r3
 80066f4:	4313      	orrs	r3, r2
 80066f6:	837b      	strh	r3, [r7, #26]

	return readStatus;
 80066f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3728      	adds	r7, #40	; 0x28
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}
 8006704:	200019c4 	.word	0x200019c4
 8006708:	20001904 	.word	0x20001904

0800670c <IIM42652_DRDYCallback>:


/* Callback for device interrupt */
void IIM42652_DRDYCallback( void )
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b082      	sub	sp, #8
 8006710:	af00      	add	r7, sp, #0
	/* Gives semaphore and yields */

	//if(DRDY_IIMFlag == 0x00)
	{
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8006712:	2300      	movs	r3, #0
 8006714:	607b      	str	r3, [r7, #4]
		xSemaphoreGiveFromISR( ImuIntSemaphore, &xHigherPriorityTaskWoken );
 8006716:	4b0c      	ldr	r3, [pc, #48]	; (8006748 <IIM42652_DRDYCallback+0x3c>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	1d3a      	adds	r2, r7, #4
 800671c:	4611      	mov	r1, r2
 800671e:	4618      	mov	r0, r3
 8006720:	f7fd f9d3 	bl	8003aca <xQueueGiveFromISR>
		portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d007      	beq.n	800673a <IIM42652_DRDYCallback+0x2e>
 800672a:	4b08      	ldr	r3, [pc, #32]	; (800674c <IIM42652_DRDYCallback+0x40>)
 800672c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006730:	601a      	str	r2, [r3, #0]
 8006732:	f3bf 8f4f 	dsb	sy
 8006736:	f3bf 8f6f 	isb	sy

		DRDY_IIMFlag = 0x01;
 800673a:	4b05      	ldr	r3, [pc, #20]	; (8006750 <IIM42652_DRDYCallback+0x44>)
 800673c:	2201      	movs	r2, #1
 800673e:	701a      	strb	r2, [r3, #0]
	}
}
 8006740:	bf00      	nop
 8006742:	3708      	adds	r7, #8
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}
 8006748:	200019c4 	.word	0x200019c4
 800674c:	e000ed04 	.word	0xe000ed04
 8006750:	20001904 	.word	0x20001904

08006754 <sendI2C>:

/* Internal function declaration */

/* Function that communicates with MLX90393, first sending the command and waiting for the response */
HAL_StatusTypeDef sendI2C( I2C_HandleTypeDef *hi2c, uint8_t *receiveBuffer, uint8_t *sendBuffer, uint8_t sendMessageLength, uint8_t receiveMessageLength )
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b088      	sub	sp, #32
 8006758:	af02      	add	r7, sp, #8
 800675a:	60f8      	str	r0, [r7, #12]
 800675c:	60b9      	str	r1, [r7, #8]
 800675e:	607a      	str	r2, [r7, #4]
 8006760:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef i2c_status = HAL_OK;
 8006762:	2300      	movs	r3, #0
 8006764:	75fb      	strb	r3, [r7, #23]

	i2c_status |= HAL_I2C_Master_Transmit( hi2c, MLX90393_I2C_ADDRESS, sendBuffer, sendMessageLength, HAL_MAX_DELAY );
 8006766:	78fb      	ldrb	r3, [r7, #3]
 8006768:	b29b      	uxth	r3, r3
 800676a:	f04f 32ff 	mov.w	r2, #4294967295
 800676e:	9200      	str	r2, [sp, #0]
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	211c      	movs	r1, #28
 8006774:	68f8      	ldr	r0, [r7, #12]
 8006776:	f7fa fc07 	bl	8000f88 <HAL_I2C_Master_Transmit>
 800677a:	4603      	mov	r3, r0
 800677c:	461a      	mov	r2, r3
 800677e:	7dfb      	ldrb	r3, [r7, #23]
 8006780:	4313      	orrs	r3, r2
 8006782:	75fb      	strb	r3, [r7, #23]
	i2c_status |= HAL_I2C_Master_Receive ( hi2c, MLX90393_I2C_ADDRESS, receiveBuffer, receiveMessageLength, HAL_MAX_DELAY );
 8006784:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006788:	b29b      	uxth	r3, r3
 800678a:	f04f 32ff 	mov.w	r2, #4294967295
 800678e:	9200      	str	r2, [sp, #0]
 8006790:	68ba      	ldr	r2, [r7, #8]
 8006792:	211c      	movs	r1, #28
 8006794:	68f8      	ldr	r0, [r7, #12]
 8006796:	f7fa fceb 	bl	8001170 <HAL_I2C_Master_Receive>
 800679a:	4603      	mov	r3, r0
 800679c:	461a      	mov	r2, r3
 800679e:	7dfb      	ldrb	r3, [r7, #23]
 80067a0:	4313      	orrs	r3, r2
 80067a2:	75fb      	strb	r3, [r7, #23]

    return i2c_status;
 80067a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3718      	adds	r7, #24
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}

080067ae <MLX90393_RM>:
 *
 * readData needs to be a pointer to an array of size RM_DATA_LENGHT
 *
 */
uint8_t MLX90393_RM	( MLX90393 *dev, uint8_t zyxt, uint8_t* readData )
{
 80067ae:	b580      	push	{r7, lr}
 80067b0:	b088      	sub	sp, #32
 80067b2:	af02      	add	r7, sp, #8
 80067b4:	60f8      	str	r0, [r7, #12]
 80067b6:	460b      	mov	r3, r1
 80067b8:	607a      	str	r2, [r7, #4]
 80067ba:	72fb      	strb	r3, [r7, #11]
	uint8_t status;
	HAL_StatusTypeDef i2c_status = HAL_OK;
 80067bc:	2300      	movs	r3, #0
 80067be:	75fb      	strb	r3, [r7, #23]

	/* Construct the SB command with axis from function parameters */
	uint8_t command = MLX90393_REG_RM | ( zyxt & 0x0F );
 80067c0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80067c4:	f003 030f 	and.w	r3, r3, #15
 80067c8:	b25b      	sxtb	r3, r3
 80067ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067ce:	b25b      	sxtb	r3, r3
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	757b      	strb	r3, [r7, #21]

	i2c_status = sendI2C( dev->i2cHandle, readData, &command, 1, RM_DATA_LENGHT );
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	6818      	ldr	r0, [r3, #0]
 80067d8:	f107 0215 	add.w	r2, r7, #21
 80067dc:	2309      	movs	r3, #9
 80067de:	9300      	str	r3, [sp, #0]
 80067e0:	2301      	movs	r3, #1
 80067e2:	6879      	ldr	r1, [r7, #4]
 80067e4:	f7ff ffb6 	bl	8006754 <sendI2C>
 80067e8:	4603      	mov	r3, r0
 80067ea:	75fb      	strb	r3, [r7, #23]

	/* First byte in data buffer is status */
	status = readData[0];
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	75bb      	strb	r3, [r7, #22]

	/* Checks the HAL status of i2c transaction */
	if(i2c_status != HAL_OK) return MLX90393_STATUS_ERROR;
 80067f2:	7dfb      	ldrb	r3, [r7, #23]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d001      	beq.n	80067fc <MLX90393_RM+0x4e>
 80067f8:	23ff      	movs	r3, #255	; 0xff
 80067fa:	e000      	b.n	80067fe <MLX90393_RM+0x50>
	else{
		return status;
 80067fc:	7dbb      	ldrb	r3, [r7, #22]
	}
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3718      	adds	r7, #24
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}

08006806 <MLX90393_WR>:
}


/* Write Register command, writes a word size register directly into volatile RAM */
uint8_t MLX90393_WR	( MLX90393 *dev, uint16_t *data, uint8_t regAddress )
{
 8006806:	b580      	push	{r7, lr}
 8006808:	b088      	sub	sp, #32
 800680a:	af02      	add	r7, sp, #8
 800680c:	60f8      	str	r0, [r7, #12]
 800680e:	60b9      	str	r1, [r7, #8]
 8006810:	4613      	mov	r3, r2
 8006812:	71fb      	strb	r3, [r7, #7]
	uint8_t status;
	uint8_t sendBuffer[4];
	HAL_StatusTypeDef i2c_status = HAL_OK;
 8006814:	2300      	movs	r3, #0
 8006816:	75fb      	strb	r3, [r7, #23]

	/* Constructs send buffer with Command + dataHI + dataLO + address */
	sendBuffer[0] = MLX90393_REG_WR;
 8006818:	2360      	movs	r3, #96	; 0x60
 800681a:	743b      	strb	r3, [r7, #16]
	sendBuffer[1] = (*data >> 8);
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	881b      	ldrh	r3, [r3, #0]
 8006820:	0a1b      	lsrs	r3, r3, #8
 8006822:	b29b      	uxth	r3, r3
 8006824:	b2db      	uxtb	r3, r3
 8006826:	747b      	strb	r3, [r7, #17]
	sendBuffer[2] = (*data & 0xFF);
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	881b      	ldrh	r3, [r3, #0]
 800682c:	b2db      	uxtb	r3, r3
 800682e:	74bb      	strb	r3, [r7, #18]
	sendBuffer[3] = regAddress;
 8006830:	79fb      	ldrb	r3, [r7, #7]
 8006832:	74fb      	strb	r3, [r7, #19]

	i2c_status = sendI2C( dev->i2cHandle, &status, sendBuffer, WR_DATA_LENGHT, 1 );
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6818      	ldr	r0, [r3, #0]
 8006838:	f107 0210 	add.w	r2, r7, #16
 800683c:	f107 0116 	add.w	r1, r7, #22
 8006840:	2301      	movs	r3, #1
 8006842:	9300      	str	r3, [sp, #0]
 8006844:	2304      	movs	r3, #4
 8006846:	f7ff ff85 	bl	8006754 <sendI2C>
 800684a:	4603      	mov	r3, r0
 800684c:	75fb      	strb	r3, [r7, #23]

	/* Checks the HAL status of i2c transaction */
	if(i2c_status != HAL_OK) return MLX90393_STATUS_ERROR;
 800684e:	7dfb      	ldrb	r3, [r7, #23]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d001      	beq.n	8006858 <MLX90393_WR+0x52>
 8006854:	23ff      	movs	r3, #255	; 0xff
 8006856:	e000      	b.n	800685a <MLX90393_WR+0x54>
	else{
		return status;
 8006858:	7dbb      	ldrb	r3, [r7, #22]
	}
}
 800685a:	4618      	mov	r0, r3
 800685c:	3718      	adds	r7, #24
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}

08006862 <MLX90393_RT>:


/* Reset command, is used to reset the device, if device is runnning it will reset to idle mode */
uint8_t MLX90393_RT	( MLX90393 *dev )
{
 8006862:	b580      	push	{r7, lr}
 8006864:	b086      	sub	sp, #24
 8006866:	af02      	add	r7, sp, #8
 8006868:	6078      	str	r0, [r7, #4]
	uint8_t status;
	HAL_StatusTypeDef i2c_status = HAL_OK;
 800686a:	2300      	movs	r3, #0
 800686c:	73fb      	strb	r3, [r7, #15]

	i2c_status = sendI2C( dev->i2cHandle, &status, (uint8_t*)MLX90393_REG_RT, 1, 1 );
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6818      	ldr	r0, [r3, #0]
 8006872:	f107 010e 	add.w	r1, r7, #14
 8006876:	2301      	movs	r3, #1
 8006878:	9300      	str	r3, [sp, #0]
 800687a:	2301      	movs	r3, #1
 800687c:	22f0      	movs	r2, #240	; 0xf0
 800687e:	f7ff ff69 	bl	8006754 <sendI2C>
 8006882:	4603      	mov	r3, r0
 8006884:	73fb      	strb	r3, [r7, #15]

	/* Checks the HAL status of i2c transaction */
	if(i2c_status != HAL_OK) return MLX90393_STATUS_ERROR;
 8006886:	7bfb      	ldrb	r3, [r7, #15]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d001      	beq.n	8006890 <MLX90393_RT+0x2e>
 800688c:	23ff      	movs	r3, #255	; 0xff
 800688e:	e000      	b.n	8006892 <MLX90393_RT+0x30>
	else{
		return status;
 8006890:	7bbb      	ldrb	r3, [r7, #14]
	}
}
 8006892:	4618      	mov	r0, r3
 8006894:	3710      	adds	r7, #16
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
	...

0800689c <MLX90393_Init>:
}


/* Initialization of sensor */
uint8_t MLX90393_Init ( MLX90393 *dev, I2C_HandleTypeDef *i2cHandle )
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b086      	sub	sp, #24
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	6039      	str	r1, [r7, #0]
	/* Initialize structure parameters */
	dev->i2cHandle = i2cHandle;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	683a      	ldr	r2, [r7, #0]
 80068aa:	601a      	str	r2, [r3, #0]

	dev->mag[0] = 0.0f;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f04f 0200 	mov.w	r2, #0
 80068b2:	605a      	str	r2, [r3, #4]
	dev->mag[1] = 0.0f;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f04f 0200 	mov.w	r2, #0
 80068ba:	609a      	str	r2, [r3, #8]
	dev->mag[2] = 0.0f;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f04f 0200 	mov.w	r2, #0
 80068c2:	60da      	str	r2, [r3, #12]

	dev->temp_c = 0.0f;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f04f 0200 	mov.w	r2, #0
 80068ca:	611a      	str	r2, [r3, #16]

	/* Performs a NOP command to get the status of the device, returns HAL status */
	uint8_t status = 0;
 80068cc:	2300      	movs	r3, #0
 80068ce:	75fb      	strb	r3, [r7, #23]
	status = MLX90393_RT( dev );
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f7ff ffc6 	bl	8006862 <MLX90393_RT>
 80068d6:	4603      	mov	r3, r0
 80068d8:	75fb      	strb	r3, [r7, #23]

	vTaskDelay( 5 / portTICK_PERIOD_MS );
 80068da:	2005      	movs	r0, #5
 80068dc:	f7fd fe96 	bl	800460c <vTaskDelay>

	if( status == MLX90393_STATUS_ERROR ) return HAL_ERROR;
 80068e0:	7dfb      	ldrb	r3, [r7, #23]
 80068e2:	2bff      	cmp	r3, #255	; 0xff
 80068e4:	d101      	bne.n	80068ea <MLX90393_Init+0x4e>
 80068e6:	2301      	movs	r3, #1
 80068e8:	e053      	b.n	8006992 <MLX90393_Init+0xf6>
		/* Configure registers,  */
		MLX90393_CONF_1 configWord1;
		MLX90393_CONF_2 configWord2;
		MLX90393_CONF_3 configWord3;

		configWord1.data = 0x0000;
 80068ea:	2300      	movs	r3, #0
 80068ec:	823b      	strh	r3, [r7, #16]
		configWord2.data = 0x0000;
 80068ee:	2300      	movs	r3, #0
 80068f0:	81bb      	strh	r3, [r7, #12]
		configWord3.data = 0x0000;
 80068f2:	2300      	movs	r3, #0
 80068f4:	813b      	strh	r3, [r7, #8]

		configWord1.GAINSEL = 0x03;		/* Gain Select 3 */
 80068f6:	7c3b      	ldrb	r3, [r7, #16]
 80068f8:	2203      	movs	r2, #3
 80068fa:	f362 1306 	bfi	r3, r2, #4, #3
 80068fe:	743b      	strb	r3, [r7, #16]

		configWord2.TRIGINT = 0x01;		/* Select pin as interrupt */
 8006900:	7b7b      	ldrb	r3, [r7, #13]
 8006902:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006906:	737b      	strb	r3, [r7, #13]

		configWord3.RESX 	= 0x03; 	/* X resolution 19 */
 8006908:	7a3b      	ldrb	r3, [r7, #8]
 800690a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800690e:	723b      	strb	r3, [r7, #8]
		configWord3.RESY 	= 0x03; 	/* Y resolution 19 */
 8006910:	893b      	ldrh	r3, [r7, #8]
 8006912:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006916:	813b      	strh	r3, [r7, #8]
		configWord3.RESZ 	= 0x00; 	/* Z resolution 16 */
 8006918:	7a7b      	ldrb	r3, [r7, #9]
 800691a:	f36f 0342 	bfc	r3, #1, #2
 800691e:	727b      	strb	r3, [r7, #9]
		configWord3.OSR 	= 0x03; 	/* OSR to 3 */
 8006920:	7a3b      	ldrb	r3, [r7, #8]
 8006922:	f043 0303 	orr.w	r3, r3, #3
 8006926:	723b      	strb	r3, [r7, #8]
		configWord3.OSR2	= 0x01;		/* OSR2 to 1 */
 8006928:	7a7b      	ldrb	r3, [r7, #9]
 800692a:	2201      	movs	r2, #1
 800692c:	f362 03c4 	bfi	r3, r2, #3, #2
 8006930:	727b      	strb	r3, [r7, #9]
		configWord3.DIGFIL 	= 0x06; 	/* Digital filter to 7 */
 8006932:	7a3b      	ldrb	r3, [r7, #8]
 8006934:	2206      	movs	r2, #6
 8006936:	f362 0384 	bfi	r3, r2, #2, #3
 800693a:	723b      	strb	r3, [r7, #8]


		/* Write registers and returns status */
		uint8_t status1 = MLX90393_WR ( dev, &configWord1.data, MLX90393_CONF1 );
 800693c:	f107 0310 	add.w	r3, r7, #16
 8006940:	2200      	movs	r2, #0
 8006942:	4619      	mov	r1, r3
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f7ff ff5e 	bl	8006806 <MLX90393_WR>
 800694a:	4603      	mov	r3, r0
 800694c:	75bb      	strb	r3, [r7, #22]
		uint8_t status2 = MLX90393_WR ( dev, &configWord2.data, MLX90393_CONF2 );
 800694e:	f107 030c 	add.w	r3, r7, #12
 8006952:	2201      	movs	r2, #1
 8006954:	4619      	mov	r1, r3
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f7ff ff55 	bl	8006806 <MLX90393_WR>
 800695c:	4603      	mov	r3, r0
 800695e:	757b      	strb	r3, [r7, #21]
		uint8_t status3 = MLX90393_WR ( dev, &configWord3.data, MLX90393_CONF3 );
 8006960:	f107 0308 	add.w	r3, r7, #8
 8006964:	2202      	movs	r2, #2
 8006966:	4619      	mov	r1, r3
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f7ff ff4c 	bl	8006806 <MLX90393_WR>
 800696e:	4603      	mov	r3, r0
 8006970:	753b      	strb	r3, [r7, #20]

		/* Initializes Semaphore*/
		MagIntSemaphore = xSemaphoreCreateBinary();
 8006972:	2203      	movs	r2, #3
 8006974:	2100      	movs	r1, #0
 8006976:	2001      	movs	r0, #1
 8006978:	f7fc feb0 	bl	80036dc <xQueueGenericCreate>
 800697c:	4603      	mov	r3, r0
 800697e:	4a07      	ldr	r2, [pc, #28]	; (800699c <MLX90393_Init+0x100>)
 8006980:	6013      	str	r3, [r2, #0]

		/* Starts burst mode */
		//MLX90393_SB( dev, MLX90393_AXIS_ALL );

		status = status1 | status2 | status3;
 8006982:	7dba      	ldrb	r2, [r7, #22]
 8006984:	7d7b      	ldrb	r3, [r7, #21]
 8006986:	4313      	orrs	r3, r2
 8006988:	b2da      	uxtb	r2, r3
 800698a:	7d3b      	ldrb	r3, [r7, #20]
 800698c:	4313      	orrs	r3, r2
 800698e:	75fb      	strb	r3, [r7, #23]

		return status;
 8006990:	7dfb      	ldrb	r3, [r7, #23]
	}

}
 8006992:	4618      	mov	r0, r3
 8006994:	3718      	adds	r7, #24
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop
 800699c:	200019c8 	.word	0x200019c8

080069a0 <MLX90393_ReadMeasurementAxisAll>:
 * This function reads the magnetic field in the x, y and z axis.
 * The data is output in the following order: T (MSB), T (LSB), X (MSB), X (LSB), Y (MSB), Y (LSB), Z (MSB), Z (LSB)
 *
 */
uint8_t MLX90393_ReadMeasurementAxisAll( MLX90393 *dev, int16_t *XmagRead, int16_t *YmagRead, int16_t *ZmagRead )
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b088      	sub	sp, #32
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	60f8      	str	r0, [r7, #12]
 80069a8:	60b9      	str	r1, [r7, #8]
 80069aa:	607a      	str	r2, [r7, #4]
 80069ac:	603b      	str	r3, [r7, #0]
	uint8_t readStatus;
	uint8_t dataBuffer[RM_DATA_LENGHT] = { 0x00 };
 80069ae:	2300      	movs	r3, #0
 80069b0:	617b      	str	r3, [r7, #20]
 80069b2:	f107 0318 	add.w	r3, r7, #24
 80069b6:	2200      	movs	r2, #0
 80069b8:	601a      	str	r2, [r3, #0]
 80069ba:	711a      	strb	r2, [r3, #4]

	/* Clears the DRDY flag and takes semaphore*/
	DRDYFlag = 0x00;
 80069bc:	4b19      	ldr	r3, [pc, #100]	; (8006a24 <MLX90393_ReadMeasurementAxisAll+0x84>)
 80069be:	2200      	movs	r2, #0
 80069c0:	701a      	strb	r2, [r3, #0]
	xSemaphoreTake( MagIntSemaphore, portMAX_DELAY );
 80069c2:	4b19      	ldr	r3, [pc, #100]	; (8006a28 <MLX90393_ReadMeasurementAxisAll+0x88>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f04f 31ff 	mov.w	r1, #4294967295
 80069ca:	4618      	mov	r0, r3
 80069cc:	f7fd f9ea 	bl	8003da4 <xQueueSemaphoreTake>

	/* Reads data from MLX90393 device in all axis */
	readStatus = MLX90393_RM( dev, MLX90393_AXIS_ALL, dataBuffer );
 80069d0:	f107 0314 	add.w	r3, r7, #20
 80069d4:	461a      	mov	r2, r3
 80069d6:	210e      	movs	r1, #14
 80069d8:	68f8      	ldr	r0, [r7, #12]
 80069da:	f7ff fee8 	bl	80067ae <MLX90393_RM>
 80069de:	4603      	mov	r3, r0
 80069e0:	77fb      	strb	r3, [r7, #31]

	*XmagRead = ( dataBuffer[2] << 8 ) | dataBuffer[1];
 80069e2:	7dbb      	ldrb	r3, [r7, #22]
 80069e4:	021b      	lsls	r3, r3, #8
 80069e6:	b21a      	sxth	r2, r3
 80069e8:	7d7b      	ldrb	r3, [r7, #21]
 80069ea:	b21b      	sxth	r3, r3
 80069ec:	4313      	orrs	r3, r2
 80069ee:	b21a      	sxth	r2, r3
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	801a      	strh	r2, [r3, #0]
	*YmagRead = ( dataBuffer[4] << 8 ) | dataBuffer[3];
 80069f4:	7e3b      	ldrb	r3, [r7, #24]
 80069f6:	021b      	lsls	r3, r3, #8
 80069f8:	b21a      	sxth	r2, r3
 80069fa:	7dfb      	ldrb	r3, [r7, #23]
 80069fc:	b21b      	sxth	r3, r3
 80069fe:	4313      	orrs	r3, r2
 8006a00:	b21a      	sxth	r2, r3
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	801a      	strh	r2, [r3, #0]
	*ZmagRead = ( dataBuffer[6] << 8 ) | dataBuffer[5];
 8006a06:	7ebb      	ldrb	r3, [r7, #26]
 8006a08:	021b      	lsls	r3, r3, #8
 8006a0a:	b21a      	sxth	r2, r3
 8006a0c:	7e7b      	ldrb	r3, [r7, #25]
 8006a0e:	b21b      	sxth	r3, r3
 8006a10:	4313      	orrs	r3, r2
 8006a12:	b21a      	sxth	r2, r3
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	801a      	strh	r2, [r3, #0]


	return readStatus;
 8006a18:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3720      	adds	r7, #32
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
 8006a22:	bf00      	nop
 8006a24:	20001905 	.word	0x20001905
 8006a28:	200019c8 	.word	0x200019c8

08006a2c <MLX90393_DRDYCallback>:


/* Callback to DRDY interrupt */
void MLX90393_DRDYCallback( void )
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b082      	sub	sp, #8
 8006a30:	af00      	add	r7, sp, #0
	/* Gives semaphore and yields */

	if(DRDYFlag == 0x00)
 8006a32:	4b0f      	ldr	r3, [pc, #60]	; (8006a70 <MLX90393_DRDYCallback+0x44>)
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d116      	bne.n	8006a68 <MLX90393_DRDYCallback+0x3c>
	{
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	607b      	str	r3, [r7, #4]
		xSemaphoreGiveFromISR( MagIntSemaphore, &xHigherPriorityTaskWoken );
 8006a3e:	4b0d      	ldr	r3, [pc, #52]	; (8006a74 <MLX90393_DRDYCallback+0x48>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	1d3a      	adds	r2, r7, #4
 8006a44:	4611      	mov	r1, r2
 8006a46:	4618      	mov	r0, r3
 8006a48:	f7fd f83f 	bl	8003aca <xQueueGiveFromISR>
		portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d007      	beq.n	8006a62 <MLX90393_DRDYCallback+0x36>
 8006a52:	4b09      	ldr	r3, [pc, #36]	; (8006a78 <MLX90393_DRDYCallback+0x4c>)
 8006a54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a58:	601a      	str	r2, [r3, #0]
 8006a5a:	f3bf 8f4f 	dsb	sy
 8006a5e:	f3bf 8f6f 	isb	sy

		DRDYFlag = 0x01;
 8006a62:	4b03      	ldr	r3, [pc, #12]	; (8006a70 <MLX90393_DRDYCallback+0x44>)
 8006a64:	2201      	movs	r2, #1
 8006a66:	701a      	strb	r2, [r3, #0]
	}
}
 8006a68:	bf00      	nop
 8006a6a:	3708      	adds	r7, #8
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}
 8006a70:	20001905 	.word	0x20001905
 8006a74:	200019c8 	.word	0x200019c8
 8006a78:	e000ed04 	.word	0xe000ed04

08006a7c <__libc_init_array>:
 8006a7c:	b570      	push	{r4, r5, r6, lr}
 8006a7e:	4d0d      	ldr	r5, [pc, #52]	; (8006ab4 <__libc_init_array+0x38>)
 8006a80:	4c0d      	ldr	r4, [pc, #52]	; (8006ab8 <__libc_init_array+0x3c>)
 8006a82:	1b64      	subs	r4, r4, r5
 8006a84:	10a4      	asrs	r4, r4, #2
 8006a86:	2600      	movs	r6, #0
 8006a88:	42a6      	cmp	r6, r4
 8006a8a:	d109      	bne.n	8006aa0 <__libc_init_array+0x24>
 8006a8c:	4d0b      	ldr	r5, [pc, #44]	; (8006abc <__libc_init_array+0x40>)
 8006a8e:	4c0c      	ldr	r4, [pc, #48]	; (8006ac0 <__libc_init_array+0x44>)
 8006a90:	f000 f82e 	bl	8006af0 <_init>
 8006a94:	1b64      	subs	r4, r4, r5
 8006a96:	10a4      	asrs	r4, r4, #2
 8006a98:	2600      	movs	r6, #0
 8006a9a:	42a6      	cmp	r6, r4
 8006a9c:	d105      	bne.n	8006aaa <__libc_init_array+0x2e>
 8006a9e:	bd70      	pop	{r4, r5, r6, pc}
 8006aa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006aa4:	4798      	blx	r3
 8006aa6:	3601      	adds	r6, #1
 8006aa8:	e7ee      	b.n	8006a88 <__libc_init_array+0xc>
 8006aaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8006aae:	4798      	blx	r3
 8006ab0:	3601      	adds	r6, #1
 8006ab2:	e7f2      	b.n	8006a9a <__libc_init_array+0x1e>
 8006ab4:	08006ba0 	.word	0x08006ba0
 8006ab8:	08006ba0 	.word	0x08006ba0
 8006abc:	08006ba0 	.word	0x08006ba0
 8006ac0:	08006ba4 	.word	0x08006ba4

08006ac4 <memcpy>:
 8006ac4:	440a      	add	r2, r1
 8006ac6:	4291      	cmp	r1, r2
 8006ac8:	f100 33ff 	add.w	r3, r0, #4294967295
 8006acc:	d100      	bne.n	8006ad0 <memcpy+0xc>
 8006ace:	4770      	bx	lr
 8006ad0:	b510      	push	{r4, lr}
 8006ad2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ad6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ada:	4291      	cmp	r1, r2
 8006adc:	d1f9      	bne.n	8006ad2 <memcpy+0xe>
 8006ade:	bd10      	pop	{r4, pc}

08006ae0 <memset>:
 8006ae0:	4402      	add	r2, r0
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d100      	bne.n	8006aea <memset+0xa>
 8006ae8:	4770      	bx	lr
 8006aea:	f803 1b01 	strb.w	r1, [r3], #1
 8006aee:	e7f9      	b.n	8006ae4 <memset+0x4>

08006af0 <_init>:
 8006af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006af2:	bf00      	nop
 8006af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006af6:	bc08      	pop	{r3}
 8006af8:	469e      	mov	lr, r3
 8006afa:	4770      	bx	lr

08006afc <_fini>:
 8006afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006afe:	bf00      	nop
 8006b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b02:	bc08      	pop	{r3}
 8006b04:	469e      	mov	lr, r3
 8006b06:	4770      	bx	lr
